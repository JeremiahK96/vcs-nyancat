------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10000 ????						;
      3  10000 ????						; Project - Nyan Cat Game
      4  10000 ????						; by Jeremiah Knol
      5  10000 ????						;
      6  10000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  10000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  10000 ????						;
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????						; 12-12-2017 Version 2.3
     12  10000 ????						;
     13  10000 ????						; Fill every row with moving food items
     14  10000 ????						;
     15  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  10000 ????
     17  10000 ????
     18  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  10000 ????						; Initialization
     20  10000 ????						;
     21  10000 ????						; Include headers and set address of binary
     22  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  10000 ????
     24  10000 ????						; Define CPU type and include standard VCS header files
     25  10000 ????				       PROCESSOR	6502
     26  10000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	headers/vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????
     51  0000 ????
     52  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  0000 ????						; Program Equates
     54  0000 ????						;
     55  0000 ????						; Equates for constant program values.
     56  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57  0000 ????
     58  0000 ????						; number of scanlines in vertical blank and overscan
     59  0000 ????
     60  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     61  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     62  0000 ????
     63  0000 ????						; converted values to store to TIM64T
     64  0000 ????
     65  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     66  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     67  0000 ????
     68  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  0000 ????						; colors
     70  0000 ????
     71  0000 ????	       00 02	   COL_SCORE  equ	$02
     72  0000 ????	       00 0e	   COL_SCOREBOARD equ	$0E
     73  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     74  0000 ????	       00 00	   COL_LINES  equ	COL_BACKGROUND
     75  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     76  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     77  0000 ????
     78  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     80  0000 ????
     81  0000 ????	       00 00	   LUM_0      equ	$00
     82  0000 ????	       00 02	   LUM_2      equ	$02
     83  0000 ????	       00 04	   LUM_4      equ	$04
     84  0000 ????	       00 06	   LUM_6      equ	$06
     85  0000 ????	       00 08	   LUM_8      equ	$08
     86  0000 ????	       00 0a	   LUM_A      equ	$0A
     87  0000 ????	       00 0c	   LUM_C      equ	$0C
     88  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U0100 ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for the level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw the progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of the 5 values to be written to the playfield
     39 U008e							; registers when drawing the progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for the full part of the progress bar
     42 U008f
     43 U008f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44 U008f							; Variables for the health display
     45 U008f
     46 U008f		       00	   Health     ds	1	; amount of health
     47 U0090							; 0=full 8=medium 16=low 24=empty
     48 U0090
     49 U0090		       00 00	   HthGfxLPtr ds	2	; pointer for the left half of the health graphics
     50 U0092		       00 00	   HthGfxRPtr ds	2	; pointer for the right half of the health graphics
     51 U0094
     52 U0094							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0094							; Variables used when drawing the cat
     54 U0094
     55 U0094		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     56 U0095
     57 U0095		       00	   RainbowStack ds	1	; value to set the stack pointer to when
     58 U0096							; loading the rainbow colors into RAM
     59 U0096
     60 U0096		       00 00	   TartGfxPtr ds	2	; pointer for the tart graphics
     61 U0098		       00 00	   CatGfxPtr  ds	2	; pointer for the cat face/paws graphics
     62 U009a
     63 U009a		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     64 U009b		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     65 U009c
     66 U009c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67 U009c							; Variables used for the food items
     68 U009c
     69 U009c		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
     70 U00a3		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
     71 U00aa							; the left items, last 7 bytes are for the right items.
     72 U00aa							; Hi nybble holds the value (0-15) of the item to draw.
     73 U00aa							; Lo nybble holds the value of next frame's item.
     74 U00aa							; All nybbles are swapped at the start of each frame.
     75 U00aa
     76 U00aa		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
     77 U00b1
     78 U00b1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U00b1							; Variables for the throbbing lines' colors
     80 U00b1
     81 U00b1		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     82 U00b4							; throbbing lines. The first color is darkest,
     83 U00b4							; the last is brightest.
     84 U00b4
     85 U00b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86 U00b4							; Temporary variables which cannot be shared with stack space
     87 U00b4
     88 U00b4		       00	   TempLoop   ds	1
     89 U00b5
     90 U00b5							; 53 of 79 non-temporary RAM bytes used (22 left)
     91 U00b5							; last 49 bytes of RAM are used for stack space in the scoreboard display
     92 U00b5
     93 U00b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     94 U00b5							; Temporary variables which can be shared with stack space
     95 U00b5
     96 U00b5		       00	   Temp       ds	1
     97 U00b6
     98 U00b6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99 U00b6							; Other variables which can be shared with stack space
    100 U00b6
    101 U00b6		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    102 U00b7
    103 U00b7		       00 00	   FoodGfxPtr1 ds	2	; pointer for the 1st food item's graphics
    104 U00b9		       00	   FoodColor1 ds	1	; color of the 1st food item
    105 U00ba
    106 U00ba		       00 00	   FoodGfxPtr2 ds	2	; pointer for the 2nd food item's graphics
    107 U00bc		       00	   FoodColor2 ds	1	; color of the 2nd food item
    108 U00bd
    109 U00bd							; 7 of 15 available temporary RAM bytes used (8 left)
    110 U00bd							; last 34 bytes of RAM are used to hold the rainbow color graphics
    111 U00bd
    112 U00de					      ORG	$100 - 34
    113 U00de
    114 U00de		       00 00 00 00*RamBowColors ds	34
------- FILE main.asm
     34 U0100
     35 U0100							; Ensure that the code is placed in the proper place in the binary
     36 U0100
     37  10000 ????				       SEG	CODE
     38  f000					      ORG	$F000	; 4K ROM
     39  f000
     40  f000
     41  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  f000							; Full System Clear
     43  f000							;
     44  f000							; Clear all system registers and RAM at startup
     45  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  f000
     47  f000				   SystemClear
     48  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b
     52  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  f00b							; Game Logic
     54  f00b							;
     55  f00b							; Do the overscan, vertycal sync, and vertical blanking,
     56  f00b							; along with any game logic
     57  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  f00b
------- FILE code/GameLogic.asm LEVEL 2 PASS 2
      0  f00b					      include	code/GameLogic.asm
      1  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f00b							; Overscan
      3  f00b							;
      4  f00b							; Start the overscan timer and do game logic
      5  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f00b
      7  f00b				   Overscan
      8  f00b
      9  f00b		       a9 23		      lda	#OVERSCAN_TIMER
     10  f00d		       85 02		      sta	WSYNC
     11  f00f		       8d 96 02 	      sta	TIM64T	; 3
     12  f012
     13  f012
     14  f012
     15  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f012							; Update Score
     17  f012							;
     18  f012							; Add to the score
     19  f012							;
     20  f012							; Takes 45 cycles to complete
     21  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f012
     23  f012		       a5 85		      lda	BCDScoreAdd+1	; 3
     24  f014		       a6 84		      ldx	BCDScoreAdd	; 3
     25  f016
     26  f016		       f8		      sed		; 2 - enable BCD mode
     27  f017
     28  f017		       18		      clc		; 2
     29  f018		       85 b5		      sta	Temp	; 3
     30  f01a		       a5 83		      lda	BCDScore+2	; 3
     31  f01c		       65 b5		      adc	Temp	; 3
     32  f01e		       85 83		      sta	BCDScore+2	; 3
     33  f020		       86 b5		      stx	Temp	; 3
     34  f022		       a5 82		      lda	BCDScore+1	; 3
     35  f024		       65 b5		      adc	Temp	; 3
     36  f026		       85 82		      sta	BCDScore+1	; 3
     37  f028		       a9 00		      lda	#$00	; 2
     38  f02a		       85 b5		      sta	Temp	; 3
     39  f02c		       a5 81		      lda	BCDScore+0	; 3
     40  f02e		       65 b5		      adc	Temp	; 3
     41  f030		       85 81		      sta	BCDScore+0	; 3
     42  f032
     43  f032		       d8		      cld		; 2 - disable BCD mode
     44  f033
     45  f033
     46  f033
     47  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  f033							; Finish Overscan
     49  f033							;
     50  f033							; Loop until the end of overscan
     51  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  f033
     53  f033				   OverscanTimerLoop
     54  f033		       ad 84 02 	      lda	INTIM
     55  f036		       d0 fb		      bne	OverscanTimerLoop
     56  f038
     57  f038
     58  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f038							; Vertical Sync
     60  f038							;
     61  f038							; Do the vertical sync and start the vertical blanking timer
     62  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f038
     64  f038		       a9 02		      lda	#2
     65  f03a		       85 02		      sta	WSYNC
     66  f03c		       85 00		      sta	VSYNC	; enable VSYNC
     67  f03e
     68  f03e		       85 02		      sta	WSYNC
     69  f040		       a9 2d		      lda	#VBLANK_TIMER
     70  f042		       85 02		      sta	WSYNC
     71  f044		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     72  f047
     73  f047		       85 2b		      sta	HMCLR	; clear any HMOVE offsets
     74  f049
     75  f049		       a9 00		      lda	#0
     76  f04b		       85 02		      sta	WSYNC
     77  f04d		       85 00		      sta	VSYNC	; disable VSYNC
     78  f04f
     79  f04f
     80  f04f
     81  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  f04f							; Vertical Blank
     83  f04f							;
     84  f04f							; Do the vertical blanking and game logic
     85  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  f04f
     87  f04f
     88  f04f
     89  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  f04f							; Prepare Scoreboard and Level Progress Displays
     91  f04f							;
     92  f04f							; Set object positions for scoreboard kernel.
     93  f04f							; Also load the values for the playfield registers in RAM
     94  f04f							; for drawing the level progress bar.
     95  f04f							;
     96  f04f							; Takes 193 cycles (2 full scanlines + 41 cycles)
     97  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  f04f
     99  f04f		       a9 b0		      lda	#$B0	; 05 - set HMOVE offsets for both player objects
    100  f051		       85 20		      sta	HMP0	; 08
    101  f053		       a9 c0		      lda	#$C0	; 10
    102  f055		       85 21		      sta	HMP1	; 13
    103  f057		       a9 80		      lda	#$80	; 15 - set HMOVE offsets for ball and missile0
    104  f059		       85 24		      sta	HMBL	; 18
    105  f05b		       85 22		      sta	HMM0	; 21
    106  f05d
      0  f05d					      SLEEP	3	; 24
      1  f05d				   .CYCLES    SET	3
      2  f05d
      3  f05d				  -	      IF	.CYCLES < 2
      4  f05d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05d				  -	      ERR
      6  f05d					      ENDIF
      7  f05d
      8  f05d					      IF	.CYCLES & 1
      9  f05d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05d		       04 00		      nop	0
     11  f05f				  -	      ELSE
     12  f05f				  -	      bit	VSYNC
     13  f05f					      ENDIF
     14  f05f				   .CYCLES    SET	.CYCLES - 3
     15  f05f					      ENDIF
     16  f05f
     17  f05f				  -	      REPEAT	.CYCLES / 2
     18  f05f				  -	      nop
     19  f05f					      REPEND
    108  f05f
    109  f05f		       85 10		      sta	RESP0	; 27 - set player positions
    110  f061		       85 11		      sta	RESP1	; 30
    111  f063
    112  f063		       a9 d0		      lda	#$D0	; 32 - set HMOVE offset for missile1
    113  f065		       85 23		      sta	HMM1	; 35
    114  f067
    115  f067							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  f067							; reset all progress bar playfield graphics RAM (and use 21 cycles)
    117  f067
    118  f067		       a9 e0		      lda	#%11100000	; 37
    119  f069		       85 89		      sta	ProgressBar+0	; 40
    120  f06b		       a9 ff		      lda	#%11111111	; 42
    121  f06d		       85 8a		      sta	ProgressBar+1	; 45
    122  f06f		       85 8b		      sta	ProgressBar+2	; 48
    123  f071		       85 8c		      sta	ProgressBar+3	; 51
    124  f073		       a9 fe		      lda	#%11111110	; 53
    125  f075		       85 8d		      sta	ProgressBar+4	; 56
    126  f077
    127  f077		       85 14		      sta	RESBL	; 59 - set ball and missile positions
    128  f079		       85 12		      sta	RESM0	; 62
    129  f07b		       85 13		      sta	RESM1	; 65
    130  f07d
    131  f07d		       85 02		      sta	WSYNC
    132  f07f		       85 2a		      sta	HMOVE
    133  f081
    134  f081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  f081							; Load RAM for progress bar display (takes 28-53 cycles)
    136  f081
    137  f081		       a5 88		      lda	Progress	; 3 - get amount of progress
    138  f083
    139  f083							; The level progress bar uses the following playfield bits:
    140  f083							; (note that PF0 and PF2 are NOT reversed in this diagram)
    141  f083							;
    142  f083							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    143  f083							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    144  f083							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    145  f083							;
    146  f083							; When the progress bar is empty, every bit labeled "X" above should be
    147  f083							; set (1), and when it is full, every "X" bit should be cleared (0).
    148  f083							; The bits labeled "o" must ALWAYS be cleared.
    149  f083							;
    150  f083							; The leftmost playfield value (the 1st PF0) will be calculated first,
    151  f083							; and then each playfield value to the right until the 2nd PF1
    152  f083							; will be calculated.
    153  f083
    154  f083		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    155  f085
    156  f085		       38		      sec		; 2
    157  f086		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    158  f088		       30 1e		      bmi	.Underflow1	; 2/3
    159  f08a		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    160  f08c
    161  f08c		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    162  f08e		       30 23		      bmi	.Underflow2	; 2/3
    163  f090		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    164  f092
    165  f092		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    166  f094		       30 28		      bmi	.Underflow3	; 2/3
    167  f096		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    168  f098
    169  f098		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    170  f09a		       30 2d		      bmi	.Underflow4	; 2/3
    171  f09c		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    172  f09e
    173  f09e		       aa		      tax		; 2
    174  f09f		       bd 0e f9 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    175  f0a2		       0a		      asl		; 2
    176  f0a3		       85 8d		      sta	ProgressBar+4	; 3
    177  f0a5		       4c d1 f0 	      jmp	.Finish	; 3
    178  f0a8
    179  f0a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  f0a8				   .Underflow1		; for 1st PF0
    181  f0a8
    182  f0a8		       69 03		      adc	#3	; 3 - add back the 3
    183  f0aa		       aa		      tax		; 2
    184  f0ab		       bd 1b f9 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    185  f0ae		       85 89		      sta	ProgressBar	; 3
    186  f0b0		       4c d1 f0 	      jmp	.Finish	; 3
    187  f0b3
    188  f0b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f0b3				   .Underflow2		; for 1st PF1
    190  f0b3
    191  f0b3		       69 08		      adc	#8	; 3 - add back the 8
    192  f0b5		       aa		      tax		; 2
    193  f0b6		       bd 0d f9 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    194  f0b9		       85 8a		      sta	ProgressBar+1	; 3
    195  f0bb		       4c d1 f0 	      jmp	.Finish	; 3
    196  f0be
    197  f0be							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    198  f0be				   .Underflow3		; for PF2
    199  f0be
    200  f0be		       69 08		      adc	#8	; 3 - add back the 8
    201  f0c0		       aa		      tax		; 2
    202  f0c1		       bd 16 f9 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    203  f0c4		       85 8b		      sta	ProgressBar+2	; 3
    204  f0c6		       4c d1 f0 	      jmp	.Finish	; 3
    205  f0c9
    206  f0c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    207  f0c9				   .Underflow4		; for 2nd PF0
    208  f0c9
    209  f0c9		       69 04		      adc	#4	; 3 - add back the 4
    210  f0cb		       aa		      tax		; 2
    211  f0cc		       bd 1a f9 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    212  f0cf		       85 8c		      sta	ProgressBar+3	; 3
    213  f0d1
    214  f0d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f0d1				   .Finish
    216  f0d1
    217  f0d1		       85 2b		      sta	HMCLR	; 56
    218  f0d3		       a9 b0		      lda	#$B0	; 58 - another HMOVE is neccesary for the ball
    219  f0d5		       85 24		      sta	HMBL	; 61
    220  f0d7
    221  f0d7		       e6 80		      inc	Frame	; 66 increment the frame number
    222  f0d9
    223  f0d9		       85 02		      sta	WSYNC
    224  f0db		       85 2a		      sta	HMOVE
    225  f0dd
    226  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    227  f0dd							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    228  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    229  f0dd
    230  f0dd		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2	; 2
    231  f0df		       85 04		      sta	NUSIZ0	; 3
    232  f0e1		       85 05		      sta	NUSIZ1	; 3
    233  f0e3
    234  f0e3		       a9 01		      lda	#VDEL_TRUE	; 2
    235  f0e5		       85 25		      sta	VDELP0	; 3
    236  f0e7		       85 26		      sta	VDELP1	; 3
    237  f0e9
    238  f0e9		       a9 02		      lda	#COL_SCORE	; 2
    239  f0eb		       85 06		      sta	COLUP0	; 3
    240  f0ed		       85 07		      sta	COLUP1	; 3
    241  f0ef		       85 08		      sta	COLUPF	; 3
    242  f0f1		       85 09		      sta	COLUBK	; 3
    243  f0f3		       85 86		      sta	ScoreColor	; 3
    244  f0f5		       a9 56		      lda	#$56	; 2
    245  f0f7		       85 8e		      sta	PgBarColor	; 3
    246  f0f9
    247  f0f9
    248  f0f9
    249  f0f9		       a9 00		      lda	#0
    250  f0fb		       85 84		      sta	BCDScoreAdd
    251  f0fd		       85 85		      sta	BCDScoreAdd+1
    252  f0ff
    253  f0ff							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f0ff							; Prepare Health Display
    255  f0ff							;
    256  f0ff							; Set the pointers for the health graphics
    257  f0ff							;
    258  f0ff							; Takes 28 cycles to complete
    259  f0ff							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  f0ff
    261  f0ff		       18		      clc		; 2
    262  f100
    263  f100		       a9 bd		      lda	#<HealthLeftGfx	; 2
    264  f102		       65 8f		      adc	Health	; 3
    265  f104		       85 90		      sta	HthGfxLPtr	; 3
    266  f106		       a9 f8		      lda	#>HealthLeftGfx	; 2
    267  f108		       85 91		      sta	HthGfxLPtr+1	; 3
    268  f10a
    269  f10a		       a9 dd		      lda	#<HealthRightGfx	; 2
    270  f10c		       65 8f		      adc	Health	; 3
    271  f10e		       85 92		      sta	HthGfxRPtr	; 3
    272  f110		       a9 f8		      lda	#>HealthRightGfx	; 2
    273  f112		       85 93		      sta	HthGfxRPtr+1	; 3
    274  f114
    275  f114
    276  f114
    277  f114							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    278  f114							; Prepare for Throbbing Lines
    279  f114							;
    280  f114							; Set the offset value for the throbbing line graphics
    281  f114							;
    282  f114							; Takes 20 cycles to complete
    283  f114							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    284  f114
    285  f114		       a5 80		      lda	Frame	; 3 - get the current frame number
    286  f116		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    287  f118		       4a		      lsr		; 2
    288  f119		       4a		      lsr		; 2 - shift to get a value from 0-7
    289  f11a		       85 b5		      sta	Temp	; 3
    290  f11c		       0a		      asl		; 2 - carry flag will always be clear after this
    291  f11d		       65 b5		      adc	Temp	; 3 - multiply by 3
    292  f11f		       a8		      tay
    293  f120		       b9 a0 f8 	      lda	LineThrobGfx+0,y
    294  f123		       85 b1		      sta	ThrobColor+0
    295  f125		       b9 a1 f8 	      lda	LineThrobGfx+1,y
    296  f128		       85 b2		      sta	ThrobColor+1
    297  f12a		       b9 a2 f8 	      lda	LineThrobGfx+2,y
    298  f12d		       85 b3		      sta	ThrobColor+2
    299  f12f
    300  f12f
    301  f12f
    302  f12f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    303  f12f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    304  f12f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  f12f
    306  f12f		       a9 fa		      lda	#>FoodGfx
    307  f131		       85 b8		      sta	FoodGfxPtr1+1
    308  f133		       85 bb		      sta	FoodGfxPtr2+1
    309  f135
    310  f135		       a9 07		      lda	#<CatTartGfx
    311  f137		       85 96		      sta	TartGfxPtr
    312  f139		       a9 fb		      lda	#>CatTartGfx
    313  f13b		       85 97		      sta	TartGfxPtr+1
    314  f13d
    315  f13d		       a9 10		      lda	#$10
    316  f13f		       85 9c		      sta	FoodItemL+0
    317  f141		       a9 70		      lda	#$70
    318  f143		       85 a3		      sta	FoodItemR+0
    319  f145		       a9 20		      lda	#$20
    320  f147		       85 9d		      sta	FoodItemL+1
    321  f149		       a9 80		      lda	#$80
    322  f14b		       85 a4		      sta	FoodItemR+1
    323  f14d		       a9 30		      lda	#$30
    324  f14f		       85 9e		      sta	FoodItemL+2
    325  f151		       a9 90		      lda	#$90
    326  f153		       85 a5		      sta	FoodItemR+2
    327  f155		       a9 40		      lda	#$40
    328  f157		       85 9f		      sta	FoodItemL+3
    329  f159		       a9 a0		      lda	#$A0
    330  f15b		       85 a6		      sta	FoodItemR+3
    331  f15d		       a9 50		      lda	#$50
    332  f15f		       85 a0		      sta	FoodItemL+4
    333  f161		       a9 b0		      lda	#$B0
    334  f163		       85 a7		      sta	FoodItemR+4
    335  f165		       a9 60		      lda	#$60
    336  f167		       85 a1		      sta	FoodItemL+5
    337  f169		       a9 c0		      lda	#$C0
    338  f16b		       85 a8		      sta	FoodItemR+5
    339  f16d		       a9 d0		      lda	#$D0
    340  f16f		       85 a2		      sta	FoodItemL+6
    341  f171		       a9 e0		      lda	#$E0
    342  f173		       85 a9		      sta	FoodItemR+6
    343  f175
    344  f175		       a9 66		      lda	#<CatFaceGfx
    345  f177		       85 98		      sta	CatGfxPtr
    346  f179		       a9 f9		      lda	#>CatFaceGfx
    347  f17b		       85 99		      sta	CatGfxPtr+1
    348  f17d
    349  f17d		       c6 aa		      dec	FoodPosX
    350  f17f		       10 04		      bpl	.NoReset
    351  f181		       a9 58		      lda	#88
    352  f183		       85 aa		      sta	FoodPosX
    353  f185				   .NoReset
    354  f185		       a5 aa		      lda	FoodPosX
    355  f187		       85 ab		      sta	FoodPosX+1
    356  f189		       85 ac		      sta	FoodPosX+2
    357  f18b		       85 ad		      sta	FoodPosX+3
    358  f18d		       85 ae		      sta	FoodPosX+4
    359  f18f		       85 af		      sta	FoodPosX+5
    360  f191		       85 b0		      sta	FoodPosX+6
    361  f193
    362  f193
    363  f193
    364  f193							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    365  f193							; Prepare for Main Gameplay Kernel
    366  f193							;
    367  f193							; Figure out how many rows to draw before and after the two cat rows
    368  f193							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    369  f193
    370  f193		       a9 03		      lda	#3
    371  f195		       85 9a		      sta	PreCatRows
    372  f197		       a9 02		      lda	#2
    373  f199		       85 9b		      sta	PostCatRows
    374  f19b
    375  f19b
    376  f19b
    377  f19b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  f19b							; Load Scoreboard
    379  f19b							;
    380  f19b							; Get graphics data for the scoreboard and push it onto the stack
    381  f19b							;
    382  f19b							; Takes 1245 cycles to complete (16 full scanlines + 29 cycles)
    383  f19b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    384  f19b
    385  f19b					      SUBROUTINE
    386  f19b
    387  f19b		       a9 06		      lda	#6	; 2 - start with bottom of digit graphics data
    388  f19d		       85 b4		      sta	TempLoop	; 3
    389  f19f
    390  f19f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    391  f19f				   .Loop
    392  f19f
    393  f19f							; push level counter graphics data
    394  f19f		       a5 87		      lda	BCDLevel	; 3 - get level counter
    395  f1a1		       29 0f		      and	#$0F	; 2 - isolate left nybble/digit
    396  f1a3		       0a		      asl		; 2
    397  f1a4		       0a		      asl		; 2
    398  f1a5		       0a		      asl		; 2 - digit value * 8
    399  f1a6							; no need to clc, carry will always be clear
    400  f1a6		       65 b4		      adc	TempLoop	; 3 - add offset for current loop iteration
    401  f1a8		       a8		      tay		; 2
    402  f1a9		       b9 50 f8 	      lda	LevelGfx,y	; 4
    403  f1ac		       48		      pha		; 3
    404  f1ad
    405  f1ad		       a2 02		      ldx	#2	; 2 - start with rightmost BCD score value
    406  f1af							; (we must push to stack in reverse of drawing order)
    407  f1af				   .DigitLoop
    408  f1af
    409  f1af							; right nybble
    410  f1af		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    411  f1b1		       29 0f		      and	#$0F	; 2 - isolate right nybble/digit
    412  f1b3		       0a		      asl		; 2
    413  f1b4		       0a		      asl		; 2
    414  f1b5		       0a		      asl		; 2 - digit value * 8
    415  f1b6							; no need to clc, carry will always be clear
    416  f1b6		       65 b4		      adc	TempLoop	; 3 - add offset for current loop iteration
    417  f1b8		       a8		      tay		; 2
    418  f1b9		       b9 00 f8 	      lda	ScoreGfx,y	; 4
    419  f1bc		       48		      pha		; 3
    420  f1bd
    421  f1bd							; left nybble
    422  f1bd		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    423  f1bf		       29 f0		      and	#$F0	; 2 - isolate left nybble/digit
    424  f1c1		       4a		      lsr		; 2 - digit value * 8
    425  f1c2							; no need to clc, carry will always be clear
    426  f1c2		       65 b4		      adc	TempLoop	; 3 - add offset for current loop iteration
    427  f1c4		       a8		      tay		; 2
    428  f1c5		       b9 00 f8 	      lda	ScoreGfx,y	; 4
    429  f1c8		       48		      pha		; 3
    430  f1c9
    431  f1c9		       ca		      dex		; 2
    432  f1ca		       10 e3		      bpl	.DigitLoop	; 2/3
    433  f1cc
    434  f1cc		       c6 b4		      dec	TempLoop	; 5
    435  f1ce		       10 cf		      bpl	.Loop	; 2/3
    436  f1d0
    437  f1d0
    438  f1d0
    439  f1d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  f1d0							; Finish Vertical Blanking
    441  f1d0							;
    442  f1d0							; Loop until the end of vertical blanking
    443  f1d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    444  f1d0
    445  f1d0				   VblankTimerLoop
    446  f1d0		       ad 84 02 	      lda	INTIM
    447  f1d3		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     60  f1d5
     61  f1d5
     62  f1d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f1d5							; Kernel
     64  f1d5							;
     65  f1d5							; Draw the screen
     66  f1d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67  f1d5
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  f1d5					      include	code/Kernel.asm
      1  f1d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f1d5							; Kernel
      3  f1d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f1d5
      5  f1d5		       a9 00		      lda	#0
      6  f1d7		       85 02		      sta	WSYNC
      7  f1d9		       85 01		      sta	VBLANK	; enable display
      8  f1db
      9  f1db							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  f1db					      include	code/ScoreboardKernel.asm
      1  f1db							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f1db							; Scoreboard Display
      3  f1db							;
      4  f1db							; Draw the 6-digit score and level counter.
      5  f1db							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f1db
      7  f1db					      SUBROUTINE
      8  f1db
      9  f1db		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  f1dd		       85 0a		      sta	CTRLPF
     11  f1df
     12  f1df		       a9 ff		      lda	#$FF
     13  f1e1		       85 0d		      sta	PF0
     14  f1e3
     15  f1e3		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  f1e5		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  f1e7		       85 0e		      sta	PF1	; display kernel loop.
     18  f1e9
     19  f1e9		       a0 04		      ldy	#4
     20  f1eb
     21  f1eb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f1eb				   ScoreTop		; draw border above scoreboard
     23  f1eb
     24  f1eb		       85 02		      sta	WSYNC
     25  f1ed
     26  f1ed		       a9 00		      lda	#0
     27  f1ef		       85 1b		      sta	GRP0
     28  f1f1		       85 1c		      sta	GRP1
     29  f1f3
     30  f1f3		       88		      dey
     31  f1f4		       d0 f5		      bne	ScoreTop
     32  f1f6
     33  f1f6		       a9 80		      lda	#$80
     34  f1f8		       85 0e		      sta	PF1
     35  f1fa
     36  f1fa		       a9 0e		      lda	#COL_SCOREBOARD
     37  f1fc		       85 09		      sta	COLUBK
     38  f1fe
     39  f1fe		       85 02		      sta	WSYNC
     40  f200		       85 02		      sta	WSYNC
     41  f202
      0  f202					      SLEEP	48
      1  f202				   .CYCLES    SET	48
      2  f202
      3  f202				  -	      IF	.CYCLES < 2
      4  f202				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f202				  -	      ERR
      6  f202					      ENDIF
      7  f202
      8  f202				  -	      IF	.CYCLES & 1
      9  f202				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f202				  -	      nop	0
     11  f202				  -	      ELSE
     12  f202				  -	      bit	VSYNC
     13  f202				  -	      ENDIF
     14  f202				  -.CYCLES    SET	.CYCLES - 3
     15  f202					      ENDIF
     16  f202
     17  f202					      REPEAT	.CYCLES / 2
     18  f202		       ea		      nop
     17  f202					      REPEND
     18  f203		       ea		      nop
     17  f203					      REPEND
     18  f204		       ea		      nop
     17  f204					      REPEND
     18  f205		       ea		      nop
     17  f205					      REPEND
     18  f206		       ea		      nop
     17  f206					      REPEND
     18  f207		       ea		      nop
     17  f207					      REPEND
     18  f208		       ea		      nop
     17  f208					      REPEND
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     17  f20a					      REPEND
     18  f20b		       ea		      nop
     17  f20b					      REPEND
     18  f20c		       ea		      nop
     17  f20c					      REPEND
     18  f20d		       ea		      nop
     17  f20d					      REPEND
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     17  f20f					      REPEND
     18  f210		       ea		      nop
     17  f210					      REPEND
     18  f211		       ea		      nop
     17  f211					      REPEND
     18  f212		       ea		      nop
     17  f212					      REPEND
     18  f213		       ea		      nop
     17  f213					      REPEND
     18  f214		       ea		      nop
     17  f214					      REPEND
     18  f215		       ea		      nop
     17  f215					      REPEND
     18  f216		       ea		      nop
     17  f216					      REPEND
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     17  f218					      REPEND
     18  f219		       ea		      nop
     19  f21a					      REPEND
     43  f21a
     44  f21a		       a5 87		      lda	BCDLevel
     45  f21c		       4a		      lsr
     46  f21d		       4a		      lsr
     47  f21e		       4a		      lsr
     48  f21f		       85 1f		      sta	ENABL	; draw ball if bit-4 is set (if level > 9)
     49  f221
     50  f221		       4c 1a f3 	      jmp	.EntrancePoint
     51  f224
     52  f300		       00 00 00 00*	      ALIGN	$100
     53  f300
     54  f300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55  f300				   .ScoreDigitLoop
     56  f300
     57  f300							; A contains gfx for digit3
     58  f300		       85 1b		      sta	GRP0	; 14	digit3 -> [GRP0]	digit2 -> GRP1
     59  f302
     60  f302							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     61  f302
     62  f302		       68		      pla		; 18	pull gfx for digit4...
     63  f303		       a8		      tay		; 20	...and store in Y
     64  f304		       68		      pla		; 24	pull gfx data for digit5...
     65  f305		       aa		      tax		; 26	...and store in X
     66  f306		       68		      pla		; 30	pull gfx data for digit6 to A
     67  f307
     68  f307		       84 1c		      sty	GRP1	; 33	digit4 -> [GRP1]	digit3 -> GRP0
     69  f309		       86 1b		      stx	GRP0	; 36	digit5 -> [GRP0]	digit4 -> GRP1
     70  f30b		       85 1c		      sta	GRP1	; 39	digit6 -> [GRP1]	digit5 -> GRP0
     71  f30d		       85 1b		      sta	GRP0	; 42	digit6 -> [GRP0]	digit6 -> GRP1
     72  f30f
     73  f30f		       68		      pla		; 46	pull gfx data for level counter
     74  f310		       85 1d		      sta	ENAM0	; 49	use bit 1 of data for ENAM0
     75  f312		       2a		      rol		; 51
     76  f313		       85 1e		      sta	ENAM1	; 54	use bit 0 of data for ENAM1
     77  f315		       6a		      ror		; 56
     78  f316		       6a		      ror		; 58
     79  f317		       6a		      ror		; 60
     80  f318		       85 04		      sta	NUSIZ0	; 63	use bits 2-7 of data (re-aligned) for NUSIZ0
     81  f31a
     82  f31a				   .EntrancePoint
     83  f31a
     84  f31a		       68		      pla		; 67	pull gfx for digit1
     85  f31b		       85 1b		      sta	GRP0	; 70	digit1 -> [GRP0]
     86  f31d
     87  f31d		       68		      pla		; 74	pull gfx for digit2
     88  f31e		       8d 1c 00 	      sta.w	GRP1	; 02	digit2 -> [GRP1]	digit1 -> GRP0
     89  f321							;	(use an extra cycle for timing reasons)
     90  f321
     91  f321		       68		      pla		; 06	pull gfx for digit3
     92  f322
     93  f322							; On the final iteration of the loop, the stack will have wrapped
     94  f322							; and pulled from location $02 at this point.
     95  f322							; This happens to be the collision register CXP0FB.
     96  f322							; Bit-7 will always be set in this register,
     97  f322							; and bit-7 is always clear in the score graphics,
     98  f322							; so checking bit-7 of the data pulled is all that you need
     99  f322							; to determine when to terminate the loop.
    100  f322
    101  f322		       aa		      tax		; 08	set flags according to pulled data
    102  f323
    103  f323		       10 db		      bpl	.ScoreDigitLoop	; 10/11	check negative flag to see if the loop is over
    104  f325
    105  f325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f325
    107  f325		       a9 00		      lda	#0	; 12
    108  f327		       85 1d		      sta	ENAM0	; 15 - disable missiles
    109  f329		       85 1e		      sta	ENAM1	; 18
    110  f32b		       85 1b		      sta	GRP0	; 21 - disable player graphics
    111  f32d		       85 1c		      sta	GRP1	; 24
    112  f32f		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
    113  f331		       85 26		      sta	VDELP1	; 30
    114  f333		       85 1f		      sta	ENABL	; 33 - disable ball
    115  f335
    116  f335		       a2 ff		      ldx	#$FF	; 35
    117  f337		       9a		      txs		; 37 - reset the stack pointer
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  f338					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  f338							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f338							; We are currently at cycle 37 in the current scanline.
      3  f338
      4  f338
      5  f338
      6  f338							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  f338							; Output 4 blank scanlines, while setting up the graphics objects.
      8  f338
      9  f338				   PreKernel
     10  f338
     11  f338		       8d b6 00 	      sta.w	CurrentRow	; 41
     12  f33b
     13  f33b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14  f33b							; Clear the RAM for the rainbow colors - 123 cycles
     15  f33b
     16  f33b		       a0 04		      ldy	#4
     17  f33d				   .ClearRainbow
     18  f33d		       48		      pha
     19  f33e		       48		      pha
     20  f33f		       48		      pha
     21  f340		       48		      pha
     22  f341		       48		      pha
     23  f342		       48		      pha
     24  f343		       48		      pha
     25  f344		       48		      pha
     26  f345
     27  f345		       88		      dey
     28  f346		       d0 f5		      bne	.ClearRainbow
     29  f348
     30  f348		       48		      pha
     31  f349		       48		      pha		; 12
     32  f34a
     33  f34a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  f34a							; Load the rainbow colors into RAM - 65 cycles
     35  f34a
     36  f34a		       a2 eb		      ldx	#255-20
     37  f34c		       9a		      txs
     38  f34d
     39  f34d		       ad 05 fb 	      lda	RainbowColors+5
     40  f350		       48		      pha
     41  f351		       48		      pha
     42  f352		       ad 04 fb 	      lda	RainbowColors+4
     43  f355		       48		      pha
     44  f356		       48		      pha
     45  f357		       ad 03 fb 	      lda	RainbowColors+3
     46  f35a		       48		      pha
     47  f35b		       48		      pha
     48  f35c		       ad 02 fb 	      lda	RainbowColors+2
     49  f35f		       48		      pha
     50  f360		       48		      pha
     51  f361		       ad 01 fb 	      lda	RainbowColors+1
     52  f364		       48		      pha
     53  f365		       48		      pha
     54  f366		       ad 00 fb 	      lda	RainbowColors+0
     55  f369		       48		      pha
     56  f36a		       48		      pha		; 01
     57  f36b
     58  f36b
     59  f36b
     60  f36b							; Player 0 is already aligned for drawing the cat's face.
     61  f36b
     62  f36b							; Align player 1 to draw the current frame's food items for the top row.
     63  f36b
     64  f36b							; food item can be placed anywhere from 0-88
     65  f36b							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     66  f36b
     67  f36b		       a4 b6		      ldy	CurrentRow	; 04 - get the row we are drawing
     68  f36d		       b9 aa 00 	      lda	FoodPosX,y	; 08 - get the food's position for this row
     69  f370
     70  f370		       38		      sec		; 10
     71  f371				   .DivideLoop
     72  f371		       e9 0f		      sbc	#15	; 12
     73  f373		       b0 fc		      bcs	.DivideLoop	; 14
     74  f375
     75  f375		       49 07		      eor	#7	; 16
     76  f377		       69 01		      adc	#1	; 18
     77  f379		       0a		      asl		; 20
     78  f37a		       0a		      asl		; 22
     79  f37b		       0a		      asl		; 24
     80  f37c
     81  f37c		       85 11		      sta	RESP1	; 27
     82  f37e
     83  f37e		       0a		      asl		; 29
     84  f37f
     85  f37f		       85 21		      sta	HMP1	; 32
     86  f381
     87  f381		       a9 00		      lda	#ONE_COPY
     88  f383		       85 04		      sta	NUSIZ0
     89  f385		       a9 04		      lda	#TWO_WIDE
     90  f387		       85 05		      sta	NUSIZ1
     91  f389
     92  f389		       85 02		      sta	WSYNC
     93  f38b
     94  f38b		       a5 b2		      lda	ThrobColor+1
     95  f38d		       85 09		      sta	COLUBK
     96  f38f		       85 08		      sta	COLUPF
     97  f391
     98  f391
     99  f391
    100  f391							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  f391							; 31 cycles
    102  f391
    103  f391		       a9 01		      lda	#PF_REFLECT
    104  f393		       85 0a		      sta	CTRLPF
    105  f395
    106  f395		       a5 80		      lda	Frame
    107  f397		       29 08		      and	#%00001000
    108  f399		       f0 04		      beq	.Rainbow1
    109  f39b
    110  f39b		       a9 50		      lda	#%01010000
    111  f39d		       d0 03		      bne	.Rainbow2
    112  f39f
    113  f39f				   .Rainbow1
      0  f39f					      SLEEP	2
      1  f39f				   .CYCLES    SET	2
      2  f39f
      3  f39f				  -	      IF	.CYCLES < 2
      4  f39f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f39f				  -	      ERR
      6  f39f					      ENDIF
      7  f39f
      8  f39f				  -	      IF	.CYCLES & 1
      9  f39f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f39f				  -	      nop	0
     11  f39f				  -	      ELSE
     12  f39f				  -	      bit	VSYNC
     13  f39f				  -	      ENDIF
     14  f39f				  -.CYCLES    SET	.CYCLES - 3
     15  f39f					      ENDIF
     16  f39f
     17  f39f					      REPEAT	.CYCLES / 2
     18  f39f		       ea		      nop
     19  f3a0					      REPEND
    115  f3a0		       a9 a0		      lda	#%10100000
    116  f3a2
    117  f3a2				   .Rainbow2
    118  f3a2		       85 0d		      sta	PF0
    119  f3a4
    120  f3a4		       a9 06		      lda	#COL_CAT_FACE
    121  f3a6		       85 06		      sta	COLUP0
    122  f3a8
    123  f3a8		       a9 80		      lda	#$80
    124  f3aa		       85 20		      sta	HMP0
    125  f3ac
      0  f3ac					      SLEEP	30
      1  f3ac				   .CYCLES    SET	30
      2  f3ac
      3  f3ac				  -	      IF	.CYCLES < 2
      4  f3ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ac				  -	      ERR
      6  f3ac					      ENDIF
      7  f3ac
      8  f3ac				  -	      IF	.CYCLES & 1
      9  f3ac				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ac				  -	      nop	0
     11  f3ac				  -	      ELSE
     12  f3ac				  -	      bit	VSYNC
     13  f3ac				  -	      ENDIF
     14  f3ac				  -.CYCLES    SET	.CYCLES - 3
     15  f3ac					      ENDIF
     16  f3ac
     17  f3ac					      REPEAT	.CYCLES / 2
     18  f3ac		       ea		      nop
     17  f3ac					      REPEND
     18  f3ad		       ea		      nop
     17  f3ad					      REPEND
     18  f3ae		       ea		      nop
     17  f3ae					      REPEND
     18  f3af		       ea		      nop
     17  f3af					      REPEND
     18  f3b0		       ea		      nop
     17  f3b0					      REPEND
     18  f3b1		       ea		      nop
     17  f3b1					      REPEND
     18  f3b2		       ea		      nop
     17  f3b2					      REPEND
     18  f3b3		       ea		      nop
     17  f3b3					      REPEND
     18  f3b4		       ea		      nop
     17  f3b4					      REPEND
     18  f3b5		       ea		      nop
     17  f3b5					      REPEND
     18  f3b6		       ea		      nop
     17  f3b6					      REPEND
     18  f3b7		       ea		      nop
     17  f3b7					      REPEND
     18  f3b8		       ea		      nop
     17  f3b8					      REPEND
     18  f3b9		       ea		      nop
     17  f3b9					      REPEND
     18  f3ba		       ea		      nop
     19  f3bb					      REPEND
    127  f3bb
    128  f3bb		       85 2a		      sta	HMOVE
    129  f3bd
      0  f3bd					      SLEEP	3
      1  f3bd				   .CYCLES    SET	3
      2  f3bd
      3  f3bd				  -	      IF	.CYCLES < 2
      4  f3bd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3bd				  -	      ERR
      6  f3bd					      ENDIF
      7  f3bd
      8  f3bd					      IF	.CYCLES & 1
      9  f3bd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3bd		       04 00		      nop	0
     11  f3bf				  -	      ELSE
     12  f3bf				  -	      bit	VSYNC
     13  f3bf					      ENDIF
     14  f3bf				   .CYCLES    SET	.CYCLES - 3
     15  f3bf					      ENDIF
     16  f3bf
     17  f3bf				  -	      REPEAT	.CYCLES / 2
     18  f3bf				  -	      nop
     19  f3bf					      REPEND
    131  f3bf
    132  f3bf							; If any part of the cat needs to be drawn in the top row,
    133  f3bf							; skip straight to CatRows.
    134  f3bf
    135  f3bf
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  f3bf					      include	code/Gameplay Kernel/HiRows.asm
      1  f3bf							; Draw all the rows above the cat's two rows
      2  f3bf
      3  f3bf		       a5 b1		      lda	ThrobColor+0	; 02
      4  f3c1		       85 09		      sta	COLUBK	; 05
      5  f3c3		       85 08		      sta	COLUPF	; 08
      6  f3c5
      7  f3c5		       a4 b6		      ldy	CurrentRow	; 11
      8  f3c7
      9  f3c7		       b9 9c 00 	      lda	FoodItemL,y	; 15
     10  f3ca		       29 f0		      and	#$F0	; 17
     11  f3cc		       85 b7		      sta	FoodGfxPtr1	; 20
     12  f3ce		       aa		      tax		; 22
     13  f3cf		       bd 0e fa 	      lda	FoodGfx+14,x	; 26
     14  f3d2		       85 b9		      sta	FoodColor1	; 29
     15  f3d4
     16  f3d4		       b9 a3 00 	      lda	FoodItemR,y	; 33
     17  f3d7		       29 f0		      and	#$F0	; 36
     18  f3d9		       85 ba		      sta	FoodGfxPtr2	; 38
     19  f3db		       aa		      tax		; 40
     20  f3dc		       bd 0e fa 	      lda	FoodGfx+14,x	; 44
     21  f3df		       85 bc		      sta	FoodColor2	; 47
     22  f3e1
     23  f3e1		       b9 aa 00 	      lda	FoodPosX,y	; 51
     24  f3e4		       85 b5		      sta	Temp	; 54
     25  f3e6
     26  f3e6				   HiRows     SUBROUTINE
     27  f3e6
     28  f3e6							; First, output a single-color line to draw the bottom of a "throb" line.
     29  f3e6							; This will probably be a good time to prepare the pointers for the
     30  f3e6							; food items' graphics, as well as loading the colors for the food items.
     31  f3e6
     32  f3e6		       a0 0d		      ldy	#13	; 56
     33  f3e8
     34  f3e8				   .FrootLoop
     35  f3e8		       a9 00		      lda	#COL_BACKGROUND
     36  f3ea		       85 02		      sta	WSYNC
     37  f3ec
     38  f3ec
     39  f3ec							; After that, output 14 lines to draw a single row with food items,
     40  f3ec							; but without drawing the cat. The food graphics will be updated every line,
     41  f3ec							; but there will probably not be enough time to also update the food colors
     42  f3ec							; every line throughout the kernel.
     43  f3ec
     44  f3ec
     45  f3ec		       85 09		      sta	COLUBK	; 03
     46  f3ee		       85 08		      sta	COLUPF	; 06
     47  f3f0
     48  f3f0		       b1 b7		      lda	(FoodGfxPtr1),y	; 11
     49  f3f2		       85 1c		      sta	GRP1	; 14
     50  f3f4		       a5 b9		      lda	FoodColor1	; 17
     51  f3f6		       85 07		      sta	COLUP1	; 20
     52  f3f8
     53  f3f8		       a5 b5		      lda	Temp	; 23
     54  f3fa
     55  f3fa		       38		      sec		; 25
     56  f3fb				   .WaitLoop
     57  f3fb		       e9 17		      sbc	#23	; 27
     58  f3fd		       b0 fc		      bcs	.WaitLoop	; 29
     59  f3ff
     60  f3ff		       b1 ba		      lda	(FoodGfxPtr2),y	; 34
     61  f401		       a6 bc		      ldx	FoodColor2	; 37
     62  f403		       85 1c		      sta	GRP1	; 40
     63  f405		       86 07		      stx	COLUP1	; 43
     64  f407
     65  f407		       88		      dey
     66  f408		       10 de		      bpl	.FrootLoop
     67  f40a
     68  f40a		       e6 b6		      inc	CurrentRow
     69  f40c
     70  f40c		       85 02		      sta	WSYNC
     71  f40e
     72  f40e
     73  f40e							; Lastly, output four single-color lines to draw most of a "throb" line,
     74  f40e							; while setting the position of player 1 to draw the next set of food items.
     75  f40e
     76  f40e
     77  f40e		       a5 b1		      lda	ThrobColor+0
     78  f410		       85 09		      sta	COLUBK
     79  f412		       85 08		      sta	COLUPF
     80  f414		       a9 00		      lda	#0
     81  f416		       85 1b		      sta	GRP0
     82  f418		       85 1c		      sta	GRP1
     83  f41a		       85 02		      sta	WSYNC
     84  f41c
     85  f41c		       a5 b2		      lda	ThrobColor+1
     86  f41e		       85 09		      sta	COLUBK
     87  f420		       85 08		      sta	COLUPF
     88  f422		       85 02		      sta	WSYNC
     89  f424
     90  f424		       a5 b3		      lda	ThrobColor+2
     91  f426		       85 09		      sta	COLUBK
     92  f428		       85 08		      sta	COLUPF
     93  f42a		       a2 00		      ldx	#0
     94  f42c		       86 1b		      stx	GRP0
     95  f42e		       85 02		      sta	WSYNC
     96  f430
     97  f430		       a5 b2		      lda	ThrobColor+1
     98  f432		       85 09		      sta	COLUBK
     99  f434		       85 08		      sta	COLUPF
    100  f436
    101  f436		       a4 b6		      ldy	CurrentRow	; 11
    102  f438
    103  f438		       b9 9c 00 	      lda	FoodItemL,y	; 15
    104  f43b		       29 f0		      and	#$F0	; 17
    105  f43d		       85 b7		      sta	FoodGfxPtr1	; 20
    106  f43f		       aa		      tax		; 22
    107  f440		       bd 0e fa 	      lda	FoodGfx+14,x	; 26
    108  f443		       85 b9		      sta	FoodColor1	; 29
    109  f445
    110  f445		       b9 a3 00 	      lda	FoodItemR,y	; 33
    111  f448		       29 f0		      and	#$F0	; 36
    112  f44a		       85 ba		      sta	FoodGfxPtr2	; 38
    113  f44c		       aa		      tax		; 40
    114  f44d		       bd 0e fa 	      lda	FoodGfx+14,x	; 44
    115  f450		       85 bc		      sta	FoodColor2	; 47
    116  f452
    117  f452		       b9 aa 00 	      lda	FoodPosX,y	; 51
    118  f455		       85 b5		      sta	Temp	; 54
    119  f457
    120  f457		       c6 9a		      dec	PreCatRows
    121  f459		       85 02		      sta	WSYNC
    122  f45b		       d0 89		      bne	HiRows
    123  f45d
    124  f45d							; If this is not the last row before drawing the cat's rows,
    125  f45d							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  f45d					      include	code/Gameplay Kernel/CatRows.asm
      1  f45d							; Draw the two rows that contain the cat.
      2  f45d				   CatRows    SUBROUTINE
      3  f45d
      4  f45d							; Output a line to finish the bottom of a "throb" line, like in HiRows.
      5  f45d							; If the cat is at the very top of the row, draw the top of the pop-tart.
      6  f45d
      7  f45d		       a5 b1		      lda	ThrobColor+0
      8  f45f		       85 09		      sta	COLUBK
      9  f461		       85 08		      sta	COLUPF
     10  f463
     11  f463							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12  f463							; Cat Row Kernel
     13  f463							;
     14  f463							; This is the subroutine that is used to draw the two gameplay kernel rows
     15  f463							; containing the cat. It does not draw the throbbing line between the two rows,
     16  f463							; it only draws a single, 14-scanline row with the cat and food items.
     17  f463							; This subroutine is called twice in the kernel, once for each of the two rows
     18  f463							; containing the cat.
     19  f463							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     20  f463
     21  f463				   DrawCatRow
     22  f463
     23  f463							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  f463
     25  f463		       a6 bc		      ldx	FoodColor2
     26  f465		       9a		      txs
     27  f466
     28  f466		       a2 00		      ldx	#COL_BACKGROUND
     29  f468
     30  f468							;18
     31  f468
     32  f468							; Then output the 14 lines to draw a single row. This will include drawing
     33  f468							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     34  f468							; All graphics will be updated every line.
     35  f468
     36  f468		       a0 0d		      ldy	#13
     37  f46a
      0  f46a					      SLEEP	24
      1  f46a				   .CYCLES    SET	24
      2  f46a
      3  f46a				  -	      IF	.CYCLES < 2
      4  f46a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f46a				  -	      ERR
      6  f46a					      ENDIF
      7  f46a
      8  f46a				  -	      IF	.CYCLES & 1
      9  f46a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f46a				  -	      nop	0
     11  f46a				  -	      ELSE
     12  f46a				  -	      bit	VSYNC
     13  f46a				  -	      ENDIF
     14  f46a				  -.CYCLES    SET	.CYCLES - 3
     15  f46a					      ENDIF
     16  f46a
     17  f46a					      REPEAT	.CYCLES / 2
     18  f46a		       ea		      nop
     17  f46a					      REPEND
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     17  f46c					      REPEND
     18  f46d		       ea		      nop
     17  f46d					      REPEND
     18  f46e		       ea		      nop
     17  f46e					      REPEND
     18  f46f		       ea		      nop
     17  f46f					      REPEND
     18  f470		       ea		      nop
     17  f470					      REPEND
     18  f471		       ea		      nop
     17  f471					      REPEND
     18  f472		       ea		      nop
     17  f472					      REPEND
     18  f473		       ea		      nop
     17  f473					      REPEND
     18  f474		       ea		      nop
     17  f474					      REPEND
     18  f475		       ea		      nop
     19  f476					      REPEND
     39  f476
     40  f476		       a5 aa		      lda	FoodPosX	; 47
     41  f478		       c9 31		      cmp	#49	; 49
     42  f47a		       30 0b		      bmi	.FoodRight	; 52/51
     43  f47c
     44  f47c		       c6 96		      dec	TartGfxPtr	; 56
     45  f47e		       c6 98		      dec	CatGfxPtr	; 61
     46  f480
      0  f480					      SLEEP	7	; 68
      1  f480				   .CYCLES    SET	7
      2  f480
      3  f480				  -	      IF	.CYCLES < 2
      4  f480				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f480				  -	      ERR
      6  f480					      ENDIF
      7  f480
      8  f480					      IF	.CYCLES & 1
      9  f480					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f480		       04 00		      nop	0
     11  f482				  -	      ELSE
     12  f482				  -	      bit	VSYNC
     13  f482					      ENDIF
     14  f482				   .CYCLES    SET	.CYCLES - 3
     15  f482					      ENDIF
     16  f482
     17  f482					      REPEAT	.CYCLES / 2
     18  f482		       ea		      nop
     17  f482					      REPEND
     18  f483		       ea		      nop
     19  f484					      REPEND
     48  f484
     49  f484		       4c 00 f5 	      jmp	.KernelLoop1	; 71
     50  f487
     51  f487				   .FoodRight
     52  f487		       4c 32 f5 	      jmp	.KernelLoop2	; 55
     53  f48a
     54  f500		       00 00 00 00*	      ALIGN	$100
     55  f500
     56  f500				   .KernelLoop1
     57  f500
     58  f500							; 7 cycles to prepare PF rainbow colors
     59  f500		       b9 df 00 	      lda	RamBowColors+1,y	; 75
     60  f503		       85 08		      sta	COLUPF	; 02
     61  f505
     62  f505							; 7 cycles to prepare BK rainbow colors
     63  f505		       b9 de 00 	      lda	RamBowColors,y	; 06
     64  f508		       85 09		      sta	COLUBK	; 09
     65  f50a
     66  f50a							; 14 cycles to prepare 1st food item's graphics
     67  f50a		       b1 b7		      lda	(FoodGfxPtr1),y	; 14
     68  f50c		       85 1c		      sta	GRP1	; 17
     69  f50e		       a5 b9		      lda	FoodColor1	; 20
     70  f510		       85 07		      sta	COLUP1	; 23
     71  f512
     72  f512							; 5 cycles to set tart color
     73  f512		       a9 4a		      lda	#COL_CAT_TART	; 25
     74  f514		       85 08		      sta	COLUPF	; 28
     75  f516
     76  f516							; 3 cycles to clear BK color to black
     77  f516							; x is pre-loaded with 0, the color black
     78  f516		       86 09		      stx	COLUBK	; 31
     79  f518
     80  f518							; 8 cycles to prepare cat face graphics
     81  f518		       b1 98		      lda	(CatGfxPtr),y	; 36
     82  f51a		       85 1b		      sta	GRP0	; 39
     83  f51c
     84  f51c							; 8 cycles to prepare tart graphics
     85  f51c		       b1 96		      lda	(TartGfxPtr),y	; 44
     86  f51e		       85 0e		      sta	PF1	; 47
     87  f520
     88  f520							; 13 cycles to prepare 2nd food item's graphics
     89  f520		       b1 ba		      lda	(FoodGfxPtr2),y	; 52
     90  f522		       ba		      tsx		; 54
     91  f523		       85 1c		      sta	GRP1	; 57
     92  f525		       86 07		      stx	COLUP1	; 60
     93  f527
     94  f527							; 6 cycles to clear PF color to black
     95  f527		       a2 00		      ldx	#COL_BACKGROUND	; 62
     96  f529		       8e 08 00 	      stx.w	COLUPF	; 66
     97  f52c
     98  f52c							; 5 cycles to finish the loop mechanism
     99  f52c		       88		      dey		; 68
    100  f52d		       10 d1		      bpl	.KernelLoop1	; 71/70
    101  f52f
    102  f52f							; exactly 76 cycles total
    103  f52f
    104  f52f		       4c 61 f5 	      jmp	.Nanny
    105  f532
    106  f532
    107  f532
    108  f532
    109  f532
    110  f532				   .KernelLoop2
    111  f532
    112  f532							; 8 cycles to prepare cat face graphics
    113  f532		       b1 98		      lda	(CatGfxPtr),y	; 60
    114  f534		       85 1b		      sta	GRP0	; 63
    115  f536
    116  f536							; 14 cycles to prepare 1st food item's graphics
    117  f536		       b1 b7		      lda	(FoodGfxPtr1),y	; 68
    118  f538		       85 1c		      sta	GRP1	; 71
    119  f53a		       a5 b9		      lda	FoodColor1	; 74
    120  f53c		       85 07		      sta	COLUP1	; 01
    121  f53e
    122  f53e							; 7 cycles to prepare PF rainbow colors
    123  f53e		       b9 df 00 	      lda	RamBowColors+1,y	; 05
    124  f541		       85 08		      sta	COLUPF	; 08
    125  f543
    126  f543							; 7 cycles to prepare BK rainbow colors
    127  f543		       b9 de 00 	      lda	RamBowColors,y	; 12
    128  f546		       85 09		      sta	COLUBK	; 15
    129  f548
    130  f548							; 8 cycles to prepare tart graphics
    131  f548		       b1 96		      lda	(TartGfxPtr),y	; 20
    132  f54a		       85 0e		      sta	PF1	; 23
    133  f54c
    134  f54c							; 5 cycles to set tart color
    135  f54c		       a9 4a		      lda	#COL_CAT_TART	; 25
    136  f54e		       85 08		      sta	COLUPF	; 28
    137  f550
    138  f550							; 3 cycles to clear BK color to black
    139  f550							; x is pre-loaded with 0, the color black
    140  f550		       86 09		      stx	COLUBK	; 31
    141  f552
    142  f552							; 13 cycles to prepare 2nd food item's graphics
    143  f552		       b1 ba		      lda	(FoodGfxPtr2),y	; 36
    144  f554		       ba		      tsx		; 38
    145  f555		       85 1c		      sta	GRP1	; 41
    146  f557		       86 07		      stx	COLUP1	; 44
    147  f559
    148  f559							; 6 cycles to clear PF color to black
    149  f559		       a2 00		      ldx	#COL_BACKGROUND	; 46
    150  f55b		       8e 08 00 	      stx.w	COLUPF	; 50
    151  f55e
    152  f55e							; 5 cycles to finish the loop mechanism
    153  f55e		       88		      dey		; 52
    154  f55f		       10 d1		      bpl	.KernelLoop2	; 55/54
    155  f561
    156  f561							; exactly 76 cycles total
    157  f561
    158  f561				   .Nanny
    159  f561
    160  f561		       85 02		      sta	WSYNC
    161  f563
    162  f563		       e6 b6		      inc	CurrentRow
    163  f565
    164  f565		       86 1c		      stx	GRP1
    165  f567
    166  f567
    167  f567
    168  f567
    169  f567							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    170  f567							; cat with the rainbow. In order to align player 1 for the next row's
    171  f567							; food items, it will be neccesary to have three versions of this kernel,
    172  f567							; one for each of the three 60-color-clock spaced positions to reset.
    173  f567							; HMOVE will be written to on the first four scanlines. With a maximum
    174  f567							; movement of 15 color-clocks per scanline, this will allow a movement of
    175  f567							; up to 60 color clocks. With three versions of the kernel, it should be
    176  f567							; possible to put player 1 anywhere on the screen.
    177  f567
    178  f567		       a5 b1		      lda	ThrobColor+0
    179  f569		       85 09		      sta	COLUBK
    180  f56b		       85 08		      sta	COLUPF
    181  f56d		       a2 00		      ldx	#0
    182  f56f		       86 1b		      stx	GRP0
    183  f571		       86 1c		      stx	GRP1
    184  f573
    185  f573		       a2 ff		      ldx	#$FF
    186  f575		       9a		      txs
    187  f576
    188  f576		       85 02		      sta	WSYNC
    189  f578
    190  f578		       a5 b2		      lda	ThrobColor+1
    191  f57a		       85 09		      sta	COLUBK
    192  f57c		       85 08		      sta	COLUPF
    193  f57e		       85 02		      sta	WSYNC
    194  f580
    195  f580		       a5 b3		      lda	ThrobColor+2
    196  f582		       85 09		      sta	COLUBK
    197  f584		       85 08		      sta	COLUPF
    198  f586		       85 02		      sta	WSYNC
    199  f588
    200  f588		       a5 b2		      lda	ThrobColor+1
    201  f58a		       85 09		      sta	COLUBK
    202  f58c		       85 08		      sta	COLUPF
    203  f58e		       85 02		      sta	WSYNC
    204  f590
    205  f590		       a5 b1		      lda	ThrobColor+0
    206  f592		       85 09		      sta	COLUBK
    207  f594		       85 08		      sta	COLUPF
    208  f596		       85 02		      sta	WSYNC
    209  f598
    210  f598							; Then output 14 lines to draw the next row, exactly the same way as the
    211  f598							; previous one. It will be neccesary to have multiple versions of this, as well,
    212  f598							; since GRP1 needs to be updated at the correct time depending on the position
    213  f598							; of player 1.
    214  f598
    215  f598		       a9 00		      lda	#COL_BACKGROUND
    216  f59a		       85 09		      sta	COLUBK
    217  f59c		       85 08		      sta	COLUPF
    218  f59e
    219  f59e		       a0 0e		      ldy	#14
    220  f5a0				   .Loop3
    221  f5a0		       85 02		      sta	WSYNC
    222  f5a2		       88		      dey
    223  f5a3		       d0 fb		      bne	.Loop3
    224  f5a5
    225  f5a5							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    226  f5a5							; Use this time to prepare the next row's food item pointers (unless this is
    227  f5a5							; the last row). If this is the last row, skip over LoRows.
    228  f5a5
    229  f5a5		       a5 b1		      lda	ThrobColor+0
    230  f5a7		       85 09		      sta	COLUBK
    231  f5a9		       85 08		      sta	COLUPF
    232  f5ab		       85 02		      sta	WSYNC
    233  f5ad
    234  f5ad							; If the cat is at the very bottom of the screen, don't disable the
    235  f5ad							; missile/player graphics until after they are drawn, so they don't get
    236  f5ad							; clipped at the bottom of the screen. An easy way to do this would be to
    237  f5ad							; simply disable them after they would have been drawn, whether they are
    238  f5ad							; already disabled or not.
    239  f5ad
    240  f5ad
    241  f5ad
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  f5ad					      include	code/Gameplay Kernel/LoRows.asm
      1  f5ad							; Draw all the rows below the cat's two rows.
      2  f5ad				   LoRows     SUBROUTINE
      3  f5ad
      4  f5ad							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      5  f5ad							; player 1 for the next row's food items.
      6  f5ad
      7  f5ad		       a5 b2		      lda	ThrobColor+1
      8  f5af		       85 09		      sta	COLUBK
      9  f5b1		       85 08		      sta	COLUPF
     10  f5b3		       85 02		      sta	WSYNC
     11  f5b5
     12  f5b5		       a5 b3		      lda	ThrobColor+2
     13  f5b7		       85 09		      sta	COLUBK
     14  f5b9		       85 08		      sta	COLUPF
     15  f5bb		       85 02		      sta	WSYNC
     16  f5bd
     17  f5bd		       a5 b2		      lda	ThrobColor+1
     18  f5bf		       85 09		      sta	COLUBK
     19  f5c1		       85 08		      sta	COLUPF
     20  f5c3		       85 02		      sta	WSYNC
     21  f5c5
     22  f5c5		       a5 b1		      lda	ThrobColor+0
     23  f5c7		       85 09		      sta	COLUBK
     24  f5c9		       85 08		      sta	COLUPF
     25  f5cb
     26  f5cb							; Output 14 lines to draw a row, exactly the same as in HiRows.
     27  f5cb							; It may be possible to code this as a subroutine to save ROM space.
     28  f5cb
     29  f5cb		       a9 00		      lda	#COL_BACKGROUND	; 02
     30  f5cd		       85 09		      sta	COLUBK	; 05
     31  f5cf		       85 08		      sta	COLUPF	; 08
     32  f5d1
     33  f5d1		       a4 b6		      ldy	CurrentRow	; 11
     34  f5d3
     35  f5d3		       b9 9c 00 	      lda	FoodItemL,y	; 15
     36  f5d6		       29 f0		      and	#$F0	; 17
     37  f5d8		       85 b7		      sta	FoodGfxPtr1	; 20
     38  f5da		       aa		      tax		; 22
     39  f5db		       bd 0e fa 	      lda	FoodGfx+14,x	; 26
     40  f5de		       85 b9		      sta	FoodColor1	; 29
     41  f5e0
     42  f5e0		       b9 a3 00 	      lda	FoodItemR,y	; 33
     43  f5e3		       29 f0		      and	#$F0	; 36
     44  f5e5		       85 ba		      sta	FoodGfxPtr2	; 38
     45  f5e7		       aa		      tax		; 40
     46  f5e8		       bd 0e fa 	      lda	FoodGfx+14,x	; 44
     47  f5eb		       85 bc		      sta	FoodColor2	; 47
     48  f5ed
     49  f5ed		       b9 aa 00 	      lda	FoodPosX,y	; 51
     50  f5f0		       85 b5		      sta	Temp	; 54
     51  f5f2
     52  f5f2		       a0 0d		      ldy	#13	; 56
     53  f5f4
     54  f5f4				   .FrootLoop
     55  f5f4		       a9 00		      lda	#COL_BACKGROUND
     56  f5f6		       85 02		      sta	WSYNC
     57  f5f8
     58  f5f8
     59  f5f8							; After that, output 14 lines to draw a single row with food items,
     60  f5f8							; but without drawing the cat. The food graphics will be updated every line,
     61  f5f8							; but there will probably not be enough time to also update the food colors
     62  f5f8							; every line throughout the kernel.
     63  f5f8
     64  f5f8
     65  f5f8		       85 09		      sta	COLUBK	; 03
     66  f5fa		       85 08		      sta	COLUPF	; 06
     67  f5fc
     68  f5fc		       b1 b7		      lda	(FoodGfxPtr1),y	; 11
     69  f5fe		       85 1c		      sta	GRP1	; 14
     70  f600		       a5 b9		      lda	FoodColor1	; 17
     71  f602		       85 07		      sta	COLUP1	; 20
     72  f604
     73  f604		       a5 b5		      lda	Temp	; 23
     74  f606
     75  f606		       38		      sec		; 25
     76  f607				   .WaitLoop
     77  f607		       e9 17		      sbc	#23	; 27
     78  f609		       b0 fc		      bcs	.WaitLoop	; 29
     79  f60b
     80  f60b		       b1 ba		      lda	(FoodGfxPtr2),y	; 34
     81  f60d		       a6 bc		      ldx	FoodColor2	; 37
     82  f60f		       85 1c		      sta	GRP1	; 40
     83  f611		       86 07		      stx	COLUP1	; 43
     84  f613
     85  f613		       88		      dey
     86  f614		       10 de		      bpl	.FrootLoop
     87  f616
     88  f616		       e6 b6		      inc	CurrentRow
     89  f618
     90  f618		       85 02		      sta	WSYNC
     91  f61a
     92  f61a							; Lastly, output the a single line for the next "throb" line.
     93  f61a							; Use this time to prepare the next row's food item pointers (unless this is
     94  f61a							; the last row). If this is not the last row, loop to LoRows for the next row.
     95  f61a
     96  f61a		       a5 b1		      lda	ThrobColor+0
     97  f61c		       85 09		      sta	COLUBK
     98  f61e		       85 08		      sta	COLUPF
     99  f620
    100  f620		       c6 9b		      dec	PostCatRows
    101  f622		       85 02		      sta	WSYNC
    102  f624		       d0 87		      bne	LoRows
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  f626					      include	code/ProgressHealthKernel.asm
      1  f626		       a5 b2		      lda	ThrobColor+1
      2  f628		       85 09		      sta	COLUBK
      3  f62a		       a9 00		      lda	#0
      4  f62c		       85 0d		      sta	PF0
      5  f62e		       85 0a		      sta	CTRLPF
      6  f630		       a9 06		      lda	#COL_CAT_FACE
      7  f632		       85 08		      sta	COLUPF
      8  f634
      0  f634					      SLEEP	32	; 53
      1  f634				   .CYCLES    SET	32
      2  f634
      3  f634				  -	      IF	.CYCLES < 2
      4  f634				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f634				  -	      ERR
      6  f634					      ENDIF
      7  f634
      8  f634				  -	      IF	.CYCLES & 1
      9  f634				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f634				  -	      nop	0
     11  f634				  -	      ELSE
     12  f634				  -	      bit	VSYNC
     13  f634				  -	      ENDIF
     14  f634				  -.CYCLES    SET	.CYCLES - 3
     15  f634					      ENDIF
     16  f634
     17  f634					      REPEAT	.CYCLES / 2
     18  f634		       ea		      nop
     17  f634					      REPEND
     18  f635		       ea		      nop
     17  f635					      REPEND
     18  f636		       ea		      nop
     17  f636					      REPEND
     18  f637		       ea		      nop
     17  f637					      REPEND
     18  f638		       ea		      nop
     17  f638					      REPEND
     18  f639		       ea		      nop
     17  f639					      REPEND
     18  f63a		       ea		      nop
     17  f63a					      REPEND
     18  f63b		       ea		      nop
     17  f63b					      REPEND
     18  f63c		       ea		      nop
     17  f63c					      REPEND
     18  f63d		       ea		      nop
     17  f63d					      REPEND
     18  f63e		       ea		      nop
     17  f63e					      REPEND
     18  f63f		       ea		      nop
     17  f63f					      REPEND
     18  f640		       ea		      nop
     17  f640					      REPEND
     18  f641		       ea		      nop
     17  f641					      REPEND
     18  f642		       ea		      nop
     17  f642					      REPEND
     18  f643		       ea		      nop
     19  f644					      REPEND
     10  f644
     11  f644		       a9 20		      lda	#$20	; 55
     12  f646		       85 20		      sta	HMP0	; 58
     13  f648		       a9 b0		      lda	#$B0	; 60
     14  f64a		       85 21		      sta	HMP1	; 63
     15  f64c
     16  f64c		       85 10		      sta	RESP0	; 66
     17  f64e		       85 11		      sta	RESP1	; 69
     18  f650
     19  f650		       a9 00		      lda	#$00	; 71
     20  f652
     21  f652		       85 2a		      sta	HMOVE	; 74
     22  f654
     23  f654		       85 06		      sta	COLUP0
     24  f656		       85 07		      sta	COLUP1
     25  f658
     26  f658		       a9 0e		      lda	#COL_SCOREBOARD
     27  f65a		       85 09		      sta	COLUBK
     28  f65c
     29  f65c		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  f65e		       85 04		      sta	NUSIZ0
     31  f660		       85 05		      sta	NUSIZ1
     32  f662
     33  f662		       a9 08		      lda	#REFP_TRUE
     34  f664		       85 0c		      sta	REFP1
     35  f666
     36  f666					      SUBROUTINE
     37  f666
     38  f666		       a0 04		      ldy	#4
     39  f668		       85 02		      sta	WSYNC
     40  f66a
     41  f66a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  f66a				   .HealthTop		; draw top of health
     43  f66a
     44  f66a		       a2 03		      ldx	#3
     45  f66c
     46  f66c				   .Loop
     47  f66c		       85 02		      sta	WSYNC
     48  f66e
     49  f66e		       b9 b8 f8 	      lda	HealthTopGfx,y	; 04
     50  f671		       85 1b		      sta	GRP0	; 07
     51  f673		       85 1c		      sta	GRP1	; 10
     52  f675		       a9 00		      lda	#$00	; 12
     53  f677		       85 0f		      sta	PF2	; 15
      0  f679					      SLEEP	26	; 37
      1  f679				   .CYCLES    SET	26
      2  f679
      3  f679				  -	      IF	.CYCLES < 2
      4  f679				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f679				  -	      ERR
      6  f679					      ENDIF
      7  f679
      8  f679				  -	      IF	.CYCLES & 1
      9  f679				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f679				  -	      nop	0
     11  f679				  -	      ELSE
     12  f679				  -	      bit	VSYNC
     13  f679				  -	      ENDIF
     14  f679				  -.CYCLES    SET	.CYCLES - 3
     15  f679					      ENDIF
     16  f679
     17  f679					      REPEAT	.CYCLES / 2
     18  f679		       ea		      nop
     17  f679					      REPEND
     18  f67a		       ea		      nop
     17  f67a					      REPEND
     18  f67b		       ea		      nop
     17  f67b					      REPEND
     18  f67c		       ea		      nop
     17  f67c					      REPEND
     18  f67d		       ea		      nop
     17  f67d					      REPEND
     18  f67e		       ea		      nop
     17  f67e					      REPEND
     18  f67f		       ea		      nop
     17  f67f					      REPEND
     18  f680		       ea		      nop
     17  f680					      REPEND
     18  f681		       ea		      nop
     17  f681					      REPEND
     18  f682		       ea		      nop
     17  f682					      REPEND
     18  f683		       ea		      nop
     17  f683					      REPEND
     18  f684		       ea		      nop
     17  f684					      REPEND
     18  f685		       ea		      nop
     19  f686					      REPEND
     55  f686		       b9 08 f9 	      lda	HealthBgGfx+8,y	; 41
     56  f689		       85 0f		      sta	PF2	; 44
     57  f68b
     58  f68b		       ca		      dex
     59  f68c		       d0 de		      bne	.Loop
     60  f68e
     61  f68e		       88		      dey
     62  f68f		       10 d9		      bpl	.HealthTop
     63  f691
     64  f691
     65  f691					      SUBROUTINE
     66  f691
     67  f691
     68  f691		       a0 03		      ldy	#3
     69  f693		       a2 03		      ldx	#3
     70  f695		       86 b5		      stx	Temp
     71  f697
     72  f697		       4c 00 f7 	      jmp	.HealthMiddle
     73  f69a
     74  f700		       00 00 00 00*	      ALIGN	$100	; align to page
     75  f700
     76  f700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  f700				   .HealthMiddle		; draw middle of health, with progress bar
     78  f700
     79  f700		       85 02		      sta	WSYNC
     80  f702				   .Loop
     81  f702		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     82  f704		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     83  f706
     84  f706		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     85  f708		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     86  f70a
     87  f70a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     88  f70c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     89  f70e
     90  f70e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     91  f710		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     92  f712
     93  f712		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     94  f714		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     95  f716
     96  f716		       b1 90		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     97  f718		       85 1b		      sta	GRP0	; 38 - for the left half of health
     98  f71a		       b1 92		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     99  f71c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    100  f71e
    101  f71e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    102  f720		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    103  f722		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    104  f724		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
    105  f727
    106  f727		       a9 0e		      lda	#COL_SCOREBOARD	; 60 - get the color for the background
    107  f729		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    108  f72c
    109  f72c		       ca		      dex		; 66
    110  f72d		       d0 d1		      bne	.HealthMiddle	; 68
    111  f72f
    112  f72f		       a6 b5		      ldx	Temp	; 71
    113  f731
    114  f731		       88		      dey		; 73
    115  f732		       10 ce		      bpl	.Loop	; 76 / 00
    116  f734
    117  f734
    118  f734
    119  f734
    120  f734
    121  f734
    122  f734
    123  f734
    124  f734
    125  f734					      SUBROUTINE
    126  f734
    127  f734
    128  f734		       a9 00		      lda	#0
    129  f736		       85 0d		      sta	PF0
    130  f738		       85 0e		      sta	PF1
    131  f73a
    132  f73a		       a0 07		      ldy	#7
    133  f73c
    134  f73c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  f73c				   .HealthBottom		; draw bottom of health
    136  f73c
    137  f73c		       a2 03		      ldx	#3
    138  f73e				   .Loop
    139  f73e		       b1 90		      lda	(HthGfxLPtr),y
    140  f740		       85 1b		      sta	GRP0
    141  f742		       b1 92		      lda	(HthGfxRPtr),y
    142  f744		       85 1c		      sta	GRP1
    143  f746		       a9 00		      lda	#$00
    144  f748		       85 0f		      sta	PF2
    145  f74a
      0  f74a					      SLEEP	14
      1  f74a				   .CYCLES    SET	14
      2  f74a
      3  f74a				  -	      IF	.CYCLES < 2
      4  f74a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f74a				  -	      ERR
      6  f74a					      ENDIF
      7  f74a
      8  f74a				  -	      IF	.CYCLES & 1
      9  f74a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f74a				  -	      nop	0
     11  f74a				  -	      ELSE
     12  f74a				  -	      bit	VSYNC
     13  f74a				  -	      ENDIF
     14  f74a				  -.CYCLES    SET	.CYCLES - 3
     15  f74a					      ENDIF
     16  f74a
     17  f74a					      REPEAT	.CYCLES / 2
     18  f74a		       ea		      nop
     17  f74a					      REPEND
     18  f74b		       ea		      nop
     17  f74b					      REPEND
     18  f74c		       ea		      nop
     17  f74c					      REPEND
     18  f74d		       ea		      nop
     17  f74d					      REPEND
     18  f74e		       ea		      nop
     17  f74e					      REPEND
     18  f74f		       ea		      nop
     17  f74f					      REPEND
     18  f750		       ea		      nop
     19  f751					      REPEND
    147  f751
    148  f751		       b9 fc f8 	      lda	HealthBgGfx-4,y
    149  f754		       85 0f		      sta	PF2
    150  f756		       85 02		      sta	WSYNC
    151  f758
    152  f758		       ca		      dex
    153  f759		       d0 e3		      bne	.Loop
    154  f75b
    155  f75b		       88		      dey
    156  f75c		       c0 03		      cpy	#3
    157  f75e		       d0 dc		      bne	.HealthBottom
    158  f760
    159  f760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    160  f760
    161  f760		       a9 00		      lda	#$00
    162  f762		       85 1b		      sta	GRP0
    163  f764		       85 1c		      sta	GRP1
    164  f766		       85 0b		      sta	REFP0
    165  f768		       85 0c		      sta	REFP1
    166  f76a		       85 0f		      sta	PF2
    167  f76c
    168  f76c		       85 02		      sta	WSYNC
    169  f76e
------- FILE code/Kernel.asm
     13  f76e
     14  f76e		       a9 02		      lda	#2
     15  f770		       85 01		      sta	VBLANK	; disable display
     16  f772
     17  f772		       4c 0b f0 	      jmp	Overscan
------- FILE main.asm
     69  f775
     70  f775				   Z_EndOfCode		; label to show how much ROM is used for the code
     71  f775
     72  f775
     73  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     74  f775							; Data Tables
     75  f775							;
     76  f775							; Include data tables
     77  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     78  f775
     79  f775							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  f775					      include	data/Graphics.asm
      1  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f775							; Graphics Tables
      3  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f775
      5  f800		       00 00 00 00*	      ALIGN	$100	; align to page
      6  f800
      7  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  f800							; Digit graphics for the scoreboard
      9  f800							;
     10  f800							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  f800							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  f800							; to normal when it is pulled from the stack.
     13  f800							;
     14  f800							; Table takes up $50 (80) bytes of ROM
     15  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f800
     17  f800				   ScoreGfx
     18  f800
     19  f800		       1c		      .byte.b	%00011100	; digit 0
     20  f801		       26		      .byte.b	%00100110
     21  f802		       63		      .byte.b	%01100011
     22  f803		       63		      .byte.b	%01100011
     23  f804		       63		      .byte.b	%01100011
     24  f805		       32		      .byte.b	%00110010
     25  f806		       1c		      .byte.b	%00011100
     26  f807		       00		      .byte.b	%00000000
     27  f808
     28  f808							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  f808
     30  f808		       18		      .byte.b	%00011000	; digit 1
     31  f809		       38		      .byte.b	%00111000
     32  f80a		       18		      .byte.b	%00011000
     33  f80b		       18		      .byte.b	%00011000
     34  f80c		       18		      .byte.b	%00011000
     35  f80d		       18		      .byte.b	%00011000
     36  f80e		       7e		      .byte.b	%01111110
     37  f80f		       00		      .byte.b	%00000000
     38  f810
     39  f810							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  f810
     41  f810		       3e		      .byte.b	%00111110	; digit 2
     42  f811		       63		      .byte.b	%01100011
     43  f812		       07		      .byte.b	%00000111
     44  f813		       1e		      .byte.b	%00011110
     45  f814		       3c		      .byte.b	%00111100
     46  f815		       70		      .byte.b	%01110000
     47  f816		       7f		      .byte.b	%01111111
     48  f817		       00		      .byte.b	%00000000
     49  f818
     50  f818							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  f818
     52  f818		       7f		      .byte.b	%01111111	; digit 3
     53  f819		       06		      .byte.b	%00000110
     54  f81a		       0c		      .byte.b	%00001100
     55  f81b		       1e		      .byte.b	%00011110
     56  f81c		       03		      .byte.b	%00000011
     57  f81d		       63		      .byte.b	%01100011
     58  f81e		       3e		      .byte.b	%00111110
     59  f81f		       00		      .byte.b	%00000000
     60  f820
     61  f820							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  f820
     63  f820		       0e		      .byte.b	%00001110	; digit 4
     64  f821		       1e		      .byte.b	%00011110
     65  f822		       36		      .byte.b	%00110110
     66  f823		       66		      .byte.b	%01100110
     67  f824		       7f		      .byte.b	%01111111
     68  f825		       06		      .byte.b	%00000110
     69  f826		       06		      .byte.b	%00000110
     70  f827		       00		      .byte.b	%00000000
     71  f828
     72  f828							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  f828
     74  f828		       7e		      .byte.b	%01111110	; digit 5
     75  f829		       60		      .byte.b	%01100000
     76  f82a		       7e		      .byte.b	%01111110
     77  f82b		       03		      .byte.b	%00000011
     78  f82c		       03		      .byte.b	%00000011
     79  f82d		       63		      .byte.b	%01100011
     80  f82e		       3e		      .byte.b	%00111110
     81  f82f		       00		      .byte.b	%00000000
     82  f830
     83  f830							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  f830
     85  f830		       1e		      .byte.b	%00011110	; digit 6
     86  f831		       30		      .byte.b	%00110000
     87  f832		       60		      .byte.b	%01100000
     88  f833		       7e		      .byte.b	%01111110
     89  f834		       63		      .byte.b	%01100011
     90  f835		       63		      .byte.b	%01100011
     91  f836		       3e		      .byte.b	%00111110
     92  f837		       00		      .byte.b	%00000000
     93  f838
     94  f838							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  f838
     96  f838		       7f		      .byte.b	%01111111	; digit 7
     97  f839		       03		      .byte.b	%00000011
     98  f83a		       06		      .byte.b	%00000110
     99  f83b		       0c		      .byte.b	%00001100
    100  f83c		       18		      .byte.b	%00011000
    101  f83d		       18		      .byte.b	%00011000
    102  f83e		       18		      .byte.b	%00011000
    103  f83f		       00		      .byte.b	%00000000
    104  f840
    105  f840							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f840
    107  f840		       3c		      .byte.b	%00111100	; digit 8
    108  f841		       62		      .byte.b	%01100010
    109  f842		       72		      .byte.b	%01110010
    110  f843		       3c		      .byte.b	%00111100
    111  f844		       43		      .byte.b	%01000011
    112  f845		       43		      .byte.b	%01000011
    113  f846		       3e		      .byte.b	%00111110
    114  f847		       00		      .byte.b	%00000000
    115  f848
    116  f848							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  f848
    118  f848		       3e		      .byte.b	%00111110	; digit 9
    119  f849		       63		      .byte.b	%01100011
    120  f84a		       63		      .byte.b	%01100011
    121  f84b		       3f		      .byte.b	%00111111
    122  f84c		       03		      .byte.b	%00000011
    123  f84d		       06		      .byte.b	%00000110
    124  f84e		       3c		      .byte.b	%00111100
    125  f84f		       00		      .byte.b	%00000000
    126  f850
    127  f850
    128  f850
    129  f850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  f850							; NUSIZx and ENAMx data for level counter graphics
    131  f850							;
    132  f850							; This table enables or disables each missile and adjusts the left missile's
    133  f850							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  f850							; left digit. (The right digit is drawn with the ball.)
    135  f850							; Bit-1 is used to enable or disable the left missile,
    136  f850							; and bit-0 is used to enable or disable the right missile.
    137  f850							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  f850							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  f850							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  f850							; correct for the score display.
    141  f850							;
    142  f850							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  f850							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  f850							; to normal when it is pulled from the stack.
    145  f850							;
    146  f850							; Table takes up $50 (80) bytes of ROM
    147  f850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  f850
    149  f850				   LevelGfx
    150  f850
    151  f850							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  f850							; ^^^^^^^^^
    153  f850		       8f		      .byte.b	%10001111	; digit 0
    154  f851		       4f		      .byte.b	%01001111
    155  f852		       4f		      .byte.b	%01001111
    156  f853		       4f		      .byte.b	%01001111
    157  f854		       4f		      .byte.b	%01001111
    158  f855		       4f		      .byte.b	%01001111
    159  f856		       8f		      .byte.b	%10001111
    160  f857		       00		      .byte.b	%00000000
    161  f858
    162  f858							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  f858
    164  f858							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  f858							; ^^^^^^^^^
    166  f858		       8d		      .byte.b	%10001101	; digit 1
    167  f859		       4d		      .byte.b	%01001101
    168  f85a		       4d		      .byte.b	%01001101
    169  f85b		       8d		      .byte.b	%10001101
    170  f85c		       4d		      .byte.b	%01001101
    171  f85d		       4d		      .byte.b	%01001101
    172  f85e		       8d		      .byte.b	%10001101
    173  f85f		       00		      .byte.b	%00000000
    174  f860
    175  f860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  f860
    177  f860							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  f860							; ^^^^^^^^^
    179  f860		       8f		      .byte.b	%10001111	; digit 2
    180  f861		       4d		      .byte.b	%01001101
    181  f862		       4d		      .byte.b	%01001101
    182  f863		       8f		      .byte.b	%10001111
    183  f864		       4e		      .byte.b	%01001110
    184  f865		       4e		      .byte.b	%01001110
    185  f866		       8f		      .byte.b	%10001111
    186  f867		       00		      .byte.b	%00000000
    187  f868
    188  f868							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f868
    190  f868							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  f868							; ^^^^^^^^^
    192  f868		       8f		      .byte.b	%10001111	; digit 3
    193  f869		       4d		      .byte.b	%01001101
    194  f86a		       4d		      .byte.b	%01001101
    195  f86b		       8f		      .byte.b	%10001111
    196  f86c		       4d		      .byte.b	%01001101
    197  f86d		       4d		      .byte.b	%01001101
    198  f86e		       8f		      .byte.b	%10001111
    199  f86f		       00		      .byte.b	%00000000
    200  f870
    201  f870							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  f870
    203  f870							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  f870							; ^^^^^^^^^
    205  f870		       4f		      .byte.b	%01001111	; digit 4
    206  f871		       4f		      .byte.b	%01001111
    207  f872		       4f		      .byte.b	%01001111
    208  f873		       8f		      .byte.b	%10001111
    209  f874		       4d		      .byte.b	%01001101
    210  f875		       4d		      .byte.b	%01001101
    211  f876		       4d		      .byte.b	%01001101
    212  f877		       00		      .byte.b	%00000000
    213  f878
    214  f878							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f878
    216  f878							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  f878							; ^^^^^^^^^
    218  f878		       8f		      .byte.b	%10001111	; digit 5
    219  f879		       4e		      .byte.b	%01001110
    220  f87a		       4e		      .byte.b	%01001110
    221  f87b		       8f		      .byte.b	%10001111
    222  f87c		       4d		      .byte.b	%01001101
    223  f87d		       4d		      .byte.b	%01001101
    224  f87e		       8f		      .byte.b	%10001111
    225  f87f		       00		      .byte.b	%00000000
    226  f880
    227  f880							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f880
    229  f880							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  f880							; ^^^^^^^^^
    231  f880		       8f		      .byte.b	%10001111	; digit 6
    232  f881		       4e		      .byte.b	%01001110
    233  f882		       4e		      .byte.b	%01001110
    234  f883		       8f		      .byte.b	%10001111
    235  f884		       4f		      .byte.b	%01001111
    236  f885		       4f		      .byte.b	%01001111
    237  f886		       8f		      .byte.b	%10001111
    238  f887		       00		      .byte.b	%00000000
    239  f888
    240  f888							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  f888
    242  f888							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  f888							; ^^^^^^^^^
    244  f888		       8f		      .byte.b	%10001111	; digit 7
    245  f889		       4d		      .byte.b	%01001101
    246  f88a		       4d		      .byte.b	%01001101
    247  f88b		       8d		      .byte.b	%10001101
    248  f88c		       4d		      .byte.b	%01001101
    249  f88d		       4d		      .byte.b	%01001101
    250  f88e		       8d		      .byte.b	%10001101
    251  f88f		       00		      .byte.b	%00000000
    252  f890
    253  f890							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f890
    255  f890							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  f890							; ^^^^^^^^^
    257  f890		       8f		      .byte.b	%10001111	; digit 8
    258  f891		       4f		      .byte.b	%01001111
    259  f892		       4f		      .byte.b	%01001111
    260  f893		       8f		      .byte.b	%10001111
    261  f894		       4f		      .byte.b	%01001111
    262  f895		       4f		      .byte.b	%01001111
    263  f896		       8f		      .byte.b	%10001111
    264  f897		       00		      .byte.b	%00000000
    265  f898
    266  f898							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  f898
    268  f898							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  f898							; ^^^^^^^^^
    270  f898		       8f		      .byte.b	%10001111	; digit 9
    271  f899		       4f		      .byte.b	%01001111
    272  f89a		       4f		      .byte.b	%01001111
    273  f89b		       8f		      .byte.b	%10001111
    274  f89c		       4d		      .byte.b	%01001101
    275  f89d		       4d		      .byte.b	%01001101
    276  f89e		       8f		      .byte.b	%10001111
    277  f89f		       00		      .byte.b	%00000000
    278  f8a0
    279  f8a0
    280  f8a0
    281  f8a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  f8a0							; Throbbing Line Graphics
    283  f8a0							;
    284  f8a0							; Graphics tables for the throbbing lines
    285  f8a0							;
    286  f8a0							; Table takes up $18 (24) bytes of ROM
    287  f8a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  f8a0
    289  f8a0				   LineThrobGfx
    290  f8a0
    291  f8a0		       00		      .byte.b	COL_LINES + LUM_0	; frame 0
    292  f8a1		       02		      .byte.b	COL_LINES + LUM_2
    293  f8a2		       04		      .byte.b	COL_LINES + LUM_4
    294  f8a3
    295  f8a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  f8a3
    297  f8a3		       00		      .byte.b	COL_LINES + LUM_0	; frame 1
    298  f8a4		       04		      .byte.b	COL_LINES + LUM_4
    299  f8a5		       06		      .byte.b	COL_LINES + LUM_6
    300  f8a6
    301  f8a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  f8a6
    303  f8a6		       00		      .byte.b	COL_LINES + LUM_0	; frame 2
    304  f8a7		       06		      .byte.b	COL_LINES + LUM_6
    305  f8a8		       08		      .byte.b	COL_LINES + LUM_8
    306  f8a9
    307  f8a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  f8a9
    309  f8a9		       02		      .byte.b	COL_LINES + LUM_2	; frame 3
    310  f8aa		       08		      .byte.b	COL_LINES + LUM_8
    311  f8ab		       0c		      .byte.b	COL_LINES + LUM_C
    312  f8ac
    313  f8ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  f8ac
    315  f8ac		       04		      .byte.b	COL_LINES + LUM_4	; frame 4
    316  f8ad		       0a		      .byte.b	COL_LINES + LUM_A
    317  f8ae		       0e		      .byte.b	COL_LINES + LUM_E
    318  f8af
    319  f8af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  f8af
    321  f8af		       02		      .byte.b	COL_LINES + LUM_2	; frame 5
    322  f8b0		       08		      .byte.b	COL_LINES + LUM_8
    323  f8b1		       0c		      .byte.b	COL_LINES + LUM_C
    324  f8b2
    325  f8b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  f8b2
    327  f8b2		       00		      .byte.b	COL_LINES + LUM_0	; frame 6
    328  f8b3		       06		      .byte.b	COL_LINES + LUM_6
    329  f8b4		       0a		      .byte.b	COL_LINES + LUM_A
    330  f8b5
    331  f8b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  f8b5
    333  f8b5		       00		      .byte.b	COL_LINES + LUM_0	; frame 7
    334  f8b6		       04		      .byte.b	COL_LINES + LUM_4
    335  f8b7		       06		      .byte.b	COL_LINES + LUM_6
    336  f8b8
    337  f8b8
    338  f8b8
    339  f8b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  f8b8							; Health Graphics
    341  f8b8							;
    342  f8b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  f8b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  f8b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  f8b8							; the graphics for the lower right are flipped.
    346  f8b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  f8b8							; are set up in a confusing way. They are upside-down, but they are split
    348  f8b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  f8b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  f8b8							; LOWER 4 lines of graphics (also upside-down).
    351  f8b8							; The last table (HealthBgGfx) is for the grey background of the
    352  f8b8							; health graphics drawn with the playfield.
    353  f8b8							;
    354  f8b8							; Table takes up $45 (69) bytes of ROM
    355  f8b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  f8b8
    357  f8b8				   HealthTopGfx
    358  f8b8
    359  f8b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  f8b9		       43		      .byte.b	%01000011
    361  f8ba		       44		      .byte.b	%01000100
    362  f8bb		       48		      .byte.b	%01001000
    363  f8bc		       30		      .byte.b	%00110000
    364  f8bd
    365  f8bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  f8bd				   HealthLeftGfx
    367  f8bd
    368  f8bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  f8be		       8c		      .byte.b	%10001100
    370  f8bf		       84		      .byte.b	%10000100
    371  f8c0		       80		      .byte.b	%10000000
    372  f8c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  f8c2		       20		      .byte.b	%00100000
    374  f8c3		       47		      .byte.b	%01000111
    375  f8c4		       84		      .byte.b	%10000100
    376  f8c5
    377  f8c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  f8c5
    379  f8c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  f8c6		       8c		      .byte.b	%10001100
    381  f8c7		       84		      .byte.b	%10000100
    382  f8c8		       80		      .byte.b	%10000000
    383  f8c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  f8ca		       20		      .byte.b	%00100000
    385  f8cb		       47		      .byte.b	%01000111
    386  f8cc		       80		      .byte.b	%10000000
    387  f8cd
    388  f8cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  f8cd
    390  f8cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  f8ce		       8c		      .byte.b	%10001100
    392  f8cf		       84		      .byte.b	%10000100
    393  f8d0		       80		      .byte.b	%10000000
    394  f8d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  f8d2		       20		      .byte.b	%00100000
    396  f8d3		       44		      .byte.b	%01000100
    397  f8d4		       87		      .byte.b	%10000111
    398  f8d5
    399  f8d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  f8d5
    401  f8d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  f8d6		       9c		      .byte.b	%10011100
    403  f8d7		       80		      .byte.b	%10000000
    404  f8d8		       80		      .byte.b	%10000000
    405  f8d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  f8da		       20		      .byte.b	%00100000
    407  f8db		       46		      .byte.b	%01000110
    408  f8dc		       81		      .byte.b	%10000001
    409  f8dd
    410  f8dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  f8dd				   HealthRightGfx
    412  f8dd
    413  f8dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  f8de		       9a		      .byte.b	%10011010
    415  f8df		       90		      .byte.b	%10010000
    416  f8e0		       80		      .byte.b	%10000000
    417  f8e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  f8e2		       20		      .byte.b	%00100000
    419  f8e3		       4f		      .byte.b	%01001111
    420  f8e4		       89		      .byte.b	%10001001
    421  f8e5
    422  f8e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  f8e5
    424  f8e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  f8e6		       9a		      .byte.b	%10011010
    426  f8e7		       90		      .byte.b	%10010000
    427  f8e8		       80		      .byte.b	%10000000
    428  f8e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  f8ea		       20		      .byte.b	%00100000
    430  f8eb		       4f		      .byte.b	%01001111
    431  f8ec		       80		      .byte.b	%10000000
    432  f8ed
    433  f8ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  f8ed
    435  f8ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  f8ee		       9a		      .byte.b	%10011010
    437  f8ef		       88		      .byte.b	%10001000
    438  f8f0		       80		      .byte.b	%10000000
    439  f8f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  f8f2		       20		      .byte.b	%00100000
    441  f8f3		       48		      .byte.b	%01001000
    442  f8f4		       8f		      .byte.b	%10001111
    443  f8f5
    444  f8f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  f8f5
    446  f8f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  f8f6		       ba		      .byte.b	%10111010
    448  f8f7		       80		      .byte.b	%10000000
    449  f8f8		       80		      .byte.b	%10000000
    450  f8f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  f8fa		       20		      .byte.b	%00100000
    452  f8fb		       4c		      .byte.b	%01001100
    453  f8fc		       83		      .byte.b	%10000011
    454  f8fd
    455  f8fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  f8fd
    457  f8fd							; 3 bytes left in this page
    458  f8fd
    459  f900		       00 00 00 	      ALIGN	$100	; align to page
    460  f900
    461  f900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  f900				   HealthBgGfx
    463  f900							; 13 bytes
    464  f900
    465  f900		       00		      .byte.b	%00000000
    466  f901		       3e		      .byte.b	%00111110
    467  f902		       7f		      .byte.b	%01111111
    468  f903		       7f		      .byte.b	%01111111
    469  f904		       7f		      .byte.b	%01111111
    470  f905		       7f		      .byte.b	%01111111
    471  f906		       7f		      .byte.b	%01111111
    472  f907		       7f		      .byte.b	%01111111
    473  f908		       7f		      .byte.b	%01111111
    474  f909		       7f		      .byte.b	%01111111
    475  f90a		       63		      .byte.b	%01100011
    476  f90b		       63		      .byte.b	%01100011
    477  f90c		       00		      .byte.b	%00000000
    478  f90d
    479  f90d
    480  f90d
    481  f90d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  f90d							; Progress Bar Graphics
    483  f90d							;
    484  f90d							;
    485  f90d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  f90d
    487  f90d				   PgBarGfx
    488  f90d							; 9 bytes
    489  f90d
    490  f90d		       ff		      .byte.b	%11111111	; 1st PF1
    491  f90e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  f90f		       3f		      .byte.b	%00111111
    493  f910		       1f		      .byte.b	%00011111
    494  f911		       0f		      .byte.b	%00001111
    495  f912		       07		      .byte.b	%00000111
    496  f913		       03		      .byte.b	%00000011
    497  f914		       01		      .byte.b	%00000001
    498  f915		       00		      .byte.b	%00000000
    499  f916
    500  f916							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  f916				   PgBarGfxR
    502  f916							; 8 bytes
    503  f916
    504  f916		       ff		      .byte.b	%11111111	; PF2
    505  f917		       fe		      .byte.b	%11111110
    506  f918		       fc		      .byte.b	%11111100
    507  f919		       f8		      .byte.b	%11111000
    508  f91a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  f91b		       e0		      .byte.b	%11100000	; 1st PF0
    510  f91c		       c0		      .byte.b	%11000000
    511  f91d		       80		      .byte.b	%10000000
    512  f91e
    513  f91e
    514  f91e
    515  f91e				   FineHmove73
    516  f91e
    517  f91e		       70 60 50 40	      HEX	70 60 50 40
    518  f922		       30 20 10 00	      HEX	30 20 10 00
    519  f926		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  f92a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  f92e
    522  f92e
    523  f92e
    524  f92e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  f92e							; Cat Rainbow Graphics
    526  f92e							;
    527  f92e							;
    528  f92e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  f92e
    530  f92e				   RainbowGfx
    531  f92e							; 4 bytes
    532  f92e
    533  f92e							;.byte %10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  f92e
    535  f92e							;.byte %01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  f92e
    537  f92e							;.byte %11000000	; rainbow PF0 gfx for moving up
    538  f92e
    539  f92e							;.byte %00110000	; rainbow PF0 gfx for moving down
    540  f92e
    541  f92e				   RainbowCol
    542  f92e
    543  f92e		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    544  f944
    545  f944		       36		      .byte.b	$36
    546  f945		       36		      .byte.b	$36
    547  f946
    548  f946		       28		      .byte.b	$28
    549  f947		       28		      .byte.b	$28
    550  f948
    551  f948		       1e		      .byte.b	$1E
    552  f949		       1e		      .byte.b	$1E
    553  f94a
    554  f94a		       cc		      .byte.b	$CC
    555  f94b		       cc		      .byte.b	$CC
    556  f94c
    557  f94c		       72		      .byte.b	$72
    558  f94d		       72		      .byte.b	$72
    559  f94e
    560  f94e		       54		      .byte.b	$54
    561  f94f		       54		      .byte.b	$54
    562  f950
    563  f950		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    564  f966
    565  f966				   CatFaceGfx
    566  f966
    567  f966		       36		      .byte.b	%00110110
    568  f967		       36		      .byte.b	%00110110
    569  f968		       00		      .byte.b	%00000000
    570  f969		       7e		      .byte.b	%01111110
    571  f96a		       c1		      .byte.b	%11000001
    572  f96b		       d5		      .byte.b	%11010101
    573  f96c		       ff		      .byte.b	%11111111
    574  f96d		       d5		      .byte.b	%11010101
    575  f96e		       dd		      .byte.b	%11011101
    576  f96f		       ff		      .byte.b	%11111111
    577  f970		       66		      .byte.b	%01100110
    578  f971		       66		      .byte.b	%01100110
    579  f972		       42		      .byte.b	%01000010
    580  f973
    581  f973		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    582  f988							;140 bytes used in page
    583  f988
    584  fa00		       00 00 00 00*	      ALIGN	$100
    585  fa00
    586  fa00				   FoodGfx
    587  fa00
    588  fa00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  fa00							; 0 - blank
    590  fa00
    591  fa00		       00		      .byte.b	%00000000
    592  fa01		       00		      .byte.b	%00000000
    593  fa02		       00		      .byte.b	%00000000
    594  fa03		       00		      .byte.b	%00000000
    595  fa04		       00		      .byte.b	%00000000
    596  fa05		       00		      .byte.b	%00000000
    597  fa06		       00		      .byte.b	%00000000
    598  fa07		       00		      .byte.b	%00000000
    599  fa08		       00		      .byte.b	%00000000
    600  fa09		       00		      .byte.b	%00000000
    601  fa0a		       00		      .byte.b	%00000000
    602  fa0b		       00		      .byte.b	%00000000
    603  fa0c		       00		      .byte.b	%00000000
    604  fa0d		       00		      .byte.b	%00000000
    605  fa0e
    606  fa0e		       0e		      .byte.b	$0E
    607  fa0f		       00		      .byte.b	0
    608  fa10
    609  fa10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  fa10							; 1 - apple
    611  fa10
    612  fa10		       34		      .byte.b	%00110100
    613  fa11		       7e		      .byte.b	%01111110
    614  fa12		       7e		      .byte.b	%01111110
    615  fa13		       ff		      .byte.b	%11111111
    616  fa14		       ff		      .byte.b	%11111111
    617  fa15		       ff		      .byte.b	%11111111
    618  fa16		       ff		      .byte.b	%11111111
    619  fa17		       ff		      .byte.b	%11111111
    620  fa18		       ff		      .byte.b	%11111111
    621  fa19		       7f		      .byte.b	%01111111
    622  fa1a		       6a		      .byte.b	%01101010
    623  fa1b		       08		      .byte.b	%00001000
    624  fa1c		       0c		      .byte.b	%00001100
    625  fa1d		       04		      .byte.b	%00000100
    626  fa1e
    627  fa1e		       46		      .byte.b	$46
    628  fa1f		       00		      .byte.b	0
    629  fa20
    630  fa20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  fa20							; 2 - peach
    632  fa20
    633  fa20		       3c		      .byte.b	%00111100
    634  fa21		       6e		      .byte.b	%01101110
    635  fa22		       6e		      .byte.b	%01101110
    636  fa23		       df		      .byte.b	%11011111
    637  fa24		       df		      .byte.b	%11011111
    638  fa25		       bf		      .byte.b	%10111111
    639  fa26		       bf		      .byte.b	%10111111
    640  fa27		       bf		      .byte.b	%10111111
    641  fa28		       de		      .byte.b	%11011110
    642  fa29		       5e		      .byte.b	%01011110
    643  fa2a		       6c		      .byte.b	%01101100
    644  fa2b		       18		      .byte.b	%00011000
    645  fa2c		       10		      .byte.b	%00010000
    646  fa2d		       30		      .byte.b	%00110000
    647  fa2e
    648  fa2e		       3a		      .byte.b	$3A
    649  fa2f		       00		      .byte.b	0
    650  fa30
    651  fa30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  fa30							; 3 - banana
    653  fa30
    654  fa30		       38		      .byte.b	%00111000
    655  fa31		       7c		      .byte.b	%01111100
    656  fa32		       fe		      .byte.b	%11111110
    657  fa33		       fe		      .byte.b	%11111110
    658  fa34		       ff		      .byte.b	%11111111
    659  fa35		       ff		      .byte.b	%11111111
    660  fa36		       8f		      .byte.b	%10001111
    661  fa37		       07		      .byte.b	%00000111
    662  fa38		       07		      .byte.b	%00000111
    663  fa39		       03		      .byte.b	%00000011
    664  fa3a		       03		      .byte.b	%00000011
    665  fa3b		       02		      .byte.b	%00000010
    666  fa3c		       06		      .byte.b	%00000110
    667  fa3d		       06		      .byte.b	%00000110
    668  fa3e
    669  fa3e		       1e		      .byte.b	$1E
    670  fa3f		       00		      .byte.b	0
    671  fa40
    672  fa40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  fa40							; 4 - pear
    674  fa40
    675  fa40		       38		      .byte.b	%00111000
    676  fa41		       7c		      .byte.b	%01111100
    677  fa42		       fe		      .byte.b	%11111110
    678  fa43		       fe		      .byte.b	%11111110
    679  fa44		       fe		      .byte.b	%11111110
    680  fa45		       fe		      .byte.b	%11111110
    681  fa46		       fe		      .byte.b	%11111110
    682  fa47		       fe		      .byte.b	%11111110
    683  fa48		       7c		      .byte.b	%01111100
    684  fa49		       38		      .byte.b	%00111000
    685  fa4a		       30		      .byte.b	%00110000
    686  fa4b		       10		      .byte.b	%00010000
    687  fa4c		       18		      .byte.b	%00011000
    688  fa4d		       08		      .byte.b	%00001000
    689  fa4e
    690  fa4e		       cc		      .byte.b	$CC
    691  fa4f		       00		      .byte.b	0
    692  fa50
    693  fa50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  fa50							; 5 - plum
    695  fa50
    696  fa50		       38		      .byte.b	%00111000
    697  fa51		       6c		      .byte.b	%01101100
    698  fa52		       6e		      .byte.b	%01101110
    699  fa53		       de		      .byte.b	%11011110
    700  fa54		       df		      .byte.b	%11011111
    701  fa55		       bf		      .byte.b	%10111111
    702  fa56		       bf		      .byte.b	%10111111
    703  fa57		       bf		      .byte.b	%10111111
    704  fa58		       de		      .byte.b	%11011110
    705  fa59		       de		      .byte.b	%11011110
    706  fa5a		       5e		      .byte.b	%01011110
    707  fa5b		       3c		      .byte.b	%00111100
    708  fa5c		       20		      .byte.b	%00100000
    709  fa5d		       60		      .byte.b	%01100000
    710  fa5e
    711  fa5e		       88		      .byte.b	$88
    712  fa5f		       00		      .byte.b	0
    713  fa60
    714  fa60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  fa60							; 6 - grapes
    716  fa60
    717  fa60		       18		      .byte.b	%00011000
    718  fa61		       08		      .byte.b	%00001000
    719  fa62		       36		      .byte.b	%00110110
    720  fa63		       12		      .byte.b	%00010010
    721  fa64		       6c		      .byte.b	%01101100
    722  fa65		       24		      .byte.b	%00100100
    723  fa66		       db		      .byte.b	%11011011
    724  fa67		       49		      .byte.b	%01001001
    725  fa68		       36		      .byte.b	%00110110
    726  fa69		       12		      .byte.b	%00010010
    727  fa6a		       6c		      .byte.b	%01101100
    728  fa6b		       34		      .byte.b	%00110100
    729  fa6c		       10		      .byte.b	%00010000
    730  fa6d		       18		      .byte.b	%00011000
    731  fa6e
    732  fa6e		       64		      .byte.b	$64
    733  fa6f		       00		      .byte.b	0
    734  fa70
    735  fa70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  fa70							; 7 - broccoli
    737  fa70
    738  fa70		       00		      .byte.b	%00000000
    739  fa71		       00		      .byte.b	%00000000
    740  fa72		       18		      .byte.b	%00011000
    741  fa73		       18		      .byte.b	%00011000
    742  fa74		       3e		      .byte.b	%00111110
    743  fa75		       2a		      .byte.b	%00101010
    744  fa76		       ea		      .byte.b	%11101010
    745  fa77		       df		      .byte.b	%11011111
    746  fa78		       ff		      .byte.b	%11111111
    747  fa79		       ff		      .byte.b	%11111111
    748  fa7a		       7e		      .byte.b	%01111110
    749  fa7b		       18		      .byte.b	%00011000
    750  fa7c		       00		      .byte.b	%00000000
    751  fa7d		       00		      .byte.b	%00000000
    752  fa7e
    753  fa7e		       c6		      .byte.b	$C6
    754  fa7f		       00		      .byte.b	0
    755  fa80
    756  fa80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  fa80							; 8 - cabbage
    758  fa80
    759  fa80		       18		      .byte.b	%00011000
    760  fa81		       76		      .byte.b	%01110110
    761  fa82		       76		      .byte.b	%01110110
    762  fa83		       7a		      .byte.b	%01111010
    763  fa84		       f9		      .byte.b	%11111001
    764  fa85		       fb		      .byte.b	%11111011
    765  fa86		       ed		      .byte.b	%11101101
    766  fa87		       db		      .byte.b	%11011011
    767  fa88		       fb		      .byte.b	%11111011
    768  fa89		       e9		      .byte.b	%11101001
    769  fa8a		       56		      .byte.b	%01010110
    770  fa8b		       76		      .byte.b	%01110110
    771  fa8c		       6e		      .byte.b	%01101110
    772  fa8d		       18		      .byte.b	%00011000
    773  fa8e
    774  fa8e		       da		      .byte.b	$DA
    775  fa8f		       00		      .byte.b	0
    776  fa90
    777  fa90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  fa90							; 9 - celery
    779  fa90
    780  fa90		       c0		      .byte.b	%11000000
    781  fa91		       e0		      .byte.b	%11100000
    782  fa92		       70		      .byte.b	%01110000
    783  fa93		       30		      .byte.b	%00110000
    784  fa94		       18		      .byte.b	%00011000
    785  fa95		       18		      .byte.b	%00011000
    786  fa96		       0c		      .byte.b	%00001100
    787  fa97		       0c		      .byte.b	%00001100
    788  fa98		       0e		      .byte.b	%00001110
    789  fa99		       06		      .byte.b	%00000110
    790  fa9a		       0d		      .byte.b	%00001101
    791  fa9b		       0b		      .byte.b	%00001011
    792  fa9c		       0d		      .byte.b	%00001101
    793  fa9d		       06		      .byte.b	%00000110
    794  fa9e
    795  fa9e		       d6		      .byte.b	$D6
    796  fa9f		       00		      .byte.b	0
    797  faa0
    798  faa0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  faa0							; A - green pepper
    800  faa0
    801  faa0		       6c		      .byte.b	%01101100
    802  faa1		       6c		      .byte.b	%01101100
    803  faa2		       fe		      .byte.b	%11111110
    804  faa3		       fe		      .byte.b	%11111110
    805  faa4		       f6		      .byte.b	%11110110
    806  faa5		       f6		      .byte.b	%11110110
    807  faa6		       f6		      .byte.b	%11110110
    808  faa7		       f6		      .byte.b	%11110110
    809  faa8		       f6		      .byte.b	%11110110
    810  faa9		       ec		      .byte.b	%11101100
    811  faaa		       7c		      .byte.b	%01111100
    812  faab		       10		      .byte.b	%00010000
    813  faac		       18		      .byte.b	%00011000
    814  faad		       08		      .byte.b	%00001000
    815  faae
    816  faae		       c8		      .byte.b	$C8
    817  faaf		       00		      .byte.b	0
    818  fab0
    819  fab0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  fab0							; B - potato
    821  fab0
    822  fab0		       00		      .byte.b	%00000000
    823  fab1		       00		      .byte.b	%00000000
    824  fab2		       00		      .byte.b	%00000000
    825  fab3		       1c		      .byte.b	%00011100
    826  fab4		       7e		      .byte.b	%01111110
    827  fab5		       ff		      .byte.b	%11111111
    828  fab6		       ff		      .byte.b	%11111111
    829  fab7		       ef		      .byte.b	%11101111
    830  fab8		       f6		      .byte.b	%11110110
    831  fab9		       78		      .byte.b	%01111000
    832  faba		       30		      .byte.b	%00110000
    833  fabb		       00		      .byte.b	%00000000
    834  fabc		       00		      .byte.b	%00000000
    835  fabd		       00		      .byte.b	%00000000
    836  fabe
    837  fabe		       f6		      .byte.b	$F6
    838  fabf		       00		      .byte.b	0
    839  fac0
    840  fac0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  fac0							; C - mushroom
    842  fac0
    843  fac0		       00		      .byte.b	%00000000
    844  fac1		       18		      .byte.b	%00011000
    845  fac2		       18		      .byte.b	%00011000
    846  fac3		       18		      .byte.b	%00011000
    847  fac4		       18		      .byte.b	%00011000
    848  fac5		       99		      .byte.b	%10011001
    849  fac6		       db		      .byte.b	%11011011
    850  fac7		       ff		      .byte.b	%11111111
    851  fac8		       ff		      .byte.b	%11111111
    852  fac9		       ff		      .byte.b	%11111111
    853  faca		       7e		      .byte.b	%01111110
    854  facb		       7e		      .byte.b	%01111110
    855  facc		       18		      .byte.b	%00011000
    856  facd		       00		      .byte.b	%00000000
    857  face
    858  face		       08		      .byte.b	$08
    859  facf		       00		      .byte.b	0
    860  fad0
    861  fad0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  fad0							; D - key
    863  fad0
    864  fad0		       10		      .byte.b	%00010000
    865  fad1		       1e		      .byte.b	%00011110
    866  fad2		       1e		      .byte.b	%00011110
    867  fad3		       18		      .byte.b	%00011000
    868  fad4		       1e		      .byte.b	%00011110
    869  fad5		       1e		      .byte.b	%00011110
    870  fad6		       10		      .byte.b	%00010000
    871  fad7		       10		      .byte.b	%00010000
    872  fad8		       10		      .byte.b	%00010000
    873  fad9		       10		      .byte.b	%00010000
    874  fada		       38		      .byte.b	%00111000
    875  fadb		       6c		      .byte.b	%01101100
    876  fadc		       6c		      .byte.b	%01101100
    877  fadd		       38		      .byte.b	%00111000
    878  fade
    879  fade		       2c		      .byte.b	$2C
    880  fadf		       00		      .byte.b	0
    881  fae0
    882  fae0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  fae0							; E - ring
    884  fae0
    885  fae0		       00		      .byte.b	%00000000
    886  fae1		       18		      .byte.b	%00011000
    887  fae2		       3c		      .byte.b	%00111100
    888  fae3		       66		      .byte.b	%01100110
    889  fae4		       42		      .byte.b	%01000010
    890  fae5		       42		      .byte.b	%01000010
    891  fae6		       42		      .byte.b	%01000010
    892  fae7		       66		      .byte.b	%01100110
    893  fae8		       3c		      .byte.b	%00111100
    894  fae9		       18		      .byte.b	%00011000
    895  faea		       18		      .byte.b	%00011000
    896  faeb		       2c		      .byte.b	%00101100
    897  faec		       18		      .byte.b	%00011000
    898  faed		       00		      .byte.b	%00000000
    899  faee
    900  faee		       2c		      .byte.b	$2C
    901  faef		       00		      .byte.b	0
    902  faf0
    903  faf0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    904  faf0							; F - heart
    905  faf0
    906  faf0		       00		      .byte.b	%00000000
    907  faf1		       18		      .byte.b	%00011000
    908  faf2		       18		      .byte.b	%00011000
    909  faf3		       3c		      .byte.b	%00111100
    910  faf4		       3c		      .byte.b	%00111100
    911  faf5		       7e		      .byte.b	%01111110
    912  faf6		       7e		      .byte.b	%01111110
    913  faf7		       ff		      .byte.b	%11111111
    914  faf8		       ff		      .byte.b	%11111111
    915  faf9		       ff		      .byte.b	%11111111
    916  fafa		       e7		      .byte.b	%11100111
    917  fafb		       e7		      .byte.b	%11100111
    918  fafc		       42		      .byte.b	%01000010
    919  fafd		       00		      .byte.b	%00000000
    920  fafe
    921  fafe		       4a		      .byte.b	$4A
    922  faff		       00		      .byte.b	0
    923  fb00
    924  fb00				   RainbowColors
    925  fb00
    926  fb00		       64		      .byte.b	$64
    927  fb01		       88		      .byte.b	$88
    928  fb02		       c8		      .byte.b	$C8
    929  fb03		       1e		      .byte.b	$1E
    930  fb04		       28		      .byte.b	$28
    931  fb05		       44		      .byte.b	$44
    932  fb06
    933  fb06		       00		      .byte.b	0
    934  fb07
    935  fb07				   CatTartGfx
    936  fb07
    937  fb07		       00		      .byte.b	%00000000
    938  fb08		       00		      .byte.b	%00000000
    939  fb09		       e0		      .byte.b	%11100000
    940  fb0a		       c0		      .byte.b	%11000000
    941  fb0b		       c0		      .byte.b	%11000000
    942  fb0c		       c0		      .byte.b	%11000000
    943  fb0d		       c0		      .byte.b	%11000000
    944  fb0e		       c0		      .byte.b	%11000000
    945  fb0f		       c0		      .byte.b	%11000000
    946  fb10		       e0		      .byte.b	%11100000
    947  fb11		       e0		      .byte.b	%11100000
    948  fb12		       e0		      .byte.b	%11100000
    949  fb13		       e0		      .byte.b	%11100000
    950  fb14		       e0		      .byte.b	%11100000
------- FILE main.asm
     81  fb15
     82  fb15
     83  fb15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  fb15							; End of ROM
     85  fb15							;
     86  fb15							; Define the end of the cartridge
     87  fb15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88  fb15
     89  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
     90  fffa		       00 f0		      .WORD.w	SystemClear	; NMI
     91  fffc		       00 f0		      .WORD.w	SystemClear	; RESET
     92  fffe		       00 f0		      .WORD.w	SystemClear	; IRQ
