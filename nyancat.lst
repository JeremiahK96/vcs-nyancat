------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 01-02-2018 Version 2.6
     12  2000 ????						;
     13  2000 ????						; Draw cat and food items on both cat rows
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates, RAM labels, and macros
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7  0000 ????
      8  0000 ????
      9 U00de ????				      SEG.U	VARS
     10 U0080					      ORG	$80
     11 U0080
     12 U0080
     13 U0080
     14 U0080				   RamStart
     15 U0080
     16 U0080		       00	   Frame      ds	1	; Current frame
     17 U0081
     18 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19 U0081							; Variables for the score and level counter - 6 bytes
     20 U0081
     21 U0081				   BCDScore		; 3-byte array for score value which will be stored as a
     22 U0081		       00 00 00 	      ds	3	; BCD encoded 6-digit number and used to control the
     23 U0084							; 6-digit score display
     24 U0084
     25 U0084				   BCDScoreAdd		; 2-byte array for the value to be added to the score
     26 U0084		       00 00		      ds	2	; on the next frame (max of 9,999)
     27 U0086
     28 U0086				   BCDLevel		; value for the current level which will be stored as a
     29 U0086		       00		      ds	1	; BCD encoded 2-digit number and used to control the
     30 U0087							; level counter display
     31 U0087
     32 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0087							; Variable game colors - 3 bytes
     34 U0087
     35 U0087		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     36 U0088		       00	   PgBarColor ds	1	; color for full part of progress bar
     37 U0089		       00	   CatTartColor ds	1	; color of the cat's tart body
     38 U008a
     39 U008a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40 U008a							; Variables for the progress bar and health display - 7 bytes
     41 U008a
     42 U008a				   Progress		; value for level progress, which can be
     43 U008a		       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     44 U008b
     45 U008b				   Health		; amount of health
     46 U008b		       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     47 U008c
     48 U008c				   ProgressBar		; array of 5 values to be written to the playfield
     49 U008c		       00 00 00 00*	      ds	5	; registers when drawing progress bar
     50 U0091
     51 U0091							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52 U0091							; Pointers - 14 bytes
     53 U0091
     54 U0091				   FoodGfxPtr1		; pointer for 1st food item's graphics
     55 U0091				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     56 U0091		       00 00		      ds	2
     57 U0093
     58 U0093				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     59 U0093				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     60 U0093		       00 00		      ds	2
     61 U0095
     62 U0095				   TartGfxPtr1		; pointer for the tart graphics
     63 U0095				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     64 U0095		       00 00		      ds	2
     65 U0097
     66 U0097				   CatGfxPtr1		; pointer for the cat face/paws graphics
     67 U0097				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     68 U0097		       00 00		      ds	2
     69 U0099
     70 U0099				   TartGfxPtr2		; pointer for the tart graphics
     71 U0099				   HthGfxLPtr		; pointer for left half of the health graphics
     72 U0099				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     73 U0099		       00 00		      ds	2
     74 U009b
     75 U009b				   CatGfxPtr2		; pointer for the cat face/paws graphics
     76 U009b				   HthGfxRPtr		; pointer for right half of the health graphics
     77 U009b				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     78 U009b		       00 00		      ds	2
     79 U009d
     80 U009d				   ThrobPtr		; pointer for loading the throb colors
     81 U009d				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     82 U009d		       00 00		      ds	2
     83 U009f
     84 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85 U009f							; Variables used when drawing the cat - 5 bytes
     86 U009f
     87 U009f				   CatPosY		; number of scanlines to skip before drawing cat
     88 U009f		       00		      ds	1
     89 U00a0				   CatPosition		; data describing the cat's position
     90 U00a0		       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     91 U00a1							; bits 4-0 store the number of scanlines to skip after
     92 U00a1							; top of the cat's row before drawing the cat, from 0-18
     93 U00a1
     94 U00a1				   Rainbow		; PF0 value for the rainbow graphics
     95 U00a1				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     96 U00a1		       00		      ds	1
     97 U00a2
     98 U00a2				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     99 U00a2				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
    100 U00a2		       00		      ds	1
    101 U00a3
    102 U00a3				   PreCatRows		; number of rows to draw before the two "cat" rows
    103 U00a3		       00		      ds	1
    104 U00a4
    105 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106 U00a4							; Variables used for the food items - 21 bytes
    107 U00a4
    108 U00a4				   FoodItemL		; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    109 U00a4		       00 00 00 00*	      ds	7	; will be drawn on each frame. The first 7 bytes are for
    110 U00ab				   FoodItemR		; the left items, last 7 bytes are for the right items.
    111 U00ab		       00 00 00 00*	      ds	7	; Hi nybble holds the value (0-15) of the item to draw.
    112 U00b2							; Lo nybble holds the value of next frame's item.
    113 U00b2							; All nybbles are swapped at the start of each frame.
    114 U00b2
    115 U00b2				   FoodPosX		; (range 0-88)
    116 U00b2		       00 00 00 00*	      ds	7
    117 U00b9
    118 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119 U00b9							; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    120 U00b9
    121 U00b9
    122 U00b9				   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    123 U00b9		       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    124 U00bc
    125 U00bc				   CatRow2FoodL 		;
    126 U00bc		       00		      ds	1	;
    127 U00bd				   CatRow2FoodR 		;
    128 U00bd		       00		      ds	1	;
    129 U00be
    130 U00be				   CatRow2Color1		;
    131 U00be		       00		      ds	1	;
    132 U00bf				   CatRow2Color2		;
    133 U00bf		       00		      ds	1	;
    134 U00c0
    135 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    136 U00c0							; Variables for the throbbing lines' colors - 4 bytes
    137 U00c0
    138 U00c0		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    139 U00c3							; throbbing lines. The first color is darkest,
    140 U00c3							; the last is brightest.
    141 U00c3
    142 U00c3		       00	   CatThrobPF ds	1
    143 U00c4
    144 U00c4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    145 U00c4							; Temporary variables - 2 bytes
    146 U00c4
    147 U00c4		       00	   Temp       ds	1
    148 U00c5		       00	   TempLoop   ds	1
    149 U00c6
    150 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    151 U00c6							; 69 of 79 non-temporary RAM bytes used (10 left)
    152 U00c6							; last 49 bytes of RAM are used for stack space in the scoreboard display
    153 U00c6
    154 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    155 U00c6							; Variables which can be shared with the stack - 3 bytes
    156 U00c6
    157 U00c6		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    158 U00c7
    159 U00c7		       00	   FoodColor1 ds	1	; color of the 1st food item
    160 U00c8		       00	   FoodColor2 ds	1	; color of the 2nd food item
    161 U00c9
    162 U00c9							; 7 of 15 available temporary RAM bytes used (8 left)
    163 U00c9							; last 34 bytes of RAM are used to hold the rainbow color graphics
    164 U00c9
    165 U00de					      ORG	$100 - 34
    166 U00de				   RamBowColors
------- FILE main.asm
------- FILE headers/Macros.h LEVEL 2 PASS 2
      0 U00de					      include	headers/Macros.h
      1 U00de					      MAC	throb_rainbow_bk
      2 U00de
      3 U00de					      SUBROUTINE
      4 U00de
      5 U00de				   .X	      SET	{1}
      6 U00de
      7 U00de					      lda	RamBowColors+.X	; 3
      8 U00de					      bne	.Rainbow	; 5/6
      9 U00de
     10 U00de					      stx	COLUBK	; 8
     11 U00de					      beq	.End	; 11
     12 U00de
     13 U00de				   .Rainbow
     14 U00de					      sta	COLUBK	; 9
     15 U00de					      nop		; 11
     16 U00de
     17 U00de				   .End
     18 U00de
     19 U00de					      ENDM
     20 U00de
     21 U00de
     22 U00de
     23 U00de					      MAC	throb_rainbow_pf
     24 U00de
     25 U00de					      SUBROUTINE
     26 U00de
     27 U00de				   .X	      SET	{1}
     28 U00de
     29 U00de					      lda	RamBowColors+.X	; 3
     30 U00de					      bne	.Rainbow	; 5/6
     31 U00de
     32 U00de					      stx	COLUPF	; 8
     33 U00de					      beq	.End	; 11
     34 U00de
     35 U00de				   .Rainbow
     36 U00de					      sta	COLUPF	; 9
     37 U00de					      nop		; 11
     38 U00de
     39 U00de				   .End
     40 U00de
     41 U00de					      ENDM
     42 U00de
     43 U00de
     44 U00de
     45 U00de					      MAC	skip_word
     46 U00de
     47 U00de					      HEX	0C
     48 U00de
     49 U00de					      ENDM
------- FILE main.asm
     35 U00de
     36 U00de							; Ensure that the code is placed in the proper place in the binary
     37 U00de
     38  2000 ????				      SEG	CODE
     39  1000					      ORG	$1000	; 4K ROM
     40  1000
     41  1000
     42  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43  1000							; Full System Clear
     44  1000							;
     45  1000							; Clear all system registers and RAM at startup
     46  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  1000
     48  1000				   SystemClear
     49  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     51  100b
     52  100b
     53  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  100b							; Game Logic
     55  100b							;
     56  100b							; Do the overscan, vertical sync, and vertical blanking,
     57  100b							; along with any game logic
     58  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 c4		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 c4		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 c4		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 c4		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 c4		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 c4		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 8c		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8d		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8e		      sta	ProgressBar+2	; 34
     30  1069		       85 8f		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 90		      sta	ProgressBar+4	; 42
     33  106f
     34  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35  106f							; Prepare for throbbing lines - 43 cycles
     36  106f
     37  106f		       a5 80		      lda	Frame	; 45 - get the current frame number
     38  1071		       29 1c		      and	#%00011100	; 47 - change animation frame every 4 game frames
     39  1073		       4a		      lsr		; 49
     40  1074		       4a		      lsr		; 51 - shift to get a value from 0-7
     41  1075		       85 c4		      sta	Temp	; 54
     42  1077		       0a		      asl		; 56 - carry flag will always be clear after this
     43  1078		       65 c4		      adc	Temp	; 59 - multiply by 3
     44  107a		       a8		      tay		; 61
     45  107b
     46  107b		       85 12		      sta	RESM0	; 64 - set position of left side of level counter digit
     47  107d
     48  107d		       a5 87		      lda	ScoreColor	; 67
     49  107f		       29 f0		      and	#$F0	; 69
     50  1081		       85 c4		      sta	Temp	; 72
     51  1083
     52  1083		       b9 a0 1b 	      lda	ThrobGfx+0,y	; 00
     53  1086		       0a		      asl		; 02
     54  1087		       90 01		      bcc	.Color0
     55  1089		       0c		      HEX	0C	; 08
     56  108a				   .Color0
     57  108a		       65 c4		      adc	Temp	; 08
     58  108c		       85 c0		      sta	ThrobColor+0	; 11
     59  108e
     60  108e		       b9 a1 1b 	      lda	ThrobGfx+1,y	; 15
     61  1091		       0a		      asl		; 17
     62  1092		       90 01		      bcc	.Color1
     63  1094		       0c		      HEX	0C	; 23
     64  1095				   .Color1
     65  1095		       65 c4		      adc	Temp	; 23
     66  1097		       85 c1		      sta	ThrobColor+1	; 26
     67  1099
     68  1099		       b9 a2 1b 	      lda	ThrobGfx+2,y	; 30
     69  109c		       0a		      asl		; 32
     70  109d		       90 01		      bcc	.Color2
     71  109f		       0c		      HEX	0C	; 38
     72  10a0				   .Color2
     73  10a0		       65 c4		      adc	Temp	; 38
     74  10a2		       85 c2		      sta	ThrobColor+2	; 41
     75  10a4
     76  10a4							; sleep19
     77  10a4		       20 24 18 	      jsr	Sleep12
      0  10a7					      SLEEP	7	; 60
      1  10a7				   .CYCLES    SET	7
      2  10a7
      3  10a7				  -	      IF	.CYCLES < 2
      4  10a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10a7				  -	      ERR
      6  10a7					      ENDIF
      7  10a7
      8  10a7					      IF	.CYCLES & 1
      9  10a7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10a7		       04 00		      nop	0
     11  10a9				  -	      ELSE
     12  10a9				  -	      bit	VSYNC
     13  10a9					      ENDIF
     14  10a9				   .CYCLES    SET	.CYCLES - 3
     15  10a9					      ENDIF
     16  10a9
     17  10a9					      REPEAT	.CYCLES / 2
     18  10a9		       ea		      nop
     17  10a9					      REPEND
     18  10aa		       ea		      nop
     19  10ab					      REPEND
     79  10ab
     80  10ab		       85 14		      sta	RESBL	; 63 - set position of leading "1" in level counter
     81  10ad		       85 13		      sta	RESM1	; 66 - set position of right side of level counter digit
     82  10af
     83  10af		       85 02		      sta	WSYNC
     84  10b1		       85 2a		      sta	HMOVE
     85  10b3
     86  10b3
     87  10b3
     88  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  10b3							; Load Scoreboard
     90  10b3							;
     91  10b3							; Get graphics data for the scoreboard and push it onto the stack
     92  10b3							;
     93  10b3							; Takes 535 cycles to complete (7 full scanlines + 3 cycles)
     94  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  10b3
     96  10b3					      SUBROUTINE
     97  10b3
     98  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10b3							; Prepare pointer for level digit graphics - 21 cycles
    100  10b3
    101  10b3		       a2 1b		      ldx	#>LevelGfx	; 2
    102  10b5		       86 92		      stx	LvlLoadPtr+1	; 3 - set MSB of level digit graphics pointer
    103  10b7
    104  10b7		       a5 86		      lda	BCDLevel	; 3
    105  10b9
    106  10b9		       29 0f		      and	#$0F	; 2
    107  10bb
    108  10bb		       0a		      asl		; 2
    109  10bc		       0a		      asl		; 2
    110  10bd		       0a		      asl		; 2
    111  10be
    112  10be		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
    113  10c0		       85 91		      sta	LvlLoadPtr	; 3 - set LSB of level digit graphics pointer
    114  10c2
    115  10c2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  10c2							; Prepare one pointer MSB and multiple LSBs for score digit graphics - 86 cycles
    117  10c2
    118  10c2		       86 94		      stx	ScrLoadPtr0+1	; 3 - set MSB of score digit graphics pointer2
    119  10c4		       86 96		      stx	ScrLoadPtr1+1	; 3
    120  10c6		       86 98		      stx	ScrLoadPtr2+1	; 3
    121  10c8		       86 9a		      stx	ScrLoadPtr3+1	; 3
    122  10ca		       86 9c		      stx	ScrLoadPtr4+1	; 3
    123  10cc		       86 9e		      stx	ScrLoadPtr5+1	; 3
    124  10ce
    125  10ce		       a7 81		      lax	BCDScore+0	; 3
    126  10d0		       29 f0		      and	#$F0	; 2
    127  10d2		       4a		      lsr		; 2
    128  10d3		       85 93		      sta	ScrLoadPtr0	; 3 - set LSB for digit 0
    129  10d5		       8a		      txa		; 2
    130  10d6		       29 0f		      and	#$0F	; 2
    131  10d8		       0a		      asl		; 2
    132  10d9		       0a		      asl		; 2
    133  10da		       0a		      asl		; 2
    134  10db		       85 95		      sta	ScrLoadPtr1	; 3 - set LSB for digit 1
    135  10dd
    136  10dd		       a7 82		      lax	BCDScore+1	; 3
    137  10df		       29 f0		      and	#$F0	; 2
    138  10e1		       4a		      lsr		; 2
    139  10e2		       85 97		      sta	ScrLoadPtr2	; 3 - set LSB for digit 2
    140  10e4		       8a		      txa		; 2
    141  10e5		       29 0f		      and	#$0F	; 2
    142  10e7		       0a		      asl		; 2
    143  10e8		       0a		      asl		; 2
    144  10e9		       0a		      asl		; 2
    145  10ea		       85 99		      sta	ScrLoadPtr3	; 2 - set LSB for digit 3
    146  10ec
    147  10ec		       a7 83		      lax	BCDScore+2	; 3
    148  10ee		       29 f0		      and	#$F0	; 2
    149  10f0		       4a		      lsr		; 2
    150  10f1		       85 9b		      sta	ScrLoadPtr4	; 3 - set LSB for digit 4
    151  10f3		       8a		      txa		; 2
    152  10f4		       29 0f		      and	#$0F	; 2
    153  10f6		       0a		      asl		; 2
    154  10f7		       0a		      asl		; 2
    155  10f8		       0a		      asl		; 2
    156  10f9		       85 9d		      sta	ScrLoadPtr5	; 3 - set LSB for digit 5
    157  10fb
    158  10fb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  10fb							; Load the stack with the graphics for the scoreboard - 428 cycles
    160  10fb
    161  10fb		       a0 06		      ldy	#6	; 2
    162  10fd
    163  10fd				   .LoadScoreboard
    164  10fd
    165  10fd		       b1 91		      lda	(LvlLoadPtr),y	; 5
    166  10ff		       48		      pha		; 3
    167  1100
    168  1100		       b1 9d		      lda	(ScrLoadPtr5),y	; 5
    169  1102		       48		      pha		; 3
    170  1103
    171  1103		       b1 9b		      lda	(ScrLoadPtr4),y	; 5
    172  1105		       48		      pha		; 3
    173  1106
    174  1106		       b1 99		      lda	(ScrLoadPtr3),y	; 5
    175  1108		       48		      pha		; 3
    176  1109
    177  1109		       b1 97		      lda	(ScrLoadPtr2),y	; 5
    178  110b		       48		      pha		; 3
    179  110c
    180  110c		       b1 95		      lda	(ScrLoadPtr1),y	; 5
    181  110e		       48		      pha		; 3
    182  110f
    183  110f		       b1 93		      lda	(ScrLoadPtr0),y	; 5
    184  1111		       48		      pha		; 3
    185  1112
    186  1112		       88		      dey		; 2
    187  1113		       10 e8		      bpl	.LoadScoreboard	; 2/3
    188  1115
    189  1115
    190  1115
    191  1115							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1115							; Load RAM for progress bar display (28-53 cycles)
    193  1115
    194  1115		       a5 8a		      lda	Progress	; 3 - get amount of progress
    195  1117
    196  1117							; The level progress bar uses the following playfield bits:
    197  1117							; (note that PF0 and PF2 are NOT reversed in this diagram)
    198  1117							;
    199  1117							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    200  1117							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    201  1117							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    202  1117							;
    203  1117							; When the progress bar is empty, every bit labeled "X" above should be
    204  1117							; set (1), and when it is full, every "X" bit should be cleared (0).
    205  1117							; The bits labeled "o" must ALWAYS be cleared.
    206  1117							;
    207  1117							; The leftmost playfield value (the 1st PF0) will be calculated first,
    208  1117							; and then each playfield value to the right until the 2nd PF1
    209  1117							; will be calculated.
    210  1117
    211  1117		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    212  1119
    213  1119		       38		      sec		; 2
    214  111a		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    215  111c		       30 1e		      bmi	.Underflow1	; 2/3
    216  111e		       84 8c		      sty	ProgressBar	; 3 - this playfield byte is full
    217  1120
    218  1120		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    219  1122		       30 23		      bmi	.Underflow2	; 2/3
    220  1124		       84 8d		      sty	ProgressBar+1	; 3 - this playfield byte is full
    221  1126
    222  1126		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    223  1128		       30 28		      bmi	.Underflow3	; 2/3
    224  112a		       84 8e		      sty	ProgressBar+2	; 3 - this playfield byte is full
    225  112c
    226  112c		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    227  112e		       30 2d		      bmi	.Underflow4	; 2/3
    228  1130		       84 8f		      sty	ProgressBar+3	; 3 - this playfield byte is full
    229  1132
    230  1132		       aa		      tax		; 2
    231  1133		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    232  1136		       0a		      asl		; 2
    233  1137		       85 90		      sta	ProgressBar+4	; 3
    234  1139		       4c 65 11 	      jmp	.Finish	; 3
    235  113c
    236  113c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    237  113c				   .Underflow1		; for 1st PF0
    238  113c
    239  113c		       69 03		      adc	#3	; 3 - add back the 3
    240  113e		       aa		      tax		; 2
    241  113f		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    242  1142		       85 8c		      sta	ProgressBar	; 3
    243  1144		       4c 65 11 	      jmp	.Finish	; 3
    244  1147
    245  1147							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    246  1147				   .Underflow2		; for 1st PF1
    247  1147
    248  1147		       69 08		      adc	#8	; 3 - add back the 8
    249  1149		       aa		      tax		; 2
    250  114a		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    251  114d		       85 8d		      sta	ProgressBar+1	; 3
    252  114f		       4c 65 11 	      jmp	.Finish	; 3
    253  1152
    254  1152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    255  1152				   .Underflow3		; for PF2
    256  1152
    257  1152		       69 08		      adc	#8	; 3 - add back the 8
    258  1154		       aa		      tax		; 2
    259  1155		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    260  1158		       85 8e		      sta	ProgressBar+2	; 3
    261  115a		       4c 65 11 	      jmp	.Finish	; 3
    262  115d
    263  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    264  115d				   .Underflow4		; for 2nd PF0
    265  115d
    266  115d		       69 04		      adc	#4	; 3 - add back the 4
    267  115f		       aa		      tax		; 2
    268  1160		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    269  1163		       85 8f		      sta	ProgressBar+3	; 3
    270  1165
    271  1165							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1165				   .Finish
    273  1165
    274  1165		       85 2b		      sta	HMCLR
    275  1167
    276  1167
    277  1167
    278  1167		       a9 10		      lda	#$10
    279  1169		       85 a4		      sta	FoodItemL+0
    280  116b		       a9 70		      lda	#$70
    281  116d		       85 ab		      sta	FoodItemR+0
    282  116f		       a9 20		      lda	#$20
    283  1171		       85 a5		      sta	FoodItemL+1
    284  1173		       a9 80		      lda	#$80
    285  1175		       85 ac		      sta	FoodItemR+1
    286  1177		       a9 30		      lda	#$30
    287  1179		       85 a6		      sta	FoodItemL+2
    288  117b		       a9 90		      lda	#$90
    289  117d		       85 ad		      sta	FoodItemR+2
    290  117f		       a9 40		      lda	#$40
    291  1181		       85 a7		      sta	FoodItemL+3
    292  1183		       a9 a0		      lda	#$A0
    293  1185		       85 ae		      sta	FoodItemR+3
    294  1187		       a9 50		      lda	#$50
    295  1189		       85 a8		      sta	FoodItemL+4
    296  118b		       a9 b0		      lda	#$B0
    297  118d		       85 af		      sta	FoodItemR+4
    298  118f		       a9 60		      lda	#$60
    299  1191		       85 a9		      sta	FoodItemL+5
    300  1193		       a9 c0		      lda	#$C0
    301  1195		       85 b0		      sta	FoodItemR+5
    302  1197		       a9 d0		      lda	#$D0
    303  1199		       85 aa		      sta	FoodItemL+6
    304  119b		       a9 e0		      lda	#$E0
    305  119d		       85 b1		      sta	FoodItemR+6
    306  119f
    307  119f		       a6 b2		      ldx	FoodPosX
    308  11a1		       ca		      dex
    309  11a2		       10 02		      bpl	.NoReset0
    310  11a4		       a2 58		      ldx	#88
    311  11a6				   .NoReset0
    312  11a6		       86 b2		      stx	FoodPosX+0
    313  11a8
    314  11a8		       8a		      txa
    315  11a9		       38		      sec
    316  11aa
    317  11aa		       e9 12		      sbc	#18
    318  11ac		       b0 02		      bcs	.NoReset1
    319  11ae		       69 59		      adc	#89
    320  11b0				   .NoReset1
    321  11b0		       85 b3		      sta	FoodPosX+1
    322  11b2
    323  11b2		       e9 34		      sbc	#52
    324  11b4		       b0 02		      bcs	.NoReset2
    325  11b6		       69 59		      adc	#89
    326  11b8				   .NoReset2
    327  11b8		       85 b4		      sta	FoodPosX+2
    328  11ba
    329  11ba		       e9 1b		      sbc	#27
    330  11bc		       b0 02		      bcs	.NoReset3
    331  11be		       69 59		      adc	#89
    332  11c0				   .NoReset3
    333  11c0		       85 b5		      sta	FoodPosX+3
    334  11c2
    335  11c2		       e9 3f		      sbc	#63
    336  11c4		       b0 02		      bcs	.NoReset4
    337  11c6		       69 59		      adc	#89
    338  11c8				   .NoReset4
    339  11c8		       85 b6		      sta	FoodPosX+4
    340  11ca
    341  11ca		       e9 29		      sbc	#41
    342  11cc		       b0 02		      bcs	.NoReset5
    343  11ce		       69 59		      adc	#89
    344  11d0				   .NoReset5
    345  11d0		       85 b7		      sta	FoodPosX+5
    346  11d2
    347  11d2		       e9 11		      sbc	#17
    348  11d4		       b0 02		      bcs	.NoReset6
    349  11d6		       69 59		      adc	#89
    350  11d8				   .NoReset6
    351  11d8		       85 b8		      sta	FoodPosX+6
    352  11da
    353  11da
    354  11da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    355  11da							; Caclulate cat's position data
    356  11da
    357  11da					      SUBROUTINE
    358  11da
    359  11da		       a6 9f		      ldx	CatPosY
    360  11dc		       e8		      inx
    361  11dd		       e0 73		      cpx	#115
    362  11df		       d0 02		      bne	.CatY
    363  11e1		       a2 00		      ldx	#0
    364  11e3				   .CatY
    365  11e3		       86 9f		      stx	CatPosY
    366  11e5
    367  11e5		       8a		      txa
    368  11e6
    369  11e6		       a2 00		      ldx	#0
    370  11e8				   .DivideLoop
    371  11e8		       38		      sec
    372  11e9		       e8		      inx
    373  11ea		       e9 13		      sbc	#19
    374  11ec		       90 07		      bcc	.AddBack
    375  11ee
    376  11ee		       e0 05		      cpx	#5
    377  11f0		       d0 f6		      bne	.DivideLoop
    378  11f2		       e8		      inx
    379  11f3		       d0 02		      bne	.SetCatPos
    380  11f5
    381  11f5				   .AddBack
    382  11f5		       69 13		      adc	#19
    383  11f7
    384  11f7				   .SetCatPos
    385  11f7		       85 a0		      sta	CatPosition
    386  11f9
    387  11f9		       8a		      txa
    388  11fa		       0a		      asl
    389  11fb		       0a		      asl
    390  11fc		       0a		      asl
    391  11fd		       0a		      asl
    392  11fe		       0a		      asl
    393  11ff		       65 a0		      adc	CatPosition
    394  1201		       85 a0		      sta	CatPosition
    395  1203
    396  1203		       ca		      dex
    397  1204		       86 a3		      stx	PreCatRows
    398  1206
    399  1206							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  1206							; Calculate Hmove offsets for 2nd cat row's food items
    401  1206
    402  1206		       a9 05		      lda	#5
    403  1208		       38		      sec
    404  1209		       e5 a3		      sbc	PreCatRows
    405  120b		       a8		      tay
    406  120c
    407  120c		       b9 a4 00 	      lda	FoodItemL,y
    408  120f		       29 f0		      and	#$F0
    409  1211		       85 bc		      sta	CatRow2FoodL
    410  1213		       aa		      tax
    411  1214		       bd 0f 1d 	      lda	FoodGfx+15,x
    412  1217		       85 be		      sta	CatRow2Color1
    413  1219
    414  1219		       b9 ab 00 	      lda	FoodItemR,y
    415  121c		       29 f0		      and	#$F0
    416  121e		       85 bd		      sta	CatRow2FoodR
    417  1220		       aa		      tax
    418  1221		       bd 0f 1d 	      lda	FoodGfx+15,x
    419  1224		       85 bf		      sta	CatRow2Color2
    420  1226
    421  1226		       b9 b2 00 	      lda	FoodPosX,y
    422  1229		       e9 2c		      sbc	#44
    423  122b		       f0 04		      beq	.Prepare
    424  122d		       90 02		      bcc	.Prepare
    425  122f		       e9 2d		      sbc	#45
    426  1231
    427  1231				   .Prepare
    428  1231		       38		      sec
    429  1232		       e9 01		      sbc	#1
    430  1234
    431  1234		       a2 70		      ldx	#$70
    432  1236		       a0 02		      ldy	#2
    433  1238
    434  1238				   .OffsetLoop
    435  1238		       18		      clc
    436  1239		       69 0f		      adc	#15
    437  123b		       f0 02		      beq	.CalcOffset
    438  123d		       30 0d		      bmi	.MaxOffset
    439  123f
    440  123f				   .CalcOffset
    441  123f		       49 07		      eor	#7
    442  1241		       0a		      asl
    443  1242		       0a		      asl
    444  1243		       0a		      asl
    445  1244		       0a		      asl
    446  1245
    447  1245		       99 b9 00 	      sta	CatRowHmove,y
    448  1248		       a9 00		      lda	#0
    449  124a		       f0 02		      beq	.NextOffset
    450  124c
    451  124c				   .MaxOffset
    452  124c		       96 b9		      stx	CatRowHmove,y
    453  124e
    454  124e				   .NextOffset
    455  124e		       88		      dey
    456  124f		       10 e7		      bpl	.OffsetLoop
    457  1251
    458  1251
    459  1251
    460  1251
    461  1251
    462  1251					      SUBROUTINE
    463  1251
    464  1251
    465  1251
    466  1251
    467  1251
    468  1251
    469  1251		       a9 7a		      lda	#COL_SCORE	; 2
    470  1253		       85 87		      sta	ScoreColor	; 3
    471  1255
    472  1255		       a5 87		      lda	ScoreColor	; 3
    473  1257		       85 06		      sta	COLUP0	; 3 - set color registers
    474  1259		       85 07		      sta	COLUP1	; 3
    475  125b		       85 08		      sta	COLUPF	; 3
    476  125d		       85 09		      sta	COLUBK	; 3
    477  125f
    478  125f		       a5 80		      lda	Frame
    479  1261		       29 0f		      and	#%00001111
    480  1263		       f0 04		      beq	.IncScore
    481  1265		       a9 00		      lda	#0
    482  1267		       f0 02		      beq	.IncSkip
    483  1269				   .IncScore
    484  1269		       a9 89		      lda	#$89
    485  126b				   .IncSkip
    486  126b		       85 85		      sta	BCDScoreAdd+1
    487  126d
    488  126d		       a9 19		      lda	#$19
    489  126f		       85 86		      sta	BCDLevel
    490  1271
    491  1271
    492  1271
    493  1271
    494  1271							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    495  1271							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    496  1271							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    497  1271
    498  1271		       a9 1d		      lda	#>FoodGfx
    499  1273		       85 92		      sta	FoodGfxPtr1+1
    500  1275		       85 94		      sta	FoodGfxPtr2+1
    501  1277
    502  1277		       a9 1e		      lda	#>CatTartGfx
    503  1279		       85 96		      sta	TartGfxPtr1+1
    504  127b		       85 9a		      sta	TartGfxPtr2+1
    505  127d
    506  127d		       a9 1e		      lda	#>CatFaceGfx
    507  127f		       85 98		      sta	CatGfxPtr1+1
    508  1281		       85 9c		      sta	CatGfxPtr2+1
    509  1283
    510  1283		       a5 a0		      lda	CatPosition
    511  1285		       29 1f		      and	#%00011111
    512  1287		       aa		      tax
    513  1288
    514  1288		       18		      clc
    515  1289
    516  1289		       69 06		      adc	#<CatTartGfx
    517  128b		       85 99		      sta	TartGfxPtr2
    518  128d		       69 13		      adc	#19
    519  128f		       85 95		      sta	TartGfxPtr1
    520  1291
    521  1291		       8a		      txa
    522  1292		       69 27		      adc	#<CatFaceGfx
    523  1294		       85 9b		      sta	CatGfxPtr2
    524  1296		       69 13		      adc	#19
    525  1298		       85 97		      sta	CatGfxPtr1
    526  129a
    527  129a		       a9 56		      lda	#$56
    528  129c		       85 88		      sta	PgBarColor
    529  129e
    530  129e		       a9 4a		      lda	#COL_CAT_TART
    531  12a0		       85 89		      sta	CatTartColor
    532  12a2
    533  12a2		       a5 80		      lda	Frame
    534  12a4		       29 08		      and	#%00001000
    535  12a6		       4a		      lsr
    536  12a7		       4a		      lsr
    537  12a8		       4a		      lsr
    538  12a9		       a8		      tay
    539  12aa		       b9 1e 1c 	      lda	RainbowGfx,y
    540  12ad		       85 a1		      sta	Rainbow
    541  12af
    542  12af
    543  12af
    544  12af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    545  12af							; Prepare for Main Gameplay Kernel
    546  12af							;
    547  12af							; Figure out how many rows to draw before and after the two cat rows
    548  12af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    549  12af
    550  12af
    551  12af
    552  12af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    553  12af							; Finish Vertical Blanking
    554  12af							;
    555  12af							; Loop until the end of vertical blanking
    556  12af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    557  12af
    558  12af		       4c 00 13 	      jmp	VblankTimerLoop
    559  12b2
    560  1300		       00 00 00 00*	      ALIGN	$100
    561  1300
    562  1300				   VblankTimerLoop
    563  1300		       ad 84 02 	      lda	INTIM
    564  1303		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     63  1305
     64  1305
     65  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66  1305							; Kernel
     67  1305							;
     68  1305							; Draw the screen
     69  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     70  1305
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1305					      include	code/Kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       a9 00		      lda	#0
      6  1307		       85 02		      sta	WSYNC
      7  1309		       85 01		      sta	VBLANK	; enable display
      8  130b
      9  130b							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  130b					      include	code/ScoreboardKernel.asm
      1  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  130b							; Scoreboard Display
      3  130b							;
      4  130b							; Draw the 6-digit score and level counter.
      5  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  130b
      7  130b					      SUBROUTINE
      8  130b
      9  130b		       85 09		      sta	COLUBK	; 06 - A = 0
     10  130d		       85 06		      sta	COLUP0	; 09 - set both colors to black
     11  130f
     12  130f		       a9 ff		      lda	#$FF	; 11
     13  1311		       85 0d		      sta	PF0	; 14
     14  1313		       85 1b		      sta	GRP0	; 17 - player 0 (black) will cover up...
     15  1315
     16  1315		       a9 a0		      lda	#$A0	; 19 - ...part of PF1, causing bit 7 of CXP0FB to be set
     17  1317		       85 0e		      sta	PF1	; 22 - (player 0 is drawn over PF1 to hide it)
     18  1319
     19  1319		       a4 87		      ldy	ScoreColor	; 25 - pre-load value to store to GRP0,
     20  131b		       a2 13		      ldx	#%00010011	; 27 - and value to store to NUSIZx, CTRLPF, and VDELxx
     21  131d
     22  131d		       a9 80		      lda	#$80	; 29
     23  131f		       85 0e		      sta	PF1	; 33 - fix PF1 register only AFTER collision
     24  1321
     25  1321		       86 04		      stx	NUSIZ0	; 35 - X = THREE_CLOSE | BALL_SIZE_2
     26  1323		       86 05		      stx	NUSIZ1	; 38
     27  1325		       86 25		      stx	VDELP0	; 41 - enable vertical delay for player 0...
     28  1327		       86 26		      stx	VDELP1	; 44 - ...and player 1
     29  1329		       86 0a		      stx	CTRLPF	; 47 - X = PF_REFLECT | PF_SCORE_MODE | MSL_SIZE_2
     30  132b							;	PF_SCORE_MODE isn't needed, but it saves a read
     31  132b		       84 06		      sty	COLUP0	; 50 - fix COLUP0 register
     32  132d
     33  132d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  132d							; Pre-load some graphics before the scoreboard kernel loop
     35  132d
     36  132d		       68		      pla		; 54 - pull gfx for digit0
     37  132e		       85 1b		      sta	GRP0	; 57 - digit0 -> [GRP0]
     38  1330
     39  1330							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1330							; Only draw leading 1 in level counter if the level is 10 or more
     41  1330
     42  1330		       a5 86		      lda	BCDLevel	; 60 - the value of bit 4...
     43  1332		       4a		      lsr		; 62
     44  1333		       4a		      lsr		; 64
     45  1334		       4a		      lsr		; 66 - ...gets shifted three times...
     46  1335		       85 1f		      sta	ENABL	; 69 - ...to be used to enable or disable the ball
     47  1337
     48  1337		       10 1e		      bpl	.ScoreEntrance	; 72
     49  1339
     50  1339							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1339				   .ScoreDigitLoop
     52  1339
     53  1339							; A contains gfx for digit3
     54  1339		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     55  133b
     56  133b							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     57  133b
     58  133b		       68		      pla		; 18 - pull gfx for digit3...
     59  133c		       a8		      tay		; 20 - ...and store in Y
     60  133d		       68		      pla		; 24 - pull gfx data for digit4...
     61  133e		       aa		      tax		; 26 - ...and store in X
     62  133f		       68		      pla		; 30 - pull gfx data for digit5 to A
     63  1340
     64  1340		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     65  1342		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     66  1344		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     67  1346		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     68  1348
     69  1348		       68		      pla		; 46 - pull gfx data for level counter
     70  1349		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     71  134b		       2a		      rol		; 51
     72  134c		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     73  134e		       6a		      ror		; 56
     74  134f		       4a		      lsr		; 58
     75  1350		       4a		      lsr		; 60
     76  1351		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     77  1353
     78  1353		       68		      pla		; 67 - pull gfx for digit0
     79  1354		       8d 1b 00 	      sta.w	GRP0	; 71 - digit0 -> [GRP0]
     80  1357				   .ScoreEntrance
     81  1357		       68		      pla		; 74 - pull gfx for digit1
     82  1358		       85 1c		      sta	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
     83  135a							;	(use an extra cycle for timing reasons)
     84  135a
     85  135a		       68		      pla		; 06 - pull gfx for digit2
     86  135b
     87  135b							; On the final iteration of the loop, the stack will have wrapped
     88  135b							; and pulled from location $02 at this point.
     89  135b							; This happens to be the collision register CXP0FB.
     90  135b							; Bit-7 will always be set in this register,
     91  135b							; and bit-7 is always clear in the score graphics,
     92  135b							; so checking bit-7 of the data pulled is all that you need
     93  135b							; to determine when to terminate the loop.
     94  135b
     95  135b		       aa		      tax		; 08 - set flags according to pulled data
     96  135c
     97  135c		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
     98  135e
     99  135e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    100  135e
    101  135e		       a9 00		      lda	#0	; 12
    102  1360		       85 1b		      sta	GRP0	; 15
    103  1362		       85 1c		      sta	GRP1	; 18
    104  1364		       85 26		      sta	VDELP1	; 21
    105  1366		       85 25		      sta	VDELP0	; 24
    106  1368		       85 1f		      sta	ENABL	; 27
    107  136a		       85 1d		      sta	ENAM0	; 30
    108  136c		       85 1e		      sta	ENAM1	; 33
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  136e					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  136e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  136e							; Output 4 blank scanlines, while setting up the graphics objects.
      3  136e							; CPU is at cycle 33
      4  136e
      5  136e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  136e							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  136e
      8  136e
      9  136e		       a2 ff		      ldx	#$FF
     10  1370		       9a		      txs
     11  1371
     12  1371		       a0 11		      ldy	#17
     13  1373				   .ClearRainbow
     14  1373		       48		      pha
     15  1374		       48		      pha
     16  1375
     17  1375		       88		      dey
     18  1376		       d0 fb		      bne	.ClearRainbow
     19  1378
     20  1378							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  1378							; Load rainbow colors into RAM - 65 cycles
     22  1378
     23  1378		       a9 13		      lda	#19
     24  137a		       e5 a0		      sbc	CatPosition	; carry is assumed to be set
     25  137c		       29 1f		      and	#%00011111
     26  137e		       18		      clc
     27  137f		       69 eb		      adc	#RamBowColors+13
     28  1381		       aa		      tax
     29  1382		       9a		      txs
     30  1383
     31  1383		       a0 05		      ldy	#5
     32  1385
     33  1385				   .LoadRainbow
     34  1385		       b9 00 1e 	      lda	RainbowColors,y
     35  1388		       48		      pha
     36  1389		       48		      pha
     37  138a
     38  138a		       88		      dey
     39  138b		       10 f8		      bpl	.LoadRainbow
     40  138d
     41  138d
     42  138d		       85 02		      sta	WSYNC
     43  138f
     44  138f		       a5 87		      lda	ScoreColor
     45  1391		       8d 09 00 	      sta.w	COLUBK
     46  1394
     47  1394		       85 02		      sta	WSYNC
     48  1396
      0  1396					      SLEEP	4
      1  1396				   .CYCLES    SET	4
      2  1396
      3  1396				  -	      IF	.CYCLES < 2
      4  1396				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1396				  -	      ERR
      6  1396					      ENDIF
      7  1396
      8  1396				  -	      IF	.CYCLES & 1
      9  1396				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1396				  -	      nop	0
     11  1396				  -	      ELSE
     12  1396				  -	      bit	VSYNC
     13  1396				  -	      ENDIF
     14  1396				  -.CYCLES    SET	.CYCLES - 3
     15  1396					      ENDIF
     16  1396
     17  1396					      REPEAT	.CYCLES / 2
     18  1396		       ea		      nop
     17  1396					      REPEND
     18  1397		       ea		      nop
     19  1398					      REPEND
     50  1398
     51  1398							; Player 0 is already aligned for drawing the cat's face.
     52  1398
     53  1398							; Align player 1 to draw the current frame's food items for the top row.
     54  1398
     55  1398							; food item can be placed anywhere from 0-88
     56  1398							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     57  1398
     58  1398		       a5 b8		      lda	FoodPosX+6	; 07 - get the food's position for the top row
     59  139a
     60  139a		       38		      sec		; 09
     61  139b				   .DivideLoop
     62  139b		       e9 0f		      sbc	#15	; 11
     63  139d		       b0 fc		      bcs	.DivideLoop	; 13
     64  139f
     65  139f		       49 07		      eor	#7	; 15
     66  13a1		       69 01		      adc	#1	; 17
     67  13a3		       0a		      asl		; 19
     68  13a4		       0a		      asl		; 21
     69  13a5		       0a		      asl		; 23
     70  13a6
     71  13a6		       85 11		      sta	RESP1	; 26
     72  13a8
     73  13a8		       0a		      asl		; 53
     74  13a9		       85 21		      sta	HMP1	; 56
     75  13ab
     76  13ab		       a9 00		      lda	#ONE_COPY	; 58
     77  13ad		       85 04		      sta	NUSIZ0	; 61
     78  13af		       a9 04		      lda	#TWO_WIDE	; 63
     79  13b1		       85 05		      sta	NUSIZ1	; 66
     80  13b3
     81  13b3		       a9 80		      lda	#$80	; 68
     82  13b5		       85 20		      sta	HMP0	; 71
     83  13b7
     84  13b7		       85 02		      sta	WSYNC
     85  13b9
     86  13b9		       4c 00 14 	      jmp	.Align1
     87  13bc
     88  1400		       00 00 00 00*	      ALIGN	$100
     89  1400
     90  1400				   .Align1
     91  1400
     92  1400				   PreKernel
     93  1400		       a2 06		      ldx	#6
     94  1402		       86 c6		      stx	CurrentRow
     95  1404
     96  1404		       85 02		      sta	WSYNC
     97  1406
     98  1406		       a5 f1		      lda	RamBowColors+19
     99  1408		       d0 02		      bne	.SetCatThrobPF
    100  140a		       a5 c0		      lda	ThrobColor+0
    101  140c				   .SetCatThrobPF
    102  140c		       85 c3		      sta	CatThrobPF
    103  140e
    104  140e		       85 02		      sta	WSYNC
    105  1410
      0  1410					      SLEEP	9
      1  1410				   .CYCLES    SET	9
      2  1410
      3  1410				  -	      IF	.CYCLES < 2
      4  1410				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1410				  -	      ERR
      6  1410					      ENDIF
      7  1410
      8  1410					      IF	.CYCLES & 1
      9  1410					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1410		       04 00		      nop	0
     11  1412				  -	      ELSE
     12  1412				  -	      bit	VSYNC
     13  1412					      ENDIF
     14  1412				   .CYCLES    SET	.CYCLES - 3
     15  1412					      ENDIF
     16  1412
     17  1412					      REPEAT	.CYCLES / 2
     18  1412		       ea		      nop
     17  1412					      REPEND
     18  1413		       ea		      nop
     17  1413					      REPEND
     18  1414		       ea		      nop
     19  1415					      REPEND
    107  1415
    108  1415		       a9 01		      lda	#PF_REFLECT	; 11
    109  1417		       85 0a		      sta	CTRLPF	; 14
    110  1419
    111  1419		       a5 a1		      lda	Rainbow	; 17
    112  141b		       85 0d		      sta	PF0	; 20
    113  141d
    114  141d		       a9 09		      lda	#COL_CAT_FACE	; 22
    115  141f		       85 06		      sta	COLUP0	; 25
    116  1421
    117  1421		       a5 aa		      lda	FoodItemL+6	; 28
    118  1423		       29 f0		      and	#$F0	; 30
    119  1425		       85 91		      sta	FoodGfxPtr1	; 33
    120  1427		       aa		      tax		; 35
    121  1428		       bd 0f 1d 	      lda	FoodGfx+15,x	; 39
    122  142b		       85 c7		      sta	FoodColor1	; 42
    123  142d
    124  142d		       a5 b1		      lda	FoodItemR+6	; 45
    125  142f		       29 f0		      and	#$F0	; 47
    126  1431		       85 93		      sta	FoodGfxPtr2	; 50
    127  1433		       aa		      tax		; 52
    128  1434		       bd 0f 1d 	      lda	FoodGfx+15,x	; 56
    129  1437		       85 c8		      sta	FoodColor2	; 59
    130  1439
    131  1439		       a5 b8		      lda	FoodPosX+6	; 62
    132  143b		       85 c4		      sta	Temp	; 65
    133  143d
    134  143d		       a2 dd		      ldx	#GAMEPLAY_STACK	; 67
    135  143f		       9a		      txs		; 69
    136  1440
    137  1440		       8d 2a 00 	      sta.w	HMOVE	; 73
    138  1443
    139  1443		       85 02		      sta	WSYNC
    140  1445
    141  1445		       a5 c1		      lda	ThrobColor+1	; 03
    142  1447		       85 09		      sta	COLUBK	; 06
    143  1449		       85 08		      sta	COLUPF	; 09
    144  144b
    145  144b		       a5 a3		      lda	PreCatRows
    146  144d		       d0 03		      bne	HiRows
    147  144f		       4c d1 14 	      jmp	CatRows
    148  1452
    149  1452							; If any part of the cat needs to be drawn in the top row,
    150  1452							; skip straight to CatRows.
    151  1452
    152  1452
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  1452					      include	code/Gameplay Kernel/HiRows.asm
      1  1452							; Draw all the rows above the cat's two rows
      2  1452
      3  1452				   HiRows     SUBROUTINE
      4  1452
      5  1452		       85 02		      sta	WSYNC
      6  1454
      7  1454		       a5 c0		      lda	ThrobColor+0
      8  1456		       85 09		      sta	COLUBK
      9  1458		       85 08		      sta	COLUPF
     10  145a
     11  145a
     12  145a							; First, output a single-color line to draw the bottom of a "throb" line.
     13  145a							; This will probably be a good time to prepare the pointers for the
     14  145a							; food items' graphics, as well as loading the colors for the food items.
     15  145a
     16  145a							; After that, output 14 lines to draw a single row with food items,
     17  145a							; but without drawing the cat. The food graphics will be updated every line,
     18  145a							; but there will probably not be enough time to also update the food colors
     19  145a							; every line throughout the kernel.
     20  145a
     21  145a		       20 00 18 	      jsr	DrawFoodRow
     22  145d
     23  145d		       c6 c6		      dec	CurrentRow	; 73
     24  145f
     25  145f		       85 02		      sta	WSYNC
     26  1461
     27  1461							; Lastly, output four single-color lines to draw most of a "throb" line,
     28  1461							; while setting the position of player 1 to draw the next set of food items.
     29  1461
     30  1461
     31  1461		       a5 c0		      lda	ThrobColor+0
     32  1463		       85 09		      sta	COLUBK
     33  1465		       85 08		      sta	COLUPF
     34  1467		       a9 00		      lda	#0
     35  1469		       85 1b		      sta	GRP0
     36  146b		       85 1c		      sta	GRP1
     37  146d		       85 02		      sta	WSYNC
     38  146f
     39  146f		       a5 c1		      lda	ThrobColor+1	; 03
     40  1471		       85 09		      sta	COLUBK	; 06
     41  1473		       85 08		      sta	COLUPF	; 09
     42  1475
     43  1475		       a4 c6		      ldy	CurrentRow	; 12 - get the row we are drawing
     44  1477		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     45  147a
     46  147a		       38		      sec		; 18
     47  147b				   .DivideLoop
     48  147b		       e9 0f		      sbc	#15	; 20
     49  147d		       b0 fc		      bcs	.DivideLoop	; 22
     50  147f
     51  147f		       8d 11 00 	      sta.w	RESP1	; 26
     52  1482
     53  1482		       49 07		      eor	#7
     54  1484		       69 01		      adc	#1
     55  1486		       0a		      asl
     56  1487		       0a		      asl
     57  1488		       0a		      asl
     58  1489		       0a		      asl
     59  148a		       85 21		      sta	HMP1
     60  148c
     61  148c		       85 02		      sta	WSYNC
     62  148e
     63  148e		       a5 c2		      lda	ThrobColor+2	; 03
     64  1490		       85 09		      sta	COLUBK	; 06
     65  1492		       85 08		      sta	COLUPF	; 09
     66  1494
     67  1494		       20 24 18 	      jsr	Sleep12
     68  1497		       20 24 18 	      jsr	Sleep12
     69  149a		       20 24 18 	      jsr	Sleep12
     70  149d		       20 24 18 	      jsr	Sleep12
     71  14a0		       20 24 18 	      jsr	Sleep12	; 69
     72  14a3
     73  14a3		       8d 2a 00 	      sta.w	HMOVE	; 73
     74  14a6
     75  14a6		       85 02		      sta	WSYNC
     76  14a8
     77  14a8		       a5 c1		      lda	ThrobColor+1	; 03
     78  14aa		       85 09		      sta	COLUBK	; 06
     79  14ac		       85 08		      sta	COLUPF	; 09
     80  14ae
     81  14ae		       b9 a4 00 	      lda	FoodItemL,y	; 13
     82  14b1		       29 f0		      and	#$F0	; 15
     83  14b3		       85 91		      sta	FoodGfxPtr1	; 18
     84  14b5		       aa		      tax		; 20
     85  14b6		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     86  14b9		       85 c7		      sta	FoodColor1	; 27
     87  14bb
     88  14bb		       b9 ab 00 	      lda	FoodItemR,y	; 31
     89  14be		       29 f0		      and	#$F0	; 33
     90  14c0		       85 93		      sta	FoodGfxPtr2	; 36
     91  14c2		       aa		      tax		; 38
     92  14c3		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     93  14c6		       85 c8		      sta	FoodColor2	; 45
     94  14c8
     95  14c8		       b9 b2 00 	      lda	FoodPosX,y	; 49
     96  14cb		       85 c4		      sta	Temp	; 52
     97  14cd
     98  14cd		       c6 a3		      dec	PreCatRows
     99  14cf		       d0 81		      bne	HiRows
    100  14d1
    101  14d1							; If this is not the last row before drawing the cat's rows,
    102  14d1							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  14d1					      include	code/Gameplay Kernel/CatRows.asm
      1  14d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14d1							; Cat Row Kernel
      3  14d1							;
      4  14d1							; This is the subroutine that is used to draw the two gameplay kernel rows
      5  14d1							; containing the cat. It does not draw the throbbing line between the two rows,
      6  14d1							; it only draws a single, 14-scanline row with the cat and food items.
      7  14d1							; This subroutine is called twice in the kernel, once for each of the two rows
      8  14d1							; containing the cat.
      9  14d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  14d1
     11  14d1				   CatRows    SUBROUTINE
     12  14d1
     13  14d1		       85 02		      sta	WSYNC
     14  14d3
     15  14d3							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     16  14d3							; If the cat is at the very top of the row, draw the top of the pop-tart.
     17  14d3
     18  14d3		       a5 c0		      lda	ThrobColor+0	; 03
     19  14d5		       85 09		      sta	COLUBK	; 06
     20  14d7		       85 08		      sta	COLUPF	; 09
     21  14d9
     22  14d9		       a6 c8		      ldx	FoodColor2	; 12
     23  14db		       9a		      txs		; 14
     24  14dc
      0  14dc					      SLEEP	27	; 41
      1  14dc				   .CYCLES    SET	27
      2  14dc
      3  14dc				  -	      IF	.CYCLES < 2
      4  14dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14dc				  -	      ERR
      6  14dc					      ENDIF
      7  14dc
      8  14dc					      IF	.CYCLES & 1
      9  14dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14dc		       04 00		      nop	0
     11  14de				  -	      ELSE
     12  14de				  -	      bit	VSYNC
     13  14de					      ENDIF
     14  14de				   .CYCLES    SET	.CYCLES - 3
     15  14de					      ENDIF
     16  14de
     17  14de					      REPEAT	.CYCLES / 2
     18  14de		       ea		      nop
     17  14de					      REPEND
     18  14df		       ea		      nop
     17  14df					      REPEND
     18  14e0		       ea		      nop
     17  14e0					      REPEND
     18  14e1		       ea		      nop
     17  14e1					      REPEND
     18  14e2		       ea		      nop
     17  14e2					      REPEND
     18  14e3		       ea		      nop
     17  14e3					      REPEND
     18  14e4		       ea		      nop
     17  14e4					      REPEND
     18  14e5		       ea		      nop
     17  14e5					      REPEND
     18  14e6		       ea		      nop
     17  14e6					      REPEND
     18  14e7		       ea		      nop
     17  14e7					      REPEND
     18  14e8		       ea		      nop
     17  14e8					      REPEND
     18  14e9		       ea		      nop
     19  14ea					      REPEND
     26  14ea
     27  14ea					      SUBROUTINE
     28  14ea
     29  14ea		       4c 00 15 	      jmp	.Align2	; 44
     30  14ed
     31  1500		       00 00 00 00*	      ALIGN	$100
     32  1500
     33  1500				   .Align2
     34  1500		       a4 c6		      ldy	CurrentRow	; 47
     35  1502		       b9 b2 00 	      lda	FoodPosX,y	; 51
     36  1505		       c9 30		      cmp	#48	; 53
     37  1507
     38  1507		       a2 00		      ldx	#0	; 55
     39  1509		       a0 0d		      ldy	#13	; 57
     40  150b
     41  150b							; Then output the 14 lines to draw a single row. This will include drawing
     42  150b							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     43  150b							; All graphics will be updated every line.
     44  150b
     45  150b		       b0 0b		      bcs	.RightEntrance	; 60/59
     46  150d		       90 42		      bcc	.LeftEntrance	; 62
     47  150f
     48  150f							; 14 bytes into the page
     49  150f
     50  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  150f							; Kernel used when food items are closer to the right edge of the screen
     52  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  150f
     54  150f				   .RightLoop
     55  150f
     56  150f							; 8 cycles
     57  150f		       b1 97		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     58  1511		       85 1b		      sta	GRP0	; 52
     59  1513
     60  1513							; 9 cycles
     61  1513		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     62  1515		       ba		      tsx		; 57 - load 2nd food item's color
     63  1516		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     64  1518
     65  1518				   .RightEntrance		; enter loop here
     66  1518
     67  1518							; 2 cycles
     68  1518		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     69  151a
     70  151a							; 8 cycles
     71  151a		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     72  151c		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     73  151e
     74  151e							; 8 cycles
     75  151e		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     76  1520		       85 1c		      sta	GRP1	; 02
     77  1522
     78  1522							; 7 cycles
     79  1522		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     80  1525		       85 09		      sta	COLUBK	; 09
     81  1527
     82  1527							; 7 cycles
     83  1527		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     84  152a		       85 08		      sta	COLUPF	; 16
     85  152c
     86  152c							; 6 cycles
     87  152c		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
     88  152e		       85 07		      sta	COLUP1	; 22
     89  1530
     90  1530							; 8 cycles
     91  1530		       a5 89		      lda	CatTartColor	; 25
     92  1532		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     93  1534		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     94  1536		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     95  1538
     96  1538							; 5 cycles
     97  1538		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     98  153a
     99  153a							; 2 cycles
    100  153a		       88		      dey		; 41
    101  153b		       10 d2		      bpl	.RightLoop	; 44/43
    102  153d
    103  153d		       a0 12		      ldy	#18	; 45
    104  153f		       b1 99		      lda	(TartGfxPtr2),y	; 50
    105  1541
      0  1541					      SLEEP	2	; 52
      1  1541				   .CYCLES    SET	2
      2  1541
      3  1541				  -	      IF	.CYCLES < 2
      4  1541				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1541				  -	      ERR
      6  1541					      ENDIF
      7  1541
      8  1541				  -	      IF	.CYCLES & 1
      9  1541				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1541				  -	      nop	0
     11  1541				  -	      ELSE
     12  1541				  -	      bit	VSYNC
     13  1541				  -	      ENDIF
     14  1541				  -.CYCLES    SET	.CYCLES - 3
     15  1541					      ENDIF
     16  1541
     17  1541					      REPEAT	.CYCLES / 2
     18  1541		       ea		      nop
     19  1542					      REPEND
    107  1542
    108  1542		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    109  1544		       ba		      tsx		; 57 - load 2nd food item's color
    110  1545		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    111  1547
    112  1547		       b0 38		      bcs	.End	; 63
    113  1549
    114  1549							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115  1549							; Kernel used when food items are closer to the left edge of the screen
    116  1549							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1549
    118  1549				   .LeftLoop
    119  1549
    120  1549							; 8 cycles
    121  1549		       b1 97		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    122  154b		       85 1b		      sta	GRP0	; 57
    123  154d
    124  154d							; 5 cycles
    125  154d		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    126  154f		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    127  1551
    128  1551				   .LeftEntrance		; enter loop here
    129  1551
    130  1551							; 8 cycles
    131  1551		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    132  1553		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    133  1555
    134  1555							; 8 cycles
    135  1555		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    136  1557		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    137  1559
    138  1559							; 7 cycles
    139  1559		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    140  155c		       85 09		      sta	COLUBK	; 09
    141  155e
    142  155e							; 7 cycles
    143  155e		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    144  1561		       85 08		      sta	COLUPF	; 16
    145  1563
    146  1563							; 6 cycles
    147  1563		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    148  1565		       85 07		      sta	COLUP1	; 22
    149  1567
    150  1567							; 8 cycles
    151  1567		       a5 89		      lda	CatTartColor	; 25
    152  1569		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    153  156b		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    154  156d
    155  156d							; 13 cycles
    156  156d		       b1 93		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    157  156f		       ba		      tsx		; 38 - load 2nd food item's color
    158  1570		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    159  1572		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    160  1574
    161  1574							; 5 cycles
    162  1574		       88		      dey		; 46
    163  1575		       10 d2		      bpl	.LeftLoop	; 49/48
    164  1577
    165  1577		       a2 00		      ldx	#0	; 50
    166  1579		       86 08		      stx	COLUPF	; 53
    167  157b
    168  157b		       a0 12		      ldy	#18	; 55
    169  157d		       b1 99		      lda	(TartGfxPtr2),y	; 60
    170  157f
    171  157f		       86 1c		      stx	GRP1	; 63
    172  1581
    173  1581				   .End
    174  1581
    175  1581
    176  1581
    177  1581							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    178  1581							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    179  1581							; cat with the rainbow. In order to align player 1 for the next row's
    180  1581							; food items, it will be neccesary to have three versions of this kernel,
    181  1581							; one for each of the three 60-color-clock spaced positions to reset.
    182  1581							; HMOVE will be written to on the first four scanlines. With a maximum
    183  1581							; movement of 15 color-clocks per scanline, this will allow a movement of
    184  1581							; up to 60 color clocks. With three versions of the kernel, it should be
    185  1581							; possible to put player 1 anywhere on the screen.
    186  1581							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187  1581
    188  1581
    189  1581
    190  1581							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191  1581							; Draw throb line #1
    192  1581
    193  1581		       85 0e		      sta	PF1	; 66
    194  1583
    195  1583		       b1 9b		      lda	(CatGfxPtr2),y	; 71
    196  1585		       85 1b		      sta	GRP0	; 74
    197  1587
    198  1587		       a6 c0		      ldx	ThrobColor+0	; 01
    199  1589
      0  1589					      THROB_RAINBOW_BK	18	; 12
      1  1589
      2  1589					      SUBROUTINE
      3  1589
      4  1589				   .X	      SET	18
      5  1589
      6  1589		       a5 f0		      lda	RamBowColors+.X
      7  158b		       d0 04		      bne	.Rainbow
      8  158d
      9  158d		       86 09		      stx	COLUBK
     10  158f		       f0 03		      beq	.End
     11  1591
     12  1591				   .Rainbow
     13  1591		       85 09		      sta	COLUBK
     14  1593		       ea		      nop
     15  1594
     16  1594				   .End
     17  1594
    201  1594
    202  1594		       a5 c3		      lda	CatThrobPF	; 15
    203  1596		       85 08		      sta	COLUPF	; 18
    204  1598		       8e 07 00 	      stx.w	COLUP1	; 22
    205  159b
    206  159b		       a5 89		      lda	CatTartColor	; 25
    207  159d		       85 08		      sta	COLUPF	; 28
    208  159f		       86 09		      stx	COLUBK	; 31
    209  15a1
    210  15a1		       88		      dey		; 33
    211  15a2		       85 11		      sta	RESP1	; 36
    212  15a4		       86 08		      stx	COLUPF	; 39
    213  15a6
    214  15a6		       b1 9b		      lda	(CatGfxPtr2),y	; 44
    215  15a8		       85 1b		      sta	GRP0	; 47
    216  15aa
    217  15aa		       b1 99		      lda	(TartGfxPtr2),y	; 52
    218  15ac		       85 0e		      sta	PF1	; 55
    219  15ae
    220  15ae		       c6 c6		      dec	CurrentRow	; 60
    221  15b0		       a2 00		      ldx	#0	; 62
    222  15b2		       86 1c		      stx	GRP1	; 65
    223  15b4
    224  15b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    225  15b4							; Draw throb line #2
    226  15b4
    227  15b4		       a5 bb		      lda	CatRowHmove+2	; 68
    228  15b6		       85 21		      sta	HMP1	; 71
      0  15b8					      SLEEP	2	; 73
      1  15b8				   .CYCLES    SET	2
      2  15b8
      3  15b8				  -	      IF	.CYCLES < 2
      4  15b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b8				  -	      ERR
      6  15b8					      ENDIF
      7  15b8
      8  15b8				  -	      IF	.CYCLES & 1
      9  15b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b8				  -	      nop	0
     11  15b8				  -	      ELSE
     12  15b8				  -	      bit	VSYNC
     13  15b8				  -	      ENDIF
     14  15b8				  -.CYCLES    SET	.CYCLES - 3
     15  15b8					      ENDIF
     16  15b8
     17  15b8					      REPEAT	.CYCLES / 2
     18  15b8		       ea		      nop
     19  15b9					      REPEND
    230  15b9
    231  15b9		       a6 c1		      ldx	ThrobColor+1	; 00
      0  15bb					      THROB_RAINBOW_BK	17	; 11
      1  15bb
      2  15bb					      SUBROUTINE
      3  15bb
      4  15bb				   .X	      SET	17
      5  15bb
      6  15bb		       a5 ef		      lda	RamBowColors+.X
      7  15bd		       d0 04		      bne	.Rainbow
      8  15bf
      9  15bf		       86 09		      stx	COLUBK
     10  15c1		       f0 03		      beq	.End
     11  15c3
     12  15c3				   .Rainbow
     13  15c3		       85 09		      sta	COLUBK
     14  15c5		       ea		      nop
     15  15c6
     16  15c6				   .End
     17  15c6
      0  15c6					      THROB_RAINBOW_PF	18	; 22
      1  15c6
      2  15c6					      SUBROUTINE
      3  15c6
      4  15c6				   .X	      SET	18
      5  15c6
      6  15c6		       a5 f0		      lda	RamBowColors+.X
      7  15c8		       d0 04		      bne	.Rainbow
      8  15ca
      9  15ca		       86 08		      stx	COLUPF
     10  15cc		       f0 03		      beq	.End
     11  15ce
     12  15ce				   .Rainbow
     13  15ce		       85 08		      sta	COLUPF
     14  15d0		       ea		      nop
     15  15d1
     16  15d1				   .End
     17  15d1
    234  15d1
    235  15d1		       a5 89		      lda	CatTartColor	; 25
    236  15d3		       85 08		      sta	COLUPF	; 28
    237  15d5		       86 09		      stx	COLUBK	; 31
    238  15d7		       86 08		      stx	COLUPF	; 34
    239  15d9
    240  15d9		       88		      dey		; 36
    241  15da
    242  15da		       a6 c6		      ldx	CurrentRow	; 39
    243  15dc		       b5 b2		      lda	FoodPosX,x	; 43
    244  15de		       c9 2d		      cmp	#45	; 45
    245  15e0		       10 01		      bpl	.RightSide	; 48/47
      0  15e2					      SKIP_WORD		; 51
      1  15e2
      2  15e2		       0c		      HEX	0C
      3  15e3
    247  15e3				   .RightSide
    248  15e3		       85 11		      sta	RESP1	; 51
    249  15e5
    250  15e5		       b1 9b		      lda	(CatGfxPtr2),y	; 56
    251  15e7		       85 1b		      sta	GRP0	; 59
    252  15e9
    253  15e9		       b1 99		      lda	(TartGfxPtr2),y	; 64
    254  15eb		       85 0e		      sta	PF1	; 67
      0  15ed					      SLEEP	3	; 70
      1  15ed				   .CYCLES    SET	3
      2  15ed
      3  15ed				  -	      IF	.CYCLES < 2
      4  15ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ed				  -	      ERR
      6  15ed					      ENDIF
      7  15ed
      8  15ed					      IF	.CYCLES & 1
      9  15ed					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ed		       04 00		      nop	0
     11  15ef				  -	      ELSE
     12  15ef				  -	      bit	VSYNC
     13  15ef					      ENDIF
     14  15ef				   .CYCLES    SET	.CYCLES - 3
     15  15ef					      ENDIF
     16  15ef
     17  15ef				  -	      REPEAT	.CYCLES / 2
     18  15ef				  -	      nop
     19  15ef					      REPEND
    256  15ef		       85 2a		      sta	HMOVE	; 73
    257  15f1
    258  15f1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    259  15f1							; Draw throb line #3
    260  15f1
    261  15f1		       a6 c2		      ldx	ThrobColor+2	; 00
      0  15f3					      THROB_RAINBOW_BK	16	; 11
      1  15f3
      2  15f3					      SUBROUTINE
      3  15f3
      4  15f3				   .X	      SET	16
      5  15f3
      6  15f3		       a5 ee		      lda	RamBowColors+.X
      7  15f5		       d0 04		      bne	.Rainbow
      8  15f7
      9  15f7		       86 09		      stx	COLUBK
     10  15f9		       f0 03		      beq	.End
     11  15fb
     12  15fb				   .Rainbow
     13  15fb		       85 09		      sta	COLUBK
     14  15fd		       ea		      nop
     15  15fe
     16  15fe				   .End
     17  15fe
      0  15fe					      THROB_RAINBOW_PF	17	; 22
      1  15fe
      2  15fe					      SUBROUTINE
      3  15fe
      4  15fe				   .X	      SET	17
      5  15fe
      6  15fe		       a5 ef		      lda	RamBowColors+.X
      7  1600		       d0 04		      bne	.Rainbow
      8  1602
      9  1602		       86 08		      stx	COLUPF
     10  1604		       f0 03		      beq	.End
     11  1606
     12  1606				   .Rainbow
     13  1606		       85 08		      sta	COLUPF
     14  1608		       ea		      nop
     15  1609
     16  1609				   .End
     17  1609
    264  1609
    265  1609		       a5 89		      lda	CatTartColor	; 25
    266  160b		       85 08		      sta	COLUPF	; 28
    267  160d		       86 09		      stx	COLUBK	; 31
    268  160f		       86 08		      stx	COLUPF	; 34
    269  1611
    270  1611		       88		      dey		; 36
    271  1612
    272  1612		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    273  1614		       85 1b		      sta	GRP0	; 44
    274  1616
    275  1616		       b1 99		      lda	(TartGfxPtr2),y	; 49
    276  1618		       85 0e		      sta	PF1	; 52
    277  161a
    278  161a		       a5 bc		      lda	CatRow2FoodL	; 55
    279  161c		       85 91		      sta	FoodGfxPtr1	; 58
    280  161e		       a5 bd		      lda	CatRow2FoodR	; 61
    281  1620		       85 93		      sta	FoodGfxPtr2	; 64
    282  1622
    283  1622		       a5 ba		      lda	CatRowHmove+1	; 67
    284  1624		       85 21		      sta	HMP1	; 70
    285  1626
    286  1626		       85 2a		      sta	HMOVE	; 73
    287  1628
    288  1628							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    289  1628							; Draw throb line #4
    290  1628
    291  1628		       a6 c1		      ldx	ThrobColor+1	; 00
      0  162a					      THROB_RAINBOW_BK	15	; 11
      1  162a
      2  162a					      SUBROUTINE
      3  162a
      4  162a				   .X	      SET	15
      5  162a
      6  162a		       a5 ed		      lda	RamBowColors+.X
      7  162c		       d0 04		      bne	.Rainbow
      8  162e
      9  162e		       86 09		      stx	COLUBK
     10  1630		       f0 03		      beq	.End
     11  1632
     12  1632				   .Rainbow
     13  1632		       85 09		      sta	COLUBK
     14  1634		       ea		      nop
     15  1635
     16  1635				   .End
     17  1635
      0  1635					      THROB_RAINBOW_PF	16	; 22
      1  1635
      2  1635					      SUBROUTINE
      3  1635
      4  1635				   .X	      SET	16
      5  1635
      6  1635		       a5 ee		      lda	RamBowColors+.X
      7  1637		       d0 04		      bne	.Rainbow
      8  1639
      9  1639		       86 08		      stx	COLUPF
     10  163b		       f0 03		      beq	.End
     11  163d
     12  163d				   .Rainbow
     13  163d		       85 08		      sta	COLUPF
     14  163f		       ea		      nop
     15  1640
     16  1640				   .End
     17  1640
    294  1640
    295  1640		       a5 89		      lda	CatTartColor	; 25
    296  1642		       85 08		      sta	COLUPF	; 28
    297  1644		       86 09		      stx	COLUBK	; 31
    298  1646		       86 08		      stx	COLUPF	; 34
    299  1648
    300  1648		       88		      dey		; 36
    301  1649
    302  1649		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    303  164b		       85 1b		      sta	GRP0	; 44
    304  164d
    305  164d		       b1 99		      lda	(TartGfxPtr2),y	; 49
    306  164f		       85 0e		      sta	PF1	; 52
    307  1651
    308  1651		       a5 be		      lda	CatRow2Color1	; 55
    309  1653		       85 c7		      sta	FoodColor1	; 58
    310  1655		       ae bf 00 	      ldx.w	CatRow2Color2	; 55
    311  1658		       9a		      txs		; 58
    312  1659
    313  1659		       a5 b9		      lda	CatRowHmove+0	; 67
    314  165b		       85 21		      sta	HMP1	; 70
    315  165d
    316  165d		       85 2a		      sta	HMOVE	; 73
    317  165f
    318  165f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    319  165f							; Draw throb line #5
    320  165f
    321  165f					      SUBROUTINE
    322  165f
    323  165f		       a6 c0		      ldx	ThrobColor+0	; 00
      0  1661					      THROB_RAINBOW_BK	14	; 11
      1  1661
      2  1661					      SUBROUTINE
      3  1661
      4  1661				   .X	      SET	14
      5  1661
      6  1661		       a5 ec		      lda	RamBowColors+.X
      7  1663		       d0 04		      bne	.Rainbow
      8  1665
      9  1665		       86 09		      stx	COLUBK
     10  1667		       f0 03		      beq	.End
     11  1669
     12  1669				   .Rainbow
     13  1669		       85 09		      sta	COLUBK
     14  166b		       ea		      nop
     15  166c
     16  166c				   .End
     17  166c
      0  166c					      THROB_RAINBOW_PF	15	; 22
      1  166c
      2  166c					      SUBROUTINE
      3  166c
      4  166c				   .X	      SET	15
      5  166c
      6  166c		       a5 ed		      lda	RamBowColors+.X
      7  166e		       d0 04		      bne	.Rainbow
      8  1670
      9  1670		       86 08		      stx	COLUPF
     10  1672		       f0 03		      beq	.End
     11  1674
     12  1674				   .Rainbow
     13  1674		       85 08		      sta	COLUPF
     14  1676		       ea		      nop
     15  1677
     16  1677				   .End
     17  1677
    326  1677
    327  1677		       a5 89		      lda	CatTartColor	; 25
    328  1679		       85 08		      sta	COLUPF	; 28
    329  167b		       86 09		      stx	COLUBK	; 31
    330  167d		       86 08		      stx	COLUPF	; 34
    331  167f
    332  167f		       88		      dey		; 36
    333  1680
    334  1680		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    335  1682		       85 1b		      sta	GRP0	; 44
    336  1684
    337  1684		       a6 c6		      ldx	CurrentRow	; 47
    338  1686		       b5 b2		      lda	FoodPosX,x	; 51
    339  1688		       c9 30		      cmp	#48	; 53
    340  168a
    341  168a		       a2 00		      ldx	#0	; 55
    342  168c		       ea		      nop		; 57
    343  168d
    344  168d							; Then output the 14 lines to draw a single row. This will include drawing
    345  168d							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    346  168d							; All graphics will be updated every line.
    347  168d
    348  168d		       b0 0b		      bcs	.RightEntrance	; 60/59
    349  168f		       90 42		      bcc	.LeftEntrance	; 62
    350  1691
    351  1691							; 14 bytes into the page
    352  1691
    353  1691							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    354  1691							; Kernel used when food items are closer to the right edge of the screen
    355  1691							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  1691
    357  1691				   .RightLoop
    358  1691
    359  1691							; 8 cycles
    360  1691		       b1 9b		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    361  1693		       85 1b		      sta	GRP0	; 52
    362  1695
    363  1695							; 9 cycles
    364  1695		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    365  1697		       ba		      tsx		; 57 - load 2nd food item's color
    366  1698		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    367  169a
    368  169a				   .RightEntrance		; enter loop here
    369  169a
    370  169a							; 2 cycles
    371  169a		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    372  169c
    373  169c							; 8 cycles
    374  169c		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    375  169e		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    376  16a0
    377  16a0							; 8 cycles
    378  16a0		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    379  16a2		       85 1c		      sta	GRP1	; 02
    380  16a4
    381  16a4							; 7 cycles
    382  16a4		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    383  16a7		       85 09		      sta	COLUBK	; 09
    384  16a9
    385  16a9							; 7 cycles
    386  16a9		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    387  16ac		       85 08		      sta	COLUPF	; 16
    388  16ae
    389  16ae							; 6 cycles
    390  16ae		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    391  16b0		       85 07		      sta	COLUP1	; 22
    392  16b2
    393  16b2							; 8 cycles
    394  16b2		       a5 89		      lda	CatTartColor	; 25
    395  16b4		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    396  16b6		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    397  16b8		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    398  16ba
    399  16ba							; 5 cycles
    400  16ba		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    401  16bc
    402  16bc							; 2 cycles
    403  16bc		       88		      dey		; 41
    404  16bd		       10 d2		      bpl	.RightLoop	; 44/43
    405  16bf
    406  16bf		       a0 12		      ldy	#18	; 45
    407  16c1		       b1 99		      lda	(TartGfxPtr2),y	; 50
    408  16c3
      0  16c3					      SLEEP	2	; 52
      1  16c3				   .CYCLES    SET	2
      2  16c3
      3  16c3				  -	      IF	.CYCLES < 2
      4  16c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c3				  -	      ERR
      6  16c3					      ENDIF
      7  16c3
      8  16c3				  -	      IF	.CYCLES & 1
      9  16c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c3				  -	      nop	0
     11  16c3				  -	      ELSE
     12  16c3				  -	      bit	VSYNC
     13  16c3				  -	      ENDIF
     14  16c3				  -.CYCLES    SET	.CYCLES - 3
     15  16c3					      ENDIF
     16  16c3
     17  16c3					      REPEAT	.CYCLES / 2
     18  16c3		       ea		      nop
     19  16c4					      REPEND
    410  16c4
    411  16c4		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    412  16c6		       ba		      tsx		; 57 - load 2nd food item's color
    413  16c7		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    414  16c9
    415  16c9		       b0 38		      bcs	.End	; 63
    416  16cb
    417  16cb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  16cb							; Kernel used when food items are closer to the left edge of the screen
    419  16cb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    420  16cb
    421  16cb				   .LeftLoop
    422  16cb
    423  16cb							; 8 cycles
    424  16cb		       b1 9b		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    425  16cd		       85 1b		      sta	GRP0	; 57
    426  16cf
    427  16cf							; 5 cycles
    428  16cf		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    429  16d1		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    430  16d3
    431  16d3				   .LeftEntrance		; enter loop here
    432  16d3
    433  16d3							; 8 cycles
    434  16d3		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    435  16d5		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    436  16d7
    437  16d7							; 8 cycles
    438  16d7		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    439  16d9		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    440  16db
    441  16db							; 7 cycles
    442  16db		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    443  16de		       85 09		      sta	COLUBK	; 09
    444  16e0
    445  16e0							; 7 cycles
    446  16e0		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    447  16e3		       85 08		      sta	COLUPF	; 16
    448  16e5
    449  16e5							; 6 cycles
    450  16e5		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    451  16e7		       85 07		      sta	COLUP1	; 22
    452  16e9
    453  16e9							; 8 cycles
    454  16e9		       a5 89		      lda	CatTartColor	; 25
    455  16eb		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    456  16ed		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    457  16ef
    458  16ef							; 13 cycles
    459  16ef		       b1 93		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    460  16f1		       ba		      tsx		; 38 - load 2nd food item's color
    461  16f2		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    462  16f4		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    463  16f6
    464  16f6							; 5 cycles
    465  16f6		       88		      dey		; 46
    466  16f7		       10 d2		      bpl	.LeftLoop	; 49/48
    467  16f9
    468  16f9		       a2 00		      ldx	#0	; 50
    469  16fb		       86 08		      stx	COLUPF	; 53
    470  16fd
    471  16fd		       a0 12		      ldy	#18	; 55
    472  16ff		       b1 99		      lda	(TartGfxPtr2),y	; 60
    473  1701
    474  1701		       86 1c		      stx	GRP1	; 63
    475  1703
    476  1703							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    477  1703
    478  1703				   .End
    479  1703
    480  1703		       a2 ff		      ldx	#$FF	; 65
    481  1705		       9a		      txs		; 67
    482  1706
    483  1706		       a2 00		      ldx	#0
    484  1708
    485  1708							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    486  1708							; Use this time to prepare the next row's food item pointers (unless this is
    487  1708							; the last row). If this is the last row, skip over LoRows.
    488  1708
    489  1708		       85 02		      sta	WSYNC
    490  170a		       a5 c0		      lda	ThrobColor+0
    491  170c		       85 09		      sta	COLUBK
    492  170e		       85 08		      sta	COLUPF
    493  1710		       86 1c		      stx	GRP1
    494  1712		       86 1b		      stx	GRP0
    495  1714
    496  1714		       c6 c6		      dec	CurrentRow
    497  1716		       30 03		      bmi	.GpEnd
    498  1718
    499  1718							; If the cat is at the very bottom of the screen, don't disable the
    500  1718							; missile/player graphics until after they are drawn, so they don't get
    501  1718							; clipped at the bottom of the screen. An easy way to do this would be to
    502  1718							; simply disable them after they would have been drawn, whether they are
    503  1718							; already disabled or not.
    504  1718
    505  1718		       4c 25 18 	      jmp	LoRows
    506  171b
    507  171b				   .GpEnd
    508  171b		       4c a7 18 	      jmp	GameplayEnd
    509  171e
    510  1800		       00 00 00 00*	      ALIGN	$100
    511  1800
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1800					      include	subroutines/DrawFoodRow.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 91		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 c7		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c4		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 93		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 c8		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE code/Gameplay Kernel/CatRows.asm
    513  1825
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1825					      include	code/Gameplay Kernel/LoRows.asm
      1  1825							; Draw all the rows below the cat's two rows.
      2  1825
      3  1825				   LoRows     SUBROUTINE
      4  1825
      5  1825		       85 02		      sta	WSYNC
      6  1827
      7  1827							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      8  1827							; player 1 for the next row's food items.
      9  1827
     10  1827		       a5 c1		      lda	ThrobColor+1	; 03
     11  1829		       85 09		      sta	COLUBK	; 06
     12  182b		       85 08		      sta	COLUPF	; 09
     13  182d
     14  182d		       a4 c6		      ldy	CurrentRow	; 12 - get the row we are drawing
     15  182f		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     16  1832
     17  1832		       38		      sec		; 18
     18  1833				   .DivideLoop
     19  1833		       e9 0f		      sbc	#15	; 20
     20  1835		       b0 fc		      bcs	.DivideLoop	; 22
     21  1837
     22  1837		       8d 11 00 	      sta.w	RESP1	; 26
     23  183a
     24  183a		       49 07		      eor	#7
     25  183c
     26  183c		       69 01		      adc	#1
     27  183e		       0a		      asl
     28  183f		       0a		      asl
     29  1840		       0a		      asl
     30  1841		       0a		      asl
     31  1842		       85 21		      sta	HMP1
     32  1844
     33  1844		       85 02		      sta	WSYNC
     34  1846
     35  1846		       a5 c2		      lda	ThrobColor+2	; 03
     36  1848		       85 09		      sta	COLUBK	; 06
     37  184a		       85 08		      sta	COLUPF	; 09
     38  184c
     39  184c		       20 24 18 	      jsr	Sleep12
     40  184f		       20 24 18 	      jsr	Sleep12
     41  1852		       20 24 18 	      jsr	Sleep12
     42  1855		       20 24 18 	      jsr	Sleep12
     43  1858		       20 24 18 	      jsr	Sleep12	; 69
     44  185b
     45  185b		       8d 2a 00 	      sta.w	HMOVE	; 73
     46  185e
     47  185e		       85 02		      sta	WSYNC
     48  1860
     49  1860		       a5 c1		      lda	ThrobColor+1
     50  1862		       85 09		      sta	COLUBK
     51  1864		       85 08		      sta	COLUPF
     52  1866		       85 02		      sta	WSYNC
     53  1868
     54  1868		       a5 c0		      lda	ThrobColor+0	; 3
     55  186a		       85 09		      sta	COLUBK	; 6
     56  186c		       85 08		      sta	COLUPF	; 9
     57  186e
     58  186e		       a4 c6		      ldy	CurrentRow	; 12
     59  1870
     60  1870		       b9 a4 00 	      lda	FoodItemL,y	; 16
     61  1873		       29 f0		      and	#$F0	; 18
     62  1875		       85 91		      sta	FoodGfxPtr1	; 21
     63  1877		       aa		      tax		; 23
     64  1878		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     65  187b		       85 c7		      sta	FoodColor1	; 30
     66  187d
     67  187d		       b9 ab 00 	      lda	FoodItemR,y	; 34
     68  1880		       29 f0		      and	#$F0	; 37
     69  1882		       85 93		      sta	FoodGfxPtr2	; 39
     70  1884		       aa		      tax		; 41
     71  1885		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     72  1888		       85 c8		      sta	FoodColor2	; 48
     73  188a
     74  188a		       b9 b2 00 	      lda	FoodPosX,y	; 52
     75  188d		       85 c4		      sta	Temp	; 55
     76  188f
     77  188f
     78  188f
     79  188f							; Output 14 lines to draw a row, exactly the same as in HiRows.
     80  188f							; It may be possible to code this as a subroutine to save ROM space.
     81  188f
     82  188f		       20 00 18 	      jsr	DrawFoodRow	; 61
     83  1892
     84  1892		       85 02		      sta	WSYNC
     85  1894
     86  1894							; Lastly, output a single line for the next "throb" line.
     87  1894							; Use this time to prepare the next row's food item pointers (unless this is
     88  1894							; the last row). If this is not the last row, loop to LoRows for the next row.
     89  1894
     90  1894		       a5 c0		      lda	ThrobColor+0
     91  1896		       85 09		      sta	COLUBK
     92  1898		       85 08		      sta	COLUPF
     93  189a		       a9 00		      lda	#0
     94  189c		       85 1b		      sta	GRP0
     95  189e		       85 1c		      sta	GRP1
     96  18a0
     97  18a0		       c6 c6		      dec	CurrentRow
     98  18a2		       10 81		      bpl	LoRows
     99  18a4
    100  18a4		       a2 ff		      ldx	#$FF
    101  18a6		       9a		      txs
    102  18a7
    103  18a7				   GameplayEnd
    104  18a7		       85 02		      sta	WSYNC
      0  18a9					      SLEEP	2
      1  18a9				   .CYCLES    SET	2
      2  18a9
      3  18a9				  -	      IF	.CYCLES < 2
      4  18a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  18a9				  -	      ERR
      6  18a9					      ENDIF
      7  18a9
      8  18a9				  -	      IF	.CYCLES & 1
      9  18a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  18a9				  -	      nop	0
     11  18a9				  -	      ELSE
     12  18a9				  -	      bit	VSYNC
     13  18a9				  -	      ENDIF
     14  18a9				  -.CYCLES    SET	.CYCLES - 3
     15  18a9					      ENDIF
     16  18a9
     17  18a9					      REPEAT	.CYCLES / 2
     18  18a9		       ea		      nop
     19  18aa					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  18aa					      include	code/ProgressHealthKernel.asm
      1  18aa		       a5 c1		      lda	ThrobColor+1
      2  18ac		       85 09		      sta	COLUBK
      3  18ae		       a9 00		      lda	#0
      4  18b0		       85 0d		      sta	PF0
      5  18b2		       85 0a		      sta	CTRLPF
      6  18b4		       a9 09		      lda	#COL_CAT_FACE
      7  18b6		       85 08		      sta	COLUPF
      8  18b8
      0  18b8					      SLEEP	32	; 53
      1  18b8				   .CYCLES    SET	32
      2  18b8
      3  18b8				  -	      IF	.CYCLES < 2
      4  18b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  18b8				  -	      ERR
      6  18b8					      ENDIF
      7  18b8
      8  18b8				  -	      IF	.CYCLES & 1
      9  18b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  18b8				  -	      nop	0
     11  18b8				  -	      ELSE
     12  18b8				  -	      bit	VSYNC
     13  18b8				  -	      ENDIF
     14  18b8				  -.CYCLES    SET	.CYCLES - 3
     15  18b8					      ENDIF
     16  18b8
     17  18b8					      REPEAT	.CYCLES / 2
     18  18b8		       ea		      nop
     17  18b8					      REPEND
     18  18b9		       ea		      nop
     17  18b9					      REPEND
     18  18ba		       ea		      nop
     17  18ba					      REPEND
     18  18bb		       ea		      nop
     17  18bb					      REPEND
     18  18bc		       ea		      nop
     17  18bc					      REPEND
     18  18bd		       ea		      nop
     17  18bd					      REPEND
     18  18be		       ea		      nop
     17  18be					      REPEND
     18  18bf		       ea		      nop
     17  18bf					      REPEND
     18  18c0		       ea		      nop
     17  18c0					      REPEND
     18  18c1		       ea		      nop
     17  18c1					      REPEND
     18  18c2		       ea		      nop
     17  18c2					      REPEND
     18  18c3		       ea		      nop
     17  18c3					      REPEND
     18  18c4		       ea		      nop
     17  18c4					      REPEND
     18  18c5		       ea		      nop
     17  18c5					      REPEND
     18  18c6		       ea		      nop
     17  18c6					      REPEND
     18  18c7		       ea		      nop
     19  18c8					      REPEND
     10  18c8
     11  18c8		       a9 20		      lda	#$20	; 55
     12  18ca		       85 20		      sta	HMP0	; 58
     13  18cc		       a9 b0		      lda	#$B0	; 60
     14  18ce		       85 21		      sta	HMP1	; 63
     15  18d0
     16  18d0		       85 10		      sta	RESP0	; 66
     17  18d2		       85 11		      sta	RESP1	; 69
     18  18d4
     19  18d4		       a9 00		      lda	#$00	; 71
     20  18d6
     21  18d6		       85 2a		      sta	HMOVE	; 74
     22  18d8
     23  18d8		       85 06		      sta	COLUP0
     24  18da		       85 07		      sta	COLUP1
     25  18dc
     26  18dc		       a5 87		      lda	ScoreColor
     27  18de		       85 09		      sta	COLUBK
     28  18e0
     29  18e0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  18e2		       85 04		      sta	NUSIZ0
     31  18e4		       85 05		      sta	NUSIZ1
     32  18e6
     33  18e6		       a9 08		      lda	#REFP_TRUE
     34  18e8		       85 0c		      sta	REFP1
     35  18ea
     36  18ea					      SUBROUTINE
     37  18ea
     38  18ea		       a0 04		      ldy	#4
     39  18ec		       85 02		      sta	WSYNC
     40  18ee
     41  18ee							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  18ee				   .HealthTop		; draw top of health
     43  18ee
     44  18ee		       a2 03		      ldx	#3
     45  18f0
     46  18f0				   .Loop
     47  18f0		       85 02		      sta	WSYNC
     48  18f2
     49  18f2		       b9 b8 1b 	      lda	HealthTopGfx,y	; 04
     50  18f5		       85 1b		      sta	GRP0	; 07
     51  18f7		       85 1c		      sta	GRP1	; 10
     52  18f9		       a9 00		      lda	#$00	; 12
     53  18fb		       85 0f		      sta	PF2	; 15
     54  18fd
     55  18fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     56  18fd							; Set the pointers for health graphics - 26 cycles
     57  18fd
     58  18fd		       18		      clc		; 17
     59  18fe
     60  18fe		       a9 1b		      lda	#>HealthLeftGfx	; 19
     61  1900		       85 9a		      sta	HthGfxLPtr+1	; 22
     62  1902		       85 9c		      sta	HthGfxRPtr+1	; 25
     63  1904
     64  1904		       a9 bd		      lda	#<HealthLeftGfx	; 27
     65  1906		       65 8b		      adc	Health	; 30
     66  1908		       85 99		      sta	HthGfxLPtr	; 33
     67  190a
     68  190a		       a9 dd		      lda	#<HealthRightGfx	; 35
     69  190c		       65 8b		      adc	Health	; 38
     70  190e		       85 9b		      sta	HthGfxRPtr	; 41
     71  1910
     72  1910
     73  1910
     74  1910		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
     75  1913		       85 0f		      sta	PF2	; 48
     76  1915
     77  1915		       ca		      dex		; 50
     78  1916		       d0 d8		      bne	.Loop	; 52
     79  1918
     80  1918		       88		      dey		; 54
     81  1919		       10 d3		      bpl	.HealthTop	; 56
     82  191b
     83  191b
     84  191b					      SUBROUTINE
     85  191b
     86  191b
     87  191b		       a0 03		      ldy	#3	; 58
     88  191d		       a2 03		      ldx	#3	; 60
     89  191f		       86 c4		      stx	Temp	; 63
     90  1921
     91  1921		       4c 00 1a 	      jmp	.HealthMiddle	; 66
     92  1924
     93  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
     94  1a00
     95  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  1a00				   .HealthMiddle		; draw middle of health, with progress bar
     97  1a00
     98  1a00		       85 02		      sta	WSYNC
     99  1a02				   .Loop
    100  1a02		       a5 8c		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    101  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    102  1a06
    103  1a06		       a5 8d		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    104  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    105  1a0a
    106  1a0a		       a5 8e		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    107  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    108  1a0e
    109  1a0e		       a5 88		      lda	PgBarColor	; 21 - get the progress bar color
    110  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    111  1a12
    112  1a12		       a5 8f		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    113  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    114  1a16
    115  1a16		       b1 99		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    116  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    117  1a1a		       b1 9b		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    118  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    119  1a1e
    120  1a1e		       a5 90		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    121  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    122  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    123  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    124  1a26
    125  1a26		       a5 87		      lda	ScoreColor	; 60 - get the color for the background
    126  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    127  1a2b
    128  1a2b		       ca		      dex		; 66
    129  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    130  1a2e
    131  1a2e		       a6 c4		      ldx	Temp	; 71
    132  1a30
    133  1a30		       88		      dey		; 73
    134  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    135  1a33
    136  1a33
    137  1a33
    138  1a33
    139  1a33
    140  1a33
    141  1a33
    142  1a33
    143  1a33
    144  1a33					      SUBROUTINE
    145  1a33
    146  1a33
    147  1a33		       a9 00		      lda	#0
    148  1a35		       85 0d		      sta	PF0
    149  1a37		       85 0e		      sta	PF1
    150  1a39
    151  1a39		       a0 07		      ldy	#7
    152  1a3b
    153  1a3b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    154  1a3b				   .HealthBottom		; draw bottom of health
    155  1a3b
    156  1a3b		       a2 03		      ldx	#3
    157  1a3d				   .Loop
    158  1a3d		       b1 99		      lda	(HthGfxLPtr),y
    159  1a3f		       85 1b		      sta	GRP0
    160  1a41		       b1 9b		      lda	(HthGfxRPtr),y
    161  1a43		       85 1c		      sta	GRP1
    162  1a45		       a9 00		      lda	#$00
    163  1a47		       85 0f		      sta	PF2
    164  1a49
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    166  1a50
    167  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    168  1a53		       85 0f		      sta	PF2
    169  1a55		       85 02		      sta	WSYNC
    170  1a57
    171  1a57		       ca		      dex
    172  1a58		       d0 e3		      bne	.Loop
    173  1a5a
    174  1a5a		       88		      dey
    175  1a5b		       c0 03		      cpy	#3
    176  1a5d		       d0 dc		      bne	.HealthBottom
    177  1a5f
    178  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  1a5f
    180  1a5f		       a9 00		      lda	#$00
    181  1a61		       85 1b		      sta	GRP0
    182  1a63		       85 1c		      sta	GRP1
    183  1a65		       85 0b		      sta	REFP0
    184  1a67		       85 0c		      sta	REFP1
    185  1a69		       85 0f		      sta	PF2
    186  1a6b
    187  1a6b		       85 02		      sta	WSYNC
    188  1a6d
------- FILE code/Kernel.asm
     13  1a6d
     14  1a6d		       a9 02		      lda	#2
     15  1a6f		       85 01		      sta	VBLANK	; disable display
     16  1a71
     17  1a71		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     72  1a74
     73  1a74		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     74  1a75
     75  1a75
     76  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  1a75							; Data Tables
     78  1a75							;
     79  1a75							; Include data tables
     80  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     81  1a75
     82  1a75							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1a75					      include	data/Graphics.asm
      1  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a75							; Graphics Tables
      3  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a75
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       38		      .byte.b	%00111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  1b50							; NUSIZx and ENAMx data for level counter graphics
    131  1b50							;
    132  1b50							; This table enables or disables each missile and adjusts the left missile's
    133  1b50							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  1b50							; left digit. (The right digit is drawn with the ball.)
    135  1b50							; Bit-1 is used to enable or disable the left missile,
    136  1b50							; and bit-0 is used to enable or disable the right missile.
    137  1b50							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  1b50							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  1b50							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  1b50							; correct for the score display.
    141  1b50							;
    142  1b50							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  1b50							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  1b50							; to normal when it is pulled from the stack.
    145  1b50							;
    146  1b50							; Table takes up $50 (80) bytes of ROM
    147  1b50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b50
    149  1b50				   LevelGfx
    150  1b50
    151  1b50							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  1b50							; ^^^^^^^^^
    153  1b50		       8f		      .byte.b	%10001111	; digit 0
    154  1b51		       4f		      .byte.b	%01001111
    155  1b52		       4f		      .byte.b	%01001111
    156  1b53		       4f		      .byte.b	%01001111
    157  1b54		       4f		      .byte.b	%01001111
    158  1b55		       4f		      .byte.b	%01001111
    159  1b56		       8f		      .byte.b	%10001111
    160  1b57		       00		      .byte.b	%00000000
    161  1b58
    162  1b58							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  1b58
    164  1b58							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  1b58							; ^^^^^^^^^
    166  1b58		       8d		      .byte.b	%10001101	; digit 1
    167  1b59		       4d		      .byte.b	%01001101
    168  1b5a		       4d		      .byte.b	%01001101
    169  1b5b		       8d		      .byte.b	%10001101
    170  1b5c		       4d		      .byte.b	%01001101
    171  1b5d		       4d		      .byte.b	%01001101
    172  1b5e		       8d		      .byte.b	%10001101
    173  1b5f		       00		      .byte.b	%00000000
    174  1b60
    175  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  1b60
    177  1b60							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  1b60							; ^^^^^^^^^
    179  1b60		       8f		      .byte.b	%10001111	; digit 2
    180  1b61		       4d		      .byte.b	%01001101
    181  1b62		       4d		      .byte.b	%01001101
    182  1b63		       8f		      .byte.b	%10001111
    183  1b64		       4e		      .byte.b	%01001110
    184  1b65		       4e		      .byte.b	%01001110
    185  1b66		       8f		      .byte.b	%10001111
    186  1b67		       00		      .byte.b	%00000000
    187  1b68
    188  1b68							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  1b68
    190  1b68							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  1b68							; ^^^^^^^^^
    192  1b68		       8f		      .byte.b	%10001111	; digit 3
    193  1b69		       4d		      .byte.b	%01001101
    194  1b6a		       4d		      .byte.b	%01001101
    195  1b6b		       8f		      .byte.b	%10001111
    196  1b6c		       4d		      .byte.b	%01001101
    197  1b6d		       4d		      .byte.b	%01001101
    198  1b6e		       8f		      .byte.b	%10001111
    199  1b6f		       00		      .byte.b	%00000000
    200  1b70
    201  1b70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  1b70
    203  1b70							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  1b70							; ^^^^^^^^^
    205  1b70		       4f		      .byte.b	%01001111	; digit 4
    206  1b71		       4f		      .byte.b	%01001111
    207  1b72		       4f		      .byte.b	%01001111
    208  1b73		       8f		      .byte.b	%10001111
    209  1b74		       4d		      .byte.b	%01001101
    210  1b75		       4d		      .byte.b	%01001101
    211  1b76		       4d		      .byte.b	%01001101
    212  1b77		       00		      .byte.b	%00000000
    213  1b78
    214  1b78							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  1b78
    216  1b78							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  1b78							; ^^^^^^^^^
    218  1b78		       8f		      .byte.b	%10001111	; digit 5
    219  1b79		       4e		      .byte.b	%01001110
    220  1b7a		       4e		      .byte.b	%01001110
    221  1b7b		       8f		      .byte.b	%10001111
    222  1b7c		       4d		      .byte.b	%01001101
    223  1b7d		       4d		      .byte.b	%01001101
    224  1b7e		       8f		      .byte.b	%10001111
    225  1b7f		       00		      .byte.b	%00000000
    226  1b80
    227  1b80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  1b80
    229  1b80							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  1b80							; ^^^^^^^^^
    231  1b80		       8f		      .byte.b	%10001111	; digit 6
    232  1b81		       4e		      .byte.b	%01001110
    233  1b82		       4e		      .byte.b	%01001110
    234  1b83		       8f		      .byte.b	%10001111
    235  1b84		       4f		      .byte.b	%01001111
    236  1b85		       4f		      .byte.b	%01001111
    237  1b86		       8f		      .byte.b	%10001111
    238  1b87		       00		      .byte.b	%00000000
    239  1b88
    240  1b88							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1b88
    242  1b88							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  1b88							; ^^^^^^^^^
    244  1b88		       8f		      .byte.b	%10001111	; digit 7
    245  1b89		       4d		      .byte.b	%01001101
    246  1b8a		       4d		      .byte.b	%01001101
    247  1b8b		       8d		      .byte.b	%10001101
    248  1b8c		       4d		      .byte.b	%01001101
    249  1b8d		       4d		      .byte.b	%01001101
    250  1b8e		       8d		      .byte.b	%10001101
    251  1b8f		       00		      .byte.b	%00000000
    252  1b90
    253  1b90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  1b90
    255  1b90							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  1b90							; ^^^^^^^^^
    257  1b90		       8f		      .byte.b	%10001111	; digit 8
    258  1b91		       4f		      .byte.b	%01001111
    259  1b92		       4f		      .byte.b	%01001111
    260  1b93		       8f		      .byte.b	%10001111
    261  1b94		       4f		      .byte.b	%01001111
    262  1b95		       4f		      .byte.b	%01001111
    263  1b96		       8f		      .byte.b	%10001111
    264  1b97		       00		      .byte.b	%00000000
    265  1b98
    266  1b98							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1b98
    268  1b98							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  1b98							; ^^^^^^^^^
    270  1b98		       8f		      .byte.b	%10001111	; digit 9
    271  1b99		       4f		      .byte.b	%01001111
    272  1b9a		       4f		      .byte.b	%01001111
    273  1b9b		       8f		      .byte.b	%10001111
    274  1b9c		       4d		      .byte.b	%01001101
    275  1b9d		       4d		      .byte.b	%01001101
    276  1b9e		       8f		      .byte.b	%10001111
    277  1b9f		       00		      .byte.b	%00000000
    278  1ba0
    279  1ba0
    280  1ba0
    281  1ba0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  1ba0							; Throbbing Line Graphics
    283  1ba0							;
    284  1ba0							; Graphics tables for the throbbing lines
    285  1ba0							;
    286  1ba0							; Table takes up $18 (24) bytes of ROM
    287  1ba0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  1ba0
    289  1ba0				   ThrobGfx
    290  1ba0
    291  1ba0		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    292  1ba1		       81		      .byte.b	LUM_2 + MODE_GREY
    293  1ba2		       02		      .byte.b	LUM_4 + MODE_COLOR
    294  1ba3
    295  1ba3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  1ba3
    297  1ba3		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    298  1ba4		       02		      .byte.b	LUM_4 + MODE_COLOR
    299  1ba5		       03		      .byte.b	LUM_6 + MODE_COLOR
    300  1ba6
    301  1ba6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  1ba6
    303  1ba6		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    304  1ba7		       03		      .byte.b	LUM_6 + MODE_COLOR
    305  1ba8		       04		      .byte.b	LUM_8 + MODE_COLOR
    306  1ba9
    307  1ba9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  1ba9
    309  1ba9		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    310  1baa		       04		      .byte.b	LUM_8 + MODE_COLOR
    311  1bab		       06		      .byte.b	LUM_C + MODE_COLOR
    312  1bac
    313  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  1bac
    315  1bac		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    316  1bad		       05		      .byte.b	LUM_A + MODE_COLOR
    317  1bae		       07		      .byte.b	LUM_E + MODE_COLOR
    318  1baf
    319  1baf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  1baf
    321  1baf		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    322  1bb0		       04		      .byte.b	LUM_8 + MODE_COLOR
    323  1bb1		       06		      .byte.b	LUM_C + MODE_COLOR
    324  1bb2
    325  1bb2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  1bb2
    327  1bb2		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    328  1bb3		       03		      .byte.b	LUM_6 + MODE_COLOR
    329  1bb4		       05		      .byte.b	LUM_A + MODE_COLOR
    330  1bb5
    331  1bb5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  1bb5
    333  1bb5		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    334  1bb6		       02		      .byte.b	LUM_4 + MODE_COLOR
    335  1bb7		       03		      .byte.b	LUM_6 + MODE_COLOR
    336  1bb8
    337  1bb8
    338  1bb8
    339  1bb8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  1bb8							; Health Graphics
    341  1bb8							;
    342  1bb8							; All of these tables are upside-down, and they are supposed to be used with the
    343  1bb8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  1bb8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  1bb8							; the graphics for the lower right are flipped.
    346  1bb8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  1bb8							; are set up in a confusing way. They are upside-down, but they are split
    348  1bb8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  1bb8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  1bb8							; LOWER 4 lines of graphics (also upside-down).
    351  1bb8							; The last table (HealthBgGfx) is for the grey background of the
    352  1bb8							; health graphics drawn with the playfield.
    353  1bb8							;
    354  1bb8							; Table takes up $45 (69) bytes of ROM
    355  1bb8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  1bb8
    357  1bb8				   HealthTopGfx
    358  1bb8
    359  1bb8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  1bb9		       43		      .byte.b	%01000011
    361  1bba		       44		      .byte.b	%01000100
    362  1bbb		       48		      .byte.b	%01001000
    363  1bbc		       30		      .byte.b	%00110000
    364  1bbd
    365  1bbd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  1bbd				   HealthLeftGfx
    367  1bbd
    368  1bbd		       80		      .byte.b	%10000000	; left health full (upper)
    369  1bbe		       8c		      .byte.b	%10001100
    370  1bbf		       84		      .byte.b	%10000100
    371  1bc0		       80		      .byte.b	%10000000
    372  1bc1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  1bc2		       20		      .byte.b	%00100000
    374  1bc3		       47		      .byte.b	%01000111
    375  1bc4		       84		      .byte.b	%10000100
    376  1bc5
    377  1bc5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  1bc5
    379  1bc5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  1bc6		       8c		      .byte.b	%10001100
    381  1bc7		       84		      .byte.b	%10000100
    382  1bc8		       80		      .byte.b	%10000000
    383  1bc9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  1bca		       20		      .byte.b	%00100000
    385  1bcb		       47		      .byte.b	%01000111
    386  1bcc		       80		      .byte.b	%10000000
    387  1bcd
    388  1bcd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  1bcd
    390  1bcd		       80		      .byte.b	%10000000	; left health low (upper)
    391  1bce		       8c		      .byte.b	%10001100
    392  1bcf		       84		      .byte.b	%10000100
    393  1bd0		       80		      .byte.b	%10000000
    394  1bd1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  1bd2		       20		      .byte.b	%00100000
    396  1bd3		       44		      .byte.b	%01000100
    397  1bd4		       87		      .byte.b	%10000111
    398  1bd5
    399  1bd5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  1bd5
    401  1bd5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  1bd6		       9c		      .byte.b	%10011100
    403  1bd7		       80		      .byte.b	%10000000
    404  1bd8		       80		      .byte.b	%10000000
    405  1bd9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  1bda		       20		      .byte.b	%00100000
    407  1bdb		       46		      .byte.b	%01000110
    408  1bdc		       81		      .byte.b	%10000001
    409  1bdd
    410  1bdd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  1bdd				   HealthRightGfx
    412  1bdd
    413  1bdd		       80		      .byte.b	%10000000	; right health full (upper)
    414  1bde		       9a		      .byte.b	%10011010
    415  1bdf		       90		      .byte.b	%10010000
    416  1be0		       80		      .byte.b	%10000000
    417  1be1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  1be2		       20		      .byte.b	%00100000
    419  1be3		       4f		      .byte.b	%01001111
    420  1be4		       89		      .byte.b	%10001001
    421  1be5
    422  1be5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  1be5
    424  1be5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  1be6		       9a		      .byte.b	%10011010
    426  1be7		       90		      .byte.b	%10010000
    427  1be8		       80		      .byte.b	%10000000
    428  1be9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  1bea		       20		      .byte.b	%00100000
    430  1beb		       4f		      .byte.b	%01001111
    431  1bec		       80		      .byte.b	%10000000
    432  1bed
    433  1bed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  1bed
    435  1bed		       80		      .byte.b	%10000000	; right health low (upper)
    436  1bee		       9a		      .byte.b	%10011010
    437  1bef		       88		      .byte.b	%10001000
    438  1bf0		       80		      .byte.b	%10000000
    439  1bf1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  1bf2		       20		      .byte.b	%00100000
    441  1bf3		       48		      .byte.b	%01001000
    442  1bf4		       8f		      .byte.b	%10001111
    443  1bf5
    444  1bf5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  1bf5
    446  1bf5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  1bf6		       ba		      .byte.b	%10111010
    448  1bf7		       80		      .byte.b	%10000000
    449  1bf8		       80		      .byte.b	%10000000
    450  1bf9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  1bfa		       20		      .byte.b	%00100000
    452  1bfb		       4c		      .byte.b	%01001100
    453  1bfc		       83		      .byte.b	%10000011
    454  1bfd
    455  1bfd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  1bfd
    457  1bfd							; 3 bytes left in this page
    458  1bfd
    459  1c00		       00 00 00 	      ALIGN	$100	; align to page
    460  1c00
    461  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  1c00				   HealthBgGfx
    463  1c00							; 13 bytes
    464  1c00
    465  1c00		       00		      .byte.b	%00000000
    466  1c01		       3e		      .byte.b	%00111110
    467  1c02		       7f		      .byte.b	%01111111
    468  1c03		       7f		      .byte.b	%01111111
    469  1c04		       7f		      .byte.b	%01111111
    470  1c05		       7f		      .byte.b	%01111111
    471  1c06		       7f		      .byte.b	%01111111
    472  1c07		       7f		      .byte.b	%01111111
    473  1c08		       7f		      .byte.b	%01111111
    474  1c09		       7f		      .byte.b	%01111111
    475  1c0a		       63		      .byte.b	%01100011
    476  1c0b		       63		      .byte.b	%01100011
    477  1c0c		       00		      .byte.b	%00000000
    478  1c0d
    479  1c0d
    480  1c0d
    481  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  1c0d							; Progress Bar Graphics
    483  1c0d							;
    484  1c0d							;
    485  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  1c0d
    487  1c0d				   PgBarGfx
    488  1c0d							; 9 bytes
    489  1c0d
    490  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    491  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  1c0f		       3f		      .byte.b	%00111111
    493  1c10		       1f		      .byte.b	%00011111
    494  1c11		       0f		      .byte.b	%00001111
    495  1c12		       07		      .byte.b	%00000111
    496  1c13		       03		      .byte.b	%00000011
    497  1c14		       01		      .byte.b	%00000001
    498  1c15		       00		      .byte.b	%00000000
    499  1c16
    500  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  1c16				   PgBarGfxR
    502  1c16							; 8 bytes
    503  1c16
    504  1c16		       ff		      .byte.b	%11111111	; PF2
    505  1c17		       fe		      .byte.b	%11111110
    506  1c18		       fc		      .byte.b	%11111100
    507  1c19		       f8		      .byte.b	%11111000
    508  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    510  1c1c		       c0		      .byte.b	%11000000
    511  1c1d		       80		      .byte.b	%10000000
    512  1c1e
    513  1c1e
    514  1c1e
    515  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    516  1c1e							; Cat Rainbow Graphics
    517  1c1e							;
    518  1c1e							;
    519  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    520  1c1e
    521  1c1e				   RainbowGfx
    522  1c1e							; 4 bytes
    523  1c1e
    524  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    525  1c1f
    526  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    527  1c20
    528  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    529  1c21
    530  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    531  1c22
    532  1d00		       00 00 00 00*	      ALIGN	$100
    533  1d00
    534  1d00				   FoodGfx
    535  1d00
    536  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    537  1d00							; 0 - blank
    538  1d00
    539  1d00		       01		      .byte.b	%00000001
    540  1d01		       80		      .byte.b	%10000000
    541  1d02		       01		      .byte.b	%00000001
    542  1d03		       80		      .byte.b	%10000000
    543  1d04		       01		      .byte.b	%00000001
    544  1d05		       80		      .byte.b	%10000000
    545  1d06		       01		      .byte.b	%00000001
    546  1d07		       80		      .byte.b	%10000000
    547  1d08		       01		      .byte.b	%00000001
    548  1d09		       80		      .byte.b	%10000000
    549  1d0a		       01		      .byte.b	%00000001
    550  1d0b		       80		      .byte.b	%10000000
    551  1d0c		       01		      .byte.b	%00000001
    552  1d0d		       80		      .byte.b	%10000000
    553  1d0e
    554  1d0e		       00		      .byte.b	0
    555  1d0f		       00		      .byte.b	$00
    556  1d10
    557  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    558  1d10							; 1 - apple
    559  1d10
    560  1d10		       34		      .byte.b	%00110100
    561  1d11		       7e		      .byte.b	%01111110
    562  1d12		       7e		      .byte.b	%01111110
    563  1d13		       ff		      .byte.b	%11111111
    564  1d14		       ff		      .byte.b	%11111111
    565  1d15		       ff		      .byte.b	%11111111
    566  1d16		       ff		      .byte.b	%11111111
    567  1d17		       ff		      .byte.b	%11111111
    568  1d18		       ff		      .byte.b	%11111111
    569  1d19		       7f		      .byte.b	%01111111
    570  1d1a		       6a		      .byte.b	%01101010
    571  1d1b		       08		      .byte.b	%00001000
    572  1d1c		       0c		      .byte.b	%00001100
    573  1d1d		       04		      .byte.b	%00000100
    574  1d1e
    575  1d1e		       00		      .byte.b	0
    576  1d1f		       46		      .byte.b	$46
    577  1d20
    578  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    579  1d20							; 2 - peach
    580  1d20
    581  1d20		       3c		      .byte.b	%00111100
    582  1d21		       6e		      .byte.b	%01101110
    583  1d22		       6e		      .byte.b	%01101110
    584  1d23		       df		      .byte.b	%11011111
    585  1d24		       df		      .byte.b	%11011111
    586  1d25		       bf		      .byte.b	%10111111
    587  1d26		       bf		      .byte.b	%10111111
    588  1d27		       bf		      .byte.b	%10111111
    589  1d28		       de		      .byte.b	%11011110
    590  1d29		       5e		      .byte.b	%01011110
    591  1d2a		       6c		      .byte.b	%01101100
    592  1d2b		       18		      .byte.b	%00011000
    593  1d2c		       10		      .byte.b	%00010000
    594  1d2d		       30		      .byte.b	%00110000
    595  1d2e
    596  1d2e		       00		      .byte.b	0
    597  1d2f		       3a		      .byte.b	$3A
    598  1d30
    599  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    600  1d30							; 3 - banana
    601  1d30
    602  1d30		       38		      .byte.b	%00111000
    603  1d31		       7c		      .byte.b	%01111100
    604  1d32		       fe		      .byte.b	%11111110
    605  1d33		       fe		      .byte.b	%11111110
    606  1d34		       ff		      .byte.b	%11111111
    607  1d35		       ff		      .byte.b	%11111111
    608  1d36		       8f		      .byte.b	%10001111
    609  1d37		       07		      .byte.b	%00000111
    610  1d38		       07		      .byte.b	%00000111
    611  1d39		       03		      .byte.b	%00000011
    612  1d3a		       03		      .byte.b	%00000011
    613  1d3b		       02		      .byte.b	%00000010
    614  1d3c		       06		      .byte.b	%00000110
    615  1d3d		       06		      .byte.b	%00000110
    616  1d3e
    617  1d3e		       00		      .byte.b	0
    618  1d3f		       1e		      .byte.b	$1E
    619  1d40
    620  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    621  1d40							; 4 - pear
    622  1d40
    623  1d40		       38		      .byte.b	%00111000
    624  1d41		       7c		      .byte.b	%01111100
    625  1d42		       fe		      .byte.b	%11111110
    626  1d43		       fe		      .byte.b	%11111110
    627  1d44		       fe		      .byte.b	%11111110
    628  1d45		       fe		      .byte.b	%11111110
    629  1d46		       7c		      .byte.b	%01111100
    630  1d47		       7c		      .byte.b	%01111100
    631  1d48		       38		      .byte.b	%00111000
    632  1d49		       38		      .byte.b	%00111000
    633  1d4a		       30		      .byte.b	%00110000
    634  1d4b		       10		      .byte.b	%00010000
    635  1d4c		       18		      .byte.b	%00011000
    636  1d4d		       08		      .byte.b	%00001000
    637  1d4e
    638  1d4e		       00		      .byte.b	0
    639  1d4f		       cc		      .byte.b	$CC
    640  1d50
    641  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    642  1d50							; 5 - plum
    643  1d50
    644  1d50		       38		      .byte.b	%00111000
    645  1d51		       6c		      .byte.b	%01101100
    646  1d52		       6e		      .byte.b	%01101110
    647  1d53		       de		      .byte.b	%11011110
    648  1d54		       df		      .byte.b	%11011111
    649  1d55		       bf		      .byte.b	%10111111
    650  1d56		       bf		      .byte.b	%10111111
    651  1d57		       bf		      .byte.b	%10111111
    652  1d58		       de		      .byte.b	%11011110
    653  1d59		       de		      .byte.b	%11011110
    654  1d5a		       5e		      .byte.b	%01011110
    655  1d5b		       3c		      .byte.b	%00111100
    656  1d5c		       20		      .byte.b	%00100000
    657  1d5d		       60		      .byte.b	%01100000
    658  1d5e
    659  1d5e		       00		      .byte.b	0
    660  1d5f		       88		      .byte.b	$88
    661  1d60
    662  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    663  1d60							; 6 - grapes
    664  1d60
    665  1d60		       18		      .byte.b	%00011000
    666  1d61		       08		      .byte.b	%00001000
    667  1d62		       36		      .byte.b	%00110110
    668  1d63		       12		      .byte.b	%00010010
    669  1d64		       6c		      .byte.b	%01101100
    670  1d65		       24		      .byte.b	%00100100
    671  1d66		       db		      .byte.b	%11011011
    672  1d67		       49		      .byte.b	%01001001
    673  1d68		       36		      .byte.b	%00110110
    674  1d69		       12		      .byte.b	%00010010
    675  1d6a		       6c		      .byte.b	%01101100
    676  1d6b		       34		      .byte.b	%00110100
    677  1d6c		       10		      .byte.b	%00010000
    678  1d6d		       18		      .byte.b	%00011000
    679  1d6e
    680  1d6e		       00		      .byte.b	0
    681  1d6f		       64		      .byte.b	$64
    682  1d70
    683  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    684  1d70							; 7 - broccoli
    685  1d70
    686  1d70		       18		      .byte.b	%00011000
    687  1d71		       18		      .byte.b	%00011000
    688  1d72		       1c		      .byte.b	%00011100
    689  1d73		       3e		      .byte.b	%00111110
    690  1d74		       2a		      .byte.b	%00101010
    691  1d75		       12		      .byte.b	%00010010
    692  1d76		       2a		      .byte.b	%00101010
    693  1d77		       54		      .byte.b	%01010100
    694  1d78		       aa		      .byte.b	%10101010
    695  1d79		       55		      .byte.b	%01010101
    696  1d7a		       aa		      .byte.b	%10101010
    697  1d7b		       55		      .byte.b	%01010101
    698  1d7c		       2a		      .byte.b	%00101010
    699  1d7d		       04		      .byte.b	%00000100
    700  1d7e
    701  1d7e		       00		      .byte.b	0
    702  1d7f		       c7		      .byte.b	$C7
    703  1d80
    704  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    705  1d80							; 8 - cabbage
    706  1d80
    707  1d80		       18		      .byte.b	%00011000
    708  1d81		       76		      .byte.b	%01110110
    709  1d82		       76		      .byte.b	%01110110
    710  1d83		       7a		      .byte.b	%01111010
    711  1d84		       f9		      .byte.b	%11111001
    712  1d85		       fb		      .byte.b	%11111011
    713  1d86		       ed		      .byte.b	%11101101
    714  1d87		       db		      .byte.b	%11011011
    715  1d88		       fb		      .byte.b	%11111011
    716  1d89		       e9		      .byte.b	%11101001
    717  1d8a		       56		      .byte.b	%01010110
    718  1d8b		       76		      .byte.b	%01110110
    719  1d8c		       6e		      .byte.b	%01101110
    720  1d8d		       18		      .byte.b	%00011000
    721  1d8e
    722  1d8e		       00		      .byte.b	0
    723  1d8f		       da		      .byte.b	$DA
    724  1d90
    725  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    726  1d90							; 9 - celery
    727  1d90
    728  1d90		       c0		      .byte.b	%11000000
    729  1d91		       e0		      .byte.b	%11100000
    730  1d92		       70		      .byte.b	%01110000
    731  1d93		       30		      .byte.b	%00110000
    732  1d94		       18		      .byte.b	%00011000
    733  1d95		       18		      .byte.b	%00011000
    734  1d96		       0c		      .byte.b	%00001100
    735  1d97		       0c		      .byte.b	%00001100
    736  1d98		       0e		      .byte.b	%00001110
    737  1d99		       06		      .byte.b	%00000110
    738  1d9a		       0d		      .byte.b	%00001101
    739  1d9b		       0b		      .byte.b	%00001011
    740  1d9c		       0d		      .byte.b	%00001101
    741  1d9d		       06		      .byte.b	%00000110
    742  1d9e
    743  1d9e		       00		      .byte.b	0
    744  1d9f		       d6		      .byte.b	$D6
    745  1da0
    746  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    747  1da0							; A - green pepper
    748  1da0
    749  1da0		       6c		      .byte.b	%01101100
    750  1da1		       6c		      .byte.b	%01101100
    751  1da2		       fe		      .byte.b	%11111110
    752  1da3		       fe		      .byte.b	%11111110
    753  1da4		       f6		      .byte.b	%11110110
    754  1da5		       f6		      .byte.b	%11110110
    755  1da6		       f6		      .byte.b	%11110110
    756  1da7		       f6		      .byte.b	%11110110
    757  1da8		       f6		      .byte.b	%11110110
    758  1da9		       ec		      .byte.b	%11101100
    759  1daa		       7c		      .byte.b	%01111100
    760  1dab		       10		      .byte.b	%00010000
    761  1dac		       18		      .byte.b	%00011000
    762  1dad		       08		      .byte.b	%00001000
    763  1dae
    764  1dae		       00		      .byte.b	0
    765  1daf		       c8		      .byte.b	$C8
    766  1db0
    767  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    768  1db0							; B - pumpkin
    769  1db0
    770  1db0		       3c		      .byte.b	%00111100
    771  1db1		       56		      .byte.b	%01010110
    772  1db2		       b7		      .byte.b	%10110111
    773  1db3		       ad		      .byte.b	%10101101
    774  1db4		       ad		      .byte.b	%10101101
    775  1db5		       ad		      .byte.b	%10101101
    776  1db6		       ad		      .byte.b	%10101101
    777  1db7		       ad		      .byte.b	%10101101
    778  1db8		       b7		      .byte.b	%10110111
    779  1db9		       56		      .byte.b	%01010110
    780  1dba		       3c		      .byte.b	%00111100
    781  1dbb		       18		      .byte.b	%00011000
    782  1dbc		       0c		      .byte.b	%00001100
    783  1dbd		       0c		      .byte.b	%00001100
    784  1dbe
    785  1dbe		       00		      .byte.b	0
    786  1dbf		       2a		      .byte.b	$2A
    787  1dc0
    788  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    789  1dc0							; C - mushroom
    790  1dc0
    791  1dc0		       18		      .byte.b	%00011000
    792  1dc1		       3c		      .byte.b	%00111100
    793  1dc2		       24		      .byte.b	%00100100
    794  1dc3		       24		      .byte.b	%00100100
    795  1dc4		       24		      .byte.b	%00100100
    796  1dc5		       66		      .byte.b	%01100110
    797  1dc6		       a5		      .byte.b	%10100101
    798  1dc7		       99		      .byte.b	%10011001
    799  1dc8		       e7		      .byte.b	%11100111
    800  1dc9		       ff		      .byte.b	%11111111
    801  1dca		       5a		      .byte.b	%01011010
    802  1dcb		       76		      .byte.b	%01110110
    803  1dcc		       3c		      .byte.b	%00111100
    804  1dcd		       18		      .byte.b	%00011000
    805  1dce
    806  1dce		       00		      .byte.b	0
    807  1dcf		       08		      .byte.b	$08
    808  1dd0
    809  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    810  1dd0							; D - key
    811  1dd0
    812  1dd0		       10		      .byte.b	%00010000
    813  1dd1		       1e		      .byte.b	%00011110
    814  1dd2		       1e		      .byte.b	%00011110
    815  1dd3		       18		      .byte.b	%00011000
    816  1dd4		       1e		      .byte.b	%00011110
    817  1dd5		       1e		      .byte.b	%00011110
    818  1dd6		       10		      .byte.b	%00010000
    819  1dd7		       10		      .byte.b	%00010000
    820  1dd8		       10		      .byte.b	%00010000
    821  1dd9		       10		      .byte.b	%00010000
    822  1dda		       38		      .byte.b	%00111000
    823  1ddb		       6c		      .byte.b	%01101100
    824  1ddc		       6c		      .byte.b	%01101100
    825  1ddd		       38		      .byte.b	%00111000
    826  1dde
    827  1dde		       00		      .byte.b	0
    828  1ddf		       2c		      .byte.b	$2C
    829  1de0
    830  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    831  1de0							; E - ring
    832  1de0
    833  1de0		       00		      .byte.b	%00000000
    834  1de1		       18		      .byte.b	%00011000
    835  1de2		       3c		      .byte.b	%00111100
    836  1de3		       66		      .byte.b	%01100110
    837  1de4		       42		      .byte.b	%01000010
    838  1de5		       42		      .byte.b	%01000010
    839  1de6		       42		      .byte.b	%01000010
    840  1de7		       66		      .byte.b	%01100110
    841  1de8		       3c		      .byte.b	%00111100
    842  1de9		       18		      .byte.b	%00011000
    843  1dea		       18		      .byte.b	%00011000
    844  1deb		       2c		      .byte.b	%00101100
    845  1dec		       18		      .byte.b	%00011000
    846  1ded		       00		      .byte.b	%00000000
    847  1dee
    848  1dee		       00		      .byte.b	0
    849  1def		       2c		      .byte.b	$2C
    850  1df0
    851  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    852  1df0							; F - heart
    853  1df0
    854  1df0		       00		      .byte.b	%00000000
    855  1df1		       18		      .byte.b	%00011000
    856  1df2		       18		      .byte.b	%00011000
    857  1df3		       3c		      .byte.b	%00111100
    858  1df4		       3c		      .byte.b	%00111100
    859  1df5		       7e		      .byte.b	%01111110
    860  1df6		       7e		      .byte.b	%01111110
    861  1df7		       ff		      .byte.b	%11111111
    862  1df8		       ff		      .byte.b	%11111111
    863  1df9		       ff		      .byte.b	%11111111
    864  1dfa		       e7		      .byte.b	%11100111
    865  1dfb		       e7		      .byte.b	%11100111
    866  1dfc		       42		      .byte.b	%01000010
    867  1dfd		       00		      .byte.b	%00000000
    868  1dfe
    869  1dfe		       00		      .byte.b	0
    870  1dff		       4a		      .byte.b	$4A
    871  1e00
    872  1e00				   RainbowColors
    873  1e00
    874  1e00		       64		      .byte.b	$64
    875  1e01		       88		      .byte.b	$88
    876  1e02		       c8		      .byte.b	$C8
    877  1e03		       1e		      .byte.b	$1E
    878  1e04		       28		      .byte.b	$28
    879  1e05		       44		      .byte.b	$44
    880  1e06
    881  1e06				   CatTartGfx
    882  1e06
    883  1e06		       00 00 00 00*	      ds	19, $00
    884  1e19
    885  1e19		       00		      .byte.b	%00000000
    886  1e1a		       00		      .byte.b	%00000000
    887  1e1b		       e0		      .byte.b	%11100000
    888  1e1c		       c0		      .byte.b	%11000000
    889  1e1d		       c0		      .byte.b	%11000000
    890  1e1e		       c0		      .byte.b	%11000000
    891  1e1f		       c0		      .byte.b	%11000000
    892  1e20		       c0		      .byte.b	%11000000
    893  1e21		       c0		      .byte.b	%11000000
    894  1e22		       e0		      .byte.b	%11100000
    895  1e23		       e0		      .byte.b	%11100000
    896  1e24		       e0		      .byte.b	%11100000
    897  1e25		       e0		      .byte.b	%11100000
    898  1e26		       e0		      .byte.b	%11100000
    899  1e27
    900  1e27				   CatFaceGfx
    901  1e27
    902  1e27		       00 00 00 00*	      ds	19, $00
    903  1e3a
    904  1e3a		       36		      .byte.b	%00110110
    905  1e3b		       36		      .byte.b	%00110110
    906  1e3c		       00		      .byte.b	%00000000
    907  1e3d		       7e		      .byte.b	%01111110
    908  1e3e		       c1		      .byte.b	%11000001
    909  1e3f		       d5		      .byte.b	%11010101
    910  1e40		       ff		      .byte.b	%11111111
    911  1e41		       d5		      .byte.b	%11010101
    912  1e42		       dd		      .byte.b	%11011101
    913  1e43		       ff		      .byte.b	%11111111
    914  1e44		       66		      .byte.b	%01100110
    915  1e45		       66		      .byte.b	%01100110
    916  1e46		       42		      .byte.b	%01000010
    917  1e47		       00		      .byte.b	%00000000
    918  1e48
    919  1e48		       00 00 00 00*	      ds	19, $00
------- FILE main.asm
     84  1e5b
     85  1e5b		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     86  1e5c
     87  1e5c
     88  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  1e5c							; End of ROM
     90  1e5c							;
     91  1e5c							; Define the end of the cartridge
     92  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     93  1e5c
     94  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     95  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     96  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     97  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
