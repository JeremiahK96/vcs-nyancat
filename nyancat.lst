------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10000 ????						;
      3  10000 ????						; Project - Nyan Cat Game
      4  10000 ????						; by Jeremiah Knol
      5  10000 ????						;
      6  10000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  10000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  10000 ????						;
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????						; 12-11-2017 Version 2.2
     12  10000 ????						;
     13  10000 ????						; Optimize cycle timings in the cat row kernel loop
     14  10000 ????						; Add 2nd version of kernel for different food positions
     15  10000 ????						;
     16  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     17  10000 ????
     18  10000 ????
     19  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     20  10000 ????						; Initialization
     21  10000 ????						;
     22  10000 ????						; Include headers and set address of binary
     23  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  10000 ????
     25  10000 ????						; Define CPU type and include standard VCS header files
     26  10000 ????				       PROCESSOR	6502
     27  10000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	headers/vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     30  0000 ????
     31  0000 ????						; Include TIA/program equates and RAM labels
     32  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	#0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	#1
     49  0000 ????
     50  0000 ????
     51  0000 ????
     52  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  0000 ????						; Program Equates
     54  0000 ????						;
     55  0000 ????						; Equates for constant program values.
     56  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57  0000 ????
     58  0000 ????						; number of scanlines in vertical blank and overscan
     59  0000 ????
     60  0000 ????	       00 25	   VBLANK_SCANLINES equ	#37
     61  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	#29
     62  0000 ????
     63  0000 ????						; converted values to store to TIM64T
     64  0000 ????
     65  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     66  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     67  0000 ????
     68  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  0000 ????						; colors
     70  0000 ????
     71  0000 ????	       00 02	   COL_SCORE  equ	$02
     72  0000 ????						;COL_SCOREBOARD		equ $4C
     73  0000 ????	       00 0e	   COL_SCOREBOARD equ	$0E
     74  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     75  0000 ????	       00 00	   COL_LINES  equ	COL_BACKGROUND
     76  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     77  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     78  0000 ????
     79  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     81  0000 ????
     82  0000 ????	       00 00	   LUM_0      equ	$00
     83  0000 ????	       00 02	   LUM_2      equ	$02
     84  0000 ????	       00 04	   LUM_4      equ	$04
     85  0000 ????	       00 06	   LUM_6      equ	$06
     86  0000 ????	       00 08	   LUM_8      equ	$08
     87  0000 ????	       00 0a	   LUM_A      equ	$0A
     88  0000 ????	       00 0c	   LUM_C      equ	$0C
     89  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00c0 ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for the level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw the progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of the 5 values to be written to the playfield
     39 U008e							; registers when drawing the progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for the full part of the progress bar
     42 U008f
     43 U008f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44 U008f							; Variables for the health display
     45 U008f
     46 U008f		       00	   Health     ds	1	; amount of health
     47 U0090							; 0=full 8=medium 16=low 24=empty
     48 U0090
     49 U0090		       00 00	   HthGfxLPtr ds	2	; pointer for the left half of the health graphics
     50 U0092		       00 00	   HthGfxRPtr ds	2	; pointer for the right half of the health graphics
     51 U0094
     52 U0094							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0094							; Variables used when drawing the cat
     54 U0094
     55 U0094		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     56 U0095
     57 U0095		       00 00	   RbowColPtr1 ds	2	; pointer for the playfield rainbow color
     58 U0097		       00 00	   RbowColPtr2 ds	2	; pointer for the background rainbow color
     59 U0099
     60 U0099		       00 00	   TartGfxPtr ds	2	; pointer for the tart graphics
     61 U009b		       00 00	   CatGfxPtr  ds	2	; pointer for the cat face/paws graphics
     62 U009d
     63 U009d		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     64 U009e		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     65 U009f
     66 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67 U009f							; Variables used for the food items
     68 U009f
     69 U009f		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
     70 U00a6		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
     71 U00ad							; the left items, last 7 bytes are for the right items.
     72 U00ad							; Hi nybble holds the value (0-15) of the item to draw.
     73 U00ad							; Lo nybble holds the value of next frame's item.
     74 U00ad							; All nybbles are swapped at the start of each frame.
     75 U00ad
     76 U00ad		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
     77 U00b4
     78 U00b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U00b4							; Variables for the throbbing lines' colors
     80 U00b4
     81 U00b4		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     82 U00b7							; throbbing lines. The first color is darkest,
     83 U00b7							; the last is brightest.
     84 U00b7
     85 U00b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86 U00b7							; Temporary variables which cannot be shared with stack space
     87 U00b7
     88 U00b7		       00	   TempLoop   ds	1
     89 U00b8
     90 U00b8							; 57 of 79 non-temporary RAM bytes used (22 left)
     91 U00b8							; last 49 bytes of RAM are used for stack space
     92 U00b8
     93 U00b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     94 U00b8							; Temporary variables which can be shared with stack space
     95 U00b8
     96 U00b8		       00	   Temp       ds	1
     97 U00b9
     98 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99 U00b9							; Other variables which can be shared with stack space
    100 U00b9
    101 U00b9		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    102 U00ba
    103 U00ba		       00 00	   FoodGfxPtr1 ds	2	; pointer for the 1st food item's graphics
    104 U00bc		       00	   FoodColor1 ds	1	; color if the 1st food item
    105 U00bd
    106 U00bd		       00 00	   FoodGfxPtr2 ds	2	; pointer for the 2nd food item's graphics
    107 U00bf		       00	   FoodColor2 ds	1	; color if the 2nd food item
    108 U00c0
    109 U00c0							; 8 of 49 temporary RAM bytes used (42 left)
------- FILE main.asm
     35 U00c0
     36 U00c0							; Ensure that the code is placed in the proper place in the binary
     37 U00c0
     38  10000 ????				       SEG	CODE
     39  f000					      ORG	$F000	; 4K ROM
     40  f000
     41  f000
     42  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43  f000							; Full System Clear
     44  f000							;
     45  f000							; Clear all system registers and RAM at startup
     46  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  f000
     48  f000				   SystemClear
     49  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     51  f00b
     52  f00b
     53  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  f00b							; Game Logic
     55  f00b							;
     56  f00b							; Do the overscan, vertycal sync, and vertical blanking,
     57  f00b							; along with any game logic
     58  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f00b
------- FILE code/GameLogic.asm LEVEL 2 PASS 2
      0  f00b					      include	code/GameLogic.asm
      1  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f00b							; Overscan
      3  f00b							;
      4  f00b							; Start the overscan timer and do game logic
      5  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f00b
      7  f00b				   Overscan
      8  f00b
      9  f00b		       a9 23		      lda	#OVERSCAN_TIMER
     10  f00d		       85 02		      sta	WSYNC
     11  f00f		       8d 96 02 	      sta	TIM64T	; 03
     12  f012
     13  f012
     14  f012
     15  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f012							; Update Score
     17  f012							;
     18  f012							; Add to the score
     19  f012							;
     20  f012							; Takes 45 cycles to complete
     21  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f012
     23  f012		       a5 85		      lda	BCDScoreAdd+1	; 2
     24  f014		       a6 84		      ldx	BCDScoreAdd	; 2
     25  f016
     26  f016		       f8		      sed		; 2 - enable BCD mode
     27  f017
     28  f017		       18		      clc		; 2
     29  f018		       85 b8		      sta	Temp	; 3
     30  f01a		       a5 83		      lda	BCDScore+2	; 2
     31  f01c		       65 b8		      adc	Temp	; 3
     32  f01e		       85 83		      sta	BCDScore+2	; 3
     33  f020		       86 b8		      stx	Temp	; 3
     34  f022		       a5 82		      lda	BCDScore+1	; 2
     35  f024		       65 b8		      adc	Temp	; 3
     36  f026		       85 82		      sta	BCDScore+1	; 3
     37  f028		       a9 00		      lda	#$00	; 2
     38  f02a		       85 b8		      sta	Temp	; 3
     39  f02c		       a5 81		      lda	BCDScore+0	; 2
     40  f02e		       65 b8		      adc	Temp	; 3
     41  f030		       85 81		      sta	BCDScore+0	; 3
     42  f032
     43  f032		       d8		      cld		; 2 - disable BCD mode
     44  f033
     45  f033
     46  f033
     47  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  f033							; Finish Overscan
     49  f033							;
     50  f033							; Loop until the end of overscan
     51  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  f033
     53  f033				   OverscanTimerLoop
     54  f033		       ad 84 02 	      lda	INTIM
     55  f036		       d0 fb		      bne	OverscanTimerLoop
     56  f038
     57  f038
     58  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f038							; Vertical Sync
     60  f038							;
     61  f038							; Do the vertical sync and start the vertical blanking timer
     62  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f038
     64  f038		       a9 02		      lda	#2
     65  f03a		       85 02		      sta	WSYNC
     66  f03c		       85 00		      sta	VSYNC	; enable VSYNC
     67  f03e
     68  f03e		       85 02		      sta	WSYNC
     69  f040		       a9 2d		      lda	#VBLANK_TIMER
     70  f042		       85 02		      sta	WSYNC
     71  f044		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     72  f047
     73  f047		       85 2b		      sta	HMCLR	; clear any HMOVE offsets
     74  f049
     75  f049		       a9 00		      lda	#0
     76  f04b		       85 02		      sta	WSYNC
     77  f04d		       85 00		      sta	VSYNC	; disable VSYNC
     78  f04f
     79  f04f
     80  f04f
     81  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  f04f							; Vertical Blank
     83  f04f							;
     84  f04f							; Do the vertical blanking and game logic
     85  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  f04f
     87  f04f
     88  f04f
     89  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  f04f							; Prepare Scoreboard and Level Progress Displays
     91  f04f							;
     92  f04f							; Set object positions for scoreboard kernel.
     93  f04f							; Also load the values for the playfield registers in RAM
     94  f04f							; for drawing the level progress bar.
     95  f04f							;
     96  f04f							; Takes 193 cycles (2 full scanlines + 41 cycles)
     97  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  f04f
     99  f04f		       a9 b0		      lda	#$B0	; 05 - set HMOVE offsets for both player objects
    100  f051		       85 20		      sta	HMP0	; 08
    101  f053		       a9 c0		      lda	#$C0	; 10
    102  f055		       85 21		      sta	HMP1	; 13
    103  f057		       a9 80		      lda	#$80	; 15 - set HMOVE offsets for ball and missile0
    104  f059		       85 24		      sta	HMBL	; 18
    105  f05b		       85 22		      sta	HMM0	; 21
    106  f05d
      0  f05d					      SLEEP	3	; 24
      1  f05d				   .CYCLES    SET	3
      2  f05d
      3  f05d				  -	      IF	.CYCLES < 2
      4  f05d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05d				  -	      ERR
      6  f05d					      ENDIF
      7  f05d
      8  f05d					      IF	.CYCLES & 1
      9  f05d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05d		       04 00		      nop	0
     11  f05f				  -	      ELSE
     12  f05f				  -	      bit	VSYNC
     13  f05f					      ENDIF
     14  f05f				   .CYCLES    SET	.CYCLES - 3
     15  f05f					      ENDIF
     16  f05f
     17  f05f				  -	      REPEAT	.CYCLES / 2
     18  f05f				  -	      nop
     19  f05f					      REPEND
    108  f05f
    109  f05f		       85 10		      sta	RESP0	; 27 - set player positions
    110  f061		       85 11		      sta	RESP1	; 30
    111  f063
    112  f063		       a9 d0		      lda	#$D0	; 32 - set HMOVE offset for missile1
    113  f065		       85 23		      sta	HMM1	; 35
    114  f067
    115  f067							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  f067							; reset all progress bar playfield graphics RAM (and use 21 cycles)
    117  f067
    118  f067		       a9 e0		      lda	#%11100000	; 37
    119  f069		       85 89		      sta	ProgressBar+0	; 40
    120  f06b		       a9 ff		      lda	#%11111111	; 42
    121  f06d		       85 8a		      sta	ProgressBar+1	; 45
    122  f06f		       85 8b		      sta	ProgressBar+2	; 48
    123  f071		       85 8c		      sta	ProgressBar+3	; 51
    124  f073		       a9 fe		      lda	#%11111110	; 53
    125  f075		       85 8d		      sta	ProgressBar+4	; 56
    126  f077
    127  f077		       85 14		      sta	RESBL	; 59 - set ball and missile positions
    128  f079		       85 12		      sta	RESM0	; 62
    129  f07b		       85 13		      sta	RESM1	; 65
    130  f07d
    131  f07d		       85 02		      sta	WSYNC
    132  f07f		       85 2a		      sta	HMOVE
    133  f081
    134  f081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  f081							; Load RAM for progress bar display (takes 28-53 cycles)
    136  f081
    137  f081		       a5 88		      lda	Progress	; 3 - get amount of progress
    138  f083
    139  f083							; The level progress bar uses the following playfield bits:
    140  f083							; (note that PF0 and PF2 are NOT reversed in this diagram)
    141  f083							;
    142  f083							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    143  f083							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    144  f083							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    145  f083							;
    146  f083							; When the progress bar is empty, every bit labeled "X" above should be
    147  f083							; set (1), and when it is full, every "X" bit should be cleared (0).
    148  f083							; The bits labeled "o" must ALWAYS be cleared.
    149  f083							;
    150  f083							; The leftmost playfield value (the 1st PF0) will be calculated first,
    151  f083							; and then each playfield value to the right until the 2nd PF1
    152  f083							; will be calculated.
    153  f083
    154  f083		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    155  f085
    156  f085		       38		      sec		; 2
    157  f086		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    158  f088		       30 1e		      bmi	.Underflow1	; 2/3
    159  f08a		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    160  f08c
    161  f08c		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    162  f08e		       30 23		      bmi	.Underflow2	; 2/3
    163  f090		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    164  f092
    165  f092		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    166  f094		       30 28		      bmi	.Underflow3	; 2/3
    167  f096		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    168  f098
    169  f098		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    170  f09a		       30 2d		      bmi	.Underflow4	; 2/3
    171  f09c		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    172  f09e
    173  f09e		       aa		      tax		; 2
    174  f09f		       bd 0e f8 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    175  f0a2		       0a		      asl		; 2
    176  f0a3		       85 8d		      sta	ProgressBar+4	; 3
    177  f0a5		       4c d1 f0 	      jmp	.Finish	; 3
    178  f0a8
    179  f0a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  f0a8				   .Underflow1		; for 1st PF0
    181  f0a8
    182  f0a8		       69 03		      adc	#3	; 3 - add back the 3
    183  f0aa		       aa		      tax		; 2
    184  f0ab		       bd 1b f8 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    185  f0ae		       85 89		      sta	ProgressBar	; 3
    186  f0b0		       4c d1 f0 	      jmp	.Finish	; 3
    187  f0b3
    188  f0b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f0b3				   .Underflow2		; for 1st PF1
    190  f0b3
    191  f0b3		       69 08		      adc	#8	; 3 - add back the 8
    192  f0b5		       aa		      tax		; 2
    193  f0b6		       bd 0d f8 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    194  f0b9		       85 8a		      sta	ProgressBar+1	; 3
    195  f0bb		       4c d1 f0 	      jmp	.Finish	; 3
    196  f0be
    197  f0be							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    198  f0be				   .Underflow3		; for PF2
    199  f0be
    200  f0be		       69 08		      adc	#8	; 3 - add back the 8
    201  f0c0		       aa		      tax		; 2
    202  f0c1		       bd 16 f8 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    203  f0c4		       85 8b		      sta	ProgressBar+2	; 3
    204  f0c6		       4c d1 f0 	      jmp	.Finish	; 3
    205  f0c9
    206  f0c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    207  f0c9				   .Underflow4		; for 2nd PF0
    208  f0c9
    209  f0c9		       69 04		      adc	#4	; 3 - add back the 4
    210  f0cb		       aa		      tax		; 2
    211  f0cc		       bd 1a f8 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    212  f0cf		       85 8c		      sta	ProgressBar+3	; 3
    213  f0d1
    214  f0d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f0d1				   .Finish
    216  f0d1
    217  f0d1		       85 2b		      sta	HMCLR	; 56
    218  f0d3		       a9 b0		      lda	#$B0	; 58 - another HMOVE is neccesary for the ball
    219  f0d5		       85 24		      sta	HMBL	; 61
    220  f0d7		       e6 80		      inc	Frame	; 66 increment the frame number
    221  f0d9
    222  f0d9		       85 02		      sta	WSYNC
    223  f0db		       85 2a		      sta	HMOVE
    224  f0dd
    225  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  f0dd							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    227  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f0dd
    229  f0dd		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2	; 2
    230  f0df		       85 04		      sta	NUSIZ0	; 3
    231  f0e1		       85 05		      sta	NUSIZ1	; 3
    232  f0e3
    233  f0e3		       a9 01		      lda	#VDEL_TRUE	; 2
    234  f0e5		       85 25		      sta	VDELP0	; 3
    235  f0e7		       85 26		      sta	VDELP1	; 3
    236  f0e9
    237  f0e9		       a9 02		      lda	#COL_SCORE	; 2
    238  f0eb		       85 06		      sta	COLUP0	; 3
    239  f0ed		       85 07		      sta	COLUP1	; 3
    240  f0ef		       85 08		      sta	COLUPF	; 3
    241  f0f1		       85 09		      sta	COLUBK	; 3
    242  f0f3		       85 86		      sta	ScoreColor	; 3
    243  f0f5		       a9 56		      lda	#$56	; 2
    244  f0f7		       85 8e		      sta	PgBarColor	; 3
    245  f0f9
    246  f0f9
    247  f0f9
    248  f0f9		       a9 00		      lda	#$00
    249  f0fb		       85 84		      sta	BCDScoreAdd
    250  f0fd		       a9 00		      lda	#$00
    251  f0ff		       85 85		      sta	BCDScoreAdd+1
    252  f101
    253  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f101							; Prepare Health Display
    255  f101							;
    256  f101							; Set the pointers for the health graphics
    257  f101							;
    258  f101							; Takes 28 cycles to complete
    259  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  f101
    261  f101		       18		      clc		; 2
    262  f102
    263  f102		       a9 bd		      lda	#<HealthLeftGfx	; 2
    264  f104		       65 8f		      adc	Health	; 3
    265  f106		       85 90		      sta	HthGfxLPtr	; 3
    266  f108		       a9 f7		      lda	#>HealthLeftGfx	; 2
    267  f10a		       85 91		      sta	HthGfxLPtr+1	; 3
    268  f10c
    269  f10c		       a9 dd		      lda	#<HealthRightGfx	; 2
    270  f10e		       65 8f		      adc	Health	; 3
    271  f110		       85 92		      sta	HthGfxRPtr	; 3
    272  f112		       a9 f7		      lda	#>HealthRightGfx	; 2
    273  f114		       85 93		      sta	HthGfxRPtr+1	; 3
    274  f116
    275  f116
    276  f116
    277  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    278  f116							; Prepare for Throbbing Lines
    279  f116							;
    280  f116							; Set the offset value for the throbbing line graphics
    281  f116							;
    282  f116							; Takes 20 cycles to complete
    283  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    284  f116
    285  f116		       a5 80		      lda	Frame	; 3 - get the current frame number
    286  f118		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    287  f11a		       4a		      lsr		; 2
    288  f11b		       4a		      lsr		; 2 - shift to get a value from 0-7
    289  f11c		       85 b8		      sta	Temp	; 3
    290  f11e		       0a		      asl		; 2 - carry flag will always be clear after this
    291  f11f		       65 b8		      adc	Temp	; 3 - multiply by 3
    292  f121		       a8		      tay
    293  f122		       b9 a0 f7 	      lda	LineThrobGfx+0,y
    294  f125		       85 b4		      sta	ThrobColor+0
    295  f127		       b9 a1 f7 	      lda	LineThrobGfx+1,y
    296  f12a		       85 b5		      sta	ThrobColor+1
    297  f12c		       b9 a2 f7 	      lda	LineThrobGfx+2,y
    298  f12f		       85 b6		      sta	ThrobColor+2
    299  f131
    300  f131
    301  f131
    302  f131							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    303  f131							; Prepare for Main Gameplay Kernel
    304  f131							;
    305  f131							; Figure out how many rows to draw before and after the two cat rows
    306  f131							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    307  f131
    308  f131							;lda CatPosY
    309  f131
    310  f131		       a9 03		      lda	#3
    311  f133		       85 9d		      sta	PreCatRows
    312  f135		       a9 02		      lda	#2
    313  f137		       85 9e		      sta	PostCatRows
    314  f139
    315  f139
    316  f139
    317  f139							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    318  f139							; Load Scoreboard
    319  f139							;
    320  f139							; Get graphics data for the scoreboard and push it onto the stack
    321  f139							;
    322  f139							; Takes 1245 cycles to complete (16 full scanlines + 29 cycles)
    323  f139							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    324  f139
    325  f139					      SUBROUTINE
    326  f139
    327  f139		       a9 06		      lda	#6	; 2 - start with bottom of digit graphics data
    328  f13b		       85 b7		      sta	TempLoop	; 3
    329  f13d
    330  f13d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    331  f13d				   .Loop
    332  f13d
    333  f13d							; push level counter graphics data
    334  f13d		       a5 87		      lda	BCDLevel	; 3 - get level counter
    335  f13f		       29 0f		      and	#$0F	; 2 - isolate left nybble/digit
    336  f141		       0a		      asl		; 2
    337  f142		       0a		      asl		; 2
    338  f143		       0a		      asl		; 2 - digit value * 8
    339  f144							; no need to clc, carry will always be clear
    340  f144		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    341  f146		       a8		      tay		; 2
    342  f147		       b9 50 f7 	      lda	LevelGfx,y	; 4
    343  f14a		       48		      pha		; 3
    344  f14b
    345  f14b		       a2 02		      ldx	#2	; 2 - start with rightmost BCD score value
    346  f14d							; (we must push to stack in reverse of drawing order)
    347  f14d				   .DigitLoop
    348  f14d
    349  f14d							; right nybble
    350  f14d		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    351  f14f		       29 0f		      and	#$0F	; 2 - isolate right nybble/digit
    352  f151		       0a		      asl		; 2
    353  f152		       0a		      asl		; 2
    354  f153		       0a		      asl		; 2 - digit value * 8
    355  f154							; no need to clc, carry will always be clear
    356  f154		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    357  f156		       a8		      tay		; 2
    358  f157		       b9 00 f7 	      lda	ScoreGfx,y	; 4
    359  f15a		       48		      pha		; 3
    360  f15b
    361  f15b							; left nybble
    362  f15b		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    363  f15d		       29 f0		      and	#$F0	; 2 - isolate left nybble/digit
    364  f15f		       4a		      lsr		; 2 - digit value * 8
    365  f160							; no need to clc, carry will always be clear
    366  f160		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    367  f162		       a8		      tay		; 2
    368  f163		       b9 00 f7 	      lda	ScoreGfx,y	; 4
    369  f166		       48		      pha		; 3
    370  f167
    371  f167		       ca		      dex		; 2
    372  f168		       10 e3		      bpl	.DigitLoop	; 2/3
    373  f16a
    374  f16a		       c6 b7		      dec	TempLoop	; 5
    375  f16c		       10 cf		      bpl	.Loop	; 2/3
    376  f16e
    377  f16e
    378  f16e
    379  f16e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  f16e							; Finish Vertical Blanking
    381  f16e							;
    382  f16e							; Loop until the end of vertical blanking
    383  f16e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    384  f16e
    385  f16e				   VblankTimerLoop
    386  f16e		       ad 84 02 	      lda	INTIM
    387  f171		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     61  f173
     62  f173
     63  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     64  f173							; Kernel
     65  f173							;
     66  f173							; Draw the screen
     67  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     68  f173
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  f173					      include	code/Kernel.asm
      1  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f173							; Kernel
      3  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f173
      5  f173		       a9 00		      lda	#0
      6  f175		       85 02		      sta	WSYNC
      7  f177		       85 01		      sta	VBLANK	; enable display
      8  f179
      9  f179							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  f179					      include	code/ScoreboardKernel.asm
      1  f179							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f179							; Scoreboard Display
      3  f179							;
      4  f179							; Draw the 6-digit score and level counter.
      5  f179							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f179
      7  f179					      SUBROUTINE
      8  f179
      9  f179		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  f17b		       85 0a		      sta	CTRLPF
     11  f17d
     12  f17d		       a9 ff		      lda	#$FF
     13  f17f		       85 0d		      sta	PF0
     14  f181
     15  f181		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  f183		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  f185		       85 0e		      sta	PF1	; display kernel loop.
     18  f187
     19  f187		       a0 05		      ldy	#5
     20  f189
     21  f189							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f189				   ScoreTop		; draw border above scoreboard
     23  f189
     24  f189		       85 02		      sta	WSYNC
     25  f18b
     26  f18b		       a9 00		      lda	#0
     27  f18d		       85 1b		      sta	GRP0
     28  f18f		       85 1c		      sta	GRP1
     29  f191
     30  f191		       88		      dey
     31  f192		       d0 f5		      bne	ScoreTop
     32  f194
     33  f194		       a9 80		      lda	#$80
     34  f196		       85 0e		      sta	PF1
     35  f198
     36  f198		       a9 0e		      lda	#COL_SCOREBOARD
     37  f19a		       85 09		      sta	COLUBK
     38  f19c
     39  f19c		       85 02		      sta	WSYNC
     40  f19e		       85 02		      sta	WSYNC
     41  f1a0
      0  f1a0					      SLEEP	48
      1  f1a0				   .CYCLES    SET	48
      2  f1a0
      3  f1a0				  -	      IF	.CYCLES < 2
      4  f1a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a0				  -	      ERR
      6  f1a0					      ENDIF
      7  f1a0
      8  f1a0				  -	      IF	.CYCLES & 1
      9  f1a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a0				  -	      nop	0
     11  f1a0				  -	      ELSE
     12  f1a0				  -	      bit	VSYNC
     13  f1a0				  -	      ENDIF
     14  f1a0				  -.CYCLES    SET	.CYCLES - 3
     15  f1a0					      ENDIF
     16  f1a0
     17  f1a0					      REPEAT	.CYCLES / 2
     18  f1a0		       ea		      nop
     17  f1a0					      REPEND
     18  f1a1		       ea		      nop
     17  f1a1					      REPEND
     18  f1a2		       ea		      nop
     17  f1a2					      REPEND
     18  f1a3		       ea		      nop
     17  f1a3					      REPEND
     18  f1a4		       ea		      nop
     17  f1a4					      REPEND
     18  f1a5		       ea		      nop
     17  f1a5					      REPEND
     18  f1a6		       ea		      nop
     17  f1a6					      REPEND
     18  f1a7		       ea		      nop
     17  f1a7					      REPEND
     18  f1a8		       ea		      nop
     17  f1a8					      REPEND
     18  f1a9		       ea		      nop
     17  f1a9					      REPEND
     18  f1aa		       ea		      nop
     17  f1aa					      REPEND
     18  f1ab		       ea		      nop
     17  f1ab					      REPEND
     18  f1ac		       ea		      nop
     17  f1ac					      REPEND
     18  f1ad		       ea		      nop
     17  f1ad					      REPEND
     18  f1ae		       ea		      nop
     17  f1ae					      REPEND
     18  f1af		       ea		      nop
     17  f1af					      REPEND
     18  f1b0		       ea		      nop
     17  f1b0					      REPEND
     18  f1b1		       ea		      nop
     17  f1b1					      REPEND
     18  f1b2		       ea		      nop
     17  f1b2					      REPEND
     18  f1b3		       ea		      nop
     17  f1b3					      REPEND
     18  f1b4		       ea		      nop
     17  f1b4					      REPEND
     18  f1b5		       ea		      nop
     17  f1b5					      REPEND
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     19  f1b8					      REPEND
     43  f1b8
     44  f1b8		       a5 87		      lda	BCDLevel
     45  f1ba		       4a		      lsr
     46  f1bb		       4a		      lsr
     47  f1bc		       4a		      lsr
     48  f1bd		       85 1f		      sta	ENABL	; draw ball if bit-4 is set (if level > 9)
     49  f1bf
     50  f1bf		       4c 1a f2 	      jmp	.EntrancePoint
     51  f1c2
     52  f200		       00 00 00 00*	      ALIGN	$100
     53  f200
     54  f200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55  f200				   .ScoreDigitLoop
     56  f200
     57  f200							; A contains gfx for digit3
     58  f200		       85 1b		      sta	GRP0	; 14	digit3 -> [GRP0]	digit2 -> GRP1
     59  f202
     60  f202							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     61  f202
     62  f202		       68		      pla		; 18	pull gfx for digit4...
     63  f203		       a8		      tay		; 20	...and store in Y
     64  f204		       68		      pla		; 24	pull gfx data for digit5...
     65  f205		       aa		      tax		; 26	...and store in X
     66  f206		       68		      pla		; 30	pull gfx data for digit6 to A
     67  f207
     68  f207		       84 1c		      sty	GRP1	; 33	digit4 -> [GRP1]	digit3 -> GRP0
     69  f209		       86 1b		      stx	GRP0	; 36	digit5 -> [GRP0]	digit4 -> GRP1
     70  f20b		       85 1c		      sta	GRP1	; 39	digit6 -> [GRP1]	digit5 -> GRP0
     71  f20d		       85 1b		      sta	GRP0	; 42	digit6 -> [GRP0]	digit6 -> GRP1
     72  f20f
     73  f20f		       68		      pla		; 46	pull gfx data for level counter
     74  f210		       85 1d		      sta	ENAM0	; 49	use bit 1 of data for ENAM0
     75  f212		       2a		      rol		; 51
     76  f213		       85 1e		      sta	ENAM1	; 54	use bit 0 of data for ENAM1
     77  f215		       6a		      ror		; 56
     78  f216		       6a		      ror		; 58
     79  f217		       6a		      ror		; 60
     80  f218		       85 04		      sta	NUSIZ0	; 63	use bits 2-7 of data (re-aligned) for NUSIZ0
     81  f21a
     82  f21a				   .EntrancePoint
     83  f21a
     84  f21a		       68		      pla		; 67	pull gfx for digit1
     85  f21b		       85 1b		      sta	GRP0	; 70	digit1 -> [GRP0]
     86  f21d
     87  f21d		       68		      pla		; 74	pull gfx for digit2
     88  f21e		       8d 1c 00 	      sta.w	GRP1	; 02	digit2 -> [GRP1]	digit1 -> GRP0
     89  f221							;	(use an extra cycle for timing reasons)
     90  f221
     91  f221		       68		      pla		; 06	pull gfx for digit3
     92  f222
     93  f222							; On the final iteration of the loop, the stack will have wrapped
     94  f222							; and pulled from location $02 at this point.
     95  f222							; This happens to be the collision register CXP0FB.
     96  f222							; Bit-7 will always be set in this register,
     97  f222							; and bit-7 is always clear in the score graphics,
     98  f222							; so checking bit-7 of the data pulled is all that you need
     99  f222							; to determine when to terminate the loop.
    100  f222
    101  f222		       aa		      tax		; 08	set flags according to pulled data
    102  f223
    103  f223		       10 db		      bpl	.ScoreDigitLoop	; 10/11	check negative flag to see if the loop is over
    104  f225
    105  f225							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f225
    107  f225		       a9 00		      lda	#0	; 12
    108  f227		       85 1d		      sta	ENAM0	; 15 - disable missiles
    109  f229		       85 1e		      sta	ENAM1	; 18
    110  f22b		       85 1b		      sta	GRP0	; 21 - disable player graphics
    111  f22d		       85 1c		      sta	GRP1	; 24
    112  f22f		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
    113  f231		       85 26		      sta	VDELP1	; 30
    114  f233		       85 1f		      sta	ENABL	; 33 - disable ball
    115  f235
    116  f235		       a2 ff		      ldx	#$FF	; 35
    117  f237		       9a		      txs		; 37 - reset the stack pointer
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  f238					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  f238							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f238							; We are currently at cycle 47 in the current scanline.
      3  f238
      4  f238
      5  f238
      6  f238							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  f238							; Output 4 blank scanlines, while setting up the graphics objects.
      8  f238
      9  f238				   PreKernel
     10  f238
     11  f238		       85 b9		      sta	CurrentRow
     12  f23a
     13  f23a		       a5 01		      lda	PF_REFLECT
     14  f23c		       85 0a		      sta	CTRLPF
     15  f23e
     16  f23e		       a9 f9		      lda	#>FoodGfx
     17  f240		       85 bb		      sta	FoodGfxPtr1+1
     18  f242		       85 be		      sta	FoodGfxPtr2+1
     19  f244
     20  f244		       a9 10		      lda	#<CatTartGfx
     21  f246		       85 99		      sta	TartGfxPtr
     22  f248		       a9 fa		      lda	#>CatTartGfx
     23  f24a		       85 9a		      sta	TartGfxPtr+1
     24  f24c
     25  f24c		       a2 00		      ldx	#<RainbowColors
     26  f24e		       86 95		      stx	RbowColPtr1
     27  f250		       e8		      inx
     28  f251		       86 97		      stx	RbowColPtr2
     29  f253
     30  f253		       a9 fa		      lda	#>RainbowColors
     31  f255		       85 96		      sta	RbowColPtr1+1
     32  f257		       85 98		      sta	RbowColPtr2+1
     33  f259
     34  f259		       a9 50		      lda	#$50
     35  f25b		       85 9f		      sta	FoodItemL
     36  f25d		       a9 90		      lda	#$90
     37  f25f		       85 a6		      sta	FoodItemR
     38  f261
     39  f261		       a9 66		      lda	#<CatFaceGfx
     40  f263		       85 9b		      sta	CatGfxPtr
     41  f265		       a9 f8		      lda	#>CatFaceGfx
     42  f267		       85 9c		      sta	CatGfxPtr+1
     43  f269
     44  f269		       a5 80		      lda	Frame
     45  f26b		       29 08		      and	#%00001000
     46  f26d		       f0 04		      beq	.Rainbow1
     47  f26f
     48  f26f		       a9 50		      lda	#%01010000
     49  f271		       d0 02		      bne	.Rainbow2
     50  f273
     51  f273				   .Rainbow1
     52  f273		       a9 a0		      lda	#%10100000
     53  f275
     54  f275				   .Rainbow2
     55  f275		       85 0d		      sta	PF0
     56  f277
     57  f277		       a9 06		      lda	#COL_CAT_FACE
     58  f279		       85 06		      sta	COLUP0
     59  f27b
     60  f27b		       a5 80		      lda	Frame
     61  f27d		       29 3f		      and	#%00111111
     62  f27f
     63  f27f		       c6 ad		      dec	FoodPosX
     64  f281		       10 04		      bpl	.NoReset
     65  f283		       a9 58		      lda	#88
     66  f285		       85 ad		      sta	FoodPosX
     67  f287				   .NoReset
     68  f287
     69  f287		       a9 80		      lda	#$80
     70  f289		       85 20		      sta	HMP0
     71  f28b
     72  f28b							; Player 0 is already aligned for drawing the cat's face.
     73  f28b
     74  f28b							; Align player 1 to draw the current frame's food items for the top row.
     75  f28b
     76  f28b							; food item can be placed anywhere from 0-88
     77  f28b							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     78  f28b
     79  f28b		       85 02		      sta	WSYNC
     80  f28d
     81  f28d		       a4 b9		      ldy	CurrentRow	; 03 - get the row we are drawing
     82  f28f		       b9 ad 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     83  f292
     84  f292		       38		      sec		; 09
     85  f293				   .DivideLoop
     86  f293		       e9 0f		      sbc	#15	; 11
     87  f295		       b0 fc		      bcs	.DivideLoop	; 13
     88  f297
     89  f297		       49 07		      eor	#7	; 15
     90  f299		       69 01		      adc	#1
     91  f29b		       0a		      asl		; 17
     92  f29c		       0a		      asl		; 19
     93  f29d		       0a		      asl		; 21
     94  f29e
     95  f29e		       85 11		      sta	RESP1	; 26
     96  f2a0
     97  f2a0		       0a		      asl		; 23
     98  f2a1
     99  f2a1		       85 21		      sta	HMP1	; 29
    100  f2a3
    101  f2a3		       85 02		      sta	WSYNC
    102  f2a5
    103  f2a5		       a5 b5		      lda	ThrobColor+1
    104  f2a7		       85 09		      sta	COLUBK
    105  f2a9
    106  f2a9		       a9 00		      lda	#ONE_COPY
    107  f2ab		       85 04		      sta	NUSIZ0
    108  f2ad		       a9 04		      lda	#TWO_WIDE
    109  f2af		       85 05		      sta	NUSIZ1
    110  f2b1
      0  f2b1					      SLEEP	54
      1  f2b1				   .CYCLES    SET	54
      2  f2b1
      3  f2b1				  -	      IF	.CYCLES < 2
      4  f2b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2b1				  -	      ERR
      6  f2b1					      ENDIF
      7  f2b1
      8  f2b1				  -	      IF	.CYCLES & 1
      9  f2b1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2b1				  -	      nop	0
     11  f2b1				  -	      ELSE
     12  f2b1				  -	      bit	VSYNC
     13  f2b1				  -	      ENDIF
     14  f2b1				  -.CYCLES    SET	.CYCLES - 3
     15  f2b1					      ENDIF
     16  f2b1
     17  f2b1					      REPEAT	.CYCLES / 2
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     17  f2c0					      REPEND
     18  f2c1		       ea		      nop
     17  f2c1					      REPEND
     18  f2c2		       ea		      nop
     17  f2c2					      REPEND
     18  f2c3		       ea		      nop
     17  f2c3					      REPEND
     18  f2c4		       ea		      nop
     17  f2c4					      REPEND
     18  f2c5		       ea		      nop
     17  f2c5					      REPEND
     18  f2c6		       ea		      nop
     17  f2c6					      REPEND
     18  f2c7		       ea		      nop
     17  f2c7					      REPEND
     18  f2c8		       ea		      nop
     17  f2c8					      REPEND
     18  f2c9		       ea		      nop
     17  f2c9					      REPEND
     18  f2ca		       ea		      nop
     17  f2ca					      REPEND
     18  f2cb		       ea		      nop
     19  f2cc					      REPEND
    112  f2cc
    113  f2cc		       85 2a		      sta	HMOVE
    114  f2ce
      0  f2ce					      SLEEP	3
      1  f2ce				   .CYCLES    SET	3
      2  f2ce
      3  f2ce				  -	      IF	.CYCLES < 2
      4  f2ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ce				  -	      ERR
      6  f2ce					      ENDIF
      7  f2ce
      8  f2ce					      IF	.CYCLES & 1
      9  f2ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ce		       04 00		      nop	0
     11  f2d0				  -	      ELSE
     12  f2d0				  -	      bit	VSYNC
     13  f2d0					      ENDIF
     14  f2d0				   .CYCLES    SET	.CYCLES - 3
     15  f2d0					      ENDIF
     16  f2d0
     17  f2d0				  -	      REPEAT	.CYCLES / 2
     18  f2d0				  -	      nop
     19  f2d0					      REPEND
    116  f2d0
    117  f2d0							; If any part of the cat needs to be drawn in the top row,
    118  f2d0							; skip straight to CatRows.
    119  f2d0
    120  f2d0
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  f2d0					      include	code/Gameplay Kernel/HiRows.asm
      1  f2d0							; Draw all the rows above the cat's two rows
      2  f2d0				   HiRows
      3  f2d0
      4  f2d0							; First, output a single-color line to draw the bottom of a "throb" line.
      5  f2d0							; This will probably be a good time to prepare the pointers for the
      6  f2d0							; food items' graphics, as well as loading the colors for the food items.
      7  f2d0
      8  f2d0		       a5 b4		      lda	ThrobColor+0	; 02
      9  f2d2		       85 09		      sta	COLUBK	; 05
     10  f2d4
     11  f2d4		       a4 b9		      ldy	CurrentRow	; 08
     12  f2d6		       b9 9f 00 	      lda	FoodItemL,y	; 12
     13  f2d9		       29 f0		      and	#$F0	; 14
     14  f2db		       85 ba		      sta	FoodGfxPtr1	; 17
     15  f2dd		       aa		      tax		; 19
     16  f2de		       bd 0e f9 	      lda	FoodGfx+14,x	; 23
     17  f2e1		       85 bc		      sta	FoodColor1	; 26
     18  f2e3
     19  f2e3		       b9 a6 00 	      lda	FoodItemR,y	; 30
     20  f2e6		       29 f0		      and	#$F0	; 32
     21  f2e8		       85 bd		      sta	FoodGfxPtr2	; 35
     22  f2ea		       aa		      tax		; 37
     23  f2eb		       bd 0e f9 	      lda	FoodGfx+14,x	; 41
     24  f2ee		       85 bf		      sta	FoodColor2	; 44
     25  f2f0
     26  f2f0
     27  f2f0		       85 02		      sta	WSYNC
     28  f2f2
     29  f2f2							; After that, output 14 lines to draw a single row with food items,
     30  f2f2							; but without drawing the cat. The food graphics will be updated every line,
     31  f2f2							; but there will probably not be enough time to also update the food colors
     32  f2f2							; every line throughout the kernel.
     33  f2f2
     34  f2f2		       a9 00		      lda	#COL_BACKGROUND
     35  f2f4		       85 09		      sta	COLUBK
     36  f2f6
     37  f2f6		       a4 0e		      ldy	14
     38  f2f8				   .Loop1
     39  f2f8		       85 02		      sta	WSYNC
     40  f2fa		       88		      dey
     41  f2fb		       d0 fb		      bne	.Loop1
     42  f2fd
     43  f2fd							; Lastly, output four single-color lines to draw most of a "throb" line,
     44  f2fd							; while setting the position of player 1 to draw the next set of food items.
     45  f2fd
     46  f2fd		       a5 b4		      lda	ThrobColor+0
     47  f2ff		       85 09		      sta	COLUBK
     48  f301		       85 02		      sta	WSYNC
     49  f303
     50  f303		       a5 b5		      lda	ThrobColor+1
     51  f305		       85 09		      sta	COLUBK
     52  f307		       85 02		      sta	WSYNC
     53  f309
     54  f309		       a5 b6		      lda	ThrobColor+2
     55  f30b		       85 09		      sta	COLUBK
     56  f30d		       a2 00		      ldx	#0
     57  f30f		       86 1b		      stx	GRP0
     58  f311		       85 02		      sta	WSYNC
     59  f313
     60  f313		       a5 b5		      lda	ThrobColor+1
     61  f315		       85 09		      sta	COLUBK
     62  f317
     63  f317		       c6 9d		      dec	PreCatRows
     64  f319		       85 02		      sta	WSYNC
     65  f31b		       d0 b3		      bne	HiRows
     66  f31d
     67  f31d							; If this is not the last row before drawing the cat's rows,
     68  f31d							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  f31d					      include	code/Gameplay Kernel/CatRows.asm
      1  f31d							; Draw the two rows that contain the cat.
      2  f31d				   CatRows
      3  f31d
      4  f31d							; Output a line to finish the bottom of a "throb" line, like in HiRows.
      5  f31d							; If the cat is at the very top of the row, draw the top of the pop-tart.
      6  f31d
      7  f31d		       a5 b4		      lda	ThrobColor+0
      8  f31f		       85 09		      sta	COLUBK
      9  f321
     10  f321							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11  f321							; Cat Row Kernel
     12  f321							;
     13  f321							; This is the subroutine that is used to draw the two gameplay kernel rows
     14  f321							; containing the cat. It does not draw the throbbing line between the two rows,
     15  f321							; it only draws a single, 14-scanline row with the cat and food items.
     16  f321							; This subroutine is called twice in the kernel, once for each of the two rows
     17  f321							; containing the cat.
     18  f321							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  f321
     20  f321				   DrawCatRow SUBROUTINE
     21  f321
     22  f321							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  f321
     24  f321		       a6 bf		      ldx	FoodColor2
     25  f323		       9a		      txs
     26  f324
     27  f324		       a2 00		      ldx	#COL_BACKGROUND
     28  f326
     29  f326							; Then output the 14 lines to draw a single row. This will include drawing
     30  f326							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     31  f326							; All graphics will be updated every line.
     32  f326
     33  f326		       a0 0d		      ldy	#13
     34  f328
     35  f328							;17
     36  f328
      0  f328					      SLEEP	22
      1  f328				   .CYCLES    SET	22
      2  f328
      3  f328				  -	      IF	.CYCLES < 2
      4  f328				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f328				  -	      ERR
      6  f328					      ENDIF
      7  f328
      8  f328				  -	      IF	.CYCLES & 1
      9  f328				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f328				  -	      nop	0
     11  f328				  -	      ELSE
     12  f328				  -	      bit	VSYNC
     13  f328				  -	      ENDIF
     14  f328				  -.CYCLES    SET	.CYCLES - 3
     15  f328					      ENDIF
     16  f328
     17  f328					      REPEAT	.CYCLES / 2
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     19  f333					      REPEND
     38  f333
     39  f333		       a9 e0		      lda	#%11100000	; 41
     40  f335		       85 0e		      sta	PF1	; 44
     41  f337
     42  f337		       a5 ad		      lda	FoodPosX	; 47
     43  f339		       c9 31		      cmp	#49	; 49
     44  f33b		       30 0b		      bmi	.FoodRight	; 52/51
     45  f33d
     46  f33d		       c6 99		      dec	TartGfxPtr	; 56
     47  f33f		       c6 9b		      dec	CatGfxPtr	; 61
     48  f341
      0  f341					      SLEEP	7	; 68
      1  f341				   .CYCLES    SET	7
      2  f341
      3  f341				  -	      IF	.CYCLES < 2
      4  f341				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f341				  -	      ERR
      6  f341					      ENDIF
      7  f341
      8  f341					      IF	.CYCLES & 1
      9  f341					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f341		       04 00		      nop	0
     11  f343				  -	      ELSE
     12  f343				  -	      bit	VSYNC
     13  f343					      ENDIF
     14  f343				   .CYCLES    SET	.CYCLES - 3
     15  f343					      ENDIF
     16  f343
     17  f343					      REPEAT	.CYCLES / 2
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     19  f345					      REPEND
     50  f345
     51  f345		       4c 00 f4 	      jmp	.KernelLoop1	; 71
     52  f348
     53  f348				   .FoodRight
     54  f348		       4c 32 f4 	      jmp	.KernelLoop2	; 55
     55  f34b
     56  f400		       00 00 00 00*	      ALIGN	$100
     57  f400
     58  f400				   .KernelLoop1
     59  f400
     60  f400							; 7 cycles to prepare PF rainbow colors
     61  f400		       b9 01 fa 	      lda	RamBowColors+1,y	; 75
     62  f403		       85 08		      sta	COLUPF	; 02
     63  f405
     64  f405							; 7 cycles to prepare BK rainbow colors
     65  f405		       b9 00 fa 	      lda	RamBowColors,y	; 06
     66  f408		       85 09		      sta	COLUBK	; 09
     67  f40a
     68  f40a							; 14 cycles to prepare 1st food item's graphics
     69  f40a		       b1 ba		      lda	(FoodGfxPtr1),y	; 14
     70  f40c		       85 1c		      sta	GRP1	; 17
     71  f40e		       a5 bc		      lda	FoodColor1	; 20
     72  f410		       85 07		      sta	COLUP1	; 23
     73  f412
     74  f412							; 5 cycles to set tart color
     75  f412		       a9 4a		      lda	#COL_CAT_TART	; 25
     76  f414		       85 08		      sta	COLUPF	; 28
     77  f416
     78  f416							; 3 cycles to clear BK color to black
     79  f416							; x is pre-loaded with 0, the color black
     80  f416		       86 09		      stx	COLUBK	; 31
     81  f418
     82  f418							; 8 cycles to prepare cat face graphics
     83  f418		       b1 9b		      lda	(CatGfxPtr),y	; 36
     84  f41a		       85 1b		      sta	GRP0	; 39
     85  f41c
     86  f41c							; 8 cycles to prepare tart graphics
     87  f41c		       b1 99		      lda	(TartGfxPtr),y	; 44
     88  f41e		       85 0e		      sta	PF1	; 47
     89  f420
     90  f420							; 13 cycles to prepare 2nd food item's graphics
     91  f420		       b1 bd		      lda	(FoodGfxPtr2),y	; 52
     92  f422		       ba		      tsx		; 54
     93  f423		       85 1c		      sta	GRP1	; 57
     94  f425		       86 07		      stx	COLUP1	; 60
     95  f427
     96  f427							; 6 cycles to clear PF color to black
     97  f427		       a2 00		      ldx	#COL_BACKGROUND	; 62
     98  f429		       8e 08 00 	      stx.w	COLUPF	; 66
     99  f42c
    100  f42c							; 5 cycles to finish the loop mechanism
    101  f42c		       88		      dey		; 68
    102  f42d		       10 d1		      bpl	.KernelLoop1	; 71/70
    103  f42f
    104  f42f							; exactly 76 cycles total
    105  f42f
    106  f42f		       4c 61 f4 	      jmp	.Nanny
    107  f432
    108  f432
    109  f432
    110  f432
    111  f432
    112  f432				   .KernelLoop2
    113  f432
    114  f432							; 8 cycles to prepare cat face graphics
    115  f432		       b1 9b		      lda	(CatGfxPtr),y	; 60
    116  f434		       85 1b		      sta	GRP0	; 63
    117  f436
    118  f436							; 14 cycles to prepare 1st food item's graphics
    119  f436		       b1 ba		      lda	(FoodGfxPtr1),y	; 68
    120  f438		       85 1c		      sta	GRP1	; 71
    121  f43a		       a5 bc		      lda	FoodColor1	; 74
    122  f43c		       85 07		      sta	COLUP1	; 01
    123  f43e
    124  f43e							; 7 cycles to prepare PF rainbow colors
    125  f43e		       b9 01 fa 	      lda	RamBowColors+1,y	; 05
    126  f441		       85 08		      sta	COLUPF	; 08
    127  f443
    128  f443							; 7 cycles to prepare BK rainbow colors
    129  f443		       b9 00 fa 	      lda	RamBowColors,y	; 12
    130  f446		       85 09		      sta	COLUBK	; 15
    131  f448
    132  f448							; 8 cycles to prepare tart graphics
    133  f448		       b1 99		      lda	(TartGfxPtr),y	; 20
    134  f44a		       85 0e		      sta	PF1	; 23
    135  f44c
    136  f44c							; 5 cycles to set tart color
    137  f44c		       a9 4a		      lda	#COL_CAT_TART	; 25
    138  f44e		       85 08		      sta	COLUPF	; 28
    139  f450
    140  f450							; 3 cycles to clear BK color to black
    141  f450							; x is pre-loaded with 0, the color black
    142  f450		       86 09		      stx	COLUBK	; 31
    143  f452
    144  f452							; 13 cycles to prepare 2nd food item's graphics
    145  f452		       b1 bd		      lda	(FoodGfxPtr2),y	; 36
    146  f454		       ba		      tsx		; 38
    147  f455		       85 1c		      sta	GRP1	; 41
    148  f457		       86 07		      stx	COLUP1	; 44
    149  f459
    150  f459							; 6 cycles to clear PF color to black
    151  f459		       a2 00		      ldx	#COL_BACKGROUND	; 46
    152  f45b		       8e 08 00 	      stx.w	COLUPF	; 50
    153  f45e
    154  f45e							; 5 cycles to finish the loop mechanism
    155  f45e		       88		      dey		; 52
    156  f45f		       10 d1		      bpl	.KernelLoop2	; 55/54
    157  f461
    158  f461							; exactly 76 cycles total
    159  f461
    160  f461				   .Nanny
    161  f461
    162  f461		       85 02		      sta	WSYNC
    163  f463
    164  f463		       e6 b9		      inc	CurrentRow
    165  f465
    166  f465		       86 1c		      stx	GRP1
    167  f467
    168  f467
    169  f467
    170  f467
    171  f467							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    172  f467							; cat with the rainbow. In order to align player 1 for the next row's
    173  f467							; food items, it will be neccesary to have three versions of this kernel,
    174  f467							; one for each of the three 60-color-clock spaced positions to reset.
    175  f467							; HMOVE will be written to on the first four scanlines. With a maximum
    176  f467							; movement of 15 color-clocks per scanline, this will allow a movement of
    177  f467							; up to 60 color clocks. With three versions of the kernel, it should be
    178  f467							; possible to put player 1 anywhere on the screen.
    179  f467
    180  f467		       a5 b4		      lda	ThrobColor+0
    181  f469		       85 09		      sta	COLUBK
    182  f46b		       a2 00		      ldx	#0
    183  f46d		       86 1b		      stx	GRP0
    184  f46f		       86 1c		      stx	GRP1
    185  f471
    186  f471		       a2 ff		      ldx	#$FF
    187  f473		       9a		      txs
    188  f474
    189  f474		       85 02		      sta	WSYNC
    190  f476
    191  f476		       a5 b5		      lda	ThrobColor+1
    192  f478		       85 09		      sta	COLUBK
    193  f47a		       85 02		      sta	WSYNC
    194  f47c
    195  f47c		       a5 b6		      lda	ThrobColor+2
    196  f47e		       85 09		      sta	COLUBK
    197  f480		       85 02		      sta	WSYNC
    198  f482
    199  f482		       a5 b5		      lda	ThrobColor+1
    200  f484		       85 09		      sta	COLUBK
    201  f486		       85 02		      sta	WSYNC
    202  f488
    203  f488		       a5 b4		      lda	ThrobColor+0
    204  f48a		       85 09		      sta	COLUBK
    205  f48c		       85 02		      sta	WSYNC
    206  f48e
    207  f48e							; Then output 14 lines to draw the next row, exactly the same way as the
    208  f48e							; previous one. It will be neccesary to have multiple versions of this, as well,
    209  f48e							; since GRP1 needs to be updated at the correct time depending on the position
    210  f48e							; of player 1.
    211  f48e
    212  f48e		       a9 00		      lda	#COL_BACKGROUND
    213  f490		       85 09		      sta	COLUBK
    214  f492
    215  f492		       a0 0e		      ldy	#14
    216  f494				   .Loop3
    217  f494		       85 02		      sta	WSYNC
    218  f496		       88		      dey
    219  f497		       d0 fb		      bne	.Loop3
    220  f499
    221  f499							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    222  f499							; Use this time to prepare the next row's food item pointers (unless this is
    223  f499							; the last row). If this is the last row, skip over LoRows.
    224  f499
    225  f499		       a5 b4		      lda	ThrobColor+0
    226  f49b		       85 09		      sta	COLUBK
    227  f49d		       85 02		      sta	WSYNC
    228  f49f
    229  f49f							; If the cat is at the very bottom of the screen, don't disable the
    230  f49f							; missile/player graphics until after they are drawn, so they don't get
    231  f49f							; clipped at the bottom of the screen. An easy way to do this would be to
    232  f49f							; simply disable them after they would have been drawn, whether they are
    233  f49f							; already disabled or not.
    234  f49f
    235  f49f
    236  f49f
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  f49f					      include	code/Gameplay Kernel/LoRows.asm
      1  f49f							; Draw all the rows below the cat's two rows.
      2  f49f				   LoRows
      3  f49f
      4  f49f							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      5  f49f							; player 1 for the next row's food items.
      6  f49f
      7  f49f		       a5 b5		      lda	ThrobColor+1
      8  f4a1		       85 09		      sta	COLUBK
      9  f4a3		       85 02		      sta	WSYNC
     10  f4a5
     11  f4a5		       a5 b6		      lda	ThrobColor+2
     12  f4a7		       85 09		      sta	COLUBK
     13  f4a9		       85 02		      sta	WSYNC
     14  f4ab
     15  f4ab		       a5 b5		      lda	ThrobColor+1
     16  f4ad		       85 09		      sta	COLUBK
     17  f4af		       85 02		      sta	WSYNC
     18  f4b1
     19  f4b1		       a5 b4		      lda	ThrobColor+0
     20  f4b3		       85 09		      sta	COLUBK
     21  f4b5		       85 02		      sta	WSYNC
     22  f4b7
     23  f4b7							; Output 14 lines to draw a row, exactly the same as in HiRows.
     24  f4b7							; It may be possible to code this as a subroutine to save ROM space.
     25  f4b7
     26  f4b7		       a9 00		      lda	#COL_BACKGROUND
     27  f4b9		       85 09		      sta	COLUBK
     28  f4bb
     29  f4bb		       a4 0e		      ldy	14
     30  f4bd				   .Loop4
     31  f4bd		       85 02		      sta	WSYNC
     32  f4bf		       88		      dey
     33  f4c0		       d0 fb		      bne	.Loop4
     34  f4c2
     35  f4c2							; Lastly, output the a single line for the next "throb" line.
     36  f4c2							; Use this time to prepare the next row's food item pointers (unless this is
     37  f4c2							; the last row). If this is not the last row, loop to LoRows for the next row.
     38  f4c2
     39  f4c2		       a5 b4		      lda	ThrobColor+0
     40  f4c4		       85 09		      sta	COLUBK
     41  f4c6
     42  f4c6		       c6 9e		      dec	PostCatRows
     43  f4c8		       85 02		      sta	WSYNC
     44  f4ca		       d0 d3		      bne	LoRows
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  f4cc					      include	code/ProgressHealthKernel.asm
      1  f4cc		       a5 b5		      lda	ThrobColor+1
      2  f4ce		       85 09		      sta	COLUBK
      3  f4d0		       a9 06		      lda	#COL_CAT_FACE
      4  f4d2		       85 08		      sta	COLUPF
      5  f4d4		       a9 00		      lda	#0
      6  f4d6		       85 0a		      sta	CTRLPF
      7  f4d8
      0  f4d8					      SLEEP	35	; 53
      1  f4d8				   .CYCLES    SET	35
      2  f4d8
      3  f4d8				  -	      IF	.CYCLES < 2
      4  f4d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4d8				  -	      ERR
      6  f4d8					      ENDIF
      7  f4d8
      8  f4d8					      IF	.CYCLES & 1
      9  f4d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4d8		       04 00		      nop	0
     11  f4da				  -	      ELSE
     12  f4da				  -	      bit	VSYNC
     13  f4da					      ENDIF
     14  f4da				   .CYCLES    SET	.CYCLES - 3
     15  f4da					      ENDIF
     16  f4da
     17  f4da					      REPEAT	.CYCLES / 2
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     17  f4e1					      REPEND
     18  f4e2		       ea		      nop
     17  f4e2					      REPEND
     18  f4e3		       ea		      nop
     17  f4e3					      REPEND
     18  f4e4		       ea		      nop
     17  f4e4					      REPEND
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     19  f4ea					      REPEND
      9  f4ea
     10  f4ea		       a9 20		      lda	#$20	; 55
     11  f4ec		       85 20		      sta	HMP0	; 58
     12  f4ee		       a9 b0		      lda	#$B0	; 60
     13  f4f0		       85 21		      sta	HMP1	; 63
     14  f4f2
     15  f4f2		       85 10		      sta	RESP0	; 66
     16  f4f4		       85 11		      sta	RESP1	; 69
     17  f4f6
     18  f4f6		       a9 00		      lda	#$00	; 71
     19  f4f8
     20  f4f8		       85 2a		      sta	HMOVE	; 74
     21  f4fa
     22  f4fa		       85 06		      sta	COLUP0
     23  f4fc		       85 07		      sta	COLUP1
     24  f4fe
     25  f4fe		       a9 0e		      lda	#COL_SCOREBOARD
     26  f500		       85 09		      sta	COLUBK
     27  f502
     28  f502		       a9 05		      lda	#DOUBLE_SIZE	; 08
     29  f504		       85 04		      sta	NUSIZ0
     30  f506		       85 05		      sta	NUSIZ1
     31  f508
     32  f508		       a9 08		      lda	#REFP_TRUE
     33  f50a		       85 0c		      sta	REFP1
     34  f50c
     35  f50c					      SUBROUTINE
     36  f50c
     37  f50c		       a0 04		      ldy	#4
     38  f50e		       85 02		      sta	WSYNC
     39  f510
     40  f510							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41  f510				   .HealthTop		; draw top of health
     42  f510
     43  f510		       a2 03		      ldx	#3
     44  f512
     45  f512				   .Loop
     46  f512		       85 02		      sta	WSYNC
     47  f514
     48  f514		       b9 b8 f7 	      lda	HealthTopGfx,y	; 04
     49  f517		       85 1b		      sta	GRP0	; 07
     50  f519		       85 1c		      sta	GRP1	; 10
     51  f51b		       a9 00		      lda	#$00	; 12
     52  f51d		       85 0f		      sta	PF2	; 15
      0  f51f					      SLEEP	26	; 37
      1  f51f				   .CYCLES    SET	26
      2  f51f
      3  f51f				  -	      IF	.CYCLES < 2
      4  f51f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f51f				  -	      ERR
      6  f51f					      ENDIF
      7  f51f
      8  f51f				  -	      IF	.CYCLES & 1
      9  f51f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f51f				  -	      nop	0
     11  f51f				  -	      ELSE
     12  f51f				  -	      bit	VSYNC
     13  f51f				  -	      ENDIF
     14  f51f				  -.CYCLES    SET	.CYCLES - 3
     15  f51f					      ENDIF
     16  f51f
     17  f51f					      REPEAT	.CYCLES / 2
     18  f51f		       ea		      nop
     17  f51f					      REPEND
     18  f520		       ea		      nop
     17  f520					      REPEND
     18  f521		       ea		      nop
     17  f521					      REPEND
     18  f522		       ea		      nop
     17  f522					      REPEND
     18  f523		       ea		      nop
     17  f523					      REPEND
     18  f524		       ea		      nop
     17  f524					      REPEND
     18  f525		       ea		      nop
     17  f525					      REPEND
     18  f526		       ea		      nop
     17  f526					      REPEND
     18  f527		       ea		      nop
     17  f527					      REPEND
     18  f528		       ea		      nop
     17  f528					      REPEND
     18  f529		       ea		      nop
     17  f529					      REPEND
     18  f52a		       ea		      nop
     17  f52a					      REPEND
     18  f52b		       ea		      nop
     19  f52c					      REPEND
     54  f52c		       b9 08 f8 	      lda	HealthBgGfx+8,y	; 41
     55  f52f		       85 0f		      sta	PF2	; 44
     56  f531
     57  f531		       ca		      dex
     58  f532		       d0 de		      bne	.Loop
     59  f534
     60  f534		       88		      dey
     61  f535		       10 d9		      bpl	.HealthTop
     62  f537
     63  f537
     64  f537					      SUBROUTINE
     65  f537
     66  f537
     67  f537		       a0 03		      ldy	#3
     68  f539		       a2 03		      ldx	#3
     69  f53b		       86 b8		      stx	Temp
     70  f53d
     71  f53d		       4c 00 f6 	      jmp	.HealthMiddle
     72  f540
     73  f600		       00 00 00 00*	      ALIGN	$100	; align to page
     74  f600
     75  f600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  f600				   .HealthMiddle		; draw middle of health, with progress bar
     77  f600
     78  f600		       85 02		      sta	WSYNC
     79  f602				   .Loop
     80  f602		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     81  f604		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     82  f606
     83  f606		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     84  f608		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     85  f60a
     86  f60a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     87  f60c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     88  f60e
     89  f60e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     90  f610		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     91  f612
     92  f612		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     93  f614		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     94  f616
     95  f616		       b1 90		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     96  f618		       85 1b		      sta	GRP0	; 38 - for the left half of health
     97  f61a		       b1 92		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     98  f61c		       85 1c		      sta	GRP1	; 46 - for the right half of health
     99  f61e
    100  f61e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    101  f620		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    102  f622		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    103  f624		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
    104  f627
    105  f627		       a9 0e		      lda	#COL_SCOREBOARD	; 60 - get the color for the background
    106  f629		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    107  f62c
    108  f62c		       ca		      dex		; 66
    109  f62d		       d0 d1		      bne	.HealthMiddle	; 68
    110  f62f
    111  f62f		       a6 b8		      ldx	Temp	; 71
    112  f631
    113  f631		       88		      dey		; 73
    114  f632		       10 ce		      bpl	.Loop	; 76 / 00
    115  f634
    116  f634
    117  f634
    118  f634
    119  f634
    120  f634
    121  f634
    122  f634
    123  f634
    124  f634					      SUBROUTINE
    125  f634
    126  f634
    127  f634		       a9 00		      lda	#0
    128  f636		       85 0d		      sta	PF0
    129  f638		       85 0e		      sta	PF1
    130  f63a
    131  f63a		       a0 07		      ldy	#7
    132  f63c
    133  f63c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    134  f63c				   .HealthBottom		; draw bottom of health
    135  f63c
    136  f63c		       a2 03		      ldx	#3
    137  f63e				   .Loop
    138  f63e		       b1 90		      lda	(HthGfxLPtr),y
    139  f640		       85 1b		      sta	GRP0
    140  f642		       b1 92		      lda	(HthGfxRPtr),y
    141  f644		       85 1c		      sta	GRP1
    142  f646		       a9 00		      lda	#$00
    143  f648		       85 0f		      sta	PF2
    144  f64a
      0  f64a					      SLEEP	14
      1  f64a				   .CYCLES    SET	14
      2  f64a
      3  f64a				  -	      IF	.CYCLES < 2
      4  f64a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64a				  -	      ERR
      6  f64a					      ENDIF
      7  f64a
      8  f64a				  -	      IF	.CYCLES & 1
      9  f64a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64a				  -	      nop	0
     11  f64a				  -	      ELSE
     12  f64a				  -	      bit	VSYNC
     13  f64a				  -	      ENDIF
     14  f64a				  -.CYCLES    SET	.CYCLES - 3
     15  f64a					      ENDIF
     16  f64a
     17  f64a					      REPEAT	.CYCLES / 2
     18  f64a		       ea		      nop
     17  f64a					      REPEND
     18  f64b		       ea		      nop
     17  f64b					      REPEND
     18  f64c		       ea		      nop
     17  f64c					      REPEND
     18  f64d		       ea		      nop
     17  f64d					      REPEND
     18  f64e		       ea		      nop
     17  f64e					      REPEND
     18  f64f		       ea		      nop
     17  f64f					      REPEND
     18  f650		       ea		      nop
     19  f651					      REPEND
    146  f651
    147  f651		       b9 fc f7 	      lda	HealthBgGfx-4,y
    148  f654		       85 0f		      sta	PF2
    149  f656		       85 02		      sta	WSYNC
    150  f658
    151  f658		       ca		      dex
    152  f659		       d0 e3		      bne	.Loop
    153  f65b
    154  f65b		       88		      dey
    155  f65c		       c0 03		      cpy	#3
    156  f65e		       d0 dc		      bne	.HealthBottom
    157  f660
    158  f660							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  f660
    160  f660		       a9 00		      lda	#$00
    161  f662		       85 1b		      sta	GRP0
    162  f664		       85 1c		      sta	GRP1
    163  f666		       85 0b		      sta	REFP0
    164  f668		       85 0c		      sta	REFP1
    165  f66a		       85 0f		      sta	PF2
    166  f66c
    167  f66c		       85 02		      sta	WSYNC
    168  f66e
------- FILE code/Kernel.asm
     13  f66e
     14  f66e		       a9 02		      lda	#2
     15  f670		       85 01		      sta	VBLANK	; disable display
     16  f672
     17  f672		       4c 0b f0 	      jmp	Overscan
------- FILE main.asm
     70  f675
     71  f675				   Z_EndOfCode		; label to show how much ROM is used for the code
     72  f675
     73  f675
     74  f675							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  f675							; Data Tables
     76  f675							;
     77  f675							; Include data tables
     78  f675							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  f675
     80  f675							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  f675					      include	data/Graphics.asm
      1  f675							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f675							; Graphics Tables
      3  f675							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f675
      5  f700		       00 00 00 00*	      ALIGN	$100	; align to page
      6  f700
      7  f700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  f700							; Digit graphics for the scoreboard
      9  f700							;
     10  f700							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  f700							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  f700							; to normal when it is pulled from the stack.
     13  f700							;
     14  f700							; Table takes up $50 (80) bytes of ROM
     15  f700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f700
     17  f700				   ScoreGfx
     18  f700
     19  f700		       1c		      .byte.b	%00011100	; digit 0
     20  f701		       26		      .byte.b	%00100110
     21  f702		       63		      .byte.b	%01100011
     22  f703		       63		      .byte.b	%01100011
     23  f704		       63		      .byte.b	%01100011
     24  f705		       32		      .byte.b	%00110010
     25  f706		       1c		      .byte.b	%00011100
     26  f707		       00		      .byte.b	%00000000
     27  f708
     28  f708							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  f708
     30  f708		       18		      .byte.b	%00011000	; digit 1
     31  f709		       38		      .byte.b	%00111000
     32  f70a		       18		      .byte.b	%00011000
     33  f70b		       18		      .byte.b	%00011000
     34  f70c		       18		      .byte.b	%00011000
     35  f70d		       18		      .byte.b	%00011000
     36  f70e		       7e		      .byte.b	%01111110
     37  f70f		       00		      .byte.b	%00000000
     38  f710
     39  f710							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  f710
     41  f710		       3e		      .byte.b	%00111110	; digit 2
     42  f711		       63		      .byte.b	%01100011
     43  f712		       07		      .byte.b	%00000111
     44  f713		       1e		      .byte.b	%00011110
     45  f714		       3c		      .byte.b	%00111100
     46  f715		       70		      .byte.b	%01110000
     47  f716		       7f		      .byte.b	%01111111
     48  f717		       00		      .byte.b	%00000000
     49  f718
     50  f718							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  f718
     52  f718		       7f		      .byte.b	%01111111	; digit 3
     53  f719		       06		      .byte.b	%00000110
     54  f71a		       0c		      .byte.b	%00001100
     55  f71b		       1e		      .byte.b	%00011110
     56  f71c		       03		      .byte.b	%00000011
     57  f71d		       63		      .byte.b	%01100011
     58  f71e		       3e		      .byte.b	%00111110
     59  f71f		       00		      .byte.b	%00000000
     60  f720
     61  f720							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  f720
     63  f720		       0e		      .byte.b	%00001110	; digit 4
     64  f721		       1e		      .byte.b	%00011110
     65  f722		       36		      .byte.b	%00110110
     66  f723		       66		      .byte.b	%01100110
     67  f724		       7f		      .byte.b	%01111111
     68  f725		       06		      .byte.b	%00000110
     69  f726		       06		      .byte.b	%00000110
     70  f727		       00		      .byte.b	%00000000
     71  f728
     72  f728							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  f728
     74  f728		       7e		      .byte.b	%01111110	; digit 5
     75  f729		       60		      .byte.b	%01100000
     76  f72a		       7e		      .byte.b	%01111110
     77  f72b		       03		      .byte.b	%00000011
     78  f72c		       03		      .byte.b	%00000011
     79  f72d		       63		      .byte.b	%01100011
     80  f72e		       3e		      .byte.b	%00111110
     81  f72f		       00		      .byte.b	%00000000
     82  f730
     83  f730							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  f730
     85  f730		       1e		      .byte.b	%00011110	; digit 6
     86  f731		       30		      .byte.b	%00110000
     87  f732		       60		      .byte.b	%01100000
     88  f733		       7e		      .byte.b	%01111110
     89  f734		       63		      .byte.b	%01100011
     90  f735		       63		      .byte.b	%01100011
     91  f736		       3e		      .byte.b	%00111110
     92  f737		       00		      .byte.b	%00000000
     93  f738
     94  f738							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  f738
     96  f738		       7f		      .byte.b	%01111111	; digit 7
     97  f739		       03		      .byte.b	%00000011
     98  f73a		       06		      .byte.b	%00000110
     99  f73b		       0c		      .byte.b	%00001100
    100  f73c		       18		      .byte.b	%00011000
    101  f73d		       18		      .byte.b	%00011000
    102  f73e		       18		      .byte.b	%00011000
    103  f73f		       00		      .byte.b	%00000000
    104  f740
    105  f740							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f740
    107  f740		       3c		      .byte.b	%00111100	; digit 8
    108  f741		       62		      .byte.b	%01100010
    109  f742		       72		      .byte.b	%01110010
    110  f743		       3c		      .byte.b	%00111100
    111  f744		       43		      .byte.b	%01000011
    112  f745		       43		      .byte.b	%01000011
    113  f746		       3e		      .byte.b	%00111110
    114  f747		       00		      .byte.b	%00000000
    115  f748
    116  f748							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  f748
    118  f748		       3e		      .byte.b	%00111110	; digit 9
    119  f749		       63		      .byte.b	%01100011
    120  f74a		       63		      .byte.b	%01100011
    121  f74b		       3f		      .byte.b	%00111111
    122  f74c		       03		      .byte.b	%00000011
    123  f74d		       06		      .byte.b	%00000110
    124  f74e		       3c		      .byte.b	%00111100
    125  f74f		       00		      .byte.b	%00000000
    126  f750
    127  f750
    128  f750
    129  f750							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  f750							; NUSIZx and ENAMx data for level counter graphics
    131  f750							;
    132  f750							; This table enables or disables each missile and adjusts the left missile's
    133  f750							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  f750							; left digit. (The right digit is drawn with the ball.)
    135  f750							; Bit-1 is used to enable or disable the left missile,
    136  f750							; and bit-0 is used to enable or disable the right missile.
    137  f750							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  f750							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  f750							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  f750							; correct for the score display.
    141  f750							;
    142  f750							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  f750							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  f750							; to normal when it is pulled from the stack.
    145  f750							;
    146  f750							; Table takes up $50 (80) bytes of ROM
    147  f750							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  f750
    149  f750				   LevelGfx
    150  f750
    151  f750							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  f750							; ^^^^^^^^^
    153  f750		       8f		      .byte.b	%10001111	; digit 0
    154  f751		       4f		      .byte.b	%01001111
    155  f752		       4f		      .byte.b	%01001111
    156  f753		       4f		      .byte.b	%01001111
    157  f754		       4f		      .byte.b	%01001111
    158  f755		       4f		      .byte.b	%01001111
    159  f756		       8f		      .byte.b	%10001111
    160  f757		       00		      .byte.b	%00000000
    161  f758
    162  f758							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  f758
    164  f758							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  f758							; ^^^^^^^^^
    166  f758		       8d		      .byte.b	%10001101	; digit 1
    167  f759		       4d		      .byte.b	%01001101
    168  f75a		       4d		      .byte.b	%01001101
    169  f75b		       8d		      .byte.b	%10001101
    170  f75c		       4d		      .byte.b	%01001101
    171  f75d		       4d		      .byte.b	%01001101
    172  f75e		       8d		      .byte.b	%10001101
    173  f75f		       00		      .byte.b	%00000000
    174  f760
    175  f760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  f760
    177  f760							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  f760							; ^^^^^^^^^
    179  f760		       8f		      .byte.b	%10001111	; digit 2
    180  f761		       4d		      .byte.b	%01001101
    181  f762		       4d		      .byte.b	%01001101
    182  f763		       8f		      .byte.b	%10001111
    183  f764		       4e		      .byte.b	%01001110
    184  f765		       4e		      .byte.b	%01001110
    185  f766		       8f		      .byte.b	%10001111
    186  f767		       00		      .byte.b	%00000000
    187  f768
    188  f768							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f768
    190  f768							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  f768							; ^^^^^^^^^
    192  f768		       8f		      .byte.b	%10001111	; digit 3
    193  f769		       4d		      .byte.b	%01001101
    194  f76a		       4d		      .byte.b	%01001101
    195  f76b		       8f		      .byte.b	%10001111
    196  f76c		       4d		      .byte.b	%01001101
    197  f76d		       4d		      .byte.b	%01001101
    198  f76e		       8f		      .byte.b	%10001111
    199  f76f		       00		      .byte.b	%00000000
    200  f770
    201  f770							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  f770
    203  f770							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  f770							; ^^^^^^^^^
    205  f770		       4f		      .byte.b	%01001111	; digit 4
    206  f771		       4f		      .byte.b	%01001111
    207  f772		       4f		      .byte.b	%01001111
    208  f773		       8f		      .byte.b	%10001111
    209  f774		       4d		      .byte.b	%01001101
    210  f775		       4d		      .byte.b	%01001101
    211  f776		       4d		      .byte.b	%01001101
    212  f777		       00		      .byte.b	%00000000
    213  f778
    214  f778							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f778
    216  f778							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  f778							; ^^^^^^^^^
    218  f778		       8f		      .byte.b	%10001111	; digit 5
    219  f779		       4e		      .byte.b	%01001110
    220  f77a		       4e		      .byte.b	%01001110
    221  f77b		       8f		      .byte.b	%10001111
    222  f77c		       4d		      .byte.b	%01001101
    223  f77d		       4d		      .byte.b	%01001101
    224  f77e		       8f		      .byte.b	%10001111
    225  f77f		       00		      .byte.b	%00000000
    226  f780
    227  f780							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f780
    229  f780							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  f780							; ^^^^^^^^^
    231  f780		       8f		      .byte.b	%10001111	; digit 6
    232  f781		       4e		      .byte.b	%01001110
    233  f782		       4e		      .byte.b	%01001110
    234  f783		       8f		      .byte.b	%10001111
    235  f784		       4f		      .byte.b	%01001111
    236  f785		       4f		      .byte.b	%01001111
    237  f786		       8f		      .byte.b	%10001111
    238  f787		       00		      .byte.b	%00000000
    239  f788
    240  f788							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  f788
    242  f788							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  f788							; ^^^^^^^^^
    244  f788		       8f		      .byte.b	%10001111	; digit 7
    245  f789		       4d		      .byte.b	%01001101
    246  f78a		       4d		      .byte.b	%01001101
    247  f78b		       8d		      .byte.b	%10001101
    248  f78c		       4d		      .byte.b	%01001101
    249  f78d		       4d		      .byte.b	%01001101
    250  f78e		       8d		      .byte.b	%10001101
    251  f78f		       00		      .byte.b	%00000000
    252  f790
    253  f790							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f790
    255  f790							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  f790							; ^^^^^^^^^
    257  f790		       8f		      .byte.b	%10001111	; digit 8
    258  f791		       4f		      .byte.b	%01001111
    259  f792		       4f		      .byte.b	%01001111
    260  f793		       8f		      .byte.b	%10001111
    261  f794		       4f		      .byte.b	%01001111
    262  f795		       4f		      .byte.b	%01001111
    263  f796		       8f		      .byte.b	%10001111
    264  f797		       00		      .byte.b	%00000000
    265  f798
    266  f798							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  f798
    268  f798							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  f798							; ^^^^^^^^^
    270  f798		       8f		      .byte.b	%10001111	; digit 9
    271  f799		       4f		      .byte.b	%01001111
    272  f79a		       4f		      .byte.b	%01001111
    273  f79b		       8f		      .byte.b	%10001111
    274  f79c		       4d		      .byte.b	%01001101
    275  f79d		       4d		      .byte.b	%01001101
    276  f79e		       8f		      .byte.b	%10001111
    277  f79f		       00		      .byte.b	%00000000
    278  f7a0
    279  f7a0
    280  f7a0
    281  f7a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  f7a0							; Throbbing Line Graphics
    283  f7a0							;
    284  f7a0							; Graphics tables for the throbbing lines
    285  f7a0							;
    286  f7a0							; Table takes up $18 (24) bytes of ROM
    287  f7a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  f7a0
    289  f7a0				   LineThrobGfx
    290  f7a0
    291  f7a0		       00		      .byte.b	COL_LINES + LUM_0	; frame 0
    292  f7a1		       02		      .byte.b	COL_LINES + LUM_2
    293  f7a2		       04		      .byte.b	COL_LINES + LUM_4
    294  f7a3
    295  f7a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  f7a3
    297  f7a3		       00		      .byte.b	COL_LINES + LUM_0	; frame 1
    298  f7a4		       04		      .byte.b	COL_LINES + LUM_4
    299  f7a5		       06		      .byte.b	COL_LINES + LUM_6
    300  f7a6
    301  f7a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  f7a6
    303  f7a6		       00		      .byte.b	COL_LINES + LUM_0	; frame 2
    304  f7a7		       06		      .byte.b	COL_LINES + LUM_6
    305  f7a8		       08		      .byte.b	COL_LINES + LUM_8
    306  f7a9
    307  f7a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  f7a9
    309  f7a9		       02		      .byte.b	COL_LINES + LUM_2	; frame 3
    310  f7aa		       08		      .byte.b	COL_LINES + LUM_8
    311  f7ab		       0c		      .byte.b	COL_LINES + LUM_C
    312  f7ac
    313  f7ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  f7ac
    315  f7ac		       04		      .byte.b	COL_LINES + LUM_4	; frame 4
    316  f7ad		       0a		      .byte.b	COL_LINES + LUM_A
    317  f7ae		       0e		      .byte.b	COL_LINES + LUM_E
    318  f7af
    319  f7af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  f7af
    321  f7af		       02		      .byte.b	COL_LINES + LUM_2	; frame 5
    322  f7b0		       08		      .byte.b	COL_LINES + LUM_8
    323  f7b1		       0c		      .byte.b	COL_LINES + LUM_C
    324  f7b2
    325  f7b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  f7b2
    327  f7b2		       00		      .byte.b	COL_LINES + LUM_0	; frame 6
    328  f7b3		       06		      .byte.b	COL_LINES + LUM_6
    329  f7b4		       0a		      .byte.b	COL_LINES + LUM_A
    330  f7b5
    331  f7b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  f7b5
    333  f7b5		       00		      .byte.b	COL_LINES + LUM_0	; frame 7
    334  f7b6		       04		      .byte.b	COL_LINES + LUM_4
    335  f7b7		       06		      .byte.b	COL_LINES + LUM_6
    336  f7b8
    337  f7b8
    338  f7b8
    339  f7b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  f7b8							; Health Graphics
    341  f7b8							;
    342  f7b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  f7b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  f7b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  f7b8							; the graphics for the lower right are flipped.
    346  f7b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  f7b8							; are set up in a confusing way. They are upside-down, but they are split
    348  f7b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  f7b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  f7b8							; LOWER 4 lines of graphics (also upside-down).
    351  f7b8							; The last table (HealthBgGfx) is for the grey background of the
    352  f7b8							; health graphics drawn with the playfield.
    353  f7b8							;
    354  f7b8							; Table takes up $45 (69) bytes of ROM
    355  f7b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  f7b8
    357  f7b8				   HealthTopGfx
    358  f7b8
    359  f7b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  f7b9		       43		      .byte.b	%01000011
    361  f7ba		       44		      .byte.b	%01000100
    362  f7bb		       48		      .byte.b	%01001000
    363  f7bc		       30		      .byte.b	%00110000
    364  f7bd
    365  f7bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  f7bd				   HealthLeftGfx
    367  f7bd
    368  f7bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  f7be		       8c		      .byte.b	%10001100
    370  f7bf		       84		      .byte.b	%10000100
    371  f7c0		       80		      .byte.b	%10000000
    372  f7c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  f7c2		       20		      .byte.b	%00100000
    374  f7c3		       47		      .byte.b	%01000111
    375  f7c4		       84		      .byte.b	%10000100
    376  f7c5
    377  f7c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  f7c5
    379  f7c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  f7c6		       8c		      .byte.b	%10001100
    381  f7c7		       84		      .byte.b	%10000100
    382  f7c8		       80		      .byte.b	%10000000
    383  f7c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  f7ca		       20		      .byte.b	%00100000
    385  f7cb		       47		      .byte.b	%01000111
    386  f7cc		       80		      .byte.b	%10000000
    387  f7cd
    388  f7cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  f7cd
    390  f7cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  f7ce		       8c		      .byte.b	%10001100
    392  f7cf		       84		      .byte.b	%10000100
    393  f7d0		       80		      .byte.b	%10000000
    394  f7d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  f7d2		       20		      .byte.b	%00100000
    396  f7d3		       44		      .byte.b	%01000100
    397  f7d4		       87		      .byte.b	%10000111
    398  f7d5
    399  f7d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  f7d5
    401  f7d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  f7d6		       9c		      .byte.b	%10011100
    403  f7d7		       80		      .byte.b	%10000000
    404  f7d8		       80		      .byte.b	%10000000
    405  f7d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  f7da		       20		      .byte.b	%00100000
    407  f7db		       46		      .byte.b	%01000110
    408  f7dc		       81		      .byte.b	%10000001
    409  f7dd
    410  f7dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  f7dd				   HealthRightGfx
    412  f7dd
    413  f7dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  f7de		       9a		      .byte.b	%10011010
    415  f7df		       90		      .byte.b	%10010000
    416  f7e0		       80		      .byte.b	%10000000
    417  f7e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  f7e2		       20		      .byte.b	%00100000
    419  f7e3		       4f		      .byte.b	%01001111
    420  f7e4		       89		      .byte.b	%10001001
    421  f7e5
    422  f7e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  f7e5
    424  f7e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  f7e6		       9a		      .byte.b	%10011010
    426  f7e7		       90		      .byte.b	%10010000
    427  f7e8		       80		      .byte.b	%10000000
    428  f7e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  f7ea		       20		      .byte.b	%00100000
    430  f7eb		       4f		      .byte.b	%01001111
    431  f7ec		       80		      .byte.b	%10000000
    432  f7ed
    433  f7ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  f7ed
    435  f7ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  f7ee		       9a		      .byte.b	%10011010
    437  f7ef		       88		      .byte.b	%10001000
    438  f7f0		       80		      .byte.b	%10000000
    439  f7f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  f7f2		       20		      .byte.b	%00100000
    441  f7f3		       48		      .byte.b	%01001000
    442  f7f4		       8f		      .byte.b	%10001111
    443  f7f5
    444  f7f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  f7f5
    446  f7f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  f7f6		       ba		      .byte.b	%10111010
    448  f7f7		       80		      .byte.b	%10000000
    449  f7f8		       80		      .byte.b	%10000000
    450  f7f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  f7fa		       20		      .byte.b	%00100000
    452  f7fb		       4c		      .byte.b	%01001100
    453  f7fc		       83		      .byte.b	%10000011
    454  f7fd
    455  f7fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  f7fd
    457  f7fd							; 3 bytes left in this page
    458  f7fd
    459  f800		       00 00 00 	      ALIGN	$100	; align to page
    460  f800
    461  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  f800				   HealthBgGfx
    463  f800							; 13 bytes
    464  f800
    465  f800		       00		      .byte.b	%00000000
    466  f801		       3e		      .byte.b	%00111110
    467  f802		       7f		      .byte.b	%01111111
    468  f803		       7f		      .byte.b	%01111111
    469  f804		       7f		      .byte.b	%01111111
    470  f805		       7f		      .byte.b	%01111111
    471  f806		       7f		      .byte.b	%01111111
    472  f807		       7f		      .byte.b	%01111111
    473  f808		       7f		      .byte.b	%01111111
    474  f809		       7f		      .byte.b	%01111111
    475  f80a		       63		      .byte.b	%01100011
    476  f80b		       63		      .byte.b	%01100011
    477  f80c		       00		      .byte.b	%00000000
    478  f80d
    479  f80d
    480  f80d
    481  f80d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  f80d							; Progress Bar Graphics
    483  f80d							;
    484  f80d							;
    485  f80d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  f80d
    487  f80d				   PgBarGfx
    488  f80d							; 9 bytes
    489  f80d
    490  f80d		       ff		      .byte.b	%11111111	; 1st PF1
    491  f80e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  f80f		       3f		      .byte.b	%00111111
    493  f810		       1f		      .byte.b	%00011111
    494  f811		       0f		      .byte.b	%00001111
    495  f812		       07		      .byte.b	%00000111
    496  f813		       03		      .byte.b	%00000011
    497  f814		       01		      .byte.b	%00000001
    498  f815		       00		      .byte.b	%00000000
    499  f816
    500  f816							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  f816				   PgBarGfxR
    502  f816							; 8 bytes
    503  f816
    504  f816		       ff		      .byte.b	%11111111	; PF2
    505  f817		       fe		      .byte.b	%11111110
    506  f818		       fc		      .byte.b	%11111100
    507  f819		       f8		      .byte.b	%11111000
    508  f81a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  f81b		       e0		      .byte.b	%11100000	; 1st PF0
    510  f81c		       c0		      .byte.b	%11000000
    511  f81d		       80		      .byte.b	%10000000
    512  f81e
    513  f81e
    514  f81e
    515  f81e				   FineHmove73
    516  f81e
    517  f81e		       70 60 50 40	      HEX	70 60 50 40
    518  f822		       30 20 10 00	      HEX	30 20 10 00
    519  f826		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  f82a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  f82e
    522  f82e
    523  f82e
    524  f82e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  f82e							; Cat Rainbow Graphics
    526  f82e							;
    527  f82e							;
    528  f82e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  f82e
    530  f82e				   RainbowGfx
    531  f82e							; 4 bytes
    532  f82e
    533  f82e							;.byte %10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  f82e
    535  f82e							;.byte %01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  f82e
    537  f82e							;.byte %11000000	; rainbow PF0 gfx for moving up
    538  f82e
    539  f82e							;.byte %00110000	; rainbow PF0 gfx for moving down
    540  f82e
    541  f82e				   RainbowCol
    542  f82e
    543  f82e		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    544  f844
    545  f844		       36		      .byte.b	$36
    546  f845		       36		      .byte.b	$36
    547  f846
    548  f846		       28		      .byte.b	$28
    549  f847		       28		      .byte.b	$28
    550  f848
    551  f848		       1e		      .byte.b	$1E
    552  f849		       1e		      .byte.b	$1E
    553  f84a
    554  f84a		       cc		      .byte.b	$CC
    555  f84b		       cc		      .byte.b	$CC
    556  f84c
    557  f84c		       72		      .byte.b	$72
    558  f84d		       72		      .byte.b	$72
    559  f84e
    560  f84e		       54		      .byte.b	$54
    561  f84f		       54		      .byte.b	$54
    562  f850
    563  f850		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    564  f866
    565  f866				   CatFaceGfx
    566  f866
    567  f866		       36		      .byte.b	%00110110
    568  f867		       36		      .byte.b	%00110110
    569  f868		       00		      .byte.b	%00000000
    570  f869		       7e		      .byte.b	%01111110
    571  f86a		       c1		      .byte.b	%11000001
    572  f86b		       d5		      .byte.b	%11010101
    573  f86c		       ff		      .byte.b	%11111111
    574  f86d		       d5		      .byte.b	%11010101
    575  f86e		       dd		      .byte.b	%11011101
    576  f86f		       ff		      .byte.b	%11111111
    577  f870		       66		      .byte.b	%01100110
    578  f871		       66		      .byte.b	%01100110
    579  f872		       42		      .byte.b	%01000010
    580  f873
    581  f873		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    582  f888							;140 bytes used in page
    583  f888
    584  f900		       00 00 00 00*	      ALIGN	$100
    585  f900
    586  f900				   FoodGfx
    587  f900
    588  f900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  f900							; 0 - blank
    590  f900
    591  f900		       00		      .byte.b	%00000000
    592  f901		       00		      .byte.b	%00000000
    593  f902		       00		      .byte.b	%00000000
    594  f903		       00		      .byte.b	%00000000
    595  f904		       00		      .byte.b	%00000000
    596  f905		       00		      .byte.b	%00000000
    597  f906		       00		      .byte.b	%00000000
    598  f907		       00		      .byte.b	%00000000
    599  f908		       00		      .byte.b	%00000000
    600  f909		       00		      .byte.b	%00000000
    601  f90a		       00		      .byte.b	%00000000
    602  f90b		       00		      .byte.b	%00000000
    603  f90c		       00		      .byte.b	%00000000
    604  f90d		       00		      .byte.b	%00000000
    605  f90e
    606  f90e		       0e		      .byte.b	$0E
    607  f90f		       00		      .byte.b	0
    608  f910
    609  f910							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  f910							; 1 - apple
    611  f910
    612  f910		       34		      .byte.b	%00110100
    613  f911		       7e		      .byte.b	%01111110
    614  f912		       7e		      .byte.b	%01111110
    615  f913		       ff		      .byte.b	%11111111
    616  f914		       ff		      .byte.b	%11111111
    617  f915		       ff		      .byte.b	%11111111
    618  f916		       ff		      .byte.b	%11111111
    619  f917		       ff		      .byte.b	%11111111
    620  f918		       ff		      .byte.b	%11111111
    621  f919		       7f		      .byte.b	%01111111
    622  f91a		       6a		      .byte.b	%01101010
    623  f91b		       08		      .byte.b	%00001000
    624  f91c		       0c		      .byte.b	%00001100
    625  f91d		       04		      .byte.b	%00000100
    626  f91e
    627  f91e		       46		      .byte.b	$46
    628  f91f		       00		      .byte.b	0
    629  f920
    630  f920							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  f920							; 2 - peach
    632  f920
    633  f920		       3c		      .byte.b	%00111100
    634  f921		       6e		      .byte.b	%01101110
    635  f922		       6e		      .byte.b	%01101110
    636  f923		       df		      .byte.b	%11011111
    637  f924		       df		      .byte.b	%11011111
    638  f925		       bf		      .byte.b	%10111111
    639  f926		       bf		      .byte.b	%10111111
    640  f927		       bf		      .byte.b	%10111111
    641  f928		       de		      .byte.b	%11011110
    642  f929		       5e		      .byte.b	%01011110
    643  f92a		       6c		      .byte.b	%01101100
    644  f92b		       18		      .byte.b	%00011000
    645  f92c		       10		      .byte.b	%00010000
    646  f92d		       30		      .byte.b	%00110000
    647  f92e
    648  f92e		       3a		      .byte.b	$3A
    649  f92f		       00		      .byte.b	0
    650  f930
    651  f930							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  f930							; 3 - banana
    653  f930
    654  f930		       38		      .byte.b	%00111000
    655  f931		       7c		      .byte.b	%01111100
    656  f932		       fe		      .byte.b	%11111110
    657  f933		       fe		      .byte.b	%11111110
    658  f934		       ff		      .byte.b	%11111111
    659  f935		       ff		      .byte.b	%11111111
    660  f936		       8f		      .byte.b	%10001111
    661  f937		       07		      .byte.b	%00000111
    662  f938		       07		      .byte.b	%00000111
    663  f939		       03		      .byte.b	%00000011
    664  f93a		       03		      .byte.b	%00000011
    665  f93b		       02		      .byte.b	%00000010
    666  f93c		       06		      .byte.b	%00000110
    667  f93d		       06		      .byte.b	%00000110
    668  f93e
    669  f93e		       1e		      .byte.b	$1E
    670  f93f		       00		      .byte.b	0
    671  f940
    672  f940							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  f940							; 4 - pear
    674  f940
    675  f940		       38		      .byte.b	%00111000
    676  f941		       7c		      .byte.b	%01111100
    677  f942		       fe		      .byte.b	%11111110
    678  f943		       fe		      .byte.b	%11111110
    679  f944		       fe		      .byte.b	%11111110
    680  f945		       fe		      .byte.b	%11111110
    681  f946		       fe		      .byte.b	%11111110
    682  f947		       fe		      .byte.b	%11111110
    683  f948		       7c		      .byte.b	%01111100
    684  f949		       38		      .byte.b	%00111000
    685  f94a		       30		      .byte.b	%00110000
    686  f94b		       10		      .byte.b	%00010000
    687  f94c		       18		      .byte.b	%00011000
    688  f94d		       08		      .byte.b	%00001000
    689  f94e
    690  f94e		       cc		      .byte.b	$CC
    691  f94f		       00		      .byte.b	0
    692  f950
    693  f950							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  f950							; 5 - plum
    695  f950
    696  f950		       38		      .byte.b	%00111000
    697  f951		       6c		      .byte.b	%01101100
    698  f952		       6e		      .byte.b	%01101110
    699  f953		       de		      .byte.b	%11011110
    700  f954		       df		      .byte.b	%11011111
    701  f955		       bf		      .byte.b	%10111111
    702  f956		       bf		      .byte.b	%10111111
    703  f957		       bf		      .byte.b	%10111111
    704  f958		       de		      .byte.b	%11011110
    705  f959		       de		      .byte.b	%11011110
    706  f95a		       5e		      .byte.b	%01011110
    707  f95b		       3c		      .byte.b	%00111100
    708  f95c		       20		      .byte.b	%00100000
    709  f95d		       60		      .byte.b	%01100000
    710  f95e
    711  f95e		       88		      .byte.b	$88
    712  f95f		       00		      .byte.b	0
    713  f960
    714  f960							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  f960							; 6 - grapes
    716  f960
    717  f960		       18		      .byte.b	%00011000
    718  f961		       08		      .byte.b	%00001000
    719  f962		       36		      .byte.b	%00110110
    720  f963		       12		      .byte.b	%00010010
    721  f964		       6c		      .byte.b	%01101100
    722  f965		       24		      .byte.b	%00100100
    723  f966		       db		      .byte.b	%11011011
    724  f967		       49		      .byte.b	%01001001
    725  f968		       36		      .byte.b	%00110110
    726  f969		       12		      .byte.b	%00010010
    727  f96a		       6c		      .byte.b	%01101100
    728  f96b		       34		      .byte.b	%00110100
    729  f96c		       10		      .byte.b	%00010000
    730  f96d		       18		      .byte.b	%00011000
    731  f96e
    732  f96e		       64		      .byte.b	$64
    733  f96f		       00		      .byte.b	0
    734  f970
    735  f970							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  f970							; 7 - broccoli
    737  f970
    738  f970		       00		      .byte.b	%00000000
    739  f971		       00		      .byte.b	%00000000
    740  f972		       18		      .byte.b	%00011000
    741  f973		       18		      .byte.b	%00011000
    742  f974		       3e		      .byte.b	%00111110
    743  f975		       2a		      .byte.b	%00101010
    744  f976		       ea		      .byte.b	%11101010
    745  f977		       df		      .byte.b	%11011111
    746  f978		       ff		      .byte.b	%11111111
    747  f979		       ff		      .byte.b	%11111111
    748  f97a		       7e		      .byte.b	%01111110
    749  f97b		       18		      .byte.b	%00011000
    750  f97c		       00		      .byte.b	%00000000
    751  f97d		       00		      .byte.b	%00000000
    752  f97e
    753  f97e		       c6		      .byte.b	$C6
    754  f97f		       00		      .byte.b	0
    755  f980
    756  f980							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  f980							; 8 - cabbage
    758  f980
    759  f980		       18		      .byte.b	%00011000
    760  f981		       76		      .byte.b	%01110110
    761  f982		       76		      .byte.b	%01110110
    762  f983		       7a		      .byte.b	%01111010
    763  f984		       f9		      .byte.b	%11111001
    764  f985		       fb		      .byte.b	%11111011
    765  f986		       ed		      .byte.b	%11101101
    766  f987		       db		      .byte.b	%11011011
    767  f988		       fb		      .byte.b	%11111011
    768  f989		       e9		      .byte.b	%11101001
    769  f98a		       56		      .byte.b	%01010110
    770  f98b		       76		      .byte.b	%01110110
    771  f98c		       6e		      .byte.b	%01101110
    772  f98d		       18		      .byte.b	%00011000
    773  f98e
    774  f98e		       da		      .byte.b	$DA
    775  f98f		       00		      .byte.b	0
    776  f990
    777  f990							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  f990							; 9 - celery
    779  f990
    780  f990		       c0		      .byte.b	%11000000
    781  f991		       e0		      .byte.b	%11100000
    782  f992		       70		      .byte.b	%01110000
    783  f993		       30		      .byte.b	%00110000
    784  f994		       18		      .byte.b	%00011000
    785  f995		       18		      .byte.b	%00011000
    786  f996		       0c		      .byte.b	%00001100
    787  f997		       0c		      .byte.b	%00001100
    788  f998		       0e		      .byte.b	%00001110
    789  f999		       06		      .byte.b	%00000110
    790  f99a		       0d		      .byte.b	%00001101
    791  f99b		       0b		      .byte.b	%00001011
    792  f99c		       0d		      .byte.b	%00001101
    793  f99d		       06		      .byte.b	%00000110
    794  f99e
    795  f99e		       d6		      .byte.b	$D6
    796  f99f		       00		      .byte.b	0
    797  f9a0
    798  f9a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  f9a0							; A - green pepper
    800  f9a0
    801  f9a0		       6c		      .byte.b	%01101100
    802  f9a1		       6c		      .byte.b	%01101100
    803  f9a2		       fe		      .byte.b	%11111110
    804  f9a3		       fe		      .byte.b	%11111110
    805  f9a4		       f6		      .byte.b	%11110110
    806  f9a5		       f6		      .byte.b	%11110110
    807  f9a6		       f6		      .byte.b	%11110110
    808  f9a7		       f6		      .byte.b	%11110110
    809  f9a8		       f6		      .byte.b	%11110110
    810  f9a9		       ec		      .byte.b	%11101100
    811  f9aa		       7c		      .byte.b	%01111100
    812  f9ab		       10		      .byte.b	%00010000
    813  f9ac		       18		      .byte.b	%00011000
    814  f9ad		       08		      .byte.b	%00001000
    815  f9ae
    816  f9ae		       c8		      .byte.b	$C8
    817  f9af		       00		      .byte.b	0
    818  f9b0
    819  f9b0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  f9b0							; B - potato
    821  f9b0
    822  f9b0		       00		      .byte.b	%00000000
    823  f9b1		       00		      .byte.b	%00000000
    824  f9b2		       00		      .byte.b	%00000000
    825  f9b3		       1c		      .byte.b	%00011100
    826  f9b4		       7e		      .byte.b	%01111110
    827  f9b5		       ff		      .byte.b	%11111111
    828  f9b6		       ff		      .byte.b	%11111111
    829  f9b7		       ef		      .byte.b	%11101111
    830  f9b8		       f6		      .byte.b	%11110110
    831  f9b9		       78		      .byte.b	%01111000
    832  f9ba		       30		      .byte.b	%00110000
    833  f9bb		       00		      .byte.b	%00000000
    834  f9bc		       00		      .byte.b	%00000000
    835  f9bd		       00		      .byte.b	%00000000
    836  f9be
    837  f9be		       f6		      .byte.b	$F6
    838  f9bf		       00		      .byte.b	0
    839  f9c0
    840  f9c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  f9c0							; C - mushroom
    842  f9c0
    843  f9c0		       00		      .byte.b	%00000000
    844  f9c1		       18		      .byte.b	%00011000
    845  f9c2		       18		      .byte.b	%00011000
    846  f9c3		       18		      .byte.b	%00011000
    847  f9c4		       18		      .byte.b	%00011000
    848  f9c5		       99		      .byte.b	%10011001
    849  f9c6		       db		      .byte.b	%11011011
    850  f9c7		       ff		      .byte.b	%11111111
    851  f9c8		       ff		      .byte.b	%11111111
    852  f9c9		       ff		      .byte.b	%11111111
    853  f9ca		       7e		      .byte.b	%01111110
    854  f9cb		       7e		      .byte.b	%01111110
    855  f9cc		       18		      .byte.b	%00011000
    856  f9cd		       00		      .byte.b	%00000000
    857  f9ce
    858  f9ce		       08		      .byte.b	$08
    859  f9cf		       00		      .byte.b	0
    860  f9d0
    861  f9d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  f9d0							; D - key
    863  f9d0
    864  f9d0		       10		      .byte.b	%00010000
    865  f9d1		       1e		      .byte.b	%00011110
    866  f9d2		       1e		      .byte.b	%00011110
    867  f9d3		       18		      .byte.b	%00011000
    868  f9d4		       1e		      .byte.b	%00011110
    869  f9d5		       1e		      .byte.b	%00011110
    870  f9d6		       10		      .byte.b	%00010000
    871  f9d7		       10		      .byte.b	%00010000
    872  f9d8		       10		      .byte.b	%00010000
    873  f9d9		       10		      .byte.b	%00010000
    874  f9da		       38		      .byte.b	%00111000
    875  f9db		       6c		      .byte.b	%01101100
    876  f9dc		       6c		      .byte.b	%01101100
    877  f9dd		       38		      .byte.b	%00111000
    878  f9de
    879  f9de		       2c		      .byte.b	$2C
    880  f9df		       00		      .byte.b	0
    881  f9e0
    882  f9e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  f9e0							; E - ring
    884  f9e0
    885  f9e0		       00		      .byte.b	%00000000
    886  f9e1		       18		      .byte.b	%00011000
    887  f9e2		       3c		      .byte.b	%00111100
    888  f9e3		       66		      .byte.b	%01100110
    889  f9e4		       42		      .byte.b	%01000010
    890  f9e5		       42		      .byte.b	%01000010
    891  f9e6		       42		      .byte.b	%01000010
    892  f9e7		       66		      .byte.b	%01100110
    893  f9e8		       3c		      .byte.b	%00111100
    894  f9e9		       18		      .byte.b	%00011000
    895  f9ea		       18		      .byte.b	%00011000
    896  f9eb		       2c		      .byte.b	%00101100
    897  f9ec		       18		      .byte.b	%00011000
    898  f9ed		       00		      .byte.b	%00000000
    899  f9ee
    900  f9ee		       2c		      .byte.b	$2C
    901  f9ef		       00		      .byte.b	0
    902  f9f0
    903  f9f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    904  f9f0							; F - heart
    905  f9f0
    906  f9f0		       00		      .byte.b	%00000000
    907  f9f1		       18		      .byte.b	%00011000
    908  f9f2		       18		      .byte.b	%00011000
    909  f9f3		       3c		      .byte.b	%00111100
    910  f9f4		       3c		      .byte.b	%00111100
    911  f9f5		       7e		      .byte.b	%01111110
    912  f9f6		       7e		      .byte.b	%01111110
    913  f9f7		       ff		      .byte.b	%11111111
    914  f9f8		       ff		      .byte.b	%11111111
    915  f9f9		       ff		      .byte.b	%11111111
    916  f9fa		       e7		      .byte.b	%11100111
    917  f9fb		       e7		      .byte.b	%11100111
    918  f9fc		       42		      .byte.b	%01000010
    919  f9fd		       00		      .byte.b	%00000000
    920  f9fe
    921  f9fe		       4a		      .byte.b	$4A
    922  f9ff		       00		      .byte.b	0
    923  fa00
    924  fa00				   RainbowColors
    925  fa00				   RamBowColors
    926  fa00
    927  fa00		       00		      .byte.b	COL_BACKGROUND
    928  fa01		       00		      .byte.b	COL_BACKGROUND
    929  fa02
    930  fa02		       64		      .byte.b	$64
    931  fa03		       64		      .byte.b	$64
    932  fa04		       88		      .byte.b	$88
    933  fa05		       88		      .byte.b	$88
    934  fa06		       c8		      .byte.b	$C8
    935  fa07		       c8		      .byte.b	$C8
    936  fa08		       1e		      .byte.b	$1E
    937  fa09		       1e		      .byte.b	$1E
    938  fa0a		       28		      .byte.b	$28
    939  fa0b		       28		      .byte.b	$28
    940  fa0c		       44		      .byte.b	$44
    941  fa0d		       44		      .byte.b	$44
    942  fa0e
    943  fa0e		       00		      .byte.b	COL_BACKGROUND
    944  fa0f		       00		      .byte.b	COL_BACKGROUND
    945  fa10
    946  fa10				   CatTartGfx
    947  fa10
    948  fa10		       00		      .byte.b	%00000000
    949  fa11		       00		      .byte.b	%00000000
    950  fa12		       e0		      .byte.b	%11100000
    951  fa13		       c0		      .byte.b	%11000000
    952  fa14		       c0		      .byte.b	%11000000
    953  fa15		       c0		      .byte.b	%11000000
    954  fa16		       c0		      .byte.b	%11000000
    955  fa17		       c0		      .byte.b	%11000000
    956  fa18		       c0		      .byte.b	%11000000
    957  fa19		       e0		      .byte.b	%11100000
    958  fa1a		       e0		      .byte.b	%11100000
    959  fa1b		       e0		      .byte.b	%11100000
    960  fa1c		       e0		      .byte.b	%11100000
    961  fa1d		       e0		      .byte.b	%11100000
------- FILE main.asm
     82  fa1e
     83  fa1e
     84  fa1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85  fa1e							; End of ROM
     86  fa1e							;
     87  fa1e							; Define the end of the cartridge
     88  fa1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  fa1e
     90  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
     91  fffa		       00 f0		      .WORD.w	SystemClear	; NMI
     92  fffc		       00 f0		      .WORD.w	SystemClear	; RESET
     93  fffe		       00 f0		      .WORD.w	SystemClear	; IRQ
