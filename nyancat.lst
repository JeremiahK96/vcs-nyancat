------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 12-28-2017 Version 2.6
     12  2000 ????						;
     13  2000 ????						; Draw food items on both cat rows
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 df	   GAMEPLAY_STACK equ	$DF	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U0100 ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar and health display
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of 5 values to be written to the playfield
     39 U008e							; registers when drawing progress bar
     40 U008e
     41 U008e				   CatThrobPF
     42 U008e		       00	   PgBarColor ds	1	; color for full part of progress bar
     43 U008f
     44 U008f		       00	   Health     ds	1	; amount of health
     45 U0090							; 0=full 8=medium 16=low 24=empty
     46 U0090
     47 U0090							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48 U0090							; Pointers
     49 U0090
     50 U0090				   FoodGfxPtr1		; pointer for 1st food item's graphics
     51 U0090				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     52 U0090
     53 U0090		       00 00		      ds	2
     54 U0092
     55 U0092				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     56 U0092				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     57 U0092
     58 U0092		       00 00		      ds	2
     59 U0094
     60 U0094				   TartGfxPtr1		; pointer for the tart graphics
     61 U0094				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     62 U0094
     63 U0094		       00 00		      ds	2
     64 U0096
     65 U0096				   CatGfxPtr1		; pointer for the cat face/paws graphics
     66 U0096				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     67 U0096
     68 U0096		       00 00		      ds	2
     69 U0098
     70 U0098				   TartGfxPtr2		; pointer for the tart graphics
     71 U0098				   HthGfxLPtr		; pointer for left half of the health graphics
     72 U0098				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     73 U0098
     74 U0098		       00 00		      ds	2
     75 U009a
     76 U009a				   CatGfxPtr2		; pointer for the cat face/paws graphics
     77 U009a				   HthGfxRPtr		; pointer for right half of the health graphics
     78 U009a				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     79 U009a
     80 U009a		       00 00		      ds	2
     81 U009c
     82 U009c				   ThrobPtr		; pointer for loading the throb colors
     83 U009c				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     84 U009c
     85 U009c		       00 00		      ds	2
     86 U009e
     87 U009e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88 U009e							; Variables used when drawing the cat
     89 U009e
     90 U009e		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     91 U009f
     92 U009f				   Rainbow		; PF0 value for the rainbow graphics
     93 U009f				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     94 U009f		       00		      ds	1
     95 U00a0
     96 U00a0				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     97 U00a0				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
     98 U00a0		       00		      ds	1
     99 U00a1
    100 U00a1		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
    101 U00a2		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
    102 U00a3
    103 U00a3		       00	   CatTartColor ds	1	; color of the cat's tart body
    104 U00a4
    105 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106 U00a4							; Variables used for the food items
    107 U00a4
    108 U00a4		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    109 U00ab		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
    110 U00b2							; the left items, last 7 bytes are for the right items.
    111 U00b2							; Hi nybble holds the value (0-15) of the item to draw.
    112 U00b2							; Lo nybble holds the value of next frame's item.
    113 U00b2							; All nybbles are swapped at the start of each frame.
    114 U00b2
    115 U00b2		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
    116 U00b9
    117 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    118 U00b9							; Variables for the throbbing lines' colors
    119 U00b9
    120 U00b9		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    121 U00bc							; throbbing lines. The first color is darkest,
    122 U00bc							; the last is brightest.
    123 U00bc
    124 U00bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    125 U00bc							; Temporary variables which cannot be shared with stack space
    126 U00bc
    127 U00bc		       00	   TempLoop   ds	1
    128 U00bd		       00	   Temp1      ds	1
    129 U00be		       00	   Temp2      ds	1
    130 U00bf
    131 U00bf							; 53 of 79 non-temporary RAM bytes used (22 left)
    132 U00bf							; last 49 bytes of RAM are used for stack space in the scoreboard display
    133 U00bf
    134 U00bf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135 U00bf							; Temporary variables which can be shared with stack space
    136 U00bf
    137 U00bf		       00	   Temp       ds	1
    138 U00c0
    139 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    140 U00c0							; Other variables which can be shared with stack space
    141 U00c0
    142 U00c0		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    143 U00c1
    144 U00c1		       00	   FoodColor1 ds	1	; color of the 1st food item
    145 U00c2		       00	   FoodColor2 ds	1	; color of the 2nd food item
    146 U00c3
    147 U00c3							; 7 of 15 available temporary RAM bytes used (8 left)
    148 U00c3							; last 34 bytes of RAM are used to hold the rainbow color graphics
    149 U00c3
    150 U00e0					      ORG	$100 - 32
    151 U00e0		       00 00 00 00*RamBowColors ds	32
------- FILE main.asm
     34 U0100
     35 U0100							; Ensure that the code is placed in the proper place in the binary
     36 U0100
     37  2000 ????				      SEG	CODE
     38  1000					      ORG	$1000	; 4K ROM
     39  1000
     40  1000
     41  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  1000							; Full System Clear
     43  1000							;
     44  1000							; Clear all system registers and RAM at startup
     45  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  1000
     47  1000				   SystemClear
     48  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     50  100b
     51  100b
     52  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  100b							; Game Logic
     54  100b							;
     55  100b							; Do the overscan, vertical sync, and vertical blanking,
     56  100b							; along with any game logic
     57  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 bf		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 bf		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 bf		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 bf		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 bf		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 bf		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 89		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8a		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8b		      sta	ProgressBar+2	; 34
     30  1069		       85 8c		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 8d		      sta	ProgressBar+4	; 42
     33  106f
     34  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35  106f							; Prepare for throbbing lines - 43 cycles
     36  106f
     37  106f		       a5 80		      lda	Frame	; 45 - get the current frame number
     38  1071		       29 1c		      and	#%00011100	; 47 - change animation frame every 4 game frames
     39  1073		       4a		      lsr		; 49
     40  1074		       4a		      lsr		; 51 - shift to get a value from 0-7
     41  1075		       85 bf		      sta	Temp	; 54
     42  1077		       0a		      asl		; 56 - carry flag will always be clear after this
     43  1078		       65 bf		      adc	Temp	; 59 - multiply by 3
     44  107a		       a8		      tay		; 61
     45  107b
     46  107b		       85 12		      sta	RESM0	; 64 - set position of left side of level counter digit
     47  107d
     48  107d		       a5 86		      lda	ScoreColor	; 67
     49  107f		       29 f0		      and	#$F0	; 69
     50  1081		       85 bf		      sta	Temp	; 72
     51  1083
     52  1083		       b9 a0 19 	      lda	ThrobGfx+0,y	; 00
     53  1086		       0a		      asl		; 02
     54  1087		       90 01		      bcc	.Color0
     55  1089		       0c		      HEX	0C	; 08
     56  108a				   .Color0
     57  108a		       65 bf		      adc	Temp	; 08
     58  108c		       85 b9		      sta	ThrobColor+0	; 11
     59  108e
     60  108e		       b9 a1 19 	      lda	ThrobGfx+1,y	; 15
     61  1091		       0a		      asl		; 17
     62  1092		       90 01		      bcc	.Color1
     63  1094		       0c		      HEX	0C	; 23
     64  1095				   .Color1
     65  1095		       65 bf		      adc	Temp	; 23
     66  1097		       85 ba		      sta	ThrobColor+1	; 26
     67  1099
     68  1099		       b9 a2 19 	      lda	ThrobGfx+2,y	; 30
     69  109c		       0a		      asl		; 32
     70  109d		       90 01		      bcc	.Color2
     71  109f		       0c		      HEX	0C	; 38
     72  10a0				   .Color2
     73  10a0		       65 bf		      adc	Temp	; 38
     74  10a2		       85 bb		      sta	ThrobColor+2	; 41
     75  10a4
     76  10a4							; sleep19
     77  10a4		       20 26 16 	      jsr	Sleep12
      0  10a7					      SLEEP	7	; 60
      1  10a7				   .CYCLES    SET	7
      2  10a7
      3  10a7				  -	      IF	.CYCLES < 2
      4  10a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10a7				  -	      ERR
      6  10a7					      ENDIF
      7  10a7
      8  10a7					      IF	.CYCLES & 1
      9  10a7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10a7		       04 00		      nop	0
     11  10a9				  -	      ELSE
     12  10a9				  -	      bit	VSYNC
     13  10a9					      ENDIF
     14  10a9				   .CYCLES    SET	.CYCLES - 3
     15  10a9					      ENDIF
     16  10a9
     17  10a9					      REPEAT	.CYCLES / 2
     18  10a9		       ea		      nop
     17  10a9					      REPEND
     18  10aa		       ea		      nop
     19  10ab					      REPEND
     79  10ab
     80  10ab		       85 14		      sta	RESBL	; 63 - set position of leading "1" in level counter
     81  10ad		       85 13		      sta	RESM1	; 66 - set position of right side of level counter digit
     82  10af
     83  10af		       85 02		      sta	WSYNC
     84  10b1		       85 2a		      sta	HMOVE
     85  10b3
     86  10b3
     87  10b3
     88  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  10b3							; Load Scoreboard
     90  10b3							;
     91  10b3							; Get graphics data for the scoreboard and push it onto the stack
     92  10b3							;
     93  10b3							; Takes 535 cycles to complete (7 full scanlines + 3 cycles)
     94  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  10b3
     96  10b3					      SUBROUTINE
     97  10b3
     98  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10b3							; Prepare pointer for level digit graphics - 21 cycles
    100  10b3
    101  10b3		       a2 19		      ldx	#>LevelGfx	; 2
    102  10b5		       86 91		      stx	LvlLoadPtr+1	; 3 - set MSB of level digit graphics pointer
    103  10b7
    104  10b7		       a5 87		      lda	BCDLevel	; 3
    105  10b9
    106  10b9		       29 0f		      and	#$0F	; 2
    107  10bb
    108  10bb		       0a		      asl		; 2
    109  10bc		       0a		      asl		; 2
    110  10bd		       0a		      asl		; 2
    111  10be
    112  10be		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
    113  10c0		       85 90		      sta	LvlLoadPtr	; 3 - set LSB of level digit graphics pointer
    114  10c2
    115  10c2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  10c2							; Prepare one pointer MSB and multiple LSBs for score digit graphics - 86 cycles
    117  10c2
    118  10c2		       86 93		      stx	ScrLoadPtr0+1	; 3 - set MSB of score digit graphics pointer2
    119  10c4		       86 95		      stx	ScrLoadPtr1+1	; 3
    120  10c6		       86 97		      stx	ScrLoadPtr2+1	; 3
    121  10c8		       86 99		      stx	ScrLoadPtr3+1	; 3
    122  10ca		       86 9b		      stx	ScrLoadPtr4+1	; 3
    123  10cc		       86 9d		      stx	ScrLoadPtr5+1	; 3
    124  10ce
    125  10ce		       a7 81		      lax	BCDScore+0	; 3
    126  10d0		       29 f0		      and	#$F0	; 2
    127  10d2		       4a		      lsr		; 2
    128  10d3		       85 92		      sta	ScrLoadPtr0	; 3 - set LSB for digit 0
    129  10d5		       8a		      txa		; 2
    130  10d6		       29 0f		      and	#$0F	; 2
    131  10d8		       0a		      asl		; 2
    132  10d9		       0a		      asl		; 2
    133  10da		       0a		      asl		; 2
    134  10db		       85 94		      sta	ScrLoadPtr1	; 3 - set LSB for digit 1
    135  10dd
    136  10dd		       a7 82		      lax	BCDScore+1	; 3
    137  10df		       29 f0		      and	#$F0	; 2
    138  10e1		       4a		      lsr		; 2
    139  10e2		       85 96		      sta	ScrLoadPtr2	; 3 - set LSB for digit 2
    140  10e4		       8a		      txa		; 2
    141  10e5		       29 0f		      and	#$0F	; 2
    142  10e7		       0a		      asl		; 2
    143  10e8		       0a		      asl		; 2
    144  10e9		       0a		      asl		; 2
    145  10ea		       85 98		      sta	ScrLoadPtr3	; 2 - set LSB for digit 3
    146  10ec
    147  10ec		       a7 83		      lax	BCDScore+2	; 3
    148  10ee		       29 f0		      and	#$F0	; 2
    149  10f0		       4a		      lsr		; 2
    150  10f1		       85 9a		      sta	ScrLoadPtr4	; 3 - set LSB for digit 4
    151  10f3		       8a		      txa		; 2
    152  10f4		       29 0f		      and	#$0F	; 2
    153  10f6		       0a		      asl		; 2
    154  10f7		       0a		      asl		; 2
    155  10f8		       0a		      asl		; 2
    156  10f9		       85 9c		      sta	ScrLoadPtr5	; 3 - set LSB for digit 5
    157  10fb
    158  10fb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  10fb							; Load the stack with the graphics for the scoreboard - 428 cycles
    160  10fb
    161  10fb		       a0 06		      ldy	#6	; 2
    162  10fd
    163  10fd				   .LoadScoreboard
    164  10fd
    165  10fd		       b1 90		      lda	(LvlLoadPtr),y	; 5
    166  10ff		       48		      pha		; 3
    167  1100
    168  1100		       b1 9c		      lda	(ScrLoadPtr5),y	; 5
    169  1102		       48		      pha		; 3
    170  1103
    171  1103		       b1 9a		      lda	(ScrLoadPtr4),y	; 5
    172  1105		       48		      pha		; 3
    173  1106
    174  1106		       b1 98		      lda	(ScrLoadPtr3),y	; 5
    175  1108		       48		      pha		; 3
    176  1109
    177  1109		       b1 96		      lda	(ScrLoadPtr2),y	; 5
    178  110b		       48		      pha		; 3
    179  110c
    180  110c		       b1 94		      lda	(ScrLoadPtr1),y	; 5
    181  110e		       48		      pha		; 3
    182  110f
    183  110f		       b1 92		      lda	(ScrLoadPtr0),y	; 5
    184  1111		       48		      pha		; 3
    185  1112
    186  1112		       88		      dey		; 2
    187  1113		       10 e8		      bpl	.LoadScoreboard	; 2/3
    188  1115
    189  1115
    190  1115
    191  1115							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1115							; Load RAM for progress bar display (28-53 cycles)
    193  1115
    194  1115		       a5 88		      lda	Progress	; 3 - get amount of progress
    195  1117
    196  1117							; The level progress bar uses the following playfield bits:
    197  1117							; (note that PF0 and PF2 are NOT reversed in this diagram)
    198  1117							;
    199  1117							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    200  1117							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    201  1117							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    202  1117							;
    203  1117							; When the progress bar is empty, every bit labeled "X" above should be
    204  1117							; set (1), and when it is full, every "X" bit should be cleared (0).
    205  1117							; The bits labeled "o" must ALWAYS be cleared.
    206  1117							;
    207  1117							; The leftmost playfield value (the 1st PF0) will be calculated first,
    208  1117							; and then each playfield value to the right until the 2nd PF1
    209  1117							; will be calculated.
    210  1117
    211  1117		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    212  1119
    213  1119		       38		      sec		; 2
    214  111a		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    215  111c		       30 1e		      bmi	.Underflow1	; 2/3
    216  111e		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    217  1120
    218  1120		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    219  1122		       30 23		      bmi	.Underflow2	; 2/3
    220  1124		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    221  1126
    222  1126		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    223  1128		       30 28		      bmi	.Underflow3	; 2/3
    224  112a		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    225  112c
    226  112c		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    227  112e		       30 2d		      bmi	.Underflow4	; 2/3
    228  1130		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    229  1132
    230  1132		       aa		      tax		; 2
    231  1133		       bd 0e 1a 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    232  1136		       0a		      asl		; 2
    233  1137		       85 8d		      sta	ProgressBar+4	; 3
    234  1139		       4c 65 11 	      jmp	.Finish	; 3
    235  113c
    236  113c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    237  113c				   .Underflow1		; for 1st PF0
    238  113c
    239  113c		       69 03		      adc	#3	; 3 - add back the 3
    240  113e		       aa		      tax		; 2
    241  113f		       bd 1b 1a 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    242  1142		       85 89		      sta	ProgressBar	; 3
    243  1144		       4c 65 11 	      jmp	.Finish	; 3
    244  1147
    245  1147							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    246  1147				   .Underflow2		; for 1st PF1
    247  1147
    248  1147		       69 08		      adc	#8	; 3 - add back the 8
    249  1149		       aa		      tax		; 2
    250  114a		       bd 0d 1a 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    251  114d		       85 8a		      sta	ProgressBar+1	; 3
    252  114f		       4c 65 11 	      jmp	.Finish	; 3
    253  1152
    254  1152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    255  1152				   .Underflow3		; for PF2
    256  1152
    257  1152		       69 08		      adc	#8	; 3 - add back the 8
    258  1154		       aa		      tax		; 2
    259  1155		       bd 16 1a 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    260  1158		       85 8b		      sta	ProgressBar+2	; 3
    261  115a		       4c 65 11 	      jmp	.Finish	; 3
    262  115d
    263  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    264  115d				   .Underflow4		; for 2nd PF0
    265  115d
    266  115d		       69 04		      adc	#4	; 3 - add back the 4
    267  115f		       aa		      tax		; 2
    268  1160		       bd 1a 1a 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    269  1163		       85 8c		      sta	ProgressBar+3	; 3
    270  1165
    271  1165							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1165				   .Finish
    273  1165
    274  1165		       85 2b		      sta	HMCLR
    275  1167
    276  1167
    277  1167
    278  1167
    279  1167
    280  1167		       a9 7a		      lda	#COL_SCORE	; 2
    281  1169		       85 86		      sta	ScoreColor	; 3
    282  116b
    283  116b		       a5 86		      lda	ScoreColor	; 3
    284  116d		       85 06		      sta	COLUP0	; 3 - set color registers
    285  116f		       85 07		      sta	COLUP1	; 3
    286  1171		       85 08		      sta	COLUPF	; 3
    287  1173		       85 09		      sta	COLUBK	; 3
    288  1175
    289  1175		       a5 80		      lda	Frame
    290  1177		       29 0f		      and	#%00001111
    291  1179		       f0 04		      beq	.IncScore
    292  117b		       a9 00		      lda	#0
    293  117d		       f0 02		      beq	.IncSkip
    294  117f				   .IncScore
    295  117f		       a9 89		      lda	#$89
    296  1181				   .IncSkip
    297  1181		       85 85		      sta	BCDScoreAdd+1
    298  1183
    299  1183		       a9 19		      lda	#$19
    300  1185		       85 87		      sta	BCDLevel
    301  1187
    302  1187
    303  1187
    304  1187
    305  1187							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    306  1187							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    307  1187							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  1187
    309  1187		       a9 1b		      lda	#>FoodGfx
    310  1189		       85 91		      sta	FoodGfxPtr1+1
    311  118b		       85 93		      sta	FoodGfxPtr2+1
    312  118d
    313  118d		       a9 07		      lda	#<CatTartGfx
    314  118f		       85 94		      sta	TartGfxPtr1
    315  1191		       85 98		      sta	TartGfxPtr2
    316  1193		       a9 1c		      lda	#>CatTartGfx
    317  1195		       85 95		      sta	TartGfxPtr1+1
    318  1197		       85 99		      sta	TartGfxPtr2+1
    319  1199
    320  1199		       a9 1a		      lda	#>CatFaceGfx
    321  119b		       85 97		      sta	CatGfxPtr1+1
    322  119d		       85 9b		      sta	CatGfxPtr2+1
    323  119f		       a9 48		      lda	#<CatFaceGfx
    324  11a1		       85 96		      sta	CatGfxPtr1
    325  11a3		       85 9a		      sta	CatGfxPtr2
    326  11a5
    327  11a5		       a9 10		      lda	#$10
    328  11a7		       85 a4		      sta	FoodItemL+0
    329  11a9		       a9 70		      lda	#$70
    330  11ab		       85 ab		      sta	FoodItemR+0
    331  11ad		       a9 20		      lda	#$20
    332  11af		       85 a5		      sta	FoodItemL+1
    333  11b1		       a9 80		      lda	#$80
    334  11b3		       85 ac		      sta	FoodItemR+1
    335  11b5		       a9 30		      lda	#$30
    336  11b7		       85 a6		      sta	FoodItemL+2
    337  11b9		       a9 90		      lda	#$90
    338  11bb		       85 ad		      sta	FoodItemR+2
    339  11bd		       a9 40		      lda	#$40
    340  11bf		       85 a7		      sta	FoodItemL+3
    341  11c1		       a9 a0		      lda	#$A0
    342  11c3		       85 ae		      sta	FoodItemR+3
    343  11c5		       a9 50		      lda	#$50
    344  11c7		       85 a8		      sta	FoodItemL+4
    345  11c9		       a9 b0		      lda	#$B0
    346  11cb		       85 af		      sta	FoodItemR+4
    347  11cd		       a9 60		      lda	#$60
    348  11cf		       85 a9		      sta	FoodItemL+5
    349  11d1		       a9 c0		      lda	#$C0
    350  11d3		       85 b0		      sta	FoodItemR+5
    351  11d5		       a9 d0		      lda	#$D0
    352  11d7		       85 aa		      sta	FoodItemL+6
    353  11d9		       a9 e0		      lda	#$E0
    354  11db		       85 b1		      sta	FoodItemR+6
    355  11dd
    356  11dd		       c6 b2		      dec	FoodPosX
    357  11df		       10 04		      bpl	.NoReset
    358  11e1		       a9 58		      lda	#88
    359  11e3		       85 b2		      sta	FoodPosX
    360  11e5				   .NoReset
    361  11e5		       a5 b2		      lda	FoodPosX
    362  11e7		       85 b5		      sta	FoodPosX+3
    363  11e9
    364  11e9		       a5 b2		      lda	FoodPosX
    365  11eb		       38		      sec
    366  11ec
    367  11ec		       e9 29		      sbc	#41
    368  11ee		       b0 02		      bcs	.Rock1
    369  11f0		       69 59		      adc	#89
    370  11f2				   .Rock1
    371  11f2		       85 b3		      sta	FoodPosX+1
    372  11f4
    373  11f4		       e9 11		      sbc	#17
    374  11f6		       b0 02		      bcs	.Rock2
    375  11f8		       69 59		      adc	#89
    376  11fa				   .Rock2
    377  11fa		       85 b4		      sta	FoodPosX+2
    378  11fc
    379  11fc		       e9 1d		      sbc	#29
    380  11fe		       b0 02		      bcs	.Rock4
    381  1200		       69 59		      adc	#89
    382  1202				   .Rock4
    383  1202		       85 b6		      sta	FoodPosX+4
    384  1204
    385  1204		       4a		      lsr
    386  1205		       85 b7		      sta	FoodPosX+5
    387  1207
    388  1207		       e9 39		      sbc	#57
    389  1209		       b0 02		      bcs	.Rock6
    390  120b		       69 59		      adc	#89
    391  120d				   .Rock6
    392  120d		       85 b8		      sta	FoodPosX+6
    393  120f
    394  120f		       a9 56		      lda	#$56
    395  1211		       85 8e		      sta	PgBarColor
    396  1213
    397  1213		       a9 4a		      lda	#COL_CAT_TART
    398  1215		       85 a3		      sta	CatTartColor
    399  1217
    400  1217		       a5 80		      lda	Frame
    401  1219		       29 08		      and	#%00001000
    402  121b		       4a		      lsr
    403  121c		       4a		      lsr
    404  121d		       4a		      lsr
    405  121e		       a8		      tay
    406  121f		       b9 2e 1a 	      lda	RainbowGfx,y
    407  1222		       85 9f		      sta	Rainbow
    408  1224
    409  1224
    410  1224
    411  1224							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    412  1224							; Prepare for Main Gameplay Kernel
    413  1224							;
    414  1224							; Figure out how many rows to draw before and after the two cat rows
    415  1224							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    416  1224
    417  1224		       a9 03		      lda	#3
    418  1226		       85 a1		      sta	PreCatRows
    419  1228		       a9 02		      lda	#2
    420  122a		       85 a2		      sta	PostCatRows
    421  122c
    422  122c
    423  122c
    424  122c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    425  122c							; Finish Vertical Blanking
    426  122c							;
    427  122c							; Loop until the end of vertical blanking
    428  122c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    429  122c
    430  122c				   VblankTimerLoop
    431  122c		       ad 84 02 	      lda	INTIM
    432  122f		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     62  1231
     63  1231
     64  1231							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  1231							; Kernel
     66  1231							;
     67  1231							; Draw the screen
     68  1231							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  1231
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1231					      include	code/Kernel.asm
      1  1231							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1231							; Kernel
      3  1231							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1231
      5  1231		       a9 00		      lda	#0
      6  1233		       85 02		      sta	WSYNC
      7  1235		       85 01		      sta	VBLANK	; enable display
      8  1237
      9  1237							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  1237					      include	code/ScoreboardKernel.asm
      1  1237							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1237							; Scoreboard Display
      3  1237							;
      4  1237							; Draw the 6-digit score and level counter.
      5  1237							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1237
      7  1237					      SUBROUTINE
      8  1237
      9  1237		       85 09		      sta	COLUBK	; 06 - A = 0
     10  1239		       85 06		      sta	COLUP0	; 09 - set both colors to black
     11  123b
     12  123b		       a9 ff		      lda	#$FF	; 11
     13  123d		       85 0d		      sta	PF0	; 14
     14  123f		       85 1b		      sta	GRP0	; 17 - player 0 (black) will cover up...
     15  1241
     16  1241		       a9 a0		      lda	#$A0	; 19 - ...part of PF1, causing bit 7 of CXP0FB to be set
     17  1243		       85 0e		      sta	PF1	; 22 - (player 0 is drawn over PF1 to hide it)
     18  1245
     19  1245		       a4 86		      ldy	ScoreColor	; 25 - pre-load value to store to GRP0,
     20  1247		       a2 13		      ldx	#%00010011	; 27 - and value to store to NUSIZx, CTRLPF, and VDELxx
     21  1249
     22  1249		       a9 80		      lda	#$80	; 29
     23  124b		       85 0e		      sta	PF1	; 33 - fix PF1 register only AFTER collision
     24  124d
     25  124d		       86 04		      stx	NUSIZ0	; 35 - X = THREE_CLOSE | BALL_SIZE_2
     26  124f		       86 05		      stx	NUSIZ1	; 38
     27  1251		       86 25		      stx	VDELP0	; 41 - enable vertical delay for player 0...
     28  1253		       86 26		      stx	VDELP1	; 44 - ...and player 1
     29  1255		       86 0a		      stx	CTRLPF	; 47 - X = PF_REFLECT | PF_SCORE_MODE | MSL_SIZE_2
     30  1257							;	PF_SCORE_MODE isn't needed, but it saves a read
     31  1257		       84 06		      sty	COLUP0	; 50 - fix COLUP0 register
     32  1259
     33  1259							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  1259							; Pre-load some graphics before the scoreboard kernel loop
     35  1259
     36  1259		       68		      pla		; 54 - pull gfx for digit0
     37  125a		       85 1b		      sta	GRP0	; 57 - digit0 -> [GRP0]
     38  125c
     39  125c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  125c							; Only draw leading 1 in level counter if the level is 10 or more
     41  125c
     42  125c		       a5 87		      lda	BCDLevel	; 60 - the value of bit 4...
     43  125e		       4a		      lsr		; 62
     44  125f		       4a		      lsr		; 64
     45  1260		       4a		      lsr		; 66 - ...gets shifted three times...
     46  1261		       85 1f		      sta	ENABL	; 69 - ...to be used to enable or disable the ball
     47  1263
     48  1263		       10 1e		      bpl	.ScoreEntrance	; 72
     49  1265
     50  1265							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1265				   .ScoreDigitLoop
     52  1265
     53  1265							; A contains gfx for digit3
     54  1265		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     55  1267
     56  1267							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     57  1267
     58  1267		       68		      pla		; 18 - pull gfx for digit3...
     59  1268		       a8		      tay		; 20 - ...and store in Y
     60  1269		       68		      pla		; 24 - pull gfx data for digit4...
     61  126a		       aa		      tax		; 26 - ...and store in X
     62  126b		       68		      pla		; 30 - pull gfx data for digit5 to A
     63  126c
     64  126c		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     65  126e		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     66  1270		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     67  1272		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     68  1274
     69  1274		       68		      pla		; 46 - pull gfx data for level counter
     70  1275		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     71  1277		       2a		      rol		; 51
     72  1278		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     73  127a		       6a		      ror		; 56
     74  127b		       4a		      lsr		; 58
     75  127c		       4a		      lsr		; 60
     76  127d		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     77  127f
     78  127f		       68		      pla		; 67 - pull gfx for digit0
     79  1280		       8d 1b 00 	      sta.w	GRP0	; 71 - digit0 -> [GRP0]
     80  1283				   .ScoreEntrance
     81  1283		       68		      pla		; 74 - pull gfx for digit1
     82  1284		       85 1c		      sta	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
     83  1286							;	(use an extra cycle for timing reasons)
     84  1286
     85  1286		       68		      pla		; 06 - pull gfx for digit2
     86  1287
     87  1287							; On the final iteration of the loop, the stack will have wrapped
     88  1287							; and pulled from location $02 at this point.
     89  1287							; This happens to be the collision register CXP0FB.
     90  1287							; Bit-7 will always be set in this register,
     91  1287							; and bit-7 is always clear in the score graphics,
     92  1287							; so checking bit-7 of the data pulled is all that you need
     93  1287							; to determine when to terminate the loop.
     94  1287
     95  1287		       aa		      tax		; 08 - set flags according to pulled data
     96  1288
     97  1288		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
     98  128a
     99  128a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    100  128a
    101  128a		       a9 00		      lda	#0
    102  128c		       85 1b		      sta	GRP0
    103  128e		       85 1c		      sta	GRP1
    104  1290		       85 26		      sta	VDELP1
    105  1292		       85 25		      sta	VDELP0
    106  1294		       85 1f		      sta	ENABL
    107  1296		       85 1d		      sta	ENAM0
    108  1298		       85 1e		      sta	ENAM1
    109  129a
    110  129a		       85 02		      sta	WSYNC
    111  129c		       85 02		      sta	WSYNC
    112  129e		       85 02		      sta	WSYNC
    113  12a0		       85 02		      sta	WSYNC
    114  12a2
    115  12a2		       a5 86		      lda	ScoreColor
    116  12a4		       85 09		      sta	COLUBK
    117  12a6
    118  12a6		       85 02		      sta	WSYNC
    119  12a8		       4c 00 13 	      jmp	.Trampoline
    120  12ab
    121  1300		       00 00 00 00*	      ALIGN	$100
    122  1300
    123  1300				   .Trampoline
    124  1300		       85 02		      sta	WSYNC
    125  1302
      0  1302					      SLEEP	10
      1  1302				   .CYCLES    SET	10
      2  1302
      3  1302				  -	      IF	.CYCLES < 2
      4  1302				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1302				  -	      ERR
      6  1302					      ENDIF
      7  1302
      8  1302				  -	      IF	.CYCLES & 1
      9  1302				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1302				  -	      nop	0
     11  1302				  -	      ELSE
     12  1302				  -	      bit	VSYNC
     13  1302				  -	      ENDIF
     14  1302				  -.CYCLES    SET	.CYCLES - 3
     15  1302					      ENDIF
     16  1302
     17  1302					      REPEAT	.CYCLES / 2
     18  1302		       ea		      nop
     17  1302					      REPEND
     18  1303		       ea		      nop
     17  1303					      REPEND
     18  1304		       ea		      nop
     17  1304					      REPEND
     18  1305		       ea		      nop
     17  1305					      REPEND
     18  1306		       ea		      nop
     19  1307					      REPEND
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1307					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1307							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1307							; We are currently at cycle 37 in the current scanline.
      3  1307
      4  1307
      5  1307
      6  1307							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  1307							; Output 4 blank scanlines, while setting up the graphics objects.
      8  1307
      9  1307				   PreKernel
     10  1307
     11  1307		       a9 00		      lda	#0	; 12
     12  1309		       85 1d		      sta	ENAM0	; 15 - disable missiles
     13  130b		       85 1e		      sta	ENAM1	; 18
     14  130d		       85 1b		      sta	GRP0	; 21 - disable player graphics
     15  130f		       85 1c		      sta	GRP1	; 24
     16  1311		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
     17  1313		       85 26		      sta	VDELP1	; 30
     18  1315		       85 1f		      sta	ENABL	; 33 - disable ball
     19  1317		       85 c0		      sta	CurrentRow	; 36
     20  1319
     21  1319
     22  1319							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  1319							; Clear 32 bytes of RAM for the rainbow colors - 120 cycles
     24  1319
     25  1319
     26  1319		       a2 ff		      ldx	#$FF
     27  131b		       9a		      txs
     28  131c
     29  131c		       a0 04		      ldy	#4
     30  131e				   .ClearRainbow
     31  131e		       48		      pha
     32  131f		       48		      pha
     33  1320		       48		      pha
     34  1321		       48		      pha
     35  1322		       48		      pha
     36  1323		       48		      pha
     37  1324		       48		      pha
     38  1325		       48		      pha
     39  1326
     40  1326		       88		      dey
     41  1327		       d0 f5		      bne	.ClearRainbow
     42  1329
     43  1329							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  1329							; Load the rainbow colors into RAM - 65 cycles
     45  1329
     46  1329		       a2 ed		      ldx	#RamBowColors+13
     47  132b		       9a		      txs
     48  132c
     49  132c		       ad 05 1c 	      lda	RainbowColors+5
     50  132f		       48		      pha
     51  1330		       48		      pha
     52  1331		       ad 04 1c 	      lda	RainbowColors+4
     53  1334		       48		      pha
     54  1335		       48		      pha
     55  1336		       ad 03 1c 	      lda	RainbowColors+3
     56  1339		       48		      pha
     57  133a		       48		      pha
     58  133b		       ad 02 1c 	      lda	RainbowColors+2
     59  133e		       48		      pha
     60  133f		       48		      pha
     61  1340		       ad 01 1c 	      lda	RainbowColors+1
     62  1343		       48		      pha
     63  1344		       48		      pha
     64  1345		       ad 00 1c 	      lda	RainbowColors+0
     65  1348		       48		      pha
     66  1349		       48		      pha
     67  134a
     68  134a		       85 02		      sta	WSYNC
     69  134c
     70  134c
     71  134c
     72  134c							; Player 0 is already aligned for drawing the cat's face.
     73  134c
     74  134c							; Align player 1 to draw the current frame's food items for the top row.
     75  134c
     76  134c							; food item can be placed anywhere from 0-88
     77  134c							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     78  134c
     79  134c		       a4 c0		      ldy	CurrentRow	; 03 - get the row we are drawing
     80  134e		       b9 b2 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     81  1351
     82  1351		       38		      sec		; 09
     83  1352				   .DivideLoop
     84  1352		       e9 0f		      sbc	#15	; 11
     85  1354		       b0 fc		      bcs	.DivideLoop	; 13
     86  1356
     87  1356		       49 07		      eor	#7	; 15
     88  1358		       69 01		      adc	#1	; 17
     89  135a		       0a		      asl		; 19
     90  135b		       0a		      asl		; 21
     91  135c		       0a		      asl		; 23
     92  135d
     93  135d		       85 11		      sta	RESP1	; 26
     94  135f
     95  135f
     96  135f
     97  135f		       0a		      asl		; 53
     98  1360		       85 21		      sta	HMP1	; 56
     99  1362
    100  1362		       a9 00		      lda	#ONE_COPY	; 58
    101  1364		       85 04		      sta	NUSIZ0	; 61
    102  1366		       a9 04		      lda	#TWO_WIDE	; 63
    103  1368		       85 05		      sta	NUSIZ1	; 66
    104  136a
    105  136a		       a9 80		      lda	#$80	; 68
    106  136c		       85 20		      sta	HMP0	; 71
    107  136e
    108  136e		       85 02		      sta	WSYNC
    109  1370
    110  1370		       a5 ba		      lda	ThrobColor+1	; 03
    111  1372		       85 09		      sta	COLUBK	; 06
    112  1374		       85 08		      sta	COLUPF	; 09
    113  1376
    114  1376
    115  1376
    116  1376
    117  1376		       a9 01		      lda	#PF_REFLECT	; 11
    118  1378		       85 0a		      sta	CTRLPF	; 14
    119  137a
    120  137a		       a5 9f		      lda	Rainbow	; 17
    121  137c		       85 0d		      sta	PF0	; 20
    122  137e
    123  137e		       a9 09		      lda	#COL_CAT_FACE	; 22
    124  1380		       85 06		      sta	COLUP0	; 25
    125  1382
    126  1382		       a5 a4		      lda	FoodItemL	; 28
    127  1384		       29 f0		      and	#$F0	; 30
    128  1386		       85 90		      sta	FoodGfxPtr1	; 33
    129  1388		       aa		      tax		; 35
    130  1389		       bd 0f 1b 	      lda	FoodGfx+15,x	; 39
    131  138c		       85 c1		      sta	FoodColor1	; 42
    132  138e
    133  138e		       a5 ab		      lda	FoodItemR	; 45
    134  1390		       29 f0		      and	#$F0	; 47
    135  1392		       85 92		      sta	FoodGfxPtr2	; 50
    136  1394		       aa		      tax		; 52
    137  1395		       bd 0f 1b 	      lda	FoodGfx+15,x	; 56
    138  1398		       85 c2		      sta	FoodColor2	; 59
    139  139a
    140  139a		       a5 b2		      lda	FoodPosX	; 62
    141  139c		       85 bf		      sta	Temp	; 65
    142  139e
    143  139e		       a2 df		      ldx	#GAMEPLAY_STACK	; 67
    144  13a0		       9a		      txs		; 69
    145  13a1
    146  13a1		       8d 2a 00 	      sta.w	HMOVE	; 73
    147  13a4
    148  13a4							; If any part of the cat needs to be drawn in the top row,
    149  13a4							; skip straight to CatRows.
    150  13a4
    151  13a4
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  13a4					      include	code/Gameplay Kernel/HiRows.asm
      1  13a4							; Draw all the rows above the cat's two rows
      2  13a4
      3  13a4				   HiRows     SUBROUTINE
      4  13a4
      5  13a4		       85 02		      sta	WSYNC
      6  13a6
      7  13a6		       a5 b9		      lda	ThrobColor+0
      8  13a8		       85 09		      sta	COLUBK
      9  13aa		       85 08		      sta	COLUPF
     10  13ac
     11  13ac
     12  13ac							; First, output a single-color line to draw the bottom of a "throb" line.
     13  13ac							; This will probably be a good time to prepare the pointers for the
     14  13ac							; food items' graphics, as well as loading the colors for the food items.
     15  13ac
     16  13ac							; After that, output 14 lines to draw a single row with food items,
     17  13ac							; but without drawing the cat. The food graphics will be updated every line,
     18  13ac							; but there will probably not be enough time to also update the food colors
     19  13ac							; every line throughout the kernel.
     20  13ac
     21  13ac		       20 00 16 	      jsr	DrawFoodRow	; 46
     22  13af
     23  13af		       85 02		      sta	WSYNC
     24  13b1
     25  13b1
     26  13b1							; Lastly, output four single-color lines to draw most of a "throb" line,
     27  13b1							; while setting the position of player 1 to draw the next set of food items.
     28  13b1
     29  13b1
     30  13b1		       a5 b9		      lda	ThrobColor+0
     31  13b3		       85 09		      sta	COLUBK
     32  13b5		       85 08		      sta	COLUPF
     33  13b7		       a9 00		      lda	#0
     34  13b9		       85 1b		      sta	GRP0
     35  13bb		       85 1c		      sta	GRP1
     36  13bd		       85 02		      sta	WSYNC
     37  13bf
     38  13bf		       a5 ba		      lda	ThrobColor+1	; 03
     39  13c1		       85 09		      sta	COLUBK	; 06
     40  13c3		       85 08		      sta	COLUPF	; 09
     41  13c5
     42  13c5		       a4 c0		      ldy	CurrentRow	; 12 - get the row we are drawing
     43  13c7		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     44  13ca
     45  13ca		       38		      sec		; 18
     46  13cb				   .DivideLoop
     47  13cb		       e9 0f		      sbc	#15	; 20
     48  13cd		       b0 fc		      bcs	.DivideLoop	; 22
     49  13cf
     50  13cf		       8d 11 00 	      sta.w	RESP1	; 26
     51  13d2
     52  13d2		       49 07		      eor	#7
     53  13d4		       69 01		      adc	#1
     54  13d6		       0a		      asl
     55  13d7		       0a		      asl
     56  13d8		       0a		      asl
     57  13d9		       0a		      asl
     58  13da		       85 21		      sta	HMP1
     59  13dc
     60  13dc		       85 02		      sta	WSYNC
     61  13de
     62  13de		       a5 bb		      lda	ThrobColor+2	; 03
     63  13e0		       85 09		      sta	COLUBK	; 06
     64  13e2		       85 08		      sta	COLUPF	; 09
     65  13e4
     66  13e4		       20 26 16 	      jsr	Sleep12
     67  13e7		       20 26 16 	      jsr	Sleep12
     68  13ea		       20 26 16 	      jsr	Sleep12
     69  13ed		       20 26 16 	      jsr	Sleep12
     70  13f0		       20 26 16 	      jsr	Sleep12	; 69
     71  13f3
     72  13f3		       8d 2a 00 	      sta.w	HMOVE	; 73
     73  13f6
     74  13f6		       85 02		      sta	WSYNC
     75  13f8
     76  13f8		       a5 ba		      lda	ThrobColor+1
     77  13fa		       85 09		      sta	COLUBK
     78  13fc		       85 08		      sta	COLUPF
     79  13fe
     80  13fe		       a4 c0		      ldy	CurrentRow	; 11
     81  1400
     82  1400		       b9 a4 00 	      lda	FoodItemL,y	; 15
     83  1403		       29 f0		      and	#$F0	; 17
     84  1405		       85 90		      sta	FoodGfxPtr1	; 20
     85  1407		       aa		      tax		; 22
     86  1408		       bd 0f 1b 	      lda	FoodGfx+15,x	; 26
     87  140b		       85 c1		      sta	FoodColor1	; 29
     88  140d
     89  140d		       b9 ab 00 	      lda	FoodItemR,y	; 33
     90  1410		       29 f0		      and	#$F0	; 36
     91  1412		       85 92		      sta	FoodGfxPtr2	; 38
     92  1414		       aa		      tax		; 40
     93  1415		       bd 0f 1b 	      lda	FoodGfx+15,x	; 44
     94  1418		       85 c2		      sta	FoodColor2	; 47
     95  141a
     96  141a		       b9 b2 00 	      lda	FoodPosX,y	; 51
     97  141d		       85 bf		      sta	Temp	; 54
     98  141f
     99  141f		       c6 a1		      dec	PreCatRows
    100  1421		       d0 81		      bne	HiRows
    101  1423
    102  1423							; If this is not the last row before drawing the cat's rows,
    103  1423							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  1423					      include	code/Gameplay Kernel/CatRows.asm
      1  1423							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1423							; Cat Row Kernel
      3  1423							;
      4  1423							; This is the subroutine that is used to draw the two gameplay kernel rows
      5  1423							; containing the cat. It does not draw the throbbing line between the two rows,
      6  1423							; it only draws a single, 14-scanline row with the cat and food items.
      7  1423							; This subroutine is called twice in the kernel, once for each of the two rows
      8  1423							; containing the cat.
      9  1423							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1423
     11  1423				   CatRows    SUBROUTINE
     12  1423
     13  1423		       85 02		      sta	WSYNC
     14  1425
     15  1425							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     16  1425							; If the cat is at the very top of the row, draw the top of the pop-tart.
     17  1425
     18  1425		       a5 b9		      lda	ThrobColor+0	; 03
     19  1427		       85 09		      sta	COLUBK	; 06
     20  1429		       85 08		      sta	COLUPF	; 09
     21  142b
     22  142b		       a6 c2		      ldx	FoodColor2	; 12
     23  142d		       9a		      txs		; 14
     24  142e
      0  142e					      SLEEP	27	; 41
      1  142e				   .CYCLES    SET	27
      2  142e
      3  142e				  -	      IF	.CYCLES < 2
      4  142e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  142e				  -	      ERR
      6  142e					      ENDIF
      7  142e
      8  142e					      IF	.CYCLES & 1
      9  142e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  142e		       04 00		      nop	0
     11  1430				  -	      ELSE
     12  1430				  -	      bit	VSYNC
     13  1430					      ENDIF
     14  1430				   .CYCLES    SET	.CYCLES - 3
     15  1430					      ENDIF
     16  1430
     17  1430					      REPEAT	.CYCLES / 2
     18  1430		       ea		      nop
     17  1430					      REPEND
     18  1431		       ea		      nop
     17  1431					      REPEND
     18  1432		       ea		      nop
     17  1432					      REPEND
     18  1433		       ea		      nop
     17  1433					      REPEND
     18  1434		       ea		      nop
     17  1434					      REPEND
     18  1435		       ea		      nop
     17  1435					      REPEND
     18  1436		       ea		      nop
     17  1436					      REPEND
     18  1437		       ea		      nop
     17  1437					      REPEND
     18  1438		       ea		      nop
     17  1438					      REPEND
     18  1439		       ea		      nop
     17  1439					      REPEND
     18  143a		       ea		      nop
     17  143a					      REPEND
     18  143b		       ea		      nop
     19  143c					      REPEND
     26  143c
     27  143c		       4c 00 15 	      jmp	.OnTheBed	; 44
     28  143f
     29  1500		       00 00 00 00*	      ALIGN	$100
     30  1500
     31  1500				   .OnTheBed
     32  1500		       a4 c0		      ldy	CurrentRow	; 47
     33  1502		       b9 b2 00 	      lda	FoodPosX,y	; 51
     34  1505		       c9 30		      cmp	#48	; 53
     35  1507
     36  1507		       a2 00		      ldx	#0	; 55
     37  1509		       a0 0d		      ldy	#13	; 57
     38  150b
     39  150b							; Then output the 14 lines to draw a single row. This will include drawing
     40  150b							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  150b							; All graphics will be updated every line.
     42  150b
     43  150b		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  150d		       90 42		      bcc	.LeftEntrance	; 62
     45  150f
     46  150f							; 14 bytes into the page
     47  150f
     48  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  150f							; Kernel used when food items are closer to the right edge of the screen
     50  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  150f
     52  150f				   .RightLoop
     53  150f
     54  150f							; 8 cycles
     55  150f		       b1 96		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     56  1511		       85 1b		      sta	GRP0	; 52
     57  1513
     58  1513							; 9 cycles
     59  1513		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     60  1515		       ba		      tsx		; 57 - load 2nd food item's color
     61  1516		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     62  1518
     63  1518				   .RightEntrance		; enter loop here
     64  1518
     65  1518							; 2 cycles
     66  1518		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     67  151a
     68  151a							; 8 cycles
     69  151a		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     70  151c		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     71  151e
     72  151e							; 8 cycles
     73  151e		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     74  1520		       85 1c		      sta	GRP1	; 02
     75  1522
     76  1522							; 7 cycles
     77  1522		       b9 e0 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
     78  1525		       85 09		      sta	COLUBK	; 09
     79  1527
     80  1527							; 7 cycles
     81  1527		       b9 e1 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
     82  152a		       85 08		      sta	COLUPF	; 16
     83  152c
     84  152c							; 6 cycles
     85  152c		       a5 c1		      lda	FoodColor1	; 19 - set 1st food item's color
     86  152e		       85 07		      sta	COLUP1	; 22
     87  1530
     88  1530							; 8 cycles
     89  1530		       a5 a3		      lda	CatTartColor	; 25
     90  1532		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     91  1534		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     92  1536		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     93  1538
     94  1538							; 5 cycles
     95  1538		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     96  153a
     97  153a							; 2 cycles
     98  153a		       88		      dey		; 41
     99  153b		       10 d2		      bpl	.RightLoop	; 44/43
    100  153d
    101  153d		       a0 12		      ldy	#18	; 45
    102  153f		       b1 98		      lda	(TartGfxPtr2),y	; 50
    103  1541
      0  1541					      SLEEP	2	; 52
      1  1541				   .CYCLES    SET	2
      2  1541
      3  1541				  -	      IF	.CYCLES < 2
      4  1541				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1541				  -	      ERR
      6  1541					      ENDIF
      7  1541
      8  1541				  -	      IF	.CYCLES & 1
      9  1541				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1541				  -	      nop	0
     11  1541				  -	      ELSE
     12  1541				  -	      bit	VSYNC
     13  1541				  -	      ENDIF
     14  1541				  -.CYCLES    SET	.CYCLES - 3
     15  1541					      ENDIF
     16  1541
     17  1541					      REPEAT	.CYCLES / 2
     18  1541		       ea		      nop
     19  1542					      REPEND
    105  1542
    106  1542		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    107  1544		       ba		      tsx		; 57 - load 2nd food item's color
    108  1545		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    109  1547
    110  1547		       b0 38		      bcs	.End	; 63
    111  1549
    112  1549							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  1549							; Kernel used when food items are closer to the left edge of the screen
    114  1549							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115  1549
    116  1549				   .LeftLoop
    117  1549
    118  1549							; 8 cycles
    119  1549		       b1 96		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    120  154b		       85 1b		      sta	GRP0	; 57
    121  154d
    122  154d							; 5 cycles
    123  154d		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    124  154f		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    125  1551
    126  1551				   .LeftEntrance		; enter loop here
    127  1551
    128  1551							; 8 cycles
    129  1551		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    130  1553		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    131  1555
    132  1555							; 8 cycles
    133  1555		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    134  1557		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    135  1559
    136  1559							; 7 cycles
    137  1559		       b9 e0 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    138  155c		       85 09		      sta	COLUBK	; 09
    139  155e
    140  155e							; 7 cycles
    141  155e		       b9 e1 00 	      lda	RamBowColors+1,y	; 13
    142  1561		       85 08		      sta	COLUPF	; 16
    143  1563
    144  1563							; 6 cycles
    145  1563		       a5 c1		      lda	FoodColor1	; 19 - set 1st food item's color
    146  1565		       85 07		      sta	COLUP1	; 22
    147  1567
    148  1567							; 8 cycles
    149  1567		       a5 a3		      lda	CatTartColor	; 25
    150  1569		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    151  156b		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    152  156d
    153  156d							; 13 cycles
    154  156d		       b1 92		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    155  156f		       ba		      tsx		; 38 - load 2nd food item's color
    156  1570		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    157  1572		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    158  1574
    159  1574							; 5 cycles
    160  1574		       88		      dey		; 46
    161  1575		       10 d2		      bpl	.LeftLoop	; 49/48
    162  1577
    163  1577		       a2 00		      ldx	#0	; 50
    164  1579		       86 08		      stx	COLUPF	; 53
    165  157b
    166  157b		       a0 12		      ldy	#18	; 55
    167  157d		       b1 98		      lda	(TartGfxPtr2),y	; 60
    168  157f
    169  157f		       86 1c		      stx	GRP1	; 63
    170  1581
    171  1581							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172  1581
    173  1581				   .End
    174  1581
    175  1581		       85 0e		      sta	PF1	; 66
    176  1583
    177  1583		       b1 9a		      lda	(CatGfxPtr2),y	; 71
    178  1585		       85 1b		      sta	GRP0	; 74
    179  1587
    180  1587
    181  1587
    182  1587							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    183  1587							; cat with the rainbow. In order to align player 1 for the next row's
    184  1587							; food items, it will be neccesary to have three versions of this kernel,
    185  1587							; one for each of the three 60-color-clock spaced positions to reset.
    186  1587							; HMOVE will be written to on the first four scanlines. With a maximum
    187  1587							; movement of 15 color-clocks per scanline, this will allow a movement of
    188  1587							; up to 60 color clocks. With three versions of the kernel, it should be
    189  1587							; possible to put player 1 anywhere on the screen.
    190  1587
    191  1587		       a6 b9		      ldx	ThrobColor+0	; 01
    192  1589
    193  1589		       a5 e0		      lda	RamBowColors+0	; 04
    194  158b		       d0 04		      bne	.DrawRainbowBK	; 06/07
    195  158d		       86 09		      stx	COLUBK	; 09
    196  158f		       f0 03		      beq	.AfterBK	; 12
    197  1591				   .DrawRainbowBK
    198  1591		       85 09		      sta	COLUBK	; 10
      0  1593					      SLEEP	2	; 12
      1  1593				   .CYCLES    SET	2
      2  1593
      3  1593				  -	      IF	.CYCLES < 2
      4  1593				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1593				  -	      ERR
      6  1593					      ENDIF
      7  1593
      8  1593				  -	      IF	.CYCLES & 1
      9  1593				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1593				  -	      nop	0
     11  1593				  -	      ELSE
     12  1593				  -	      bit	VSYNC
     13  1593				  -	      ENDIF
     14  1593				  -.CYCLES    SET	.CYCLES - 3
     15  1593					      ENDIF
     16  1593
     17  1593					      REPEAT	.CYCLES / 2
     18  1593		       ea		      nop
     19  1594					      REPEND
    200  1594				   .AfterBK
    201  1594
    202  1594		       a5 8e		      lda	CatThrobPF	; 15
    203  1596		       85 08		      sta	COLUPF	; 18
    204  1598
      0  1598					      SLEEP	4	; 22
      1  1598				   .CYCLES    SET	4
      2  1598
      3  1598				  -	      IF	.CYCLES < 2
      4  1598				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1598				  -	      ERR
      6  1598					      ENDIF
      7  1598
      8  1598				  -	      IF	.CYCLES & 1
      9  1598				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1598				  -	      nop	0
     11  1598				  -	      ELSE
     12  1598				  -	      bit	VSYNC
     13  1598				  -	      ENDIF
     14  1598				  -.CYCLES    SET	.CYCLES - 3
     15  1598					      ENDIF
     16  1598
     17  1598					      REPEAT	.CYCLES / 2
     18  1598		       ea		      nop
     17  1598					      REPEND
     18  1599		       ea		      nop
     19  159a					      REPEND
    206  159a
    207  159a		       a5 a3		      lda	CatTartColor	; 25
    208  159c		       85 08		      sta	COLUPF	; 28
    209  159e		       86 09		      stx	COLUBK	; 31
    210  15a0		       86 08		      stx	COLUPF	; 34
    211  15a2
    212  15a2		       a2 00		      ldx	#0
    213  15a4		       86 1c		      stx	GRP1
    214  15a6
    215  15a6		       a2 df		      ldx	#GAMEPLAY_STACK
    216  15a8		       9a		      txs
    217  15a9
    218  15a9		       e6 c0		      inc	CurrentRow
    219  15ab
    220  15ab		       85 02		      sta	WSYNC
    221  15ad
    222  15ad		       a5 ba		      lda	ThrobColor+1
    223  15af		       85 09		      sta	COLUBK
    224  15b1		       85 08		      sta	COLUPF
    225  15b3		       85 02		      sta	WSYNC
    226  15b5
    227  15b5		       a5 bb		      lda	ThrobColor+2
    228  15b7		       85 09		      sta	COLUBK
    229  15b9		       85 08		      sta	COLUPF
    230  15bb		       85 02		      sta	WSYNC
    231  15bd
    232  15bd		       a5 ba		      lda	ThrobColor+1
    233  15bf		       85 09		      sta	COLUBK
    234  15c1		       85 08		      sta	COLUPF
    235  15c3		       85 02		      sta	WSYNC
    236  15c5
    237  15c5		       a5 b9		      lda	ThrobColor+0
    238  15c7		       85 09		      sta	COLUBK
    239  15c9		       85 08		      sta	COLUPF
    240  15cb		       85 02		      sta	WSYNC
    241  15cd
    242  15cd							; Then output 14 lines to draw the next row, exactly the same way as the
    243  15cd							; previous one. It will be neccesary to have multiple versions of this, as well,
    244  15cd							; since GRP1 needs to be updated at the correct time depending on the position
    245  15cd							; of player 1.
    246  15cd
    247  15cd		       a9 00		      lda	#COL_BACKGROUND
    248  15cf		       85 09		      sta	COLUBK
    249  15d1		       8d 08 00 	      sta.w	COLUPF
    250  15d4
    251  15d4		       a0 0e		      ldy	#14
    252  15d6				   .LoopdyLoop
    253  15d6		       88		      dey
    254  15d7		       85 02		      sta	WSYNC
    255  15d9		       d0 fb		      bne	.LoopdyLoop
    256  15db
    257  15db
    258  15db
    259  15db							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    260  15db							; Use this time to prepare the next row's food item pointers (unless this is
    261  15db							; the last row). If this is the last row, skip over LoRows.
    262  15db
    263  15db		       a5 b9		      lda	ThrobColor+0
    264  15dd		       85 09		      sta	COLUBK
    265  15df		       85 08		      sta	COLUPF
    266  15e1
    267  15e1							; If the cat is at the very bottom of the screen, don't disable the
    268  15e1							; missile/player graphics until after they are drawn, so they don't get
    269  15e1							; clipped at the bottom of the screen. An easy way to do this would be to
    270  15e1							; simply disable them after they would have been drawn, whether they are
    271  15e1							; already disabled or not.
    272  15e1
    273  15e1		       4c 00 17 	      jmp	LoRows
    274  15e4
    275  15e4
    276  1600		       00 00 00 00*	      ALIGN	$100
    277  1600
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1600					      include	subroutines/DrawFoodRow.asm
      1  1600				   DrawFoodRow
      2  1600
      3  1600		       a0 0d		      ldy	#13	; 02
      4  1602
      5  1602				   .FoodLoop
      6  1602		       a9 00		      lda	#COL_BACKGROUND	; 04
      7  1604		       85 02		      sta	WSYNC	; 07/00
      8  1606
      9  1606				   .EnterHere
     10  1606		       85 09		      sta	COLUBK	; 03
     11  1608		       85 08		      sta	COLUPF	; 06
     12  160a
     13  160a		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     14  160c		       85 1c		      sta	GRP1	; 14
     15  160e		       a5 c1		      lda	FoodColor1	; 17
     16  1610		       85 07		      sta	COLUP1	; 20
     17  1612
     18  1612		       a5 bf		      lda	Temp	; 23
     19  1614
     20  1614		       38		      sec		; 25
     21  1615				   .WaitLoop
     22  1615		       e9 17		      sbc	#23	; 27
     23  1617		       b0 fc		      bcs	.WaitLoop	; 29
     24  1619
     25  1619		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     26  161b		       a6 c2		      ldx	FoodColor2	; 52
     27  161d		       85 1c		      sta	GRP1	; 55
     28  161f		       86 07		      stx	COLUP1	; 58
     29  1621
     30  1621		       88		      dey		; 60
     31  1622		       10 de		      bpl	.FoodLoop	; 62
     32  1624
     33  1624		       e6 c0		      inc	CurrentRow	; 65
     34  1626				   Sleep12
     35  1626		       60		      rts		; 71
------- FILE code/Gameplay Kernel/CatRows.asm
    279  1627
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1627					      include	code/Gameplay Kernel/LoRows.asm
      1  1700		       00 00 00 00*	      ALIGN	$100
      2  1700
      3  1700							; Draw all the rows below the cat's two rows.
      4  1700				   LoRows     SUBROUTINE
      5  1700
      6  1700		       85 02		      sta	WSYNC
      7  1702
      8  1702							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1702							; player 1 for the next row's food items.
     10  1702
     11  1702		       a5 ba		      lda	ThrobColor+1	; 03
     12  1704		       85 09		      sta	COLUBK	; 06
     13  1706		       85 08		      sta	COLUPF	; 09
     14  1708
     15  1708		       a4 c0		      ldy	CurrentRow	; 12 - get the row we are drawing
     16  170a		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     17  170d
     18  170d		       38		      sec		; 18
     19  170e				   .DivideLoop
     20  170e		       e9 0f		      sbc	#15	; 20
     21  1710		       b0 fc		      bcs	.DivideLoop	; 22
     22  1712
     23  1712		       8d 11 00 	      sta.w	RESP1	; 26
     24  1715
     25  1715		       49 07		      eor	#7
     26  1717
     27  1717		       69 01		      adc	#1
     28  1719		       0a		      asl
     29  171a		       0a		      asl
     30  171b		       0a		      asl
     31  171c		       0a		      asl
     32  171d		       85 21		      sta	HMP1
     33  171f
     34  171f		       85 02		      sta	WSYNC
     35  1721
     36  1721		       a5 bb		      lda	ThrobColor+2	; 03
     37  1723		       85 09		      sta	COLUBK	; 06
     38  1725		       85 08		      sta	COLUPF	; 09
     39  1727
     40  1727		       20 26 16 	      jsr	Sleep12
     41  172a		       20 26 16 	      jsr	Sleep12
     42  172d		       20 26 16 	      jsr	Sleep12
     43  1730		       20 26 16 	      jsr	Sleep12
     44  1733		       20 26 16 	      jsr	Sleep12	; 69
     45  1736
     46  1736		       8d 2a 00 	      sta.w	HMOVE	; 73
     47  1739
     48  1739		       85 02		      sta	WSYNC
     49  173b
     50  173b		       a5 ba		      lda	ThrobColor+1
     51  173d		       85 09		      sta	COLUBK
     52  173f		       85 08		      sta	COLUPF
     53  1741		       85 02		      sta	WSYNC
     54  1743
     55  1743		       a5 b9		      lda	ThrobColor+0
     56  1745		       85 09		      sta	COLUBK
     57  1747		       85 08		      sta	COLUPF
     58  1749
     59  1749		       a4 c0		      ldy	CurrentRow	; 11
     60  174b
     61  174b		       b9 a4 00 	      lda	FoodItemL,y	; 15
     62  174e		       29 f0		      and	#$F0	; 17
     63  1750		       85 90		      sta	FoodGfxPtr1	; 20
     64  1752		       aa		      tax		; 22
     65  1753		       bd 0f 1b 	      lda	FoodGfx+15,x	; 26
     66  1756		       85 c1		      sta	FoodColor1	; 29
     67  1758
     68  1758		       b9 ab 00 	      lda	FoodItemR,y	; 33
     69  175b		       29 f0		      and	#$F0	; 36
     70  175d		       85 92		      sta	FoodGfxPtr2	; 38
     71  175f		       aa		      tax		; 40
     72  1760		       bd 0f 1b 	      lda	FoodGfx+15,x	; 44
     73  1763		       85 c2		      sta	FoodColor2	; 47
     74  1765
     75  1765		       b9 b2 00 	      lda	FoodPosX,y	; 51
     76  1768		       85 bf		      sta	Temp	; 54
     77  176a
     78  176a							; Output 14 lines to draw a row, exactly the same as in HiRows.
     79  176a							; It may be possible to code this as a subroutine to save ROM space.
     80  176a
     81  176a		       20 00 16 	      jsr	DrawFoodRow
     82  176d
     83  176d		       85 02		      sta	WSYNC
     84  176f
     85  176f							; Lastly, output a single line for the next "throb" line.
     86  176f							; Use this time to prepare the next row's food item pointers (unless this is
     87  176f							; the last row). If this is not the last row, loop to LoRows for the next row.
     88  176f
     89  176f		       a5 b9		      lda	ThrobColor+0
     90  1771		       85 09		      sta	COLUBK
     91  1773		       85 08		      sta	COLUPF
     92  1775		       a9 00		      lda	#0
     93  1777		       85 1b		      sta	GRP0
     94  1779		       85 1c		      sta	GRP1
     95  177b
     96  177b		       c6 a2		      dec	PostCatRows
     97  177d		       d0 81		      bne	LoRows
     98  177f
     99  177f		       a2 ff		      ldx	#$FF
    100  1781		       9a		      txs
    101  1782
    102  1782		       85 02		      sta	WSYNC
      0  1784					      SLEEP	2
      1  1784				   .CYCLES    SET	2
      2  1784
      3  1784				  -	      IF	.CYCLES < 2
      4  1784				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1784				  -	      ERR
      6  1784					      ENDIF
      7  1784
      8  1784				  -	      IF	.CYCLES & 1
      9  1784				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1784				  -	      nop	0
     11  1784				  -	      ELSE
     12  1784				  -	      bit	VSYNC
     13  1784				  -	      ENDIF
     14  1784				  -.CYCLES    SET	.CYCLES - 3
     15  1784					      ENDIF
     16  1784
     17  1784					      REPEAT	.CYCLES / 2
     18  1784		       ea		      nop
     19  1785					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  1785					      include	code/ProgressHealthKernel.asm
      1  1785		       a5 ba		      lda	ThrobColor+1
      2  1787		       85 09		      sta	COLUBK
      3  1789		       a9 00		      lda	#0
      4  178b		       85 0d		      sta	PF0
      5  178d		       85 0a		      sta	CTRLPF
      6  178f		       a9 09		      lda	#COL_CAT_FACE
      7  1791		       85 08		      sta	COLUPF
      8  1793
      0  1793					      SLEEP	32	; 53
      1  1793				   .CYCLES    SET	32
      2  1793
      3  1793				  -	      IF	.CYCLES < 2
      4  1793				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1793				  -	      ERR
      6  1793					      ENDIF
      7  1793
      8  1793				  -	      IF	.CYCLES & 1
      9  1793				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1793				  -	      nop	0
     11  1793				  -	      ELSE
     12  1793				  -	      bit	VSYNC
     13  1793				  -	      ENDIF
     14  1793				  -.CYCLES    SET	.CYCLES - 3
     15  1793					      ENDIF
     16  1793
     17  1793					      REPEAT	.CYCLES / 2
     18  1793		       ea		      nop
     17  1793					      REPEND
     18  1794		       ea		      nop
     17  1794					      REPEND
     18  1795		       ea		      nop
     17  1795					      REPEND
     18  1796		       ea		      nop
     17  1796					      REPEND
     18  1797		       ea		      nop
     17  1797					      REPEND
     18  1798		       ea		      nop
     17  1798					      REPEND
     18  1799		       ea		      nop
     17  1799					      REPEND
     18  179a		       ea		      nop
     17  179a					      REPEND
     18  179b		       ea		      nop
     17  179b					      REPEND
     18  179c		       ea		      nop
     17  179c					      REPEND
     18  179d		       ea		      nop
     17  179d					      REPEND
     18  179e		       ea		      nop
     17  179e					      REPEND
     18  179f		       ea		      nop
     17  179f					      REPEND
     18  17a0		       ea		      nop
     17  17a0					      REPEND
     18  17a1		       ea		      nop
     17  17a1					      REPEND
     18  17a2		       ea		      nop
     19  17a3					      REPEND
     10  17a3
     11  17a3		       a9 20		      lda	#$20	; 55
     12  17a5		       85 20		      sta	HMP0	; 58
     13  17a7		       a9 b0		      lda	#$B0	; 60
     14  17a9		       85 21		      sta	HMP1	; 63
     15  17ab
     16  17ab		       85 10		      sta	RESP0	; 66
     17  17ad		       85 11		      sta	RESP1	; 69
     18  17af
     19  17af		       a9 00		      lda	#$00	; 71
     20  17b1
     21  17b1		       85 2a		      sta	HMOVE	; 74
     22  17b3
     23  17b3		       85 06		      sta	COLUP0
     24  17b5		       85 07		      sta	COLUP1
     25  17b7
     26  17b7		       a5 86		      lda	ScoreColor
     27  17b9		       85 09		      sta	COLUBK
     28  17bb
     29  17bb		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  17bd		       85 04		      sta	NUSIZ0
     31  17bf		       85 05		      sta	NUSIZ1
     32  17c1
     33  17c1		       a9 08		      lda	#REFP_TRUE
     34  17c3		       85 0c		      sta	REFP1
     35  17c5
     36  17c5					      SUBROUTINE
     37  17c5
     38  17c5		       a0 04		      ldy	#4
     39  17c7		       85 02		      sta	WSYNC
     40  17c9
     41  17c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  17c9				   .HealthTop		; draw top of health
     43  17c9
     44  17c9		       a2 03		      ldx	#3
     45  17cb
     46  17cb				   .Loop
     47  17cb		       85 02		      sta	WSYNC
     48  17cd
     49  17cd		       b9 b8 19 	      lda	HealthTopGfx,y	; 04
     50  17d0		       85 1b		      sta	GRP0	; 07
     51  17d2		       85 1c		      sta	GRP1	; 10
     52  17d4		       a9 00		      lda	#$00	; 12
     53  17d6		       85 0f		      sta	PF2	; 15
     54  17d8
     55  17d8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     56  17d8							; Set the pointers for health graphics - 26 cycles
     57  17d8
     58  17d8		       18		      clc		; 17
     59  17d9
     60  17d9		       a9 19		      lda	#>HealthLeftGfx	; 19
     61  17db		       85 99		      sta	HthGfxLPtr+1	; 22
     62  17dd		       85 9b		      sta	HthGfxRPtr+1	; 25
     63  17df
     64  17df		       a9 bd		      lda	#<HealthLeftGfx	; 27
     65  17e1		       65 8f		      adc	Health	; 30
     66  17e3		       85 98		      sta	HthGfxLPtr	; 33
     67  17e5
     68  17e5		       a9 dd		      lda	#<HealthRightGfx	; 35
     69  17e7		       65 8f		      adc	Health	; 38
     70  17e9		       85 9a		      sta	HthGfxRPtr	; 41
     71  17eb
     72  17eb
     73  17eb
     74  17eb		       b9 08 1a 	      lda	HealthBgGfx+8,y	; 45
     75  17ee		       85 0f		      sta	PF2	; 48
     76  17f0
     77  17f0		       ca		      dex		; 50
     78  17f1		       d0 d8		      bne	.Loop	; 52
     79  17f3
     80  17f3		       88		      dey		; 54
     81  17f4		       10 d3		      bpl	.HealthTop	; 56
     82  17f6
     83  17f6
     84  17f6					      SUBROUTINE
     85  17f6
     86  17f6
     87  17f6		       a0 03		      ldy	#3	; 58
     88  17f8		       a2 03		      ldx	#3	; 60
     89  17fa		       86 bf		      stx	Temp	; 63
     90  17fc
     91  17fc		       4c 00 18 	      jmp	.HealthMiddle	; 66
     92  17ff
     93  1800		       00		      ALIGN	$100	; align to page
     94  1800
     95  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  1800				   .HealthMiddle		; draw middle of health, with progress bar
     97  1800
     98  1800		       85 02		      sta	WSYNC
     99  1802				   .Loop
    100  1802		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    101  1804		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    102  1806
    103  1806		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    104  1808		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    105  180a
    106  180a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    107  180c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    108  180e
    109  180e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
    110  1810		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    111  1812
    112  1812		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    113  1814		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    114  1816
    115  1816		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    116  1818		       85 1b		      sta	GRP0	; 38 - for the left half of health
    117  181a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    118  181c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    119  181e
    120  181e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    121  1820		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    122  1822		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    123  1824		       85 0f		      sta	PF2	; 57 - for the health background and set it
    124  1826
    125  1826		       a5 86		      lda	ScoreColor	; 60 - get the color for the background
    126  1828		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    127  182b
    128  182b		       ca		      dex		; 66
    129  182c		       d0 d2		      bne	.HealthMiddle	; 68
    130  182e
    131  182e		       a6 bf		      ldx	Temp	; 71
    132  1830
    133  1830		       88		      dey		; 73
    134  1831		       10 cf		      bpl	.Loop	; 76 / 00
    135  1833
    136  1833
    137  1833
    138  1833
    139  1833
    140  1833
    141  1833
    142  1833
    143  1833
    144  1833					      SUBROUTINE
    145  1833
    146  1833
    147  1833		       a9 00		      lda	#0
    148  1835		       85 0d		      sta	PF0
    149  1837		       85 0e		      sta	PF1
    150  1839
    151  1839		       a0 07		      ldy	#7
    152  183b
    153  183b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    154  183b				   .HealthBottom		; draw bottom of health
    155  183b
    156  183b		       a2 03		      ldx	#3
    157  183d				   .Loop
    158  183d		       b1 98		      lda	(HthGfxLPtr),y
    159  183f		       85 1b		      sta	GRP0
    160  1841		       b1 9a		      lda	(HthGfxRPtr),y
    161  1843		       85 1c		      sta	GRP1
    162  1845		       a9 00		      lda	#$00
    163  1847		       85 0f		      sta	PF2
    164  1849
      0  1849					      SLEEP	14
      1  1849				   .CYCLES    SET	14
      2  1849
      3  1849				  -	      IF	.CYCLES < 2
      4  1849				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1849				  -	      ERR
      6  1849					      ENDIF
      7  1849
      8  1849				  -	      IF	.CYCLES & 1
      9  1849				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1849				  -	      nop	0
     11  1849				  -	      ELSE
     12  1849				  -	      bit	VSYNC
     13  1849				  -	      ENDIF
     14  1849				  -.CYCLES    SET	.CYCLES - 3
     15  1849					      ENDIF
     16  1849
     17  1849					      REPEAT	.CYCLES / 2
     18  1849		       ea		      nop
     17  1849					      REPEND
     18  184a		       ea		      nop
     17  184a					      REPEND
     18  184b		       ea		      nop
     17  184b					      REPEND
     18  184c		       ea		      nop
     17  184c					      REPEND
     18  184d		       ea		      nop
     17  184d					      REPEND
     18  184e		       ea		      nop
     17  184e					      REPEND
     18  184f		       ea		      nop
     19  1850					      REPEND
    166  1850
    167  1850		       b9 fc 19 	      lda	HealthBgGfx-4,y
    168  1853		       85 0f		      sta	PF2
    169  1855		       85 02		      sta	WSYNC
    170  1857
    171  1857		       ca		      dex
    172  1858		       d0 e3		      bne	.Loop
    173  185a
    174  185a		       88		      dey
    175  185b		       c0 03		      cpy	#3
    176  185d		       d0 dc		      bne	.HealthBottom
    177  185f
    178  185f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  185f
    180  185f		       a9 00		      lda	#$00
    181  1861		       85 1b		      sta	GRP0
    182  1863		       85 1c		      sta	GRP1
    183  1865		       85 0b		      sta	REFP0
    184  1867		       85 0c		      sta	REFP1
    185  1869		       85 0f		      sta	PF2
    186  186b
    187  186b		       85 02		      sta	WSYNC
    188  186d
------- FILE code/Kernel.asm
     13  186d
     14  186d		       a9 02		      lda	#2
     15  186f		       85 01		      sta	VBLANK	; disable display
     16  1871
     17  1871		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     71  1874
     72  1874		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     73  1875
     74  1875
     75  1875							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  1875							; Data Tables
     77  1875							;
     78  1875							; Include data tables
     79  1875							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  1875
     81  1875							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1875					      include	data/Graphics.asm
      1  1875							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1875							; Graphics Tables
      3  1875							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1875
      5  1900		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1900
      7  1900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1900							; Digit graphics for the scoreboard
      9  1900							;
     10  1900							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1900							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1900							; to normal when it is pulled from the stack.
     13  1900							;
     14  1900							; Table takes up $50 (80) bytes of ROM
     15  1900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1900
     17  1900				   ScoreGfx
     18  1900
     19  1900		       1c		      .byte.b	%00011100	; digit 0
     20  1901		       26		      .byte.b	%00100110
     21  1902		       63		      .byte.b	%01100011
     22  1903		       63		      .byte.b	%01100011
     23  1904		       63		      .byte.b	%01100011
     24  1905		       32		      .byte.b	%00110010
     25  1906		       1c		      .byte.b	%00011100
     26  1907		       00		      .byte.b	%00000000
     27  1908
     28  1908							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1908
     30  1908		       18		      .byte.b	%00011000	; digit 1
     31  1909		       38		      .byte.b	%00111000
     32  190a		       18		      .byte.b	%00011000
     33  190b		       18		      .byte.b	%00011000
     34  190c		       18		      .byte.b	%00011000
     35  190d		       18		      .byte.b	%00011000
     36  190e		       7e		      .byte.b	%01111110
     37  190f		       00		      .byte.b	%00000000
     38  1910
     39  1910							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1910
     41  1910		       3e		      .byte.b	%00111110	; digit 2
     42  1911		       63		      .byte.b	%01100011
     43  1912		       07		      .byte.b	%00000111
     44  1913		       1e		      .byte.b	%00011110
     45  1914		       3c		      .byte.b	%00111100
     46  1915		       70		      .byte.b	%01110000
     47  1916		       7f		      .byte.b	%01111111
     48  1917		       00		      .byte.b	%00000000
     49  1918
     50  1918							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1918
     52  1918		       7f		      .byte.b	%01111111	; digit 3
     53  1919		       06		      .byte.b	%00000110
     54  191a		       0c		      .byte.b	%00001100
     55  191b		       1e		      .byte.b	%00011110
     56  191c		       03		      .byte.b	%00000011
     57  191d		       63		      .byte.b	%01100011
     58  191e		       3e		      .byte.b	%00111110
     59  191f		       00		      .byte.b	%00000000
     60  1920
     61  1920							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1920
     63  1920		       0e		      .byte.b	%00001110	; digit 4
     64  1921		       1e		      .byte.b	%00011110
     65  1922		       36		      .byte.b	%00110110
     66  1923		       66		      .byte.b	%01100110
     67  1924		       7f		      .byte.b	%01111111
     68  1925		       06		      .byte.b	%00000110
     69  1926		       06		      .byte.b	%00000110
     70  1927		       00		      .byte.b	%00000000
     71  1928
     72  1928							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1928
     74  1928		       7e		      .byte.b	%01111110	; digit 5
     75  1929		       60		      .byte.b	%01100000
     76  192a		       7e		      .byte.b	%01111110
     77  192b		       03		      .byte.b	%00000011
     78  192c		       03		      .byte.b	%00000011
     79  192d		       63		      .byte.b	%01100011
     80  192e		       3e		      .byte.b	%00111110
     81  192f		       00		      .byte.b	%00000000
     82  1930
     83  1930							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1930
     85  1930		       1e		      .byte.b	%00011110	; digit 6
     86  1931		       30		      .byte.b	%00110000
     87  1932		       60		      .byte.b	%01100000
     88  1933		       7e		      .byte.b	%01111110
     89  1934		       63		      .byte.b	%01100011
     90  1935		       63		      .byte.b	%01100011
     91  1936		       3e		      .byte.b	%00111110
     92  1937		       00		      .byte.b	%00000000
     93  1938
     94  1938							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1938
     96  1938		       7f		      .byte.b	%01111111	; digit 7
     97  1939		       03		      .byte.b	%00000011
     98  193a		       06		      .byte.b	%00000110
     99  193b		       0c		      .byte.b	%00001100
    100  193c		       18		      .byte.b	%00011000
    101  193d		       18		      .byte.b	%00011000
    102  193e		       18		      .byte.b	%00011000
    103  193f		       00		      .byte.b	%00000000
    104  1940
    105  1940							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1940
    107  1940		       3c		      .byte.b	%00111100	; digit 8
    108  1941		       62		      .byte.b	%01100010
    109  1942		       72		      .byte.b	%01110010
    110  1943		       3c		      .byte.b	%00111100
    111  1944		       43		      .byte.b	%01000011
    112  1945		       43		      .byte.b	%01000011
    113  1946		       3e		      .byte.b	%00111110
    114  1947		       00		      .byte.b	%00000000
    115  1948
    116  1948							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1948
    118  1948		       3e		      .byte.b	%00111110	; digit 9
    119  1949		       63		      .byte.b	%01100011
    120  194a		       63		      .byte.b	%01100011
    121  194b		       3f		      .byte.b	%00111111
    122  194c		       03		      .byte.b	%00000011
    123  194d		       06		      .byte.b	%00000110
    124  194e		       3c		      .byte.b	%00111100
    125  194f		       00		      .byte.b	%00000000
    126  1950
    127  1950
    128  1950
    129  1950							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  1950							; NUSIZx and ENAMx data for level counter graphics
    131  1950							;
    132  1950							; This table enables or disables each missile and adjusts the left missile's
    133  1950							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  1950							; left digit. (The right digit is drawn with the ball.)
    135  1950							; Bit-1 is used to enable or disable the left missile,
    136  1950							; and bit-0 is used to enable or disable the right missile.
    137  1950							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  1950							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  1950							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  1950							; correct for the score display.
    141  1950							;
    142  1950							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  1950							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  1950							; to normal when it is pulled from the stack.
    145  1950							;
    146  1950							; Table takes up $50 (80) bytes of ROM
    147  1950							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1950
    149  1950				   LevelGfx
    150  1950
    151  1950							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  1950							; ^^^^^^^^^
    153  1950		       8f		      .byte.b	%10001111	; digit 0
    154  1951		       4f		      .byte.b	%01001111
    155  1952		       4f		      .byte.b	%01001111
    156  1953		       4f		      .byte.b	%01001111
    157  1954		       4f		      .byte.b	%01001111
    158  1955		       4f		      .byte.b	%01001111
    159  1956		       8f		      .byte.b	%10001111
    160  1957		       00		      .byte.b	%00000000
    161  1958
    162  1958							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  1958
    164  1958							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  1958							; ^^^^^^^^^
    166  1958		       8d		      .byte.b	%10001101	; digit 1
    167  1959		       4d		      .byte.b	%01001101
    168  195a		       4d		      .byte.b	%01001101
    169  195b		       8d		      .byte.b	%10001101
    170  195c		       4d		      .byte.b	%01001101
    171  195d		       4d		      .byte.b	%01001101
    172  195e		       8d		      .byte.b	%10001101
    173  195f		       00		      .byte.b	%00000000
    174  1960
    175  1960							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  1960
    177  1960							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  1960							; ^^^^^^^^^
    179  1960		       8f		      .byte.b	%10001111	; digit 2
    180  1961		       4d		      .byte.b	%01001101
    181  1962		       4d		      .byte.b	%01001101
    182  1963		       8f		      .byte.b	%10001111
    183  1964		       4e		      .byte.b	%01001110
    184  1965		       4e		      .byte.b	%01001110
    185  1966		       8f		      .byte.b	%10001111
    186  1967		       00		      .byte.b	%00000000
    187  1968
    188  1968							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  1968
    190  1968							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  1968							; ^^^^^^^^^
    192  1968		       8f		      .byte.b	%10001111	; digit 3
    193  1969		       4d		      .byte.b	%01001101
    194  196a		       4d		      .byte.b	%01001101
    195  196b		       8f		      .byte.b	%10001111
    196  196c		       4d		      .byte.b	%01001101
    197  196d		       4d		      .byte.b	%01001101
    198  196e		       8f		      .byte.b	%10001111
    199  196f		       00		      .byte.b	%00000000
    200  1970
    201  1970							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  1970
    203  1970							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  1970							; ^^^^^^^^^
    205  1970		       4f		      .byte.b	%01001111	; digit 4
    206  1971		       4f		      .byte.b	%01001111
    207  1972		       4f		      .byte.b	%01001111
    208  1973		       8f		      .byte.b	%10001111
    209  1974		       4d		      .byte.b	%01001101
    210  1975		       4d		      .byte.b	%01001101
    211  1976		       4d		      .byte.b	%01001101
    212  1977		       00		      .byte.b	%00000000
    213  1978
    214  1978							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  1978
    216  1978							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  1978							; ^^^^^^^^^
    218  1978		       8f		      .byte.b	%10001111	; digit 5
    219  1979		       4e		      .byte.b	%01001110
    220  197a		       4e		      .byte.b	%01001110
    221  197b		       8f		      .byte.b	%10001111
    222  197c		       4d		      .byte.b	%01001101
    223  197d		       4d		      .byte.b	%01001101
    224  197e		       8f		      .byte.b	%10001111
    225  197f		       00		      .byte.b	%00000000
    226  1980
    227  1980							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  1980
    229  1980							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  1980							; ^^^^^^^^^
    231  1980		       8f		      .byte.b	%10001111	; digit 6
    232  1981		       4e		      .byte.b	%01001110
    233  1982		       4e		      .byte.b	%01001110
    234  1983		       8f		      .byte.b	%10001111
    235  1984		       4f		      .byte.b	%01001111
    236  1985		       4f		      .byte.b	%01001111
    237  1986		       8f		      .byte.b	%10001111
    238  1987		       00		      .byte.b	%00000000
    239  1988
    240  1988							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1988
    242  1988							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  1988							; ^^^^^^^^^
    244  1988		       8f		      .byte.b	%10001111	; digit 7
    245  1989		       4d		      .byte.b	%01001101
    246  198a		       4d		      .byte.b	%01001101
    247  198b		       8d		      .byte.b	%10001101
    248  198c		       4d		      .byte.b	%01001101
    249  198d		       4d		      .byte.b	%01001101
    250  198e		       8d		      .byte.b	%10001101
    251  198f		       00		      .byte.b	%00000000
    252  1990
    253  1990							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  1990
    255  1990							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  1990							; ^^^^^^^^^
    257  1990		       8f		      .byte.b	%10001111	; digit 8
    258  1991		       4f		      .byte.b	%01001111
    259  1992		       4f		      .byte.b	%01001111
    260  1993		       8f		      .byte.b	%10001111
    261  1994		       4f		      .byte.b	%01001111
    262  1995		       4f		      .byte.b	%01001111
    263  1996		       8f		      .byte.b	%10001111
    264  1997		       00		      .byte.b	%00000000
    265  1998
    266  1998							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1998
    268  1998							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  1998							; ^^^^^^^^^
    270  1998		       8f		      .byte.b	%10001111	; digit 9
    271  1999		       4f		      .byte.b	%01001111
    272  199a		       4f		      .byte.b	%01001111
    273  199b		       8f		      .byte.b	%10001111
    274  199c		       4d		      .byte.b	%01001101
    275  199d		       4d		      .byte.b	%01001101
    276  199e		       8f		      .byte.b	%10001111
    277  199f		       00		      .byte.b	%00000000
    278  19a0
    279  19a0
    280  19a0
    281  19a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  19a0							; Throbbing Line Graphics
    283  19a0							;
    284  19a0							; Graphics tables for the throbbing lines
    285  19a0							;
    286  19a0							; Table takes up $18 (24) bytes of ROM
    287  19a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  19a0
    289  19a0				   ThrobGfx
    290  19a0
    291  19a0		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    292  19a1		       81		      .byte.b	LUM_2 + MODE_GREY
    293  19a2		       02		      .byte.b	LUM_4 + MODE_COLOR
    294  19a3
    295  19a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  19a3
    297  19a3		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    298  19a4		       02		      .byte.b	LUM_4 + MODE_COLOR
    299  19a5		       03		      .byte.b	LUM_6 + MODE_COLOR
    300  19a6
    301  19a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  19a6
    303  19a6		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    304  19a7		       03		      .byte.b	LUM_6 + MODE_COLOR
    305  19a8		       04		      .byte.b	LUM_8 + MODE_COLOR
    306  19a9
    307  19a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  19a9
    309  19a9		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    310  19aa		       04		      .byte.b	LUM_8 + MODE_COLOR
    311  19ab		       06		      .byte.b	LUM_C + MODE_COLOR
    312  19ac
    313  19ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  19ac
    315  19ac		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    316  19ad		       05		      .byte.b	LUM_A + MODE_COLOR
    317  19ae		       07		      .byte.b	LUM_E + MODE_COLOR
    318  19af
    319  19af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  19af
    321  19af		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    322  19b0		       04		      .byte.b	LUM_8 + MODE_COLOR
    323  19b1		       06		      .byte.b	LUM_C + MODE_COLOR
    324  19b2
    325  19b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  19b2
    327  19b2		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    328  19b3		       03		      .byte.b	LUM_6 + MODE_COLOR
    329  19b4		       05		      .byte.b	LUM_A + MODE_COLOR
    330  19b5
    331  19b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  19b5
    333  19b5		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    334  19b6		       02		      .byte.b	LUM_4 + MODE_COLOR
    335  19b7		       03		      .byte.b	LUM_6 + MODE_COLOR
    336  19b8
    337  19b8
    338  19b8
    339  19b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  19b8							; Health Graphics
    341  19b8							;
    342  19b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  19b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  19b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  19b8							; the graphics for the lower right are flipped.
    346  19b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  19b8							; are set up in a confusing way. They are upside-down, but they are split
    348  19b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  19b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  19b8							; LOWER 4 lines of graphics (also upside-down).
    351  19b8							; The last table (HealthBgGfx) is for the grey background of the
    352  19b8							; health graphics drawn with the playfield.
    353  19b8							;
    354  19b8							; Table takes up $45 (69) bytes of ROM
    355  19b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  19b8
    357  19b8				   HealthTopGfx
    358  19b8
    359  19b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  19b9		       43		      .byte.b	%01000011
    361  19ba		       44		      .byte.b	%01000100
    362  19bb		       48		      .byte.b	%01001000
    363  19bc		       30		      .byte.b	%00110000
    364  19bd
    365  19bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  19bd				   HealthLeftGfx
    367  19bd
    368  19bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  19be		       8c		      .byte.b	%10001100
    370  19bf		       84		      .byte.b	%10000100
    371  19c0		       80		      .byte.b	%10000000
    372  19c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  19c2		       20		      .byte.b	%00100000
    374  19c3		       47		      .byte.b	%01000111
    375  19c4		       84		      .byte.b	%10000100
    376  19c5
    377  19c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  19c5
    379  19c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  19c6		       8c		      .byte.b	%10001100
    381  19c7		       84		      .byte.b	%10000100
    382  19c8		       80		      .byte.b	%10000000
    383  19c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  19ca		       20		      .byte.b	%00100000
    385  19cb		       47		      .byte.b	%01000111
    386  19cc		       80		      .byte.b	%10000000
    387  19cd
    388  19cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  19cd
    390  19cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  19ce		       8c		      .byte.b	%10001100
    392  19cf		       84		      .byte.b	%10000100
    393  19d0		       80		      .byte.b	%10000000
    394  19d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  19d2		       20		      .byte.b	%00100000
    396  19d3		       44		      .byte.b	%01000100
    397  19d4		       87		      .byte.b	%10000111
    398  19d5
    399  19d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  19d5
    401  19d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  19d6		       9c		      .byte.b	%10011100
    403  19d7		       80		      .byte.b	%10000000
    404  19d8		       80		      .byte.b	%10000000
    405  19d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  19da		       20		      .byte.b	%00100000
    407  19db		       46		      .byte.b	%01000110
    408  19dc		       81		      .byte.b	%10000001
    409  19dd
    410  19dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  19dd				   HealthRightGfx
    412  19dd
    413  19dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  19de		       9a		      .byte.b	%10011010
    415  19df		       90		      .byte.b	%10010000
    416  19e0		       80		      .byte.b	%10000000
    417  19e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  19e2		       20		      .byte.b	%00100000
    419  19e3		       4f		      .byte.b	%01001111
    420  19e4		       89		      .byte.b	%10001001
    421  19e5
    422  19e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  19e5
    424  19e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  19e6		       9a		      .byte.b	%10011010
    426  19e7		       90		      .byte.b	%10010000
    427  19e8		       80		      .byte.b	%10000000
    428  19e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  19ea		       20		      .byte.b	%00100000
    430  19eb		       4f		      .byte.b	%01001111
    431  19ec		       80		      .byte.b	%10000000
    432  19ed
    433  19ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  19ed
    435  19ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  19ee		       9a		      .byte.b	%10011010
    437  19ef		       88		      .byte.b	%10001000
    438  19f0		       80		      .byte.b	%10000000
    439  19f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  19f2		       20		      .byte.b	%00100000
    441  19f3		       48		      .byte.b	%01001000
    442  19f4		       8f		      .byte.b	%10001111
    443  19f5
    444  19f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  19f5
    446  19f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  19f6		       ba		      .byte.b	%10111010
    448  19f7		       80		      .byte.b	%10000000
    449  19f8		       80		      .byte.b	%10000000
    450  19f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  19fa		       20		      .byte.b	%00100000
    452  19fb		       4c		      .byte.b	%01001100
    453  19fc		       83		      .byte.b	%10000011
    454  19fd
    455  19fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  19fd
    457  19fd							; 3 bytes left in this page
    458  19fd
    459  1a00		       00 00 00 	      ALIGN	$100	; align to page
    460  1a00
    461  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  1a00				   HealthBgGfx
    463  1a00							; 13 bytes
    464  1a00
    465  1a00		       00		      .byte.b	%00000000
    466  1a01		       3e		      .byte.b	%00111110
    467  1a02		       7f		      .byte.b	%01111111
    468  1a03		       7f		      .byte.b	%01111111
    469  1a04		       7f		      .byte.b	%01111111
    470  1a05		       7f		      .byte.b	%01111111
    471  1a06		       7f		      .byte.b	%01111111
    472  1a07		       7f		      .byte.b	%01111111
    473  1a08		       7f		      .byte.b	%01111111
    474  1a09		       7f		      .byte.b	%01111111
    475  1a0a		       63		      .byte.b	%01100011
    476  1a0b		       63		      .byte.b	%01100011
    477  1a0c		       00		      .byte.b	%00000000
    478  1a0d
    479  1a0d
    480  1a0d
    481  1a0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  1a0d							; Progress Bar Graphics
    483  1a0d							;
    484  1a0d							;
    485  1a0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  1a0d
    487  1a0d				   PgBarGfx
    488  1a0d							; 9 bytes
    489  1a0d
    490  1a0d		       ff		      .byte.b	%11111111	; 1st PF1
    491  1a0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  1a0f		       3f		      .byte.b	%00111111
    493  1a10		       1f		      .byte.b	%00011111
    494  1a11		       0f		      .byte.b	%00001111
    495  1a12		       07		      .byte.b	%00000111
    496  1a13		       03		      .byte.b	%00000011
    497  1a14		       01		      .byte.b	%00000001
    498  1a15		       00		      .byte.b	%00000000
    499  1a16
    500  1a16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  1a16				   PgBarGfxR
    502  1a16							; 8 bytes
    503  1a16
    504  1a16		       ff		      .byte.b	%11111111	; PF2
    505  1a17		       fe		      .byte.b	%11111110
    506  1a18		       fc		      .byte.b	%11111100
    507  1a19		       f8		      .byte.b	%11111000
    508  1a1a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  1a1b		       e0		      .byte.b	%11100000	; 1st PF0
    510  1a1c		       c0		      .byte.b	%11000000
    511  1a1d		       80		      .byte.b	%10000000
    512  1a1e
    513  1a1e
    514  1a1e
    515  1a1e				   FineHmove73
    516  1a1e
    517  1a1e		       70 60 50 40	      HEX	70 60 50 40
    518  1a22		       30 20 10 00	      HEX	30 20 10 00
    519  1a26		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  1a2a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  1a2e
    522  1a2e
    523  1a2e
    524  1a2e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  1a2e							; Cat Rainbow Graphics
    526  1a2e							;
    527  1a2e							;
    528  1a2e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  1a2e
    530  1a2e				   RainbowGfx
    531  1a2e							; 4 bytes
    532  1a2e
    533  1a2e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  1a2f
    535  1a2f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  1a30
    537  1a30		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    538  1a31
    539  1a31		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    540  1a32
    541  1a32
    542  1a32		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    543  1a48
    544  1a48				   CatFaceGfx
    545  1a48
    546  1a48		       36		      .byte.b	%00110110
    547  1a49		       36		      .byte.b	%00110110
    548  1a4a		       00		      .byte.b	%00000000
    549  1a4b		       7e		      .byte.b	%01111110
    550  1a4c		       c1		      .byte.b	%11000001
    551  1a4d		       d5		      .byte.b	%11010101
    552  1a4e		       ff		      .byte.b	%11111111
    553  1a4f		       d5		      .byte.b	%11010101
    554  1a50		       dd		      .byte.b	%11011101
    555  1a51		       ff		      .byte.b	%11111111
    556  1a52		       66		      .byte.b	%01100110
    557  1a53		       66		      .byte.b	%01100110
    558  1a54		       42		      .byte.b	%01000010
    559  1a55
    560  1a55		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    561  1a6a							;140 bytes used in page
    562  1a6a
    563  1b00		       00 00 00 00*	      ALIGN	$100
    564  1b00
    565  1b00				   FoodGfx
    566  1b00
    567  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    568  1b00							; 0 - blank
    569  1b00
    570  1b00		       01		      .byte.b	%00000001
    571  1b01		       80		      .byte.b	%10000000
    572  1b02		       01		      .byte.b	%00000001
    573  1b03		       80		      .byte.b	%10000000
    574  1b04		       01		      .byte.b	%00000001
    575  1b05		       80		      .byte.b	%10000000
    576  1b06		       01		      .byte.b	%00000001
    577  1b07		       80		      .byte.b	%10000000
    578  1b08		       01		      .byte.b	%00000001
    579  1b09		       80		      .byte.b	%10000000
    580  1b0a		       01		      .byte.b	%00000001
    581  1b0b		       80		      .byte.b	%10000000
    582  1b0c		       01		      .byte.b	%00000001
    583  1b0d		       80		      .byte.b	%10000000
    584  1b0e
    585  1b0e		       00		      .byte.b	0
    586  1b0f		       00		      .byte.b	$00
    587  1b10
    588  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  1b10							; 1 - apple
    590  1b10
    591  1b10		       34		      .byte.b	%00110100
    592  1b11		       7e		      .byte.b	%01111110
    593  1b12		       7e		      .byte.b	%01111110
    594  1b13		       ff		      .byte.b	%11111111
    595  1b14		       ff		      .byte.b	%11111111
    596  1b15		       ff		      .byte.b	%11111111
    597  1b16		       ff		      .byte.b	%11111111
    598  1b17		       ff		      .byte.b	%11111111
    599  1b18		       ff		      .byte.b	%11111111
    600  1b19		       7f		      .byte.b	%01111111
    601  1b1a		       6a		      .byte.b	%01101010
    602  1b1b		       08		      .byte.b	%00001000
    603  1b1c		       0c		      .byte.b	%00001100
    604  1b1d		       04		      .byte.b	%00000100
    605  1b1e
    606  1b1e		       00		      .byte.b	0
    607  1b1f		       46		      .byte.b	$46
    608  1b20
    609  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  1b20							; 2 - peach
    611  1b20
    612  1b20		       3c		      .byte.b	%00111100
    613  1b21		       6e		      .byte.b	%01101110
    614  1b22		       6e		      .byte.b	%01101110
    615  1b23		       df		      .byte.b	%11011111
    616  1b24		       df		      .byte.b	%11011111
    617  1b25		       bf		      .byte.b	%10111111
    618  1b26		       bf		      .byte.b	%10111111
    619  1b27		       bf		      .byte.b	%10111111
    620  1b28		       de		      .byte.b	%11011110
    621  1b29		       5e		      .byte.b	%01011110
    622  1b2a		       6c		      .byte.b	%01101100
    623  1b2b		       18		      .byte.b	%00011000
    624  1b2c		       10		      .byte.b	%00010000
    625  1b2d		       30		      .byte.b	%00110000
    626  1b2e
    627  1b2e		       00		      .byte.b	0
    628  1b2f		       3a		      .byte.b	$3A
    629  1b30
    630  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  1b30							; 3 - banana
    632  1b30
    633  1b30		       38		      .byte.b	%00111000
    634  1b31		       7c		      .byte.b	%01111100
    635  1b32		       fe		      .byte.b	%11111110
    636  1b33		       fe		      .byte.b	%11111110
    637  1b34		       ff		      .byte.b	%11111111
    638  1b35		       ff		      .byte.b	%11111111
    639  1b36		       8f		      .byte.b	%10001111
    640  1b37		       07		      .byte.b	%00000111
    641  1b38		       07		      .byte.b	%00000111
    642  1b39		       03		      .byte.b	%00000011
    643  1b3a		       03		      .byte.b	%00000011
    644  1b3b		       02		      .byte.b	%00000010
    645  1b3c		       06		      .byte.b	%00000110
    646  1b3d		       06		      .byte.b	%00000110
    647  1b3e
    648  1b3e		       00		      .byte.b	0
    649  1b3f		       1e		      .byte.b	$1E
    650  1b40
    651  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  1b40							; 4 - pear
    653  1b40
    654  1b40		       38		      .byte.b	%00111000
    655  1b41		       7c		      .byte.b	%01111100
    656  1b42		       fe		      .byte.b	%11111110
    657  1b43		       fe		      .byte.b	%11111110
    658  1b44		       fe		      .byte.b	%11111110
    659  1b45		       fe		      .byte.b	%11111110
    660  1b46		       7c		      .byte.b	%01111100
    661  1b47		       7c		      .byte.b	%01111100
    662  1b48		       38		      .byte.b	%00111000
    663  1b49		       38		      .byte.b	%00111000
    664  1b4a		       30		      .byte.b	%00110000
    665  1b4b		       10		      .byte.b	%00010000
    666  1b4c		       18		      .byte.b	%00011000
    667  1b4d		       08		      .byte.b	%00001000
    668  1b4e
    669  1b4e		       00		      .byte.b	0
    670  1b4f		       cc		      .byte.b	$CC
    671  1b50
    672  1b50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  1b50							; 5 - plum
    674  1b50
    675  1b50		       38		      .byte.b	%00111000
    676  1b51		       6c		      .byte.b	%01101100
    677  1b52		       6e		      .byte.b	%01101110
    678  1b53		       de		      .byte.b	%11011110
    679  1b54		       df		      .byte.b	%11011111
    680  1b55		       bf		      .byte.b	%10111111
    681  1b56		       bf		      .byte.b	%10111111
    682  1b57		       bf		      .byte.b	%10111111
    683  1b58		       de		      .byte.b	%11011110
    684  1b59		       de		      .byte.b	%11011110
    685  1b5a		       5e		      .byte.b	%01011110
    686  1b5b		       3c		      .byte.b	%00111100
    687  1b5c		       20		      .byte.b	%00100000
    688  1b5d		       60		      .byte.b	%01100000
    689  1b5e
    690  1b5e		       00		      .byte.b	0
    691  1b5f		       88		      .byte.b	$88
    692  1b60
    693  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  1b60							; 6 - grapes
    695  1b60
    696  1b60		       18		      .byte.b	%00011000
    697  1b61		       08		      .byte.b	%00001000
    698  1b62		       36		      .byte.b	%00110110
    699  1b63		       12		      .byte.b	%00010010
    700  1b64		       6c		      .byte.b	%01101100
    701  1b65		       24		      .byte.b	%00100100
    702  1b66		       db		      .byte.b	%11011011
    703  1b67		       49		      .byte.b	%01001001
    704  1b68		       36		      .byte.b	%00110110
    705  1b69		       12		      .byte.b	%00010010
    706  1b6a		       6c		      .byte.b	%01101100
    707  1b6b		       34		      .byte.b	%00110100
    708  1b6c		       10		      .byte.b	%00010000
    709  1b6d		       18		      .byte.b	%00011000
    710  1b6e
    711  1b6e		       00		      .byte.b	0
    712  1b6f		       64		      .byte.b	$64
    713  1b70
    714  1b70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  1b70							; 7 - broccoli
    716  1b70
    717  1b70		       18		      .byte.b	%00011000
    718  1b71		       18		      .byte.b	%00011000
    719  1b72		       1c		      .byte.b	%00011100
    720  1b73		       3e		      .byte.b	%00111110
    721  1b74		       2a		      .byte.b	%00101010
    722  1b75		       12		      .byte.b	%00010010
    723  1b76		       2a		      .byte.b	%00101010
    724  1b77		       54		      .byte.b	%01010100
    725  1b78		       aa		      .byte.b	%10101010
    726  1b79		       55		      .byte.b	%01010101
    727  1b7a		       aa		      .byte.b	%10101010
    728  1b7b		       55		      .byte.b	%01010101
    729  1b7c		       2a		      .byte.b	%00101010
    730  1b7d		       04		      .byte.b	%00000100
    731  1b7e
    732  1b7e		       00		      .byte.b	0
    733  1b7f		       c7		      .byte.b	$C7
    734  1b80
    735  1b80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  1b80							; 8 - cabbage
    737  1b80
    738  1b80		       18		      .byte.b	%00011000
    739  1b81		       76		      .byte.b	%01110110
    740  1b82		       76		      .byte.b	%01110110
    741  1b83		       7a		      .byte.b	%01111010
    742  1b84		       f9		      .byte.b	%11111001
    743  1b85		       fb		      .byte.b	%11111011
    744  1b86		       ed		      .byte.b	%11101101
    745  1b87		       db		      .byte.b	%11011011
    746  1b88		       fb		      .byte.b	%11111011
    747  1b89		       e9		      .byte.b	%11101001
    748  1b8a		       56		      .byte.b	%01010110
    749  1b8b		       76		      .byte.b	%01110110
    750  1b8c		       6e		      .byte.b	%01101110
    751  1b8d		       18		      .byte.b	%00011000
    752  1b8e
    753  1b8e		       00		      .byte.b	0
    754  1b8f		       da		      .byte.b	$DA
    755  1b90
    756  1b90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  1b90							; 9 - celery
    758  1b90
    759  1b90		       c0		      .byte.b	%11000000
    760  1b91		       e0		      .byte.b	%11100000
    761  1b92		       70		      .byte.b	%01110000
    762  1b93		       30		      .byte.b	%00110000
    763  1b94		       18		      .byte.b	%00011000
    764  1b95		       18		      .byte.b	%00011000
    765  1b96		       0c		      .byte.b	%00001100
    766  1b97		       0c		      .byte.b	%00001100
    767  1b98		       0e		      .byte.b	%00001110
    768  1b99		       06		      .byte.b	%00000110
    769  1b9a		       0d		      .byte.b	%00001101
    770  1b9b		       0b		      .byte.b	%00001011
    771  1b9c		       0d		      .byte.b	%00001101
    772  1b9d		       06		      .byte.b	%00000110
    773  1b9e
    774  1b9e		       00		      .byte.b	0
    775  1b9f		       d6		      .byte.b	$D6
    776  1ba0
    777  1ba0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  1ba0							; A - green pepper
    779  1ba0
    780  1ba0		       6c		      .byte.b	%01101100
    781  1ba1		       6c		      .byte.b	%01101100
    782  1ba2		       fe		      .byte.b	%11111110
    783  1ba3		       fe		      .byte.b	%11111110
    784  1ba4		       f6		      .byte.b	%11110110
    785  1ba5		       f6		      .byte.b	%11110110
    786  1ba6		       f6		      .byte.b	%11110110
    787  1ba7		       f6		      .byte.b	%11110110
    788  1ba8		       f6		      .byte.b	%11110110
    789  1ba9		       ec		      .byte.b	%11101100
    790  1baa		       7c		      .byte.b	%01111100
    791  1bab		       10		      .byte.b	%00010000
    792  1bac		       18		      .byte.b	%00011000
    793  1bad		       08		      .byte.b	%00001000
    794  1bae
    795  1bae		       00		      .byte.b	0
    796  1baf		       c8		      .byte.b	$C8
    797  1bb0
    798  1bb0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  1bb0							; B - pumpkin
    800  1bb0
    801  1bb0		       3c		      .byte.b	%00111100
    802  1bb1		       56		      .byte.b	%01010110
    803  1bb2		       b7		      .byte.b	%10110111
    804  1bb3		       ad		      .byte.b	%10101101
    805  1bb4		       ad		      .byte.b	%10101101
    806  1bb5		       ad		      .byte.b	%10101101
    807  1bb6		       ad		      .byte.b	%10101101
    808  1bb7		       ad		      .byte.b	%10101101
    809  1bb8		       b7		      .byte.b	%10110111
    810  1bb9		       56		      .byte.b	%01010110
    811  1bba		       3c		      .byte.b	%00111100
    812  1bbb		       18		      .byte.b	%00011000
    813  1bbc		       0c		      .byte.b	%00001100
    814  1bbd		       0c		      .byte.b	%00001100
    815  1bbe
    816  1bbe		       00		      .byte.b	0
    817  1bbf		       2a		      .byte.b	$2A
    818  1bc0
    819  1bc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  1bc0							; C - mushroom
    821  1bc0
    822  1bc0		       18		      .byte.b	%00011000
    823  1bc1		       3c		      .byte.b	%00111100
    824  1bc2		       24		      .byte.b	%00100100
    825  1bc3		       24		      .byte.b	%00100100
    826  1bc4		       24		      .byte.b	%00100100
    827  1bc5		       66		      .byte.b	%01100110
    828  1bc6		       a5		      .byte.b	%10100101
    829  1bc7		       99		      .byte.b	%10011001
    830  1bc8		       e7		      .byte.b	%11100111
    831  1bc9		       ff		      .byte.b	%11111111
    832  1bca		       5a		      .byte.b	%01011010
    833  1bcb		       76		      .byte.b	%01110110
    834  1bcc		       3c		      .byte.b	%00111100
    835  1bcd		       18		      .byte.b	%00011000
    836  1bce
    837  1bce		       00		      .byte.b	0
    838  1bcf		       08		      .byte.b	$08
    839  1bd0
    840  1bd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  1bd0							; D - key
    842  1bd0
    843  1bd0		       10		      .byte.b	%00010000
    844  1bd1		       1e		      .byte.b	%00011110
    845  1bd2		       1e		      .byte.b	%00011110
    846  1bd3		       18		      .byte.b	%00011000
    847  1bd4		       1e		      .byte.b	%00011110
    848  1bd5		       1e		      .byte.b	%00011110
    849  1bd6		       10		      .byte.b	%00010000
    850  1bd7		       10		      .byte.b	%00010000
    851  1bd8		       10		      .byte.b	%00010000
    852  1bd9		       10		      .byte.b	%00010000
    853  1bda		       38		      .byte.b	%00111000
    854  1bdb		       6c		      .byte.b	%01101100
    855  1bdc		       6c		      .byte.b	%01101100
    856  1bdd		       38		      .byte.b	%00111000
    857  1bde
    858  1bde		       00		      .byte.b	0
    859  1bdf		       2c		      .byte.b	$2C
    860  1be0
    861  1be0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  1be0							; E - ring
    863  1be0
    864  1be0		       00		      .byte.b	%00000000
    865  1be1		       18		      .byte.b	%00011000
    866  1be2		       3c		      .byte.b	%00111100
    867  1be3		       66		      .byte.b	%01100110
    868  1be4		       42		      .byte.b	%01000010
    869  1be5		       42		      .byte.b	%01000010
    870  1be6		       42		      .byte.b	%01000010
    871  1be7		       66		      .byte.b	%01100110
    872  1be8		       3c		      .byte.b	%00111100
    873  1be9		       18		      .byte.b	%00011000
    874  1bea		       18		      .byte.b	%00011000
    875  1beb		       2c		      .byte.b	%00101100
    876  1bec		       18		      .byte.b	%00011000
    877  1bed		       00		      .byte.b	%00000000
    878  1bee
    879  1bee		       00		      .byte.b	0
    880  1bef		       2c		      .byte.b	$2C
    881  1bf0
    882  1bf0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  1bf0							; F - heart
    884  1bf0
    885  1bf0		       00		      .byte.b	%00000000
    886  1bf1		       18		      .byte.b	%00011000
    887  1bf2		       18		      .byte.b	%00011000
    888  1bf3		       3c		      .byte.b	%00111100
    889  1bf4		       3c		      .byte.b	%00111100
    890  1bf5		       7e		      .byte.b	%01111110
    891  1bf6		       7e		      .byte.b	%01111110
    892  1bf7		       ff		      .byte.b	%11111111
    893  1bf8		       ff		      .byte.b	%11111111
    894  1bf9		       ff		      .byte.b	%11111111
    895  1bfa		       e7		      .byte.b	%11100111
    896  1bfb		       e7		      .byte.b	%11100111
    897  1bfc		       42		      .byte.b	%01000010
    898  1bfd		       00		      .byte.b	%00000000
    899  1bfe
    900  1bfe		       00		      .byte.b	0
    901  1bff		       4a		      .byte.b	$4A
    902  1c00
    903  1c00				   RainbowColors
    904  1c00
    905  1c00		       64		      .byte.b	$64
    906  1c01		       88		      .byte.b	$88
    907  1c02		       c8		      .byte.b	$C8
    908  1c03		       1e		      .byte.b	$1E
    909  1c04		       28		      .byte.b	$28
    910  1c05		       44		      .byte.b	$44
    911  1c06
    912  1c06		       00		      .byte.b	0
    913  1c07
    914  1c07				   CatTartGfx
    915  1c07
    916  1c07		       00		      .byte.b	%00000000
    917  1c08		       00		      .byte.b	%00000000
    918  1c09		       e0		      .byte.b	%11100000
    919  1c0a		       c0		      .byte.b	%11000000
    920  1c0b		       c0		      .byte.b	%11000000
    921  1c0c		       c0		      .byte.b	%11000000
    922  1c0d		       c0		      .byte.b	%11000000
    923  1c0e		       c0		      .byte.b	%11000000
    924  1c0f		       c0		      .byte.b	%11000000
    925  1c10		       e0		      .byte.b	%11100000
    926  1c11		       e0		      .byte.b	%11100000
    927  1c12		       e0		      .byte.b	%11100000
    928  1c13		       e0		      .byte.b	%11100000
    929  1c14		       e0		      .byte.b	%11100000
------- FILE main.asm
     83  1c15
     84  1c15		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     85  1c16
     86  1c16
     87  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88  1c16							; End of ROM
     89  1c16							;
     90  1c16							; Define the end of the cartridge
     91  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     92  1c16
     93  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     94  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     95  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     96  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
