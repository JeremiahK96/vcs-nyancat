------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10000 ????						;
      3  10000 ????						; Project - Nyan Cat Game
      4  10000 ????						; by Jeremiah Knol
      5  10000 ????						;
      6  10000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  10000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  10000 ????						;
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????						; 12-14-2017 Version 2.5
     12  10000 ????						;
     13  10000 ????						; Optimize and improve code
     14  10000 ????						;
     15  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  10000 ????
     17  10000 ????
     18  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  10000 ????						; Initialization
     20  10000 ????						;
     21  10000 ????						; Include headers and set address of binary
     22  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  10000 ????
     24  10000 ????						; Define CPU type and include standard VCS header files
     25  10000 ????				       PROCESSOR	6502
     26  10000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	headers/vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 02	   COL_SCORE  equ	$02
     78  0000 ????	       00 0e	   COL_SCOREBOARD equ	$0E
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 00	   COL_LINES  equ	COL_BACKGROUND
     81  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     82  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     83  0000 ????
     84  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     86  0000 ????
     87  0000 ????	       00 00	   LUM_0      equ	$00
     88  0000 ????	       00 02	   LUM_2      equ	$02
     89  0000 ????	       00 04	   LUM_4      equ	$04
     90  0000 ????	       00 06	   LUM_6      equ	$06
     91  0000 ????	       00 08	   LUM_8      equ	$08
     92  0000 ????	       00 0a	   LUM_A      equ	$0A
     93  0000 ????	       00 0c	   LUM_C      equ	$0C
     94  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00fe ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   Level      ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar and health display
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of 5 values to be written to the playfield
     39 U008e							; registers when drawing progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for full part of progress bar
     42 U008f
     43 U008f		       00	   Health     ds	1	; amount of health
     44 U0090							; 0=full 8=medium 16=low 24=empty
     45 U0090
     46 U0090							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47 U0090							; Pointers
     48 U0090
     49 U0090				   FoodGfxPtr1		; pointer for 1st food item's graphics
     50 U0090				   ScoreLoadPtr 		; pointer for score digit graphics in scoreboard loading routine
     51 U0090
     52 U0090		       00 00		      ds	2
     53 U0092
     54 U0092				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     55 U0092				   LevelLoadPtr 		; pointer for level digit graphics in scoreboard loading routine
     56 U0092
     57 U0092		       00 00		      ds	2
     58 U0094
     59 U0094				   TartGfxPtr		; pointer for the tart graphics
     60 U0094				   ScoreDigit0		; temporary variable for digit 0 in scoreboard loading routine
     61 U0094		       00 00		      ds	2
     62 U0096
     63 U0096				   CatGfxPtr		; pointer for the cat face/paws graphics
     64 U0096				   ScoreDigit1		; temporary variable for digit 1 in scoreboard loading routine
     65 U0096		       00 00		      ds	2
     66 U0098
     67 U0098				   HthGfxLPtr		; pointer for left half of the health graphics
     68 U0098				   ScoreDigit2		; temporary variable for digit 2 in scoreboard loading routine
     69 U0098		       00 00		      ds	2
     70 U009a
     71 U009a				   HthGfxRPtr		; pointer for right half of the health graphics
     72 U009a				   ScoreDigit3		; temporary variable for digit 3 in scoreboard loading routine
     73 U009a		       00 00		      ds	2
     74 U009c
     75 U009c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76 U009c							; Variables used when drawing the cat
     77 U009c
     78 U009c		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     79 U009d
     80 U009d				   Rainbow		; PF0 value for the rainbow graphics
     81 U009d				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     82 U009d		       00		      ds	1
     83 U009e
     84 U009e				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     85 U009e				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
     86 U009e		       00		      ds	1
     87 U009f
     88 U009f		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     89 U00a0		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     90 U00a1
     91 U00a1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     92 U00a1							; Variables used for the food items
     93 U00a1
     94 U00a1		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
     95 U00a8		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
     96 U00af							; the left items, last 7 bytes are for the right items.
     97 U00af							; Hi nybble holds the value (0-15) of the item to draw.
     98 U00af							; Lo nybble holds the value of next frame's item.
     99 U00af							; All nybbles are swapped at the start of each frame.
    100 U00af
    101 U00af		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
    102 U00b6
    103 U00b6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    104 U00b6							; Variables for the throbbing lines' colors
    105 U00b6
    106 U00b6		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    107 U00b9							; throbbing lines. The first color is darkest,
    108 U00b9							; the last is brightest.
    109 U00b9
    110 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    111 U00b9							; Temporary variables which cannot be shared with stack space
    112 U00b9
    113 U00b9		       00	   TempLoop   ds	1
    114 U00ba		       00	   Temp1      ds	1
    115 U00bb		       00	   Temp2      ds	1
    116 U00bc
    117 U00bc							; 53 of 79 non-temporary RAM bytes used (22 left)
    118 U00bc							; last 49 bytes of RAM are used for stack space in the scoreboard display
    119 U00bc
    120 U00bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121 U00bc							; Temporary variables which can be shared with stack space
    122 U00bc
    123 U00bc		       00	   Temp       ds	1
    124 U00bd
    125 U00bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    126 U00bd							; Other variables which can be shared with stack space
    127 U00bd
    128 U00bd		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    129 U00be
    130 U00be		       00	   FoodColor1 ds	1	; color of the 1st food item
    131 U00bf		       00	   FoodColor2 ds	1	; color of the 2nd food item
    132 U00c0
    133 U00c0							; 7 of 15 available temporary RAM bytes used (8 left)
    134 U00c0							; last 34 bytes of RAM are used to hold the rainbow color graphics
    135 U00c0
    136 U00dc					      ORG	$100 - 36
    137 U00dc
    138 U00dc		       00 00 00 00*RamBowColors ds	34
------- FILE main.asm
     34 U00fe
     35 U00fe							; Ensure that the code is placed in the proper place in the binary
     36 U00fe
     37  10000 ????				       SEG	CODE
     38  f000					      ORG	$F000	; 4K ROM
     39  f000
     40  f000
     41  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  f000							; Full System Clear
     43  f000							;
     44  f000							; Clear all system registers and RAM at startup
     45  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  f000
     47  f000				   SystemClear
     48  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b
     52  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  f00b							; Game Logic
     54  f00b							;
     55  f00b							; Do the overscan, vertical sync, and vertical blanking,
     56  f00b							; along with any game logic
     57  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  f00b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  f00b					      include	code/Game Logic/Overscan.asm
      1  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f00b							; Overscan
      3  f00b							;
      4  f00b							; Start the overscan timer and do game logic
      5  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f00b
      7  f00b				   Overscan
      8  f00b
      9  f00b		       e6 80		      inc	Frame	; increment the frame number
     10  f00d
     11  f00d		       a9 23		      lda	#OVERSCAN_TIMER
     12  f00f		       85 02		      sta	WSYNC
     13  f011		       8d 96 02 	      sta	TIM64T	; 3
     14  f014
     15  f014
     16  f014
     17  f014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  f014							; Update Score
     19  f014							;
     20  f014							; Add to the score
     21  f014							;
     22  f014							; Takes 45 cycles to complete
     23  f014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  f014
     25  f014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  f016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  f018
     28  f018		       f8		      sed		; 2 - enable BCD mode
     29  f019
     30  f019		       18		      clc		; 2
     31  f01a		       85 bc		      sta	Temp	; 3
     32  f01c		       a5 83		      lda	BCDScore+2	; 3
     33  f01e		       65 bc		      adc	Temp	; 3
     34  f020		       85 83		      sta	BCDScore+2	; 3
     35  f022		       86 bc		      stx	Temp	; 3
     36  f024		       a5 82		      lda	BCDScore+1	; 3
     37  f026		       65 bc		      adc	Temp	; 3
     38  f028		       85 82		      sta	BCDScore+1	; 3
     39  f02a		       a9 00		      lda	#$00	; 2
     40  f02c		       85 bc		      sta	Temp	; 3
     41  f02e		       a5 81		      lda	BCDScore+0	; 3
     42  f030		       65 bc		      adc	Temp	; 3
     43  f032		       85 81		      sta	BCDScore+0	; 3
     44  f034
     45  f034		       d8		      cld		; 2 - disable BCD mode
     46  f035
     47  f035
     48  f035
     49  f035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  f035							; Finish Overscan
     51  f035							;
     52  f035							; Loop until the end of overscan
     53  f035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  f035
     55  f035				   OverscanTimerLoop
     56  f035		       ad 84 02 	      lda	INTIM
     57  f038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  f03a					      include	code/Game Logic/VerticalSync.asm
      1  f03a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f03a							; Vertical Sync
      3  f03a							;
      4  f03a							; Do the vertical sync and start the vertical blanking timer
      5  f03a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f03a
      7  f03a		       a9 02		      lda	#2
      8  f03c		       85 02		      sta	WSYNC
      9  f03e		       85 00		      sta	VSYNC	; enable VSYNC
     10  f040
     11  f040		       85 02		      sta	WSYNC
     12  f042		       a9 2d		      lda	#VBLANK_TIMER
     13  f044		       85 02		      sta	WSYNC
     14  f046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  f049
     16  f049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  f04b		       85 2c		      sta	CXCLR	; clear collision latches
     18  f04d
     19  f04d		       a9 00		      lda	#0
     20  f04f		       85 02		      sta	WSYNC
     21  f051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  f053					      include	code/Game Logic/VerticalBlank.asm
      1  f053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f053							; Vertical Blank
      3  f053							;
      4  f053							; Do the vertical blanking and game logic
      5  f053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f053
      7  f053
      8  f053
      9  f053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  f053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  f053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  f053
     13  f053		       a9 e0		      lda	#$E0	; 05
     14  f055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  f057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  f059
     17  f059		       85 89		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  f05b
     19  f05b		       a9 ff		      lda	#$FF	; 16
     20  f05d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  f05f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  f061							; right side of level counter digit doesn't need an HMOVE offset
     23  f061
     24  f061		       85 8a		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  f063
     26  f063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  f065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  f067
     29  f067		       85 8b		      sta	ProgressBar+2	; 34
     30  f069		       85 8c		      sta	ProgressBar+3	; 37
     31  f06b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  f06d		       85 8d		      sta	ProgressBar+4	; 42
     33  f06f
      0  f06f					      SLEEP	19
      1  f06f				   .CYCLES    SET	19
      2  f06f
      3  f06f				  -	      IF	.CYCLES < 2
      4  f06f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06f				  -	      ERR
      6  f06f					      ENDIF
      7  f06f
      8  f06f					      IF	.CYCLES & 1
      9  f06f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06f		       04 00		      nop	0
     11  f071				  -	      ELSE
     12  f071				  -	      bit	VSYNC
     13  f071					      ENDIF
     14  f071				   .CYCLES    SET	.CYCLES - 3
     15  f071					      ENDIF
     16  f071
     17  f071					      REPEAT	.CYCLES / 2
     18  f071		       ea		      nop
     17  f071					      REPEND
     18  f072		       ea		      nop
     17  f072					      REPEND
     18  f073		       ea		      nop
     17  f073					      REPEND
     18  f074		       ea		      nop
     17  f074					      REPEND
     18  f075		       ea		      nop
     17  f075					      REPEND
     18  f076		       ea		      nop
     17  f076					      REPEND
     18  f077		       ea		      nop
     17  f077					      REPEND
     18  f078		       ea		      nop
     19  f079					      REPEND
     35  f079
     36  f079		       85 12		      sta	RESM0	; 64 - set position for left side of level counter digit
     37  f07b
      0  f07b					      SLEEP	72	; 60
      1  f07b				   .CYCLES    SET	72
      2  f07b
      3  f07b				  -	      IF	.CYCLES < 2
      4  f07b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f07b				  -	      ERR
      6  f07b					      ENDIF
      7  f07b
      8  f07b				  -	      IF	.CYCLES & 1
      9  f07b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f07b				  -	      nop	0
     11  f07b				  -	      ELSE
     12  f07b				  -	      bit	VSYNC
     13  f07b				  -	      ENDIF
     14  f07b				  -.CYCLES    SET	.CYCLES - 3
     15  f07b					      ENDIF
     16  f07b
     17  f07b					      REPEAT	.CYCLES / 2
     18  f07b		       ea		      nop
     17  f07b					      REPEND
     18  f07c		       ea		      nop
     17  f07c					      REPEND
     18  f07d		       ea		      nop
     17  f07d					      REPEND
     18  f07e		       ea		      nop
     17  f07e					      REPEND
     18  f07f		       ea		      nop
     17  f07f					      REPEND
     18  f080		       ea		      nop
     17  f080					      REPEND
     18  f081		       ea		      nop
     17  f081					      REPEND
     18  f082		       ea		      nop
     17  f082					      REPEND
     18  f083		       ea		      nop
     17  f083					      REPEND
     18  f084		       ea		      nop
     17  f084					      REPEND
     18  f085		       ea		      nop
     17  f085					      REPEND
     18  f086		       ea		      nop
     17  f086					      REPEND
     18  f087		       ea		      nop
     17  f087					      REPEND
     18  f088		       ea		      nop
     17  f088					      REPEND
     18  f089		       ea		      nop
     17  f089					      REPEND
     18  f08a		       ea		      nop
     17  f08a					      REPEND
     18  f08b		       ea		      nop
     17  f08b					      REPEND
     18  f08c		       ea		      nop
     17  f08c					      REPEND
     18  f08d		       ea		      nop
     17  f08d					      REPEND
     18  f08e		       ea		      nop
     17  f08e					      REPEND
     18  f08f		       ea		      nop
     17  f08f					      REPEND
     18  f090		       ea		      nop
     17  f090					      REPEND
     18  f091		       ea		      nop
     17  f091					      REPEND
     18  f092		       ea		      nop
     17  f092					      REPEND
     18  f093		       ea		      nop
     17  f093					      REPEND
     18  f094		       ea		      nop
     17  f094					      REPEND
     18  f095		       ea		      nop
     17  f095					      REPEND
     18  f096		       ea		      nop
     17  f096					      REPEND
     18  f097		       ea		      nop
     17  f097					      REPEND
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     17  f099					      REPEND
     18  f09a		       ea		      nop
     17  f09a					      REPEND
     18  f09b		       ea		      nop
     17  f09b					      REPEND
     18  f09c		       ea		      nop
     17  f09c					      REPEND
     18  f09d		       ea		      nop
     17  f09d					      REPEND
     18  f09e		       ea		      nop
     19  f09f					      REPEND
     39  f09f
     40  f09f		       85 14		      sta	RESBL	; 63
     41  f0a1		       85 13		      sta	RESM1	; 66
     42  f0a3
     43  f0a3		       85 02		      sta	WSYNC
     44  f0a5		       85 2a		      sta	HMOVE
     45  f0a7
     46  f0a7
     47  f0a7
     48  f0a7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  f0a7							; Load Scoreboard
     50  f0a7							;
     51  f0a7							; Get graphics data for the scoreboard and push it onto the stack
     52  f0a7							;
     53  f0a7							; Takes 685 cycles to complete (9 full scanlines + 1 cycle)
     54  f0a7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55  f0a7
     56  f0a7					      SUBROUTINE
     57  f0a7
     58  f0a7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f0a7							; Prepare pointer for level digit graphics
     60  f0a7
     61  f0a7		       a9 f8		      lda	#>LevelGfx	; 2
     62  f0a9		       85 93		      sta	LevelLoadPtr+1	; 3 - set MSB of level digit graphics pointer
     63  f0ab
     64  f0ab		       a5 87		      lda	Level	; 3
     65  f0ad
     66  f0ad		       38		      sec		; 2 - perform a mod 10 to isolate left digit
     67  f0ae		       e9 0a		      sbc	#10	; 2
     68  f0b0
     69  f0b0		       90 02		      bcc	.Negative	; 3/2
     70  f0b2		       b0 02		      bcs	.Positive	; 3 - done this way to use the same number of cycles
     71  f0b4							;     either way, may or may not be neccesary
     72  f0b4				   .Negative
     73  f0b4		       69 0a		      adc	#10	; 2
     74  f0b6				   .Positive
     75  f0b6
     76  f0b6		       0a		      asl		; 2
     77  f0b7		       0a		      asl		; 2
     78  f0b8		       0a		      asl		; 2
     79  f0b9		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
     80  f0bb		       85 92		      sta	LevelLoadPtr	; 3 - set LSB of level digit graphics pointer
     81  f0bd
     82  f0bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     83  f0bd							; Prepare one pointer MSB and multiple LSB's for score digit graphics
     84  f0bd
     85  f0bd		       a9 f8		      lda	#>ScoreGfx	; 2
     86  f0bf		       85 91		      sta	ScoreLoadPtr+1	; 3 - set MSB of score digit graphics pointer
     87  f0c1
     88  f0c1		       a7 81		      lax	BCDScore+0	; 3
     89  f0c3		       29 f0		      and	#$F0	; 2
     90  f0c5		       4a		      lsr		; 2
     91  f0c6		       85 94		      sta	ScoreDigit0	; 3 - set LSB for digit 0
     92  f0c8		       8a		      txa		; 2
     93  f0c9		       29 0f		      and	#$0F	; 2
     94  f0cb		       0a		      asl		; 2
     95  f0cc		       0a		      asl		; 2
     96  f0cd		       0a		      asl		; 2
     97  f0ce		       85 96		      sta	ScoreDigit1	; 3 - set LSB for digit 1
     98  f0d0
     99  f0d0		       a7 82		      lax	BCDScore+1	; 3
    100  f0d2		       29 f0		      and	#$F0	; 2
    101  f0d4		       4a		      lsr		; 2
    102  f0d5		       85 98		      sta	ScoreDigit2	; 3 - set LSB for digit 2
    103  f0d7		       8a		      txa		; 2
    104  f0d8		       29 0f		      and	#$0F	; 2
    105  f0da		       0a		      asl		; 2
    106  f0db		       0a		      asl		; 2
    107  f0dc		       0a		      asl		; 2
    108  f0dd		       85 9a		      sta	ScoreDigit3	; 2 - set LSB for digit 3
    109  f0df
    110  f0df		       a7 83		      lax	BCDScore+2	; 3
    111  f0e1		       29 f0		      and	#$F0	; 2
    112  f0e3		       4a		      lsr		; 2
    113  f0e4		       85 9d		      sta	ScoreDigit4	; 3 - set LSB for digit 4
    114  f0e6		       8a		      txa		; 2
    115  f0e7		       29 0f		      and	#$0F	; 2
    116  f0e9		       0a		      asl		; 2
    117  f0ea		       0a		      asl		; 2
    118  f0eb		       0a		      asl		; 2
    119  f0ec		       85 9e		      sta	ScoreDigit5	; 3 - set LSB for digit 5
    120  f0ee
    121  f0ee							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122  f0ee							; Load the stack with the graphics for the scoreboard
    123  f0ee
    124  f0ee		       a0 06		      ldy	#6	; 2
    125  f0f0
    126  f0f0				   .LoadScoreboard
    127  f0f0
    128  f0f0		       b1 92		      lda	(LevelLoadPtr),y	; 5
    129  f0f2		       48		      pha		; 3
    130  f0f3
    131  f0f3		       a5 9e		      lda	ScoreDigit5	; 3
    132  f0f5		       85 90		      sta	ScoreLoadPtr	; 3
    133  f0f7		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    134  f0f9		       48		      pha		; 3
    135  f0fa
    136  f0fa		       a5 9d		      lda	ScoreDigit4	; 3
    137  f0fc		       85 90		      sta	ScoreLoadPtr	; 3
    138  f0fe		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    139  f100		       48		      pha		; 3
    140  f101
    141  f101		       a5 9a		      lda	ScoreDigit3	; 3
    142  f103		       85 90		      sta	ScoreLoadPtr	; 3
    143  f105		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    144  f107		       48		      pha		; 3
    145  f108
    146  f108		       a5 98		      lda	ScoreDigit2	; 3
    147  f10a		       85 90		      sta	ScoreLoadPtr	; 3
    148  f10c		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    149  f10e		       48		      pha		; 3
    150  f10f
    151  f10f		       a5 96		      lda	ScoreDigit1	; 3
    152  f111		       85 90		      sta	ScoreLoadPtr	; 3
    153  f113		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    154  f115		       48		      pha		; 3
    155  f116
    156  f116		       a5 94		      lda	ScoreDigit0	; 3
    157  f118		       85 90		      sta	ScoreLoadPtr	; 3
    158  f11a		       b1 90		      lda	(ScoreLoadPtr),y	; 5
    159  f11c		       48		      pha		; 3
    160  f11d
    161  f11d		       88		      dey		; 2
    162  f11e		       10 d0		      bpl	.LoadScoreboard	; 2/3
    163  f120
    164  f120
    165  f120
    166  f120							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    167  f120							; Load RAM for progress bar display (28-53 cycles)
    168  f120
    169  f120		       a5 88		      lda	Progress	; 3 - get amount of progress
    170  f122
    171  f122							; The level progress bar uses the following playfield bits:
    172  f122							; (note that PF0 and PF2 are NOT reversed in this diagram)
    173  f122							;
    174  f122							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    175  f122							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    176  f122							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    177  f122							;
    178  f122							; When the progress bar is empty, every bit labeled "X" above should be
    179  f122							; set (1), and when it is full, every "X" bit should be cleared (0).
    180  f122							; The bits labeled "o" must ALWAYS be cleared.
    181  f122							;
    182  f122							; The leftmost playfield value (the 1st PF0) will be calculated first,
    183  f122							; and then each playfield value to the right until the 2nd PF1
    184  f122							; will be calculated.
    185  f122
    186  f122		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    187  f124
    188  f124		       38		      sec		; 2
    189  f125		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    190  f127		       30 1e		      bmi	.Underflow1	; 2/3
    191  f129		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    192  f12b
    193  f12b		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    194  f12d		       30 23		      bmi	.Underflow2	; 2/3
    195  f12f		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    196  f131
    197  f131		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    198  f133		       30 28		      bmi	.Underflow3	; 2/3
    199  f135		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    200  f137
    201  f137		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    202  f139		       30 2d		      bmi	.Underflow4	; 2/3
    203  f13b		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    204  f13d
    205  f13d		       aa		      tax		; 2
    206  f13e		       bd 0e f9 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    207  f141		       0a		      asl		; 2
    208  f142		       85 8d		      sta	ProgressBar+4	; 3
    209  f144		       4c 70 f1 	      jmp	.Finish	; 3
    210  f147
    211  f147							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    212  f147				   .Underflow1		; for 1st PF0
    213  f147
    214  f147		       69 03		      adc	#3	; 3 - add back the 3
    215  f149		       aa		      tax		; 2
    216  f14a		       bd 1b f9 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    217  f14d		       85 89		      sta	ProgressBar	; 3
    218  f14f		       4c 70 f1 	      jmp	.Finish	; 3
    219  f152
    220  f152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    221  f152				   .Underflow2		; for 1st PF1
    222  f152
    223  f152		       69 08		      adc	#8	; 3 - add back the 8
    224  f154		       aa		      tax		; 2
    225  f155		       bd 0d f9 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    226  f158		       85 8a		      sta	ProgressBar+1	; 3
    227  f15a		       4c 70 f1 	      jmp	.Finish	; 3
    228  f15d
    229  f15d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    230  f15d				   .Underflow3		; for PF2
    231  f15d
    232  f15d		       69 08		      adc	#8	; 3 - add back the 8
    233  f15f		       aa		      tax		; 2
    234  f160		       bd 16 f9 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    235  f163		       85 8b		      sta	ProgressBar+2	; 3
    236  f165		       4c 70 f1 	      jmp	.Finish	; 3
    237  f168
    238  f168							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    239  f168				   .Underflow4		; for 2nd PF0
    240  f168
    241  f168		       69 04		      adc	#4	; 3 - add back the 4
    242  f16a		       aa		      tax		; 2
    243  f16b		       bd 1a f9 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    244  f16e		       85 8c		      sta	ProgressBar+3	; 3
    245  f170
    246  f170							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  f170				   .Finish
    248  f170
    249  f170		       85 02		      sta	WSYNC
    250  f172		       85 2b		      sta	HMCLR
    251  f174
    252  f174							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    253  f174							; Prepare Health Display
    254  f174							;
    255  f174							; Set the pointers for the health graphics
    256  f174							;
    257  f174							; Takes 28 cycles to complete
    258  f174							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    259  f174
    260  f174		       18		      clc		; 2
    261  f175
    262  f175		       a9 bd		      lda	#<HealthLeftGfx	; 2
    263  f177		       65 8f		      adc	Health	; 3
    264  f179		       85 98		      sta	HthGfxLPtr	; 3
    265  f17b		       a9 f8		      lda	#>HealthLeftGfx	; 2
    266  f17d		       85 99		      sta	HthGfxLPtr+1	; 3
    267  f17f
    268  f17f		       a9 dd		      lda	#<HealthRightGfx	; 2
    269  f181		       65 8f		      adc	Health	; 3
    270  f183		       85 9a		      sta	HthGfxRPtr	; 3
    271  f185		       a9 f8		      lda	#>HealthRightGfx	; 2
    272  f187		       85 9b		      sta	HthGfxRPtr+1	; 3
    273  f189
    274  f189
    275  f189
    276  f189							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    277  f189							; Prepare for Throbbing Lines
    278  f189							;
    279  f189							; Set the offset value for the throbbing line graphics
    280  f189							;
    281  f189							; Takes 20 cycles to complete
    282  f189							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  f189
    284  f189		       a5 80		      lda	Frame	; 3 - get the current frame number
    285  f18b		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    286  f18d		       4a		      lsr		; 2
    287  f18e		       4a		      lsr		; 2 - shift to get a value from 0-7
    288  f18f		       85 bc		      sta	Temp	; 3
    289  f191		       0a		      asl		; 2 - carry flag will always be clear after this
    290  f192		       65 bc		      adc	Temp	; 3 - multiply by 3
    291  f194		       a8		      tay
    292  f195		       b9 a0 f8 	      lda	LineThrobGfx+0,y
    293  f198		       85 b6		      sta	ThrobColor+0
    294  f19a		       b9 a1 f8 	      lda	LineThrobGfx+1,y
    295  f19d		       85 b7		      sta	ThrobColor+1
    296  f19f		       b9 a2 f8 	      lda	LineThrobGfx+2,y
    297  f1a2		       85 b8		      sta	ThrobColor+2
    298  f1a4
    299  f1a4
    300  f1a4
    301  f1a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  f1a4							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    303  f1a4
    304  f1a4		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2
    305  f1a6
    306  f1a6		       85 04		      sta	NUSIZ0
    307  f1a8		       85 05		      sta	NUSIZ1
    308  f1aa
    309  f1aa		       85 25		      sta	VDELP0
    310  f1ac		       85 26		      sta	VDELP1
    311  f1ae
    312  f1ae		       a9 02		      lda	#COL_SCORE
    313  f1b0		       85 86		      sta	ScoreColor
    314  f1b2
    315  f1b2		       a5 86		      lda	ScoreColor
    316  f1b4		       85 06		      sta	COLUP0	; set color registers
    317  f1b6		       85 07		      sta	COLUP1
    318  f1b8		       85 08		      sta	COLUPF
    319  f1ba		       85 09		      sta	COLUBK
    320  f1bc
    321  f1bc
    322  f1bc
    323  f1bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    324  f1bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    325  f1bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  f1bc
    327  f1bc		       a9 fa		      lda	#>FoodGfx
    328  f1be		       85 91		      sta	FoodGfxPtr1+1
    329  f1c0		       85 93		      sta	FoodGfxPtr2+1
    330  f1c2
    331  f1c2		       a9 07		      lda	#<CatTartGfx
    332  f1c4		       85 94		      sta	TartGfxPtr
    333  f1c6		       a9 fb		      lda	#>CatTartGfx
    334  f1c8		       85 95		      sta	TartGfxPtr+1
    335  f1ca
    336  f1ca		       a9 10		      lda	#$10
    337  f1cc		       85 a1		      sta	FoodItemL+0
    338  f1ce		       a9 70		      lda	#$70
    339  f1d0		       85 a8		      sta	FoodItemR+0
    340  f1d2		       a9 20		      lda	#$20
    341  f1d4		       85 a2		      sta	FoodItemL+1
    342  f1d6		       a9 80		      lda	#$80
    343  f1d8		       85 a9		      sta	FoodItemR+1
    344  f1da		       a9 30		      lda	#$30
    345  f1dc		       85 a3		      sta	FoodItemL+2
    346  f1de		       a9 90		      lda	#$90
    347  f1e0		       85 aa		      sta	FoodItemR+2
    348  f1e2		       a9 40		      lda	#$40
    349  f1e4		       85 a4		      sta	FoodItemL+3
    350  f1e6		       a9 a0		      lda	#$A0
    351  f1e8		       85 ab		      sta	FoodItemR+3
    352  f1ea		       a9 50		      lda	#$50
    353  f1ec		       85 a5		      sta	FoodItemL+4
    354  f1ee		       a9 b0		      lda	#$B0
    355  f1f0		       85 ac		      sta	FoodItemR+4
    356  f1f2		       a9 60		      lda	#$60
    357  f1f4		       85 a6		      sta	FoodItemL+5
    358  f1f6		       a9 c0		      lda	#$C0
    359  f1f8		       85 ad		      sta	FoodItemR+5
    360  f1fa		       a9 d0		      lda	#$D0
    361  f1fc		       85 a7		      sta	FoodItemL+6
    362  f1fe		       a9 e0		      lda	#$E0
    363  f200		       85 ae		      sta	FoodItemR+6
    364  f202
    365  f202		       a9 48		      lda	#<CatFaceGfx
    366  f204		       85 96		      sta	CatGfxPtr
    367  f206		       a9 f9		      lda	#>CatFaceGfx
    368  f208		       85 97		      sta	CatGfxPtr+1
    369  f20a
    370  f20a		       c6 af		      dec	FoodPosX
    371  f20c		       10 04		      bpl	.NoReset
    372  f20e		       a9 58		      lda	#88
    373  f210		       85 af		      sta	FoodPosX
    374  f212				   .NoReset
    375  f212
    376  f212		       a5 af		      lda	FoodPosX
    377  f214		       38		      sec
    378  f215
    379  f215		       e9 29		      sbc	#41
    380  f217		       b0 02		      bcs	.Rock1
    381  f219		       69 59		      adc	#89
    382  f21b				   .Rock1
    383  f21b		       85 b0		      sta	FoodPosX+1
    384  f21d
    385  f21d		       e9 11		      sbc	#17
    386  f21f		       b0 02		      bcs	.Rock2
    387  f221		       69 59		      adc	#89
    388  f223				   .Rock2
    389  f223		       85 b1		      sta	FoodPosX+2
    390  f225
    391  f225		       4a		      lsr
    392  f226		       85 b2		      sta	FoodPosX+3
    393  f228
    394  f228		       e9 1d		      sbc	#29
    395  f22a		       b0 02		      bcs	.Rock4
    396  f22c		       69 59		      adc	#89
    397  f22e				   .Rock4
    398  f22e		       85 b3		      sta	FoodPosX+4
    399  f230
    400  f230		       4a		      lsr
    401  f231		       85 b4		      sta	FoodPosX+5
    402  f233
    403  f233		       e9 39		      sbc	#57
    404  f235		       b0 02		      bcs	.Rock6
    405  f237		       69 59		      adc	#89
    406  f239				   .Rock6
    407  f239		       85 b5		      sta	FoodPosX+6
    408  f23b
    409  f23b		       a9 56		      lda	#$56
    410  f23d		       85 8e		      sta	PgBarColor
    411  f23f
    412  f23f		       a5 80		      lda	Frame
    413  f241		       29 08		      and	#%00001000
    414  f243		       4a		      lsr
    415  f244		       4a		      lsr
    416  f245		       4a		      lsr
    417  f246		       a8		      tay
    418  f247		       b9 2e f9 	      lda	RainbowGfx,y
    419  f24a		       85 9d		      sta	Rainbow
    420  f24c
    421  f24c
    422  f24c
    423  f24c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    424  f24c							; Prepare for Main Gameplay Kernel
    425  f24c							;
    426  f24c							; Figure out how many rows to draw before and after the two cat rows
    427  f24c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    428  f24c
    429  f24c		       a9 03		      lda	#3
    430  f24e		       85 9f		      sta	PreCatRows
    431  f250		       a9 02		      lda	#2
    432  f252		       85 a0		      sta	PostCatRows
    433  f254
    434  f254
    435  f254
    436  f254							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    437  f254							; Finish Vertical Blanking
    438  f254							;
    439  f254							; Loop until the end of vertical blanking
    440  f254							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    441  f254
    442  f254				   VblankTimerLoop
    443  f254		       ad 84 02 	      lda	INTIM
    444  f257		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     62  f259
     63  f259
     64  f259							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  f259							; Kernel
     66  f259							;
     67  f259							; Draw the screen
     68  f259							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  f259
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  f259					      include	code/Kernel.asm
      1  f259							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f259							; Kernel
      3  f259							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f259
      5  f259		       a9 00		      lda	#0
      6  f25b		       85 02		      sta	WSYNC
      7  f25d		       85 01		      sta	VBLANK	; enable display
      8  f25f
      9  f25f							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  f25f					      include	code/ScoreboardKernel.asm
      1  f25f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f25f							; Scoreboard Display
      3  f25f							;
      4  f25f							; Draw the 6-digit score and level counter.
      5  f25f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f25f
      7  f25f					      SUBROUTINE
      8  f25f
      9  f25f		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  f261		       85 0a		      sta	CTRLPF
     11  f263
     12  f263		       a9 ff		      lda	#$FF
     13  f265		       85 0d		      sta	PF0
     14  f267
     15  f267		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  f269		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  f26b		       85 0e		      sta	PF1	; display kernel loop.
     18  f26d
     19  f26d		       a0 04		      ldy	#4
     20  f26f
     21  f26f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f26f				   ScoreTop		; draw border above scoreboard
     23  f26f
     24  f26f		       85 02		      sta	WSYNC
     25  f271
     26  f271		       a9 00		      lda	#0
     27  f273		       85 1b		      sta	GRP0
     28  f275		       85 1c		      sta	GRP1
     29  f277
     30  f277		       88		      dey
     31  f278		       d0 f5		      bne	ScoreTop
     32  f27a
     33  f27a		       a9 80		      lda	#$80
     34  f27c		       85 0e		      sta	PF1
     35  f27e
     36  f27e		       a9 0e		      lda	#COL_SCOREBOARD
     37  f280		       85 09		      sta	COLUBK
     38  f282
     39  f282		       85 02		      sta	WSYNC
     40  f284		       85 02		      sta	WSYNC
     41  f286
      0  f286					      SLEEP	37
      1  f286				   .CYCLES    SET	37
      2  f286
      3  f286				  -	      IF	.CYCLES < 2
      4  f286				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f286				  -	      ERR
      6  f286					      ENDIF
      7  f286
      8  f286					      IF	.CYCLES & 1
      9  f286					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f286		       04 00		      nop	0
     11  f288				  -	      ELSE
     12  f288				  -	      bit	VSYNC
     13  f288					      ENDIF
     14  f288				   .CYCLES    SET	.CYCLES - 3
     15  f288					      ENDIF
     16  f288
     17  f288					      REPEAT	.CYCLES / 2
     18  f288		       ea		      nop
     17  f288					      REPEND
     18  f289		       ea		      nop
     17  f289					      REPEND
     18  f28a		       ea		      nop
     17  f28a					      REPEND
     18  f28b		       ea		      nop
     17  f28b					      REPEND
     18  f28c		       ea		      nop
     17  f28c					      REPEND
     18  f28d		       ea		      nop
     17  f28d					      REPEND
     18  f28e		       ea		      nop
     17  f28e					      REPEND
     18  f28f		       ea		      nop
     17  f28f					      REPEND
     18  f290		       ea		      nop
     17  f290					      REPEND
     18  f291		       ea		      nop
     17  f291					      REPEND
     18  f292		       ea		      nop
     17  f292					      REPEND
     18  f293		       ea		      nop
     17  f293					      REPEND
     18  f294		       ea		      nop
     17  f294					      REPEND
     18  f295		       ea		      nop
     17  f295					      REPEND
     18  f296		       ea		      nop
     17  f296					      REPEND
     18  f297		       ea		      nop
     17  f297					      REPEND
     18  f298		       ea		      nop
     19  f299					      REPEND
     43  f299
     44  f299		       a9 01		      lda	#$01
     45  f29b		       85 85		      sta	BCDScoreAdd+1
     46  f29d
     47  f29d		       a9 0a		      lda	#10
     48  f29f		       85 87		      sta	Level
     49  f2a1
     50  f2a1							; draw ball if level > 9
     51  f2a1
     52  f2a1		       a6 02		      ldx	ENA_TRUE
     53  f2a3		       a5 87		      lda	Level
     54  f2a5		       c9 0a		      cmp	#10
     55  f2a7
     56  f2a7		       68		      pla		; 67 - pull gfx for digit0
     57  f2a8
     58  f2a8		       b0 01		      bcs	.DrawBall
     59  f2aa		       0c		      HEX	0C	; NOP abs (triple nop) uses 4 cycles and
     60  f2ab							; skips the next 2 bytes (skipping the next instruction)
     61  f2ab				   .DrawBall
     62  f2ab		       86 1f		      stx	ENABL
     63  f2ad
     64  f2ad		       4c 1b f3 	      jmp	.EntrancePoint
     65  f2b0
     66  f300		       00 00 00 00*	      ALIGN	$100
     67  f300
     68  f300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  f300				   .ScoreDigitLoop
     70  f300
     71  f300							; A contains gfx for digit3
     72  f300		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     73  f302
     74  f302							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     75  f302
     76  f302		       68		      pla		; 18 - pull gfx for digit3...
     77  f303		       a8		      tay		; 20 - ...and store in Y
     78  f304		       68		      pla		; 24 - pull gfx data for digit4...
     79  f305		       aa		      tax		; 26 - ...and store in X
     80  f306		       68		      pla		; 30 - pull gfx data for digit5 to A
     81  f307
     82  f307		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     83  f309		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     84  f30b		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     85  f30d		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     86  f30f
     87  f30f		       68		      pla		; 46 - pull gfx data for level counter
     88  f310		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     89  f312		       2a		      rol		; 51
     90  f313		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     91  f315		       6a		      ror		; 56
     92  f316		       6a		      ror		; 58
     93  f317		       6a		      ror		; 60
     94  f318		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     95  f31a
     96  f31a		       68		      pla		; 67 - pull gfx for digit0
     97  f31b				   .EntrancePoint
     98  f31b		       85 1b		      sta	GRP0	; 70 - digit0 -> [GRP0]
     99  f31d
    100  f31d		       68		      pla		; 74 - pull gfx for digit1
    101  f31e		       8d 1c 00 	      sta.w	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
    102  f321							;	(use an extra cycle for timing reasons)
    103  f321
    104  f321		       68		      pla		; 06 - pull gfx for digit2
    105  f322
    106  f322							; On the final iteration of the loop, the stack will have wrapped
    107  f322							; and pulled from location $02 at this point.
    108  f322							; This happens to be the collision register CXP0FB.
    109  f322							; Bit-7 will always be set in this register,
    110  f322							; and bit-7 is always clear in the score graphics,
    111  f322							; so checking bit-7 of the data pulled is all that you need
    112  f322							; to determine when to terminate the loop.
    113  f322
    114  f322		       aa		      tax		; 08 - set flags according to pulled data
    115  f323
    116  f323		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
    117  f325
    118  f325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  f325					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  f325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f325							; We are currently at cycle 37 in the current scanline.
      3  f325
      4  f325
      5  f325
      6  f325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  f325							; Output 4 blank scanlines, while setting up the graphics objects.
      8  f325
      9  f325				   PreKernel
     10  f325
     11  f325		       a9 00		      lda	#0	; 12
     12  f327		       85 1d		      sta	ENAM0	; 15 - disable missiles
     13  f329		       85 1e		      sta	ENAM1	; 18
     14  f32b		       85 1b		      sta	GRP0	; 21 - disable player graphics
     15  f32d		       85 1c		      sta	GRP1	; 24
     16  f32f		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
     17  f331		       85 26		      sta	VDELP1	; 30
     18  f333		       85 1f		      sta	ENABL	; 33 - disable ball
     19  f335		       8d bd 00 	      sta.w	CurrentRow	; 37
     20  f338
     21  f338
     22  f338							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  f338							; Clear the RAM for the rainbow colors - 127 cycles
     24  f338
     25  f338
     26  f338		       a2 fd		      ldx	#$FD
     27  f33a		       9a		      txs
     28  f33b
     29  f33b		       a0 04		      ldy	#4
     30  f33d				   .ClearRainbow
     31  f33d		       48		      pha
     32  f33e		       48		      pha
     33  f33f		       48		      pha
     34  f340		       48		      pha
     35  f341		       48		      pha
     36  f342		       48		      pha
     37  f343		       48		      pha
     38  f344		       48		      pha
     39  f345
     40  f345		       88		      dey
     41  f346		       d0 f5		      bne	.ClearRainbow
     42  f348
     43  f348		       48		      pha
     44  f349		       48		      pha		; 12
     45  f34a
     46  f34a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  f34a							; Load the rainbow colors into RAM - 65 cycles
     48  f34a
     49  f34a		       a2 e9		      ldx	#$FD - 20
     50  f34c		       9a		      txs
     51  f34d
     52  f34d		       ad 05 fb 	      lda	RainbowColors+5
     53  f350		       48		      pha
     54  f351		       48		      pha
     55  f352		       ad 04 fb 	      lda	RainbowColors+4
     56  f355		       48		      pha
     57  f356		       48		      pha
     58  f357		       ad 03 fb 	      lda	RainbowColors+3
     59  f35a		       48		      pha
     60  f35b		       48		      pha
     61  f35c		       ad 02 fb 	      lda	RainbowColors+2
     62  f35f		       48		      pha
     63  f360		       48		      pha
     64  f361		       ad 01 fb 	      lda	RainbowColors+1
     65  f364		       48		      pha
     66  f365		       48		      pha
     67  f366		       ad 00 fb 	      lda	RainbowColors+0
     68  f369		       48		      pha
     69  f36a		       48		      pha		; 00
     70  f36b
     71  f36b
     72  f36b
     73  f36b							; Player 0 is already aligned for drawing the cat's face.
     74  f36b
     75  f36b							; Align player 1 to draw the current frame's food items for the top row.
     76  f36b
     77  f36b							; food item can be placed anywhere from 0-88
     78  f36b							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     79  f36b
     80  f36b		       a4 bd		      ldy	CurrentRow	; 03 - get the row we are drawing
     81  f36d		       b9 af 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     82  f370
     83  f370		       38		      sec		; 09
     84  f371				   .DivideLoop
     85  f371		       e9 0f		      sbc	#15	; 11
     86  f373		       b0 fc		      bcs	.DivideLoop	; 13
     87  f375
     88  f375		       49 07		      eor	#7	; 15
     89  f377		       69 01		      adc	#1	; 17
     90  f379		       0a		      asl		; 19
     91  f37a		       0a		      asl		; 21
     92  f37b		       0a		      asl		; 23
     93  f37c
     94  f37c		       85 11		      sta	RESP1	; 26
     95  f37e
     96  f37e
     97  f37e
     98  f37e		       0a		      asl		; 53
     99  f37f		       85 21		      sta	HMP1	; 56
    100  f381
    101  f381		       a9 00		      lda	#ONE_COPY	; 58
    102  f383		       85 04		      sta	NUSIZ0	; 61
    103  f385		       a9 04		      lda	#TWO_WIDE	; 63
    104  f387		       85 05		      sta	NUSIZ1	; 66
    105  f389
    106  f389		       a9 80		      lda	#$80	; 68
    107  f38b		       85 20		      sta	HMP0	; 71
    108  f38d
    109  f38d		       85 02		      sta	WSYNC
    110  f38f
    111  f38f		       a5 b7		      lda	ThrobColor+1	; 03
    112  f391		       85 09		      sta	COLUBK	; 06
    113  f393		       85 08		      sta	COLUPF	; 09
    114  f395
    115  f395
    116  f395
    117  f395
    118  f395		       a9 01		      lda	#PF_REFLECT	; 11
    119  f397		       85 0a		      sta	CTRLPF	; 14
    120  f399
    121  f399		       a5 9d		      lda	Rainbow	; 17
    122  f39b		       85 0d		      sta	PF0	; 20
    123  f39d
    124  f39d		       a9 06		      lda	#COL_CAT_FACE	; 22
    125  f39f		       85 06		      sta	COLUP0	; 25
    126  f3a1
    127  f3a1		       a5 a1		      lda	FoodItemL	; 28
    128  f3a3		       29 f0		      and	#$F0	; 30
    129  f3a5		       85 90		      sta	FoodGfxPtr1	; 33
    130  f3a7		       aa		      tax		; 35
    131  f3a8		       bd 0e fa 	      lda	FoodGfx+14,x	; 39
    132  f3ab		       85 be		      sta	FoodColor1	; 42
    133  f3ad
    134  f3ad		       a5 a8		      lda	FoodItemR	; 45
    135  f3af		       29 f0		      and	#$F0	; 47
    136  f3b1		       85 92		      sta	FoodGfxPtr2	; 50
    137  f3b3		       aa		      tax		; 52
    138  f3b4		       bd 0e fa 	      lda	FoodGfx+14,x	; 56
    139  f3b7		       85 bf		      sta	FoodColor2	; 59
    140  f3b9
    141  f3b9		       a5 af		      lda	FoodPosX	; 62
    142  f3bb		       8d bc 00 	      sta.w	Temp	; 66
    143  f3be
    144  f3be		       a2 ff		      ldx	#$FF	; 68
    145  f3c0		       9a		      txs		; 70
    146  f3c1
    147  f3c1		       85 2a		      sta	HMOVE	; 73
    148  f3c3
    149  f3c3							; If any part of the cat needs to be drawn in the top row,
    150  f3c3							; skip straight to CatRows.
    151  f3c3
    152  f3c3
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  f3c3					      include	code/Gameplay Kernel/HiRows.asm
      1  f3c3							; Draw all the rows above the cat's two rows
      2  f3c3				   HiRows     SUBROUTINE
      3  f3c3
      4  f3c3		       85 02		      sta	WSYNC
      5  f3c5
      6  f3c5		       a5 b6		      lda	ThrobColor+0
      7  f3c7		       85 09		      sta	COLUBK
      8  f3c9		       85 08		      sta	COLUPF
      9  f3cb
     10  f3cb							; First, output a single-color line to draw the bottom of a "throb" line.
     11  f3cb							; This will probably be a good time to prepare the pointers for the
     12  f3cb							; food items' graphics, as well as loading the colors for the food items.
     13  f3cb
     14  f3cb							; After that, output 14 lines to draw a single row with food items,
     15  f3cb							; but without drawing the cat. The food graphics will be updated every line,
     16  f3cb							; but there will probably not be enough time to also update the food colors
     17  f3cb							; every line throughout the kernel.
     18  f3cb
     19  f3cb		       20 75 f4 	      jsr	DrawFoodRow	; 46
     20  f3ce
     21  f3ce		       85 02		      sta	WSYNC
     22  f3d0
     23  f3d0
     24  f3d0							; Lastly, output four single-color lines to draw most of a "throb" line,
     25  f3d0							; while setting the position of player 1 to draw the next set of food items.
     26  f3d0
     27  f3d0
     28  f3d0		       a5 b6		      lda	ThrobColor+0
     29  f3d2		       85 09		      sta	COLUBK
     30  f3d4		       85 08		      sta	COLUPF
     31  f3d6		       a9 00		      lda	#0
     32  f3d8		       85 1b		      sta	GRP0
     33  f3da		       85 1c		      sta	GRP1
     34  f3dc		       85 02		      sta	WSYNC
     35  f3de
     36  f3de		       a5 b7		      lda	ThrobColor+1	; 03
     37  f3e0		       85 09		      sta	COLUBK	; 06
     38  f3e2		       85 08		      sta	COLUPF	; 09
     39  f3e4
     40  f3e4		       a4 bd		      ldy	CurrentRow	; 12 - get the row we are drawing
     41  f3e6		       b9 af 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     42  f3e9
     43  f3e9		       38		      sec		; 18
     44  f3ea				   .DivideLoop
     45  f3ea		       e9 0f		      sbc	#15	; 20
     46  f3ec		       b0 fc		      bcs	.DivideLoop	; 22
     47  f3ee
     48  f3ee		       8d 11 00 	      sta.w	RESP1	; 26
     49  f3f1
     50  f3f1		       49 07		      eor	#7
     51  f3f3		       69 01		      adc	#1
     52  f3f5		       0a		      asl
     53  f3f6		       0a		      asl
     54  f3f7		       0a		      asl
     55  f3f8		       0a		      asl
     56  f3f9		       85 21		      sta	HMP1
     57  f3fb
     58  f3fb		       85 02		      sta	WSYNC
     59  f3fd
     60  f3fd		       a5 b8		      lda	ThrobColor+2	; 03
     61  f3ff		       85 09		      sta	COLUBK	; 06
     62  f401		       85 08		      sta	COLUPF	; 09
     63  f403
     64  f403		       20 9b f4 	      jsr	Sleep12
     65  f406		       20 9b f4 	      jsr	Sleep12
     66  f409		       20 9b f4 	      jsr	Sleep12
     67  f40c		       20 9b f4 	      jsr	Sleep12
     68  f40f		       20 9b f4 	      jsr	Sleep12	; 69
     69  f412
     70  f412		       8d 2a 00 	      sta.w	HMOVE	; 73
     71  f415
     72  f415		       85 02		      sta	WSYNC
     73  f417
     74  f417		       a5 b7		      lda	ThrobColor+1
     75  f419		       85 09		      sta	COLUBK
     76  f41b		       85 08		      sta	COLUPF
     77  f41d
     78  f41d		       a4 bd		      ldy	CurrentRow	; 11
     79  f41f
     80  f41f		       b9 a1 00 	      lda	FoodItemL,y	; 15
     81  f422		       29 f0		      and	#$F0	; 17
     82  f424		       85 90		      sta	FoodGfxPtr1	; 20
     83  f426		       aa		      tax		; 22
     84  f427		       bd 0e fa 	      lda	FoodGfx+14,x	; 26
     85  f42a		       85 be		      sta	FoodColor1	; 29
     86  f42c
     87  f42c		       b9 a8 00 	      lda	FoodItemR,y	; 33
     88  f42f		       29 f0		      and	#$F0	; 36
     89  f431		       85 92		      sta	FoodGfxPtr2	; 38
     90  f433		       aa		      tax		; 40
     91  f434		       bd 0e fa 	      lda	FoodGfx+14,x	; 44
     92  f437		       85 bf		      sta	FoodColor2	; 47
     93  f439
     94  f439		       b9 af 00 	      lda	FoodPosX,y	; 51
     95  f43c		       85 bc		      sta	Temp	; 54
     96  f43e
     97  f43e		       c6 9f		      dec	PreCatRows
     98  f440		       d0 81		      bne	HiRows
     99  f442
    100  f442		       85 02		      sta	WSYNC
    101  f444
      0  f444					      SLEEP	2
      1  f444				   .CYCLES    SET	2
      2  f444
      3  f444				  -	      IF	.CYCLES < 2
      4  f444				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f444				  -	      ERR
      6  f444					      ENDIF
      7  f444
      8  f444				  -	      IF	.CYCLES & 1
      9  f444				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f444				  -	      nop	0
     11  f444				  -	      ELSE
     12  f444				  -	      bit	VSYNC
     13  f444				  -	      ENDIF
     14  f444				  -.CYCLES    SET	.CYCLES - 3
     15  f444					      ENDIF
     16  f444
     17  f444					      REPEAT	.CYCLES / 2
     18  f444		       ea		      nop
     19  f445					      REPEND
    103  f445
    104  f445							; If this is not the last row before drawing the cat's rows,
    105  f445							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  f445					      include	code/Gameplay Kernel/CatRows.asm
      1  f445							; Draw the two rows that contain the cat.
      2  f445				   CatRows    SUBROUTINE
      3  f445
      4  f445							; Output a line to finish the bottom of a "throb" line, like in HiRows.
      5  f445							; If the cat is at the very top of the row, draw the top of the pop-tart.
      6  f445
      7  f445		       a5 b6		      lda	ThrobColor+0
      8  f447		       85 09		      sta	COLUBK
      9  f449		       85 08		      sta	COLUPF
     10  f44b
     11  f44b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12  f44b							; Cat Row Kernel
     13  f44b							;
     14  f44b							; This is the subroutine that is used to draw the two gameplay kernel rows
     15  f44b							; containing the cat. It does not draw the throbbing line between the two rows,
     16  f44b							; it only draws a single, 14-scanline row with the cat and food items.
     17  f44b							; This subroutine is called twice in the kernel, once for each of the two rows
     18  f44b							; containing the cat.
     19  f44b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     20  f44b
     21  f44b				   DrawCatRow
     22  f44b
     23  f44b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  f44b
     25  f44b		       a6 bf		      ldx	FoodColor2
     26  f44d		       9a		      txs
     27  f44e
     28  f44e							; Then output the 14 lines to draw a single row. This will include drawing
     29  f44e							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     30  f44e							; All graphics will be updated every line.
     31  f44e
      0  f44e					      SLEEP	10
      1  f44e				   .CYCLES    SET	10
      2  f44e
      3  f44e				  -	      IF	.CYCLES < 2
      4  f44e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f44e				  -	      ERR
      6  f44e					      ENDIF
      7  f44e
      8  f44e				  -	      IF	.CYCLES & 1
      9  f44e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f44e				  -	      nop	0
     11  f44e				  -	      ELSE
     12  f44e				  -	      bit	VSYNC
     13  f44e				  -	      ENDIF
     14  f44e				  -.CYCLES    SET	.CYCLES - 3
     15  f44e					      ENDIF
     16  f44e
     17  f44e					      REPEAT	.CYCLES / 2
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     19  f453					      REPEND
     33  f453
     34  f453		       a0 0d		      ldy	#13
     35  f455		       b1 94		      lda	(TartGfxPtr),y
     36  f457		       85 0e		      sta	PF1
     37  f459
     38  f459		       a0 0d		      ldy	#13
     39  f45b
     40  f45b		       a6 bd		      ldx	CurrentRow
     41  f45d		       b5 af		      lda	FoodPosX,x	; 47
     42  f45f
     43  f45f		       c9 31		      cmp	#49	; 49
     44  f461		       30 0d		      bmi	.FoodRight	; 52/51
     45  f463
     46  f463		       a2 00		      ldx	#COL_BACKGROUND
     47  f465
     48  f465		       c6 94		      dec	TartGfxPtr	; 56
     49  f467		       c6 96		      dec	CatGfxPtr	; 61
     50  f469
      0  f469					      SLEEP	7	; 68
      1  f469				   .CYCLES    SET	7
      2  f469
      3  f469				  -	      IF	.CYCLES < 2
      4  f469				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f469				  -	      ERR
      6  f469					      ENDIF
      7  f469
      8  f469					      IF	.CYCLES & 1
      9  f469					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f469		       04 00		      nop	0
     11  f46b				  -	      ELSE
     12  f46b				  -	      bit	VSYNC
     13  f46b					      ENDIF
     14  f46b				   .CYCLES    SET	.CYCLES - 3
     15  f46b					      ENDIF
     16  f46b
     17  f46b					      REPEAT	.CYCLES / 2
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     19  f46d					      REPEND
     52  f46d
     53  f46d		       4c 00 f5 	      jmp	.KernelLoop1	; 71
     54  f470
     55  f470				   .FoodRight
     56  f470		       a2 00		      ldx	#COL_BACKGROUND
     57  f472
     58  f472		       4c 32 f5 	      jmp	.KernelLoop2	; 55
     59  f475
     60  f475
     61  f475
     62  f475
     63  f475
     64  f475
     65  f475				   DrawFoodRow
     66  f475
     67  f475		       a0 0d		      ldy	#13	; 02
     68  f477
     69  f477				   .FoodLoop
     70  f477		       a9 00		      lda	#COL_BACKGROUND	; 04
     71  f479		       85 02		      sta	WSYNC	; 07/00
     72  f47b
     73  f47b				   .EnterHere
     74  f47b		       85 09		      sta	COLUBK	; 03
     75  f47d		       85 08		      sta	COLUPF	; 06
     76  f47f
     77  f47f		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     78  f481		       85 1c		      sta	GRP1	; 14
     79  f483		       a5 be		      lda	FoodColor1	; 17
     80  f485		       85 07		      sta	COLUP1	; 20
     81  f487
     82  f487		       a5 bc		      lda	Temp	; 23
     83  f489
     84  f489		       38		      sec		; 25
     85  f48a				   .WaitLoop
     86  f48a		       e9 17		      sbc	#23	; 27
     87  f48c		       b0 fc		      bcs	.WaitLoop	; 29
     88  f48e
     89  f48e		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     90  f490		       a6 bf		      ldx	FoodColor2	; 52
     91  f492		       85 1c		      sta	GRP1	; 55
     92  f494		       86 07		      stx	COLUP1	; 58
     93  f496
     94  f496		       88		      dey		; 60
     95  f497		       10 de		      bpl	.FoodLoop	; 62
     96  f499
     97  f499		       e6 bd		      inc	CurrentRow	; 65
     98  f49b				   Sleep12
     99  f49b		       60		      rts		; 71
    100  f49c
    101  f49c
    102  f49c
    103  f49c
    104  f49c
    105  f49c
    106  f500		       00 00 00 00*	      ALIGN	$100
    107  f500
    108  f500				   .KernelLoop1
    109  f500
    110  f500							; 7 cycles to prepare PF rainbow colors
    111  f500		       b9 dd 00 	      lda	RamBowColors+1,y	; 75
    112  f503		       85 08		      sta	COLUPF	; 02
    113  f505
    114  f505							; 7 cycles to prepare BK rainbow colors
    115  f505		       b9 dc 00 	      lda	RamBowColors,y	; 06
    116  f508		       85 09		      sta	COLUBK	; 09
    117  f50a
    118  f50a							; 14 cycles to prepare 1st food item's graphics
    119  f50a		       b1 90		      lda	(FoodGfxPtr1),y	; 14
    120  f50c		       85 1c		      sta	GRP1	; 17
    121  f50e		       a5 be		      lda	FoodColor1	; 20
    122  f510		       85 07		      sta	COLUP1	; 23
    123  f512
    124  f512							; 5 cycles to set tart color
    125  f512		       a9 4a		      lda	#COL_CAT_TART	; 25
    126  f514		       85 08		      sta	COLUPF	; 28
    127  f516
    128  f516							; 3 cycles to clear BK color to black
    129  f516							; x is pre-loaded with 0, the color black
    130  f516		       86 09		      stx	COLUBK	; 31
    131  f518
    132  f518							; 8 cycles to prepare cat face graphics
    133  f518		       b1 96		      lda	(CatGfxPtr),y	; 36
    134  f51a		       85 1b		      sta	GRP0	; 39
    135  f51c
    136  f51c							; 8 cycles to prepare tart graphics
    137  f51c		       b1 94		      lda	(TartGfxPtr),y	; 44
    138  f51e		       85 0e		      sta	PF1	; 47
    139  f520
    140  f520							; 13 cycles to prepare 2nd food item's graphics
    141  f520		       b1 92		      lda	(FoodGfxPtr2),y	; 52
    142  f522		       ba		      tsx		; 54
    143  f523		       85 1c		      sta	GRP1	; 57
    144  f525		       86 07		      stx	COLUP1	; 60
    145  f527
    146  f527							; 6 cycles to clear PF color to black
    147  f527		       a2 00		      ldx	#COL_BACKGROUND	; 62
    148  f529		       8e 08 00 	      stx.w	COLUPF	; 66
    149  f52c
    150  f52c							; 5 cycles to finish the loop mechanism
    151  f52c		       88		      dey		; 68
    152  f52d		       10 d1		      bpl	.KernelLoop1	; 71/70
    153  f52f
    154  f52f							; exactly 76 cycles total
    155  f52f
    156  f52f		       4c 61 f5 	      jmp	.Nanny
    157  f532
    158  f532
    159  f532
    160  f532
    161  f532
    162  f532				   .KernelLoop2
    163  f532
    164  f532							; 8 cycles to prepare cat face graphics
    165  f532		       b1 96		      lda	(CatGfxPtr),y	; 60
    166  f534		       85 1b		      sta	GRP0	; 63
    167  f536
    168  f536							; 14 cycles to prepare 1st food item's graphics
    169  f536		       b1 90		      lda	(FoodGfxPtr1),y	; 68
    170  f538		       85 1c		      sta	GRP1	; 71
    171  f53a		       a5 be		      lda	FoodColor1	; 74
    172  f53c		       85 07		      sta	COLUP1	; 01
    173  f53e
    174  f53e							; 7 cycles to prepare PF rainbow colors
    175  f53e		       b9 dd 00 	      lda	RamBowColors+1,y	; 05
    176  f541		       85 08		      sta	COLUPF	; 08
    177  f543
    178  f543							; 7 cycles to prepare BK rainbow colors
    179  f543		       b9 dc 00 	      lda	RamBowColors,y	; 12
    180  f546		       85 09		      sta	COLUBK	; 15
    181  f548
    182  f548							; 8 cycles to prepare tart graphics
    183  f548		       b1 94		      lda	(TartGfxPtr),y	; 20
    184  f54a		       85 0e		      sta	PF1	; 23
    185  f54c
    186  f54c							; 5 cycles to set tart color
    187  f54c		       a9 4a		      lda	#COL_CAT_TART	; 25
    188  f54e		       85 08		      sta	COLUPF	; 28
    189  f550
    190  f550							; 3 cycles to clear BK color to black
    191  f550							; x is pre-loaded with 0, the color black
    192  f550		       86 09		      stx	COLUBK	; 31
    193  f552
    194  f552							; 13 cycles to prepare 2nd food item's graphics
    195  f552		       b1 92		      lda	(FoodGfxPtr2),y	; 36
    196  f554		       ba		      tsx		; 38
    197  f555		       85 1c		      sta	GRP1	; 41
    198  f557		       86 07		      stx	COLUP1	; 44
    199  f559
    200  f559							; 6 cycles to clear PF color to black
    201  f559		       a2 00		      ldx	#COL_BACKGROUND	; 46
    202  f55b		       8e 08 00 	      stx.w	COLUPF	; 50
    203  f55e
    204  f55e							; 5 cycles to finish the loop mechanism
    205  f55e		       88		      dey		; 52
    206  f55f		       10 d1		      bpl	.KernelLoop2	; 55/54
    207  f561
    208  f561							; exactly 76 cycles total
    209  f561
    210  f561				   .Nanny
    211  f561
    212  f561		       85 02		      sta	WSYNC
    213  f563
    214  f563		       e6 bd		      inc	CurrentRow
    215  f565
    216  f565		       86 1c		      stx	GRP1
    217  f567
    218  f567
    219  f567
    220  f567
    221  f567							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    222  f567							; cat with the rainbow. In order to align player 1 for the next row's
    223  f567							; food items, it will be neccesary to have three versions of this kernel,
    224  f567							; one for each of the three 60-color-clock spaced positions to reset.
    225  f567							; HMOVE will be written to on the first four scanlines. With a maximum
    226  f567							; movement of 15 color-clocks per scanline, this will allow a movement of
    227  f567							; up to 60 color clocks. With three versions of the kernel, it should be
    228  f567							; possible to put player 1 anywhere on the screen.
    229  f567
    230  f567		       a5 b6		      lda	ThrobColor+0
    231  f569		       85 09		      sta	COLUBK
    232  f56b		       85 08		      sta	COLUPF
    233  f56d		       a2 00		      ldx	#0
    234  f56f		       86 1b		      stx	GRP0
    235  f571		       86 1c		      stx	GRP1
    236  f573
    237  f573		       a2 ff		      ldx	#$FF
    238  f575		       9a		      txs
    239  f576
    240  f576		       85 02		      sta	WSYNC
    241  f578
    242  f578		       a5 b7		      lda	ThrobColor+1
    243  f57a		       85 09		      sta	COLUBK
    244  f57c		       85 08		      sta	COLUPF
    245  f57e		       85 02		      sta	WSYNC
    246  f580
    247  f580		       a5 b8		      lda	ThrobColor+2
    248  f582		       85 09		      sta	COLUBK
    249  f584		       85 08		      sta	COLUPF
    250  f586		       85 02		      sta	WSYNC
    251  f588
    252  f588		       a5 b7		      lda	ThrobColor+1
    253  f58a		       85 09		      sta	COLUBK
    254  f58c		       85 08		      sta	COLUPF
    255  f58e		       85 02		      sta	WSYNC
    256  f590
    257  f590		       a5 b6		      lda	ThrobColor+0
    258  f592		       85 09		      sta	COLUBK
    259  f594		       85 08		      sta	COLUPF
    260  f596		       85 02		      sta	WSYNC
    261  f598
    262  f598							; Then output 14 lines to draw the next row, exactly the same way as the
    263  f598							; previous one. It will be neccesary to have multiple versions of this, as well,
    264  f598							; since GRP1 needs to be updated at the correct time depending on the position
    265  f598							; of player 1.
    266  f598
    267  f598		       a9 00		      lda	#COL_BACKGROUND
    268  f59a		       85 09		      sta	COLUBK
    269  f59c		       85 08		      sta	COLUPF
    270  f59e
    271  f59e		       a0 0e		      ldy	#14
    272  f5a0				   .Loop3
    273  f5a0		       85 02		      sta	WSYNC
    274  f5a2		       88		      dey
    275  f5a3		       d0 fb		      bne	.Loop3
    276  f5a5
    277  f5a5							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    278  f5a5							; Use this time to prepare the next row's food item pointers (unless this is
    279  f5a5							; the last row). If this is the last row, skip over LoRows.
    280  f5a5
    281  f5a5		       a5 b6		      lda	ThrobColor+0
    282  f5a7		       85 09		      sta	COLUBK
    283  f5a9		       85 08		      sta	COLUPF
    284  f5ab
    285  f5ab							; If the cat is at the very bottom of the screen, don't disable the
    286  f5ab							; missile/player graphics until after they are drawn, so they don't get
    287  f5ab							; clipped at the bottom of the screen. An easy way to do this would be to
    288  f5ab							; simply disable them after they would have been drawn, whether they are
    289  f5ab							; already disabled or not.
    290  f5ab
    291  f5ab		       4c 00 f6 	      jmp	LoRows
    292  f5ae
    293  f5ae
    294  f5ae
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  f5ae					      include	code/Gameplay Kernel/LoRows.asm
      1  f600		       00 00 00 00*	      ALIGN	$100
      2  f600
      3  f600							; Draw all the rows below the cat's two rows.
      4  f600				   LoRows     SUBROUTINE
      5  f600
      6  f600		       85 02		      sta	WSYNC
      7  f602
      8  f602							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  f602							; player 1 for the next row's food items.
     10  f602
     11  f602		       a5 b7		      lda	ThrobColor+1	; 03
     12  f604		       85 09		      sta	COLUBK	; 06
     13  f606		       85 08		      sta	COLUPF	; 09
     14  f608
     15  f608		       a4 bd		      ldy	CurrentRow	; 12 - get the row we are drawing
     16  f60a		       b9 af 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     17  f60d
     18  f60d		       38		      sec		; 18
     19  f60e				   .DivideLoop
     20  f60e		       e9 0f		      sbc	#15	; 20
     21  f610		       b0 fc		      bcs	.DivideLoop	; 22
     22  f612
     23  f612		       8d 11 00 	      sta.w	RESP1	; 26
     24  f615
     25  f615		       49 07		      eor	#7
     26  f617
     27  f617		       69 01		      adc	#1
     28  f619		       0a		      asl
     29  f61a		       0a		      asl
     30  f61b		       0a		      asl
     31  f61c		       0a		      asl
     32  f61d		       85 21		      sta	HMP1
     33  f61f
     34  f61f		       85 02		      sta	WSYNC
     35  f621
     36  f621		       a5 b8		      lda	ThrobColor+2	; 03
     37  f623		       85 09		      sta	COLUBK	; 06
     38  f625		       85 08		      sta	COLUPF	; 09
     39  f627
     40  f627		       20 9b f4 	      jsr	Sleep12
     41  f62a		       20 9b f4 	      jsr	Sleep12
     42  f62d		       20 9b f4 	      jsr	Sleep12
     43  f630		       20 9b f4 	      jsr	Sleep12
     44  f633		       20 9b f4 	      jsr	Sleep12	; 69
     45  f636
     46  f636		       8d 2a 00 	      sta.w	HMOVE	; 73
     47  f639
     48  f639		       85 02		      sta	WSYNC
     49  f63b
     50  f63b		       a5 b7		      lda	ThrobColor+1
     51  f63d		       85 09		      sta	COLUBK
     52  f63f		       85 08		      sta	COLUPF
     53  f641		       85 02		      sta	WSYNC
     54  f643
     55  f643		       a5 b6		      lda	ThrobColor+0
     56  f645		       85 09		      sta	COLUBK
     57  f647		       85 08		      sta	COLUPF
     58  f649
     59  f649		       a4 bd		      ldy	CurrentRow	; 11
     60  f64b
     61  f64b		       b9 a1 00 	      lda	FoodItemL,y	; 15
     62  f64e		       29 f0		      and	#$F0	; 17
     63  f650		       85 90		      sta	FoodGfxPtr1	; 20
     64  f652		       aa		      tax		; 22
     65  f653		       bd 0e fa 	      lda	FoodGfx+14,x	; 26
     66  f656		       85 be		      sta	FoodColor1	; 29
     67  f658
     68  f658		       b9 a8 00 	      lda	FoodItemR,y	; 33
     69  f65b		       29 f0		      and	#$F0	; 36
     70  f65d		       85 92		      sta	FoodGfxPtr2	; 38
     71  f65f		       aa		      tax		; 40
     72  f660		       bd 0e fa 	      lda	FoodGfx+14,x	; 44
     73  f663		       85 bf		      sta	FoodColor2	; 47
     74  f665
     75  f665		       b9 af 00 	      lda	FoodPosX,y	; 51
     76  f668		       85 bc		      sta	Temp	; 54
     77  f66a
     78  f66a							; Output 14 lines to draw a row, exactly the same as in HiRows.
     79  f66a							; It may be possible to code this as a subroutine to save ROM space.
     80  f66a
     81  f66a		       20 75 f4 	      jsr	DrawFoodRow
     82  f66d
     83  f66d		       85 02		      sta	WSYNC
     84  f66f
     85  f66f							; Lastly, output a single line for the next "throb" line.
     86  f66f							; Use this time to prepare the next row's food item pointers (unless this is
     87  f66f							; the last row). If this is not the last row, loop to LoRows for the next row.
     88  f66f
     89  f66f		       a5 b6		      lda	ThrobColor+0
     90  f671		       85 09		      sta	COLUBK
     91  f673		       85 08		      sta	COLUPF
     92  f675
     93  f675		       c6 a0		      dec	PostCatRows
     94  f677		       d0 87		      bne	LoRows
     95  f679
     96  f679		       85 02		      sta	WSYNC
      0  f67b					      SLEEP	2
      1  f67b				   .CYCLES    SET	2
      2  f67b
      3  f67b				  -	      IF	.CYCLES < 2
      4  f67b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f67b				  -	      ERR
      6  f67b					      ENDIF
      7  f67b
      8  f67b				  -	      IF	.CYCLES & 1
      9  f67b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f67b				  -	      nop	0
     11  f67b				  -	      ELSE
     12  f67b				  -	      bit	VSYNC
     13  f67b				  -	      ENDIF
     14  f67b				  -.CYCLES    SET	.CYCLES - 3
     15  f67b					      ENDIF
     16  f67b
     17  f67b					      REPEAT	.CYCLES / 2
     18  f67b		       ea		      nop
     19  f67c					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  f67c					      include	code/ProgressHealthKernel.asm
      1  f67c		       a5 b7		      lda	ThrobColor+1
      2  f67e		       85 09		      sta	COLUBK
      3  f680		       a9 00		      lda	#0
      4  f682		       85 0d		      sta	PF0
      5  f684		       85 0a		      sta	CTRLPF
      6  f686		       a9 06		      lda	#COL_CAT_FACE
      7  f688		       85 08		      sta	COLUPF
      8  f68a
      0  f68a					      SLEEP	32	; 53
      1  f68a				   .CYCLES    SET	32
      2  f68a
      3  f68a				  -	      IF	.CYCLES < 2
      4  f68a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f68a				  -	      ERR
      6  f68a					      ENDIF
      7  f68a
      8  f68a				  -	      IF	.CYCLES & 1
      9  f68a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f68a				  -	      nop	0
     11  f68a				  -	      ELSE
     12  f68a				  -	      bit	VSYNC
     13  f68a				  -	      ENDIF
     14  f68a				  -.CYCLES    SET	.CYCLES - 3
     15  f68a					      ENDIF
     16  f68a
     17  f68a					      REPEAT	.CYCLES / 2
     18  f68a		       ea		      nop
     17  f68a					      REPEND
     18  f68b		       ea		      nop
     17  f68b					      REPEND
     18  f68c		       ea		      nop
     17  f68c					      REPEND
     18  f68d		       ea		      nop
     17  f68d					      REPEND
     18  f68e		       ea		      nop
     17  f68e					      REPEND
     18  f68f		       ea		      nop
     17  f68f					      REPEND
     18  f690		       ea		      nop
     17  f690					      REPEND
     18  f691		       ea		      nop
     17  f691					      REPEND
     18  f692		       ea		      nop
     17  f692					      REPEND
     18  f693		       ea		      nop
     17  f693					      REPEND
     18  f694		       ea		      nop
     17  f694					      REPEND
     18  f695		       ea		      nop
     17  f695					      REPEND
     18  f696		       ea		      nop
     17  f696					      REPEND
     18  f697		       ea		      nop
     17  f697					      REPEND
     18  f698		       ea		      nop
     17  f698					      REPEND
     18  f699		       ea		      nop
     19  f69a					      REPEND
     10  f69a
     11  f69a		       a9 20		      lda	#$20	; 55
     12  f69c		       85 20		      sta	HMP0	; 58
     13  f69e		       a9 b0		      lda	#$B0	; 60
     14  f6a0		       85 21		      sta	HMP1	; 63
     15  f6a2
     16  f6a2		       85 10		      sta	RESP0	; 66
     17  f6a4		       85 11		      sta	RESP1	; 69
     18  f6a6
     19  f6a6		       a9 00		      lda	#$00	; 71
     20  f6a8
     21  f6a8		       85 2a		      sta	HMOVE	; 74
     22  f6aa
     23  f6aa		       85 06		      sta	COLUP0
     24  f6ac		       85 07		      sta	COLUP1
     25  f6ae
     26  f6ae		       a9 0e		      lda	#COL_SCOREBOARD
     27  f6b0		       85 09		      sta	COLUBK
     28  f6b2
     29  f6b2		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  f6b4		       85 04		      sta	NUSIZ0
     31  f6b6		       85 05		      sta	NUSIZ1
     32  f6b8
     33  f6b8		       a9 08		      lda	#REFP_TRUE
     34  f6ba		       85 0c		      sta	REFP1
     35  f6bc
     36  f6bc					      SUBROUTINE
     37  f6bc
     38  f6bc		       a0 04		      ldy	#4
     39  f6be		       85 02		      sta	WSYNC
     40  f6c0
     41  f6c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  f6c0				   .HealthTop		; draw top of health
     43  f6c0
     44  f6c0		       a2 03		      ldx	#3
     45  f6c2
     46  f6c2				   .Loop
     47  f6c2		       85 02		      sta	WSYNC
     48  f6c4
     49  f6c4		       b9 b8 f8 	      lda	HealthTopGfx,y	; 04
     50  f6c7		       85 1b		      sta	GRP0	; 07
     51  f6c9		       85 1c		      sta	GRP1	; 10
     52  f6cb		       a9 00		      lda	#$00	; 12
     53  f6cd		       85 0f		      sta	PF2	; 15
      0  f6cf					      SLEEP	26	; 37
      1  f6cf				   .CYCLES    SET	26
      2  f6cf
      3  f6cf				  -	      IF	.CYCLES < 2
      4  f6cf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6cf				  -	      ERR
      6  f6cf					      ENDIF
      7  f6cf
      8  f6cf				  -	      IF	.CYCLES & 1
      9  f6cf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6cf				  -	      nop	0
     11  f6cf				  -	      ELSE
     12  f6cf				  -	      bit	VSYNC
     13  f6cf				  -	      ENDIF
     14  f6cf				  -.CYCLES    SET	.CYCLES - 3
     15  f6cf					      ENDIF
     16  f6cf
     17  f6cf					      REPEAT	.CYCLES / 2
     18  f6cf		       ea		      nop
     17  f6cf					      REPEND
     18  f6d0		       ea		      nop
     17  f6d0					      REPEND
     18  f6d1		       ea		      nop
     17  f6d1					      REPEND
     18  f6d2		       ea		      nop
     17  f6d2					      REPEND
     18  f6d3		       ea		      nop
     17  f6d3					      REPEND
     18  f6d4		       ea		      nop
     17  f6d4					      REPEND
     18  f6d5		       ea		      nop
     17  f6d5					      REPEND
     18  f6d6		       ea		      nop
     17  f6d6					      REPEND
     18  f6d7		       ea		      nop
     17  f6d7					      REPEND
     18  f6d8		       ea		      nop
     17  f6d8					      REPEND
     18  f6d9		       ea		      nop
     17  f6d9					      REPEND
     18  f6da		       ea		      nop
     17  f6da					      REPEND
     18  f6db		       ea		      nop
     19  f6dc					      REPEND
     55  f6dc		       b9 08 f9 	      lda	HealthBgGfx+8,y	; 41
     56  f6df		       85 0f		      sta	PF2	; 44
     57  f6e1
     58  f6e1		       ca		      dex
     59  f6e2		       d0 de		      bne	.Loop
     60  f6e4
     61  f6e4		       88		      dey
     62  f6e5		       10 d9		      bpl	.HealthTop
     63  f6e7
     64  f6e7
     65  f6e7					      SUBROUTINE
     66  f6e7
     67  f6e7
     68  f6e7		       a0 03		      ldy	#3
     69  f6e9		       a2 03		      ldx	#3
     70  f6eb		       86 bc		      stx	Temp
     71  f6ed
     72  f6ed		       4c 00 f7 	      jmp	.HealthMiddle
     73  f6f0
     74  f700		       00 00 00 00*	      ALIGN	$100	; align to page
     75  f700
     76  f700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  f700				   .HealthMiddle		; draw middle of health, with progress bar
     78  f700
     79  f700		       85 02		      sta	WSYNC
     80  f702				   .Loop
     81  f702		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     82  f704		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     83  f706
     84  f706		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     85  f708		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     86  f70a
     87  f70a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     88  f70c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     89  f70e
     90  f70e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     91  f710		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     92  f712
     93  f712		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     94  f714		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     95  f716
     96  f716		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     97  f718		       85 1b		      sta	GRP0	; 38 - for the left half of health
     98  f71a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     99  f71c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    100  f71e
    101  f71e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    102  f720		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    103  f722		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    104  f724		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
    105  f727
    106  f727		       a9 0e		      lda	#COL_SCOREBOARD	; 60 - get the color for the background
    107  f729		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    108  f72c
    109  f72c		       ca		      dex		; 66
    110  f72d		       d0 d1		      bne	.HealthMiddle	; 68
    111  f72f
    112  f72f		       a6 bc		      ldx	Temp	; 71
    113  f731
    114  f731		       88		      dey		; 73
    115  f732		       10 ce		      bpl	.Loop	; 76 / 00
    116  f734
    117  f734
    118  f734
    119  f734
    120  f734
    121  f734
    122  f734
    123  f734
    124  f734
    125  f734					      SUBROUTINE
    126  f734
    127  f734
    128  f734		       a9 00		      lda	#0
    129  f736		       85 0d		      sta	PF0
    130  f738		       85 0e		      sta	PF1
    131  f73a
    132  f73a		       a0 07		      ldy	#7
    133  f73c
    134  f73c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  f73c				   .HealthBottom		; draw bottom of health
    136  f73c
    137  f73c		       a2 03		      ldx	#3
    138  f73e				   .Loop
    139  f73e		       b1 98		      lda	(HthGfxLPtr),y
    140  f740		       85 1b		      sta	GRP0
    141  f742		       b1 9a		      lda	(HthGfxRPtr),y
    142  f744		       85 1c		      sta	GRP1
    143  f746		       a9 00		      lda	#$00
    144  f748		       85 0f		      sta	PF2
    145  f74a
      0  f74a					      SLEEP	14
      1  f74a				   .CYCLES    SET	14
      2  f74a
      3  f74a				  -	      IF	.CYCLES < 2
      4  f74a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f74a				  -	      ERR
      6  f74a					      ENDIF
      7  f74a
      8  f74a				  -	      IF	.CYCLES & 1
      9  f74a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f74a				  -	      nop	0
     11  f74a				  -	      ELSE
     12  f74a				  -	      bit	VSYNC
     13  f74a				  -	      ENDIF
     14  f74a				  -.CYCLES    SET	.CYCLES - 3
     15  f74a					      ENDIF
     16  f74a
     17  f74a					      REPEAT	.CYCLES / 2
     18  f74a		       ea		      nop
     17  f74a					      REPEND
     18  f74b		       ea		      nop
     17  f74b					      REPEND
     18  f74c		       ea		      nop
     17  f74c					      REPEND
     18  f74d		       ea		      nop
     17  f74d					      REPEND
     18  f74e		       ea		      nop
     17  f74e					      REPEND
     18  f74f		       ea		      nop
     17  f74f					      REPEND
     18  f750		       ea		      nop
     19  f751					      REPEND
    147  f751
    148  f751		       b9 fc f8 	      lda	HealthBgGfx-4,y
    149  f754		       85 0f		      sta	PF2
    150  f756		       85 02		      sta	WSYNC
    151  f758
    152  f758		       ca		      dex
    153  f759		       d0 e3		      bne	.Loop
    154  f75b
    155  f75b		       88		      dey
    156  f75c		       c0 03		      cpy	#3
    157  f75e		       d0 dc		      bne	.HealthBottom
    158  f760
    159  f760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    160  f760
    161  f760		       a9 00		      lda	#$00
    162  f762		       85 1b		      sta	GRP0
    163  f764		       85 1c		      sta	GRP1
    164  f766		       85 0b		      sta	REFP0
    165  f768		       85 0c		      sta	REFP1
    166  f76a		       85 0f		      sta	PF2
    167  f76c
    168  f76c		       85 02		      sta	WSYNC
    169  f76e
------- FILE code/Kernel.asm
     13  f76e
     14  f76e		       a9 02		      lda	#2
     15  f770		       85 01		      sta	VBLANK	; disable display
     16  f772
     17  f772		       4c 0b f0 	      jmp	Overscan
------- FILE main.asm
     71  f775
     72  f775				   Z_EndOfCode		; label to show how much ROM is used for the code
     73  f775
     74  f775
     75  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  f775							; Data Tables
     77  f775							;
     78  f775							; Include data tables
     79  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  f775
     81  f775							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  f775					      include	data/Graphics.asm
      1  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f775							; Graphics Tables
      3  f775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f775
      5  f800		       00 00 00 00*	      ALIGN	$100	; align to page
      6  f800
      7  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  f800							; Digit graphics for the scoreboard
      9  f800							;
     10  f800							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  f800							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  f800							; to normal when it is pulled from the stack.
     13  f800							;
     14  f800							; Table takes up $50 (80) bytes of ROM
     15  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f800
     17  f800				   ScoreGfx
     18  f800
     19  f800		       1c		      .byte.b	%00011100	; digit 0
     20  f801		       26		      .byte.b	%00100110
     21  f802		       63		      .byte.b	%01100011
     22  f803		       63		      .byte.b	%01100011
     23  f804		       63		      .byte.b	%01100011
     24  f805		       32		      .byte.b	%00110010
     25  f806		       1c		      .byte.b	%00011100
     26  f807		       00		      .byte.b	%00000000
     27  f808
     28  f808							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  f808
     30  f808		       18		      .byte.b	%00011000	; digit 1
     31  f809		       38		      .byte.b	%00111000
     32  f80a		       18		      .byte.b	%00011000
     33  f80b		       18		      .byte.b	%00011000
     34  f80c		       18		      .byte.b	%00011000
     35  f80d		       18		      .byte.b	%00011000
     36  f80e		       7e		      .byte.b	%01111110
     37  f80f		       00		      .byte.b	%00000000
     38  f810
     39  f810							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  f810
     41  f810		       3e		      .byte.b	%00111110	; digit 2
     42  f811		       63		      .byte.b	%01100011
     43  f812		       07		      .byte.b	%00000111
     44  f813		       1e		      .byte.b	%00011110
     45  f814		       3c		      .byte.b	%00111100
     46  f815		       70		      .byte.b	%01110000
     47  f816		       7f		      .byte.b	%01111111
     48  f817		       00		      .byte.b	%00000000
     49  f818
     50  f818							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  f818
     52  f818		       7f		      .byte.b	%01111111	; digit 3
     53  f819		       06		      .byte.b	%00000110
     54  f81a		       0c		      .byte.b	%00001100
     55  f81b		       1e		      .byte.b	%00011110
     56  f81c		       03		      .byte.b	%00000011
     57  f81d		       63		      .byte.b	%01100011
     58  f81e		       3e		      .byte.b	%00111110
     59  f81f		       00		      .byte.b	%00000000
     60  f820
     61  f820							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  f820
     63  f820		       0e		      .byte.b	%00001110	; digit 4
     64  f821		       1e		      .byte.b	%00011110
     65  f822		       36		      .byte.b	%00110110
     66  f823		       66		      .byte.b	%01100110
     67  f824		       7f		      .byte.b	%01111111
     68  f825		       06		      .byte.b	%00000110
     69  f826		       06		      .byte.b	%00000110
     70  f827		       00		      .byte.b	%00000000
     71  f828
     72  f828							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  f828
     74  f828		       7e		      .byte.b	%01111110	; digit 5
     75  f829		       60		      .byte.b	%01100000
     76  f82a		       7e		      .byte.b	%01111110
     77  f82b		       03		      .byte.b	%00000011
     78  f82c		       03		      .byte.b	%00000011
     79  f82d		       63		      .byte.b	%01100011
     80  f82e		       3e		      .byte.b	%00111110
     81  f82f		       00		      .byte.b	%00000000
     82  f830
     83  f830							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  f830
     85  f830		       1e		      .byte.b	%00011110	; digit 6
     86  f831		       30		      .byte.b	%00110000
     87  f832		       60		      .byte.b	%01100000
     88  f833		       7e		      .byte.b	%01111110
     89  f834		       63		      .byte.b	%01100011
     90  f835		       63		      .byte.b	%01100011
     91  f836		       3e		      .byte.b	%00111110
     92  f837		       00		      .byte.b	%00000000
     93  f838
     94  f838							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  f838
     96  f838		       7f		      .byte.b	%01111111	; digit 7
     97  f839		       03		      .byte.b	%00000011
     98  f83a		       06		      .byte.b	%00000110
     99  f83b		       0c		      .byte.b	%00001100
    100  f83c		       18		      .byte.b	%00011000
    101  f83d		       18		      .byte.b	%00011000
    102  f83e		       18		      .byte.b	%00011000
    103  f83f		       00		      .byte.b	%00000000
    104  f840
    105  f840							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f840
    107  f840		       3c		      .byte.b	%00111100	; digit 8
    108  f841		       62		      .byte.b	%01100010
    109  f842		       72		      .byte.b	%01110010
    110  f843		       3c		      .byte.b	%00111100
    111  f844		       43		      .byte.b	%01000011
    112  f845		       43		      .byte.b	%01000011
    113  f846		       3e		      .byte.b	%00111110
    114  f847		       00		      .byte.b	%00000000
    115  f848
    116  f848							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  f848
    118  f848		       3e		      .byte.b	%00111110	; digit 9
    119  f849		       63		      .byte.b	%01100011
    120  f84a		       63		      .byte.b	%01100011
    121  f84b		       3f		      .byte.b	%00111111
    122  f84c		       03		      .byte.b	%00000011
    123  f84d		       06		      .byte.b	%00000110
    124  f84e		       3c		      .byte.b	%00111100
    125  f84f		       00		      .byte.b	%00000000
    126  f850
    127  f850
    128  f850
    129  f850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  f850							; NUSIZx and ENAMx data for level counter graphics
    131  f850							;
    132  f850							; This table enables or disables each missile and adjusts the left missile's
    133  f850							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  f850							; left digit. (The right digit is drawn with the ball.)
    135  f850							; Bit-1 is used to enable or disable the left missile,
    136  f850							; and bit-0 is used to enable or disable the right missile.
    137  f850							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  f850							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  f850							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  f850							; correct for the score display.
    141  f850							;
    142  f850							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  f850							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  f850							; to normal when it is pulled from the stack.
    145  f850							;
    146  f850							; Table takes up $50 (80) bytes of ROM
    147  f850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  f850
    149  f850				   LevelGfx
    150  f850
    151  f850							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  f850							; ^^^^^^^^^
    153  f850		       8f		      .byte.b	%10001111	; digit 0
    154  f851		       4f		      .byte.b	%01001111
    155  f852		       4f		      .byte.b	%01001111
    156  f853		       4f		      .byte.b	%01001111
    157  f854		       4f		      .byte.b	%01001111
    158  f855		       4f		      .byte.b	%01001111
    159  f856		       8f		      .byte.b	%10001111
    160  f857		       00		      .byte.b	%00000000
    161  f858
    162  f858							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  f858
    164  f858							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  f858							; ^^^^^^^^^
    166  f858		       8d		      .byte.b	%10001101	; digit 1
    167  f859		       4d		      .byte.b	%01001101
    168  f85a		       4d		      .byte.b	%01001101
    169  f85b		       8d		      .byte.b	%10001101
    170  f85c		       4d		      .byte.b	%01001101
    171  f85d		       4d		      .byte.b	%01001101
    172  f85e		       8d		      .byte.b	%10001101
    173  f85f		       00		      .byte.b	%00000000
    174  f860
    175  f860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  f860
    177  f860							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  f860							; ^^^^^^^^^
    179  f860		       8f		      .byte.b	%10001111	; digit 2
    180  f861		       4d		      .byte.b	%01001101
    181  f862		       4d		      .byte.b	%01001101
    182  f863		       8f		      .byte.b	%10001111
    183  f864		       4e		      .byte.b	%01001110
    184  f865		       4e		      .byte.b	%01001110
    185  f866		       8f		      .byte.b	%10001111
    186  f867		       00		      .byte.b	%00000000
    187  f868
    188  f868							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f868
    190  f868							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  f868							; ^^^^^^^^^
    192  f868		       8f		      .byte.b	%10001111	; digit 3
    193  f869		       4d		      .byte.b	%01001101
    194  f86a		       4d		      .byte.b	%01001101
    195  f86b		       8f		      .byte.b	%10001111
    196  f86c		       4d		      .byte.b	%01001101
    197  f86d		       4d		      .byte.b	%01001101
    198  f86e		       8f		      .byte.b	%10001111
    199  f86f		       00		      .byte.b	%00000000
    200  f870
    201  f870							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  f870
    203  f870							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  f870							; ^^^^^^^^^
    205  f870		       4f		      .byte.b	%01001111	; digit 4
    206  f871		       4f		      .byte.b	%01001111
    207  f872		       4f		      .byte.b	%01001111
    208  f873		       8f		      .byte.b	%10001111
    209  f874		       4d		      .byte.b	%01001101
    210  f875		       4d		      .byte.b	%01001101
    211  f876		       4d		      .byte.b	%01001101
    212  f877		       00		      .byte.b	%00000000
    213  f878
    214  f878							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f878
    216  f878							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  f878							; ^^^^^^^^^
    218  f878		       8f		      .byte.b	%10001111	; digit 5
    219  f879		       4e		      .byte.b	%01001110
    220  f87a		       4e		      .byte.b	%01001110
    221  f87b		       8f		      .byte.b	%10001111
    222  f87c		       4d		      .byte.b	%01001101
    223  f87d		       4d		      .byte.b	%01001101
    224  f87e		       8f		      .byte.b	%10001111
    225  f87f		       00		      .byte.b	%00000000
    226  f880
    227  f880							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f880
    229  f880							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  f880							; ^^^^^^^^^
    231  f880		       8f		      .byte.b	%10001111	; digit 6
    232  f881		       4e		      .byte.b	%01001110
    233  f882		       4e		      .byte.b	%01001110
    234  f883		       8f		      .byte.b	%10001111
    235  f884		       4f		      .byte.b	%01001111
    236  f885		       4f		      .byte.b	%01001111
    237  f886		       8f		      .byte.b	%10001111
    238  f887		       00		      .byte.b	%00000000
    239  f888
    240  f888							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  f888
    242  f888							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  f888							; ^^^^^^^^^
    244  f888		       8f		      .byte.b	%10001111	; digit 7
    245  f889		       4d		      .byte.b	%01001101
    246  f88a		       4d		      .byte.b	%01001101
    247  f88b		       8d		      .byte.b	%10001101
    248  f88c		       4d		      .byte.b	%01001101
    249  f88d		       4d		      .byte.b	%01001101
    250  f88e		       8d		      .byte.b	%10001101
    251  f88f		       00		      .byte.b	%00000000
    252  f890
    253  f890							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f890
    255  f890							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  f890							; ^^^^^^^^^
    257  f890		       8f		      .byte.b	%10001111	; digit 8
    258  f891		       4f		      .byte.b	%01001111
    259  f892		       4f		      .byte.b	%01001111
    260  f893		       8f		      .byte.b	%10001111
    261  f894		       4f		      .byte.b	%01001111
    262  f895		       4f		      .byte.b	%01001111
    263  f896		       8f		      .byte.b	%10001111
    264  f897		       00		      .byte.b	%00000000
    265  f898
    266  f898							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  f898
    268  f898							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  f898							; ^^^^^^^^^
    270  f898		       8f		      .byte.b	%10001111	; digit 9
    271  f899		       4f		      .byte.b	%01001111
    272  f89a		       4f		      .byte.b	%01001111
    273  f89b		       8f		      .byte.b	%10001111
    274  f89c		       4d		      .byte.b	%01001101
    275  f89d		       4d		      .byte.b	%01001101
    276  f89e		       8f		      .byte.b	%10001111
    277  f89f		       00		      .byte.b	%00000000
    278  f8a0
    279  f8a0
    280  f8a0
    281  f8a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  f8a0							; Throbbing Line Graphics
    283  f8a0							;
    284  f8a0							; Graphics tables for the throbbing lines
    285  f8a0							;
    286  f8a0							; Table takes up $18 (24) bytes of ROM
    287  f8a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  f8a0
    289  f8a0				   LineThrobGfx
    290  f8a0
    291  f8a0		       00		      .byte.b	COL_LINES + LUM_0	; frame 0
    292  f8a1		       02		      .byte.b	COL_LINES + LUM_2
    293  f8a2		       04		      .byte.b	COL_LINES + LUM_4
    294  f8a3
    295  f8a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  f8a3
    297  f8a3		       00		      .byte.b	COL_LINES + LUM_0	; frame 1
    298  f8a4		       04		      .byte.b	COL_LINES + LUM_4
    299  f8a5		       06		      .byte.b	COL_LINES + LUM_6
    300  f8a6
    301  f8a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  f8a6
    303  f8a6		       00		      .byte.b	COL_LINES + LUM_0	; frame 2
    304  f8a7		       06		      .byte.b	COL_LINES + LUM_6
    305  f8a8		       08		      .byte.b	COL_LINES + LUM_8
    306  f8a9
    307  f8a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  f8a9
    309  f8a9		       02		      .byte.b	COL_LINES + LUM_2	; frame 3
    310  f8aa		       08		      .byte.b	COL_LINES + LUM_8
    311  f8ab		       0c		      .byte.b	COL_LINES + LUM_C
    312  f8ac
    313  f8ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  f8ac
    315  f8ac		       04		      .byte.b	COL_LINES + LUM_4	; frame 4
    316  f8ad		       0a		      .byte.b	COL_LINES + LUM_A
    317  f8ae		       0e		      .byte.b	COL_LINES + LUM_E
    318  f8af
    319  f8af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  f8af
    321  f8af		       02		      .byte.b	COL_LINES + LUM_2	; frame 5
    322  f8b0		       08		      .byte.b	COL_LINES + LUM_8
    323  f8b1		       0c		      .byte.b	COL_LINES + LUM_C
    324  f8b2
    325  f8b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  f8b2
    327  f8b2		       00		      .byte.b	COL_LINES + LUM_0	; frame 6
    328  f8b3		       06		      .byte.b	COL_LINES + LUM_6
    329  f8b4		       0a		      .byte.b	COL_LINES + LUM_A
    330  f8b5
    331  f8b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  f8b5
    333  f8b5		       00		      .byte.b	COL_LINES + LUM_0	; frame 7
    334  f8b6		       04		      .byte.b	COL_LINES + LUM_4
    335  f8b7		       06		      .byte.b	COL_LINES + LUM_6
    336  f8b8
    337  f8b8
    338  f8b8
    339  f8b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  f8b8							; Health Graphics
    341  f8b8							;
    342  f8b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  f8b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  f8b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  f8b8							; the graphics for the lower right are flipped.
    346  f8b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  f8b8							; are set up in a confusing way. They are upside-down, but they are split
    348  f8b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  f8b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  f8b8							; LOWER 4 lines of graphics (also upside-down).
    351  f8b8							; The last table (HealthBgGfx) is for the grey background of the
    352  f8b8							; health graphics drawn with the playfield.
    353  f8b8							;
    354  f8b8							; Table takes up $45 (69) bytes of ROM
    355  f8b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  f8b8
    357  f8b8				   HealthTopGfx
    358  f8b8
    359  f8b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  f8b9		       43		      .byte.b	%01000011
    361  f8ba		       44		      .byte.b	%01000100
    362  f8bb		       48		      .byte.b	%01001000
    363  f8bc		       30		      .byte.b	%00110000
    364  f8bd
    365  f8bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  f8bd				   HealthLeftGfx
    367  f8bd
    368  f8bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  f8be		       8c		      .byte.b	%10001100
    370  f8bf		       84		      .byte.b	%10000100
    371  f8c0		       80		      .byte.b	%10000000
    372  f8c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  f8c2		       20		      .byte.b	%00100000
    374  f8c3		       47		      .byte.b	%01000111
    375  f8c4		       84		      .byte.b	%10000100
    376  f8c5
    377  f8c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  f8c5
    379  f8c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  f8c6		       8c		      .byte.b	%10001100
    381  f8c7		       84		      .byte.b	%10000100
    382  f8c8		       80		      .byte.b	%10000000
    383  f8c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  f8ca		       20		      .byte.b	%00100000
    385  f8cb		       47		      .byte.b	%01000111
    386  f8cc		       80		      .byte.b	%10000000
    387  f8cd
    388  f8cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  f8cd
    390  f8cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  f8ce		       8c		      .byte.b	%10001100
    392  f8cf		       84		      .byte.b	%10000100
    393  f8d0		       80		      .byte.b	%10000000
    394  f8d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  f8d2		       20		      .byte.b	%00100000
    396  f8d3		       44		      .byte.b	%01000100
    397  f8d4		       87		      .byte.b	%10000111
    398  f8d5
    399  f8d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  f8d5
    401  f8d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  f8d6		       9c		      .byte.b	%10011100
    403  f8d7		       80		      .byte.b	%10000000
    404  f8d8		       80		      .byte.b	%10000000
    405  f8d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  f8da		       20		      .byte.b	%00100000
    407  f8db		       46		      .byte.b	%01000110
    408  f8dc		       81		      .byte.b	%10000001
    409  f8dd
    410  f8dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  f8dd				   HealthRightGfx
    412  f8dd
    413  f8dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  f8de		       9a		      .byte.b	%10011010
    415  f8df		       90		      .byte.b	%10010000
    416  f8e0		       80		      .byte.b	%10000000
    417  f8e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  f8e2		       20		      .byte.b	%00100000
    419  f8e3		       4f		      .byte.b	%01001111
    420  f8e4		       89		      .byte.b	%10001001
    421  f8e5
    422  f8e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  f8e5
    424  f8e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  f8e6		       9a		      .byte.b	%10011010
    426  f8e7		       90		      .byte.b	%10010000
    427  f8e8		       80		      .byte.b	%10000000
    428  f8e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  f8ea		       20		      .byte.b	%00100000
    430  f8eb		       4f		      .byte.b	%01001111
    431  f8ec		       80		      .byte.b	%10000000
    432  f8ed
    433  f8ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  f8ed
    435  f8ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  f8ee		       9a		      .byte.b	%10011010
    437  f8ef		       88		      .byte.b	%10001000
    438  f8f0		       80		      .byte.b	%10000000
    439  f8f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  f8f2		       20		      .byte.b	%00100000
    441  f8f3		       48		      .byte.b	%01001000
    442  f8f4		       8f		      .byte.b	%10001111
    443  f8f5
    444  f8f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  f8f5
    446  f8f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  f8f6		       ba		      .byte.b	%10111010
    448  f8f7		       80		      .byte.b	%10000000
    449  f8f8		       80		      .byte.b	%10000000
    450  f8f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  f8fa		       20		      .byte.b	%00100000
    452  f8fb		       4c		      .byte.b	%01001100
    453  f8fc		       83		      .byte.b	%10000011
    454  f8fd
    455  f8fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  f8fd
    457  f8fd							; 3 bytes left in this page
    458  f8fd
    459  f900		       00 00 00 	      ALIGN	$100	; align to page
    460  f900
    461  f900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  f900				   HealthBgGfx
    463  f900							; 13 bytes
    464  f900
    465  f900		       00		      .byte.b	%00000000
    466  f901		       3e		      .byte.b	%00111110
    467  f902		       7f		      .byte.b	%01111111
    468  f903		       7f		      .byte.b	%01111111
    469  f904		       7f		      .byte.b	%01111111
    470  f905		       7f		      .byte.b	%01111111
    471  f906		       7f		      .byte.b	%01111111
    472  f907		       7f		      .byte.b	%01111111
    473  f908		       7f		      .byte.b	%01111111
    474  f909		       7f		      .byte.b	%01111111
    475  f90a		       63		      .byte.b	%01100011
    476  f90b		       63		      .byte.b	%01100011
    477  f90c		       00		      .byte.b	%00000000
    478  f90d
    479  f90d
    480  f90d
    481  f90d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  f90d							; Progress Bar Graphics
    483  f90d							;
    484  f90d							;
    485  f90d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  f90d
    487  f90d				   PgBarGfx
    488  f90d							; 9 bytes
    489  f90d
    490  f90d		       ff		      .byte.b	%11111111	; 1st PF1
    491  f90e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  f90f		       3f		      .byte.b	%00111111
    493  f910		       1f		      .byte.b	%00011111
    494  f911		       0f		      .byte.b	%00001111
    495  f912		       07		      .byte.b	%00000111
    496  f913		       03		      .byte.b	%00000011
    497  f914		       01		      .byte.b	%00000001
    498  f915		       00		      .byte.b	%00000000
    499  f916
    500  f916							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  f916				   PgBarGfxR
    502  f916							; 8 bytes
    503  f916
    504  f916		       ff		      .byte.b	%11111111	; PF2
    505  f917		       fe		      .byte.b	%11111110
    506  f918		       fc		      .byte.b	%11111100
    507  f919		       f8		      .byte.b	%11111000
    508  f91a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  f91b		       e0		      .byte.b	%11100000	; 1st PF0
    510  f91c		       c0		      .byte.b	%11000000
    511  f91d		       80		      .byte.b	%10000000
    512  f91e
    513  f91e
    514  f91e
    515  f91e				   FineHmove73
    516  f91e
    517  f91e		       70 60 50 40	      HEX	70 60 50 40
    518  f922		       30 20 10 00	      HEX	30 20 10 00
    519  f926		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  f92a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  f92e
    522  f92e
    523  f92e
    524  f92e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  f92e							; Cat Rainbow Graphics
    526  f92e							;
    527  f92e							;
    528  f92e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  f92e
    530  f92e				   RainbowGfx
    531  f92e							; 4 bytes
    532  f92e
    533  f92e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  f92f
    535  f92f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  f930
    537  f930		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    538  f931
    539  f931		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    540  f932
    541  f932
    542  f932		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    543  f948
    544  f948				   CatFaceGfx
    545  f948
    546  f948		       36		      .byte.b	%00110110
    547  f949		       36		      .byte.b	%00110110
    548  f94a		       00		      .byte.b	%00000000
    549  f94b		       7e		      .byte.b	%01111110
    550  f94c		       c1		      .byte.b	%11000001
    551  f94d		       d5		      .byte.b	%11010101
    552  f94e		       ff		      .byte.b	%11111111
    553  f94f		       d5		      .byte.b	%11010101
    554  f950		       dd		      .byte.b	%11011101
    555  f951		       ff		      .byte.b	%11111111
    556  f952		       66		      .byte.b	%01100110
    557  f953		       66		      .byte.b	%01100110
    558  f954		       42		      .byte.b	%01000010
    559  f955
    560  f955		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    561  f96a							;140 bytes used in page
    562  f96a
    563  fa00		       00 00 00 00*	      ALIGN	$100
    564  fa00
    565  fa00				   FoodGfx
    566  fa00
    567  fa00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    568  fa00							; 0 - blank
    569  fa00
    570  fa00		       00		      .byte.b	%00000000
    571  fa01		       00		      .byte.b	%00000000
    572  fa02		       00		      .byte.b	%00000000
    573  fa03		       00		      .byte.b	%00000000
    574  fa04		       00		      .byte.b	%00000000
    575  fa05		       00		      .byte.b	%00000000
    576  fa06		       00		      .byte.b	%00000000
    577  fa07		       00		      .byte.b	%00000000
    578  fa08		       00		      .byte.b	%00000000
    579  fa09		       00		      .byte.b	%00000000
    580  fa0a		       00		      .byte.b	%00000000
    581  fa0b		       00		      .byte.b	%00000000
    582  fa0c		       00		      .byte.b	%00000000
    583  fa0d		       00		      .byte.b	%00000000
    584  fa0e
    585  fa0e		       0e		      .byte.b	$0E
    586  fa0f		       00		      .byte.b	0
    587  fa10
    588  fa10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  fa10							; 1 - apple
    590  fa10
    591  fa10		       34		      .byte.b	%00110100
    592  fa11		       7e		      .byte.b	%01111110
    593  fa12		       7e		      .byte.b	%01111110
    594  fa13		       ff		      .byte.b	%11111111
    595  fa14		       ff		      .byte.b	%11111111
    596  fa15		       ff		      .byte.b	%11111111
    597  fa16		       ff		      .byte.b	%11111111
    598  fa17		       ff		      .byte.b	%11111111
    599  fa18		       ff		      .byte.b	%11111111
    600  fa19		       7f		      .byte.b	%01111111
    601  fa1a		       6a		      .byte.b	%01101010
    602  fa1b		       08		      .byte.b	%00001000
    603  fa1c		       0c		      .byte.b	%00001100
    604  fa1d		       04		      .byte.b	%00000100
    605  fa1e
    606  fa1e		       46		      .byte.b	$46
    607  fa1f		       00		      .byte.b	0
    608  fa20
    609  fa20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  fa20							; 2 - peach
    611  fa20
    612  fa20		       3c		      .byte.b	%00111100
    613  fa21		       6e		      .byte.b	%01101110
    614  fa22		       6e		      .byte.b	%01101110
    615  fa23		       df		      .byte.b	%11011111
    616  fa24		       df		      .byte.b	%11011111
    617  fa25		       bf		      .byte.b	%10111111
    618  fa26		       bf		      .byte.b	%10111111
    619  fa27		       bf		      .byte.b	%10111111
    620  fa28		       de		      .byte.b	%11011110
    621  fa29		       5e		      .byte.b	%01011110
    622  fa2a		       6c		      .byte.b	%01101100
    623  fa2b		       18		      .byte.b	%00011000
    624  fa2c		       10		      .byte.b	%00010000
    625  fa2d		       30		      .byte.b	%00110000
    626  fa2e
    627  fa2e		       3a		      .byte.b	$3A
    628  fa2f		       00		      .byte.b	0
    629  fa30
    630  fa30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  fa30							; 3 - banana
    632  fa30
    633  fa30		       38		      .byte.b	%00111000
    634  fa31		       7c		      .byte.b	%01111100
    635  fa32		       fe		      .byte.b	%11111110
    636  fa33		       fe		      .byte.b	%11111110
    637  fa34		       ff		      .byte.b	%11111111
    638  fa35		       ff		      .byte.b	%11111111
    639  fa36		       8f		      .byte.b	%10001111
    640  fa37		       07		      .byte.b	%00000111
    641  fa38		       07		      .byte.b	%00000111
    642  fa39		       03		      .byte.b	%00000011
    643  fa3a		       03		      .byte.b	%00000011
    644  fa3b		       02		      .byte.b	%00000010
    645  fa3c		       06		      .byte.b	%00000110
    646  fa3d		       06		      .byte.b	%00000110
    647  fa3e
    648  fa3e		       1e		      .byte.b	$1E
    649  fa3f		       00		      .byte.b	0
    650  fa40
    651  fa40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  fa40							; 4 - pear
    653  fa40
    654  fa40		       38		      .byte.b	%00111000
    655  fa41		       7c		      .byte.b	%01111100
    656  fa42		       fe		      .byte.b	%11111110
    657  fa43		       fe		      .byte.b	%11111110
    658  fa44		       fe		      .byte.b	%11111110
    659  fa45		       fe		      .byte.b	%11111110
    660  fa46		       7c		      .byte.b	%01111100
    661  fa47		       7c		      .byte.b	%01111100
    662  fa48		       38		      .byte.b	%00111000
    663  fa49		       38		      .byte.b	%00111000
    664  fa4a		       30		      .byte.b	%00110000
    665  fa4b		       10		      .byte.b	%00010000
    666  fa4c		       18		      .byte.b	%00011000
    667  fa4d		       08		      .byte.b	%00001000
    668  fa4e
    669  fa4e		       cc		      .byte.b	$CC
    670  fa4f		       00		      .byte.b	0
    671  fa50
    672  fa50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  fa50							; 5 - plum
    674  fa50
    675  fa50		       38		      .byte.b	%00111000
    676  fa51		       6c		      .byte.b	%01101100
    677  fa52		       6e		      .byte.b	%01101110
    678  fa53		       de		      .byte.b	%11011110
    679  fa54		       df		      .byte.b	%11011111
    680  fa55		       bf		      .byte.b	%10111111
    681  fa56		       bf		      .byte.b	%10111111
    682  fa57		       bf		      .byte.b	%10111111
    683  fa58		       de		      .byte.b	%11011110
    684  fa59		       de		      .byte.b	%11011110
    685  fa5a		       5e		      .byte.b	%01011110
    686  fa5b		       3c		      .byte.b	%00111100
    687  fa5c		       20		      .byte.b	%00100000
    688  fa5d		       60		      .byte.b	%01100000
    689  fa5e
    690  fa5e		       88		      .byte.b	$88
    691  fa5f		       00		      .byte.b	0
    692  fa60
    693  fa60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  fa60							; 6 - grapes
    695  fa60
    696  fa60		       18		      .byte.b	%00011000
    697  fa61		       08		      .byte.b	%00001000
    698  fa62		       36		      .byte.b	%00110110
    699  fa63		       12		      .byte.b	%00010010
    700  fa64		       6c		      .byte.b	%01101100
    701  fa65		       24		      .byte.b	%00100100
    702  fa66		       db		      .byte.b	%11011011
    703  fa67		       49		      .byte.b	%01001001
    704  fa68		       36		      .byte.b	%00110110
    705  fa69		       12		      .byte.b	%00010010
    706  fa6a		       6c		      .byte.b	%01101100
    707  fa6b		       34		      .byte.b	%00110100
    708  fa6c		       10		      .byte.b	%00010000
    709  fa6d		       18		      .byte.b	%00011000
    710  fa6e
    711  fa6e		       64		      .byte.b	$64
    712  fa6f		       00		      .byte.b	0
    713  fa70
    714  fa70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  fa70							; 7 - broccoli
    716  fa70
    717  fa70		       00		      .byte.b	%00000000
    718  fa71		       00		      .byte.b	%00000000
    719  fa72		       18		      .byte.b	%00011000
    720  fa73		       18		      .byte.b	%00011000
    721  fa74		       3e		      .byte.b	%00111110
    722  fa75		       2a		      .byte.b	%00101010
    723  fa76		       ea		      .byte.b	%11101010
    724  fa77		       df		      .byte.b	%11011111
    725  fa78		       ff		      .byte.b	%11111111
    726  fa79		       ff		      .byte.b	%11111111
    727  fa7a		       7e		      .byte.b	%01111110
    728  fa7b		       18		      .byte.b	%00011000
    729  fa7c		       00		      .byte.b	%00000000
    730  fa7d		       00		      .byte.b	%00000000
    731  fa7e
    732  fa7e		       c6		      .byte.b	$C6
    733  fa7f		       00		      .byte.b	0
    734  fa80
    735  fa80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  fa80							; 8 - cabbage
    737  fa80
    738  fa80		       18		      .byte.b	%00011000
    739  fa81		       76		      .byte.b	%01110110
    740  fa82		       76		      .byte.b	%01110110
    741  fa83		       7a		      .byte.b	%01111010
    742  fa84		       f9		      .byte.b	%11111001
    743  fa85		       fb		      .byte.b	%11111011
    744  fa86		       ed		      .byte.b	%11101101
    745  fa87		       db		      .byte.b	%11011011
    746  fa88		       fb		      .byte.b	%11111011
    747  fa89		       e9		      .byte.b	%11101001
    748  fa8a		       56		      .byte.b	%01010110
    749  fa8b		       76		      .byte.b	%01110110
    750  fa8c		       6e		      .byte.b	%01101110
    751  fa8d		       18		      .byte.b	%00011000
    752  fa8e
    753  fa8e		       da		      .byte.b	$DA
    754  fa8f		       00		      .byte.b	0
    755  fa90
    756  fa90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  fa90							; 9 - celery
    758  fa90
    759  fa90		       c0		      .byte.b	%11000000
    760  fa91		       e0		      .byte.b	%11100000
    761  fa92		       70		      .byte.b	%01110000
    762  fa93		       30		      .byte.b	%00110000
    763  fa94		       18		      .byte.b	%00011000
    764  fa95		       18		      .byte.b	%00011000
    765  fa96		       0c		      .byte.b	%00001100
    766  fa97		       0c		      .byte.b	%00001100
    767  fa98		       0e		      .byte.b	%00001110
    768  fa99		       06		      .byte.b	%00000110
    769  fa9a		       0d		      .byte.b	%00001101
    770  fa9b		       0b		      .byte.b	%00001011
    771  fa9c		       0d		      .byte.b	%00001101
    772  fa9d		       06		      .byte.b	%00000110
    773  fa9e
    774  fa9e		       d6		      .byte.b	$D6
    775  fa9f		       00		      .byte.b	0
    776  faa0
    777  faa0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  faa0							; A - green pepper
    779  faa0
    780  faa0		       6c		      .byte.b	%01101100
    781  faa1		       6c		      .byte.b	%01101100
    782  faa2		       fe		      .byte.b	%11111110
    783  faa3		       fe		      .byte.b	%11111110
    784  faa4		       f6		      .byte.b	%11110110
    785  faa5		       f6		      .byte.b	%11110110
    786  faa6		       f6		      .byte.b	%11110110
    787  faa7		       f6		      .byte.b	%11110110
    788  faa8		       f6		      .byte.b	%11110110
    789  faa9		       ec		      .byte.b	%11101100
    790  faaa		       7c		      .byte.b	%01111100
    791  faab		       10		      .byte.b	%00010000
    792  faac		       18		      .byte.b	%00011000
    793  faad		       08		      .byte.b	%00001000
    794  faae
    795  faae		       c8		      .byte.b	$C8
    796  faaf		       00		      .byte.b	0
    797  fab0
    798  fab0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  fab0							; B - potato
    800  fab0
    801  fab0		       00		      .byte.b	%00000000
    802  fab1		       00		      .byte.b	%00000000
    803  fab2		       00		      .byte.b	%00000000
    804  fab3		       1c		      .byte.b	%00011100
    805  fab4		       7e		      .byte.b	%01111110
    806  fab5		       ff		      .byte.b	%11111111
    807  fab6		       ff		      .byte.b	%11111111
    808  fab7		       ef		      .byte.b	%11101111
    809  fab8		       f6		      .byte.b	%11110110
    810  fab9		       78		      .byte.b	%01111000
    811  faba		       30		      .byte.b	%00110000
    812  fabb		       00		      .byte.b	%00000000
    813  fabc		       00		      .byte.b	%00000000
    814  fabd		       00		      .byte.b	%00000000
    815  fabe
    816  fabe		       f6		      .byte.b	$F6
    817  fabf		       00		      .byte.b	0
    818  fac0
    819  fac0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  fac0							; C - mushroom
    821  fac0
    822  fac0		       00		      .byte.b	%00000000
    823  fac1		       18		      .byte.b	%00011000
    824  fac2		       18		      .byte.b	%00011000
    825  fac3		       18		      .byte.b	%00011000
    826  fac4		       18		      .byte.b	%00011000
    827  fac5		       99		      .byte.b	%10011001
    828  fac6		       db		      .byte.b	%11011011
    829  fac7		       ff		      .byte.b	%11111111
    830  fac8		       ff		      .byte.b	%11111111
    831  fac9		       ff		      .byte.b	%11111111
    832  faca		       7e		      .byte.b	%01111110
    833  facb		       7e		      .byte.b	%01111110
    834  facc		       18		      .byte.b	%00011000
    835  facd		       00		      .byte.b	%00000000
    836  face
    837  face		       08		      .byte.b	$08
    838  facf		       00		      .byte.b	0
    839  fad0
    840  fad0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  fad0							; D - key
    842  fad0
    843  fad0		       10		      .byte.b	%00010000
    844  fad1		       1e		      .byte.b	%00011110
    845  fad2		       1e		      .byte.b	%00011110
    846  fad3		       18		      .byte.b	%00011000
    847  fad4		       1e		      .byte.b	%00011110
    848  fad5		       1e		      .byte.b	%00011110
    849  fad6		       10		      .byte.b	%00010000
    850  fad7		       10		      .byte.b	%00010000
    851  fad8		       10		      .byte.b	%00010000
    852  fad9		       10		      .byte.b	%00010000
    853  fada		       38		      .byte.b	%00111000
    854  fadb		       6c		      .byte.b	%01101100
    855  fadc		       6c		      .byte.b	%01101100
    856  fadd		       38		      .byte.b	%00111000
    857  fade
    858  fade		       2c		      .byte.b	$2C
    859  fadf		       00		      .byte.b	0
    860  fae0
    861  fae0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  fae0							; E - ring
    863  fae0
    864  fae0		       00		      .byte.b	%00000000
    865  fae1		       18		      .byte.b	%00011000
    866  fae2		       3c		      .byte.b	%00111100
    867  fae3		       66		      .byte.b	%01100110
    868  fae4		       42		      .byte.b	%01000010
    869  fae5		       42		      .byte.b	%01000010
    870  fae6		       42		      .byte.b	%01000010
    871  fae7		       66		      .byte.b	%01100110
    872  fae8		       3c		      .byte.b	%00111100
    873  fae9		       18		      .byte.b	%00011000
    874  faea		       18		      .byte.b	%00011000
    875  faeb		       2c		      .byte.b	%00101100
    876  faec		       18		      .byte.b	%00011000
    877  faed		       00		      .byte.b	%00000000
    878  faee
    879  faee		       2c		      .byte.b	$2C
    880  faef		       00		      .byte.b	0
    881  faf0
    882  faf0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  faf0							; F - heart
    884  faf0
    885  faf0		       00		      .byte.b	%00000000
    886  faf1		       18		      .byte.b	%00011000
    887  faf2		       18		      .byte.b	%00011000
    888  faf3		       3c		      .byte.b	%00111100
    889  faf4		       3c		      .byte.b	%00111100
    890  faf5		       7e		      .byte.b	%01111110
    891  faf6		       7e		      .byte.b	%01111110
    892  faf7		       ff		      .byte.b	%11111111
    893  faf8		       ff		      .byte.b	%11111111
    894  faf9		       ff		      .byte.b	%11111111
    895  fafa		       e7		      .byte.b	%11100111
    896  fafb		       e7		      .byte.b	%11100111
    897  fafc		       42		      .byte.b	%01000010
    898  fafd		       00		      .byte.b	%00000000
    899  fafe
    900  fafe		       4a		      .byte.b	$4A
    901  faff		       00		      .byte.b	0
    902  fb00
    903  fb00				   RainbowColors
    904  fb00
    905  fb00		       64		      .byte.b	$64
    906  fb01		       88		      .byte.b	$88
    907  fb02		       c8		      .byte.b	$C8
    908  fb03		       1e		      .byte.b	$1E
    909  fb04		       28		      .byte.b	$28
    910  fb05		       44		      .byte.b	$44
    911  fb06
    912  fb06		       00		      .byte.b	0
    913  fb07
    914  fb07				   CatTartGfx
    915  fb07
    916  fb07		       00		      .byte.b	%00000000
    917  fb08		       00		      .byte.b	%00000000
    918  fb09		       e0		      .byte.b	%11100000
    919  fb0a		       c0		      .byte.b	%11000000
    920  fb0b		       c0		      .byte.b	%11000000
    921  fb0c		       c0		      .byte.b	%11000000
    922  fb0d		       c0		      .byte.b	%11000000
    923  fb0e		       c0		      .byte.b	%11000000
    924  fb0f		       c0		      .byte.b	%11000000
    925  fb10		       e0		      .byte.b	%11100000
    926  fb11		       e0		      .byte.b	%11100000
    927  fb12		       e0		      .byte.b	%11100000
    928  fb13		       e0		      .byte.b	%11100000
    929  fb14		       e0		      .byte.b	%11100000
------- FILE main.asm
     83  fb15
     84  fb15
     85  fb15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  fb15							; End of ROM
     87  fb15							;
     88  fb15							; Define the end of the cartridge
     89  fb15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  fb15
     91  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
     92  fffa		       00 f0		      .WORD.w	SystemClear	; NMI
     93  fffc		       00 f0		      .WORD.w	SystemClear	; RESET
     94  fffe		       00 f0		      .WORD.w	SystemClear	; IRQ
