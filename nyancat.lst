------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 12-15-2017 Version 2.5
     12  2000 ????						;
     13  2000 ????						; Optimize and improve code
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 02	   COL_SCORE  equ	$02
     78  0000 ????	       00 0e	   COL_SCOREBOARD equ	$0E
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 00	   COL_LINES  equ	COL_BACKGROUND
     81  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     82  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     83  0000 ????
     84  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     86  0000 ????
     87  0000 ????	       00 00	   LUM_0      equ	$00
     88  0000 ????	       00 02	   LUM_2      equ	$02
     89  0000 ????	       00 04	   LUM_4      equ	$04
     90  0000 ????	       00 06	   LUM_6      equ	$06
     91  0000 ????	       00 08	   LUM_8      equ	$08
     92  0000 ????	       00 0a	   LUM_A      equ	$0A
     93  0000 ????	       00 0c	   LUM_C      equ	$0C
     94  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00fe ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar and health display
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of 5 values to be written to the playfield
     39 U008e							; registers when drawing progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for full part of progress bar
     42 U008f
     43 U008f		       00	   Health     ds	1	; amount of health
     44 U0090							; 0=full 8=medium 16=low 24=empty
     45 U0090
     46 U0090							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47 U0090							; Pointers
     48 U0090
     49 U0090				   FoodGfxPtr1		; pointer for 1st food item's graphics
     50 U0090				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     51 U0090
     52 U0090		       00 00		      ds	2
     53 U0092
     54 U0092				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     55 U0092				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     56 U0092
     57 U0092		       00 00		      ds	2
     58 U0094
     59 U0094				   TartGfxPtr		; pointer for the tart graphics
     60 U0094				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     61 U0094
     62 U0094		       00 00		      ds	2
     63 U0096
     64 U0096				   CatGfxPtr		; pointer for the cat face/paws graphics
     65 U0096				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     66 U0096
     67 U0096		       00 00		      ds	2
     68 U0098
     69 U0098				   HthGfxLPtr		; pointer for left half of the health graphics
     70 U0098				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     71 U0098
     72 U0098		       00 00		      ds	2
     73 U009a
     74 U009a				   HthGfxRPtr		; pointer for right half of the health graphics
     75 U009a				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     76 U009a
     77 U009a		       00 00		      ds	2
     78 U009c
     79 U009c				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     80 U009c
     81 U009c		       00 00		      ds	2
     82 U009e
     83 U009e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84 U009e							; Variables used when drawing the cat
     85 U009e
     86 U009e		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     87 U009f
     88 U009f				   Rainbow		; PF0 value for the rainbow graphics
     89 U009f				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     90 U009f		       00		      ds	1
     91 U00a0
     92 U00a0				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     93 U00a0				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
     94 U00a0		       00		      ds	1
     95 U00a1
     96 U00a1		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     97 U00a2		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     98 U00a3
     99 U00a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    100 U00a3							; Variables used for the food items
    101 U00a3
    102 U00a3		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    103 U00aa		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
    104 U00b1							; the left items, last 7 bytes are for the right items.
    105 U00b1							; Hi nybble holds the value (0-15) of the item to draw.
    106 U00b1							; Lo nybble holds the value of next frame's item.
    107 U00b1							; All nybbles are swapped at the start of each frame.
    108 U00b1
    109 U00b1		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
    110 U00b8
    111 U00b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    112 U00b8							; Variables for the throbbing lines' colors
    113 U00b8
    114 U00b8		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    115 U00bb							; throbbing lines. The first color is darkest,
    116 U00bb							; the last is brightest.
    117 U00bb
    118 U00bb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119 U00bb							; Temporary variables which cannot be shared with stack space
    120 U00bb
    121 U00bb		       00	   TempLoop   ds	1
    122 U00bc		       00	   Temp1      ds	1
    123 U00bd		       00	   Temp2      ds	1
    124 U00be
    125 U00be							; 53 of 79 non-temporary RAM bytes used (22 left)
    126 U00be							; last 49 bytes of RAM are used for stack space in the scoreboard display
    127 U00be
    128 U00be							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    129 U00be							; Temporary variables which can be shared with stack space
    130 U00be
    131 U00be		       00	   Temp       ds	1
    132 U00bf
    133 U00bf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    134 U00bf							; Other variables which can be shared with stack space
    135 U00bf
    136 U00bf		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    137 U00c0
    138 U00c0		       00	   FoodColor1 ds	1	; color of the 1st food item
    139 U00c1		       00	   FoodColor2 ds	1	; color of the 2nd food item
    140 U00c2
    141 U00c2							; 7 of 15 available temporary RAM bytes used (8 left)
    142 U00c2							; last 34 bytes of RAM are used to hold the rainbow color graphics
    143 U00c2
    144 U00dc					      ORG	$100 - 36
    145 U00dc
    146 U00dc		       00 00 00 00*RamBowColors ds	34
------- FILE main.asm
     34 U00fe
     35 U00fe							; Ensure that the code is placed in the proper place in the binary
     36 U00fe
     37  2000 ????				      SEG	CODE
     38  1000					      ORG	$1000	; 4K ROM
     39  1000
     40  1000
     41  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  1000							; Full System Clear
     43  1000							;
     44  1000							; Clear all system registers and RAM at startup
     45  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  1000
     47  1000				   SystemClear
     48  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     50  100b
     51  100b
     52  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  100b							; Game Logic
     54  100b							;
     55  100b							; Do the overscan, vertical sync, and vertical blanking,
     56  100b							; along with any game logic
     57  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 be		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 be		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 be		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 be		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 be		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 be		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 89		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8a		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8b		      sta	ProgressBar+2	; 34
     30  1069		       85 8c		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 8d		      sta	ProgressBar+4	; 42
     33  106f
     34  106f		       20 9b 14 	      jsr	Sleep12
      0  1072					      SLEEP	7
      1  1072				   .CYCLES    SET	7
      2  1072
      3  1072				  -	      IF	.CYCLES < 2
      4  1072				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1072				  -	      ERR
      6  1072					      ENDIF
      7  1072
      8  1072					      IF	.CYCLES & 1
      9  1072					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1072		       04 00		      nop	0
     11  1074				  -	      ELSE
     12  1074				  -	      bit	VSYNC
     13  1074					      ENDIF
     14  1074				   .CYCLES    SET	.CYCLES - 3
     15  1074					      ENDIF
     16  1074
     17  1074					      REPEAT	.CYCLES / 2
     18  1074		       ea		      nop
     17  1074					      REPEND
     18  1075		       ea		      nop
     19  1076					      REPEND
     36  1076
     37  1076		       85 12		      sta	RESM0	; 64 - set position for left side of level counter digit
     38  1078
     39  1078		       20 9b 14 	      jsr	Sleep12
     40  107b		       20 9b 14 	      jsr	Sleep12
     41  107e		       20 9b 14 	      jsr	Sleep12
     42  1081		       20 9b 14 	      jsr	Sleep12
     43  1084		       20 9b 14 	      jsr	Sleep12
     44  1087		       20 9b 14 	      jsr	Sleep12	; 60
     45  108a
     46  108a		       85 14		      sta	RESBL	; 63
     47  108c		       85 13		      sta	RESM1	; 66
     48  108e
     49  108e		       85 02		      sta	WSYNC
     50  1090		       85 2a		      sta	HMOVE
     51  1092
     52  1092
     53  1092
     54  1092							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55  1092							; Load Scoreboard
     56  1092							;
     57  1092							; Get graphics data for the scoreboard and push it onto the stack
     58  1092							;
     59  1092							; Takes 535 cycles to complete (7 full scanlines + 3 cycles)
     60  1092							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     61  1092
     62  1092					      SUBROUTINE
     63  1092
     64  1092							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  1092							; Prepare pointer for level digit graphics - 21 cycles
     66  1092
     67  1092		       a2 18		      ldx	#>LevelGfx	; 2
     68  1094		       86 91		      stx	LvlLoadPtr+1	; 3 - set MSB of level digit graphics pointer
     69  1096
     70  1096		       a5 87		      lda	BCDLevel	; 3
     71  1098
     72  1098		       29 0f		      and	#$0F	; 2
     73  109a
     74  109a		       0a		      asl		; 2
     75  109b		       0a		      asl		; 2
     76  109c		       0a		      asl		; 2
     77  109d
     78  109d		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
     79  109f		       85 90		      sta	LvlLoadPtr	; 3 - set LSB of level digit graphics pointer
     80  10a1
     81  10a1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  10a1							; Prepare one pointer MSB and multiple LSBs for score digit graphics - 86 cycles
     83  10a1
     84  10a1		       86 93		      stx	ScrLoadPtr0+1	; 3 - set MSB of score digit graphics pointer2
     85  10a3		       86 95		      stx	ScrLoadPtr1+1	; 3
     86  10a5		       86 97		      stx	ScrLoadPtr2+1	; 3
     87  10a7		       86 99		      stx	ScrLoadPtr3+1	; 3
     88  10a9		       86 9b		      stx	ScrLoadPtr4+1	; 3
     89  10ab		       86 9d		      stx	ScrLoadPtr5+1	; 3
     90  10ad
     91  10ad		       a7 81		      lax	BCDScore+0	; 3
     92  10af		       29 f0		      and	#$F0	; 2
     93  10b1		       4a		      lsr		; 2
     94  10b2		       85 92		      sta	ScrLoadPtr0	; 3 - set LSB for digit 0
     95  10b4		       8a		      txa		; 2
     96  10b5		       29 0f		      and	#$0F	; 2
     97  10b7		       0a		      asl		; 2
     98  10b8		       0a		      asl		; 2
     99  10b9		       0a		      asl		; 2
    100  10ba		       85 94		      sta	ScrLoadPtr1	; 3 - set LSB for digit 1
    101  10bc
    102  10bc		       a7 82		      lax	BCDScore+1	; 3
    103  10be		       29 f0		      and	#$F0	; 2
    104  10c0		       4a		      lsr		; 2
    105  10c1		       85 96		      sta	ScrLoadPtr2	; 3 - set LSB for digit 2
    106  10c3		       8a		      txa		; 2
    107  10c4		       29 0f		      and	#$0F	; 2
    108  10c6		       0a		      asl		; 2
    109  10c7		       0a		      asl		; 2
    110  10c8		       0a		      asl		; 2
    111  10c9		       85 98		      sta	ScrLoadPtr3	; 2 - set LSB for digit 3
    112  10cb
    113  10cb		       a7 83		      lax	BCDScore+2	; 3
    114  10cd		       29 f0		      and	#$F0	; 2
    115  10cf		       4a		      lsr		; 2
    116  10d0		       85 9a		      sta	ScrLoadPtr4	; 3 - set LSB for digit 4
    117  10d2		       8a		      txa		; 2
    118  10d3		       29 0f		      and	#$0F	; 2
    119  10d5		       0a		      asl		; 2
    120  10d6		       0a		      asl		; 2
    121  10d7		       0a		      asl		; 2
    122  10d8		       85 9c		      sta	ScrLoadPtr5	; 3 - set LSB for digit 5
    123  10da
    124  10da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    125  10da							; Load the stack with the graphics for the scoreboard - 428 cycles
    126  10da
    127  10da		       a0 06		      ldy	#6	; 2
    128  10dc
    129  10dc				   .LoadScoreboard
    130  10dc
    131  10dc		       b1 90		      lda	(LvlLoadPtr),y	; 5
    132  10de		       48		      pha		; 3
    133  10df
    134  10df		       b1 9c		      lda	(ScrLoadPtr5),y	; 5
    135  10e1		       48		      pha		; 3
    136  10e2
    137  10e2		       b1 9a		      lda	(ScrLoadPtr4),y	; 5
    138  10e4		       48		      pha		; 3
    139  10e5
    140  10e5		       b1 98		      lda	(ScrLoadPtr3),y	; 5
    141  10e7		       48		      pha		; 3
    142  10e8
    143  10e8		       b1 96		      lda	(ScrLoadPtr2),y	; 5
    144  10ea		       48		      pha		; 3
    145  10eb
    146  10eb		       b1 94		      lda	(ScrLoadPtr1),y	; 5
    147  10ed		       48		      pha		; 3
    148  10ee
    149  10ee		       b1 92		      lda	(ScrLoadPtr0),y	; 5
    150  10f0		       48		      pha		; 3
    151  10f1
    152  10f1		       88		      dey		; 2
    153  10f2		       10 e8		      bpl	.LoadScoreboard	; 2/3
    154  10f4
    155  10f4
    156  10f4
    157  10f4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    158  10f4							; Load RAM for progress bar display (28-53 cycles)
    159  10f4
    160  10f4		       a5 88		      lda	Progress	; 3 - get amount of progress
    161  10f6
    162  10f6							; The level progress bar uses the following playfield bits:
    163  10f6							; (note that PF0 and PF2 are NOT reversed in this diagram)
    164  10f6							;
    165  10f6							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    166  10f6							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    167  10f6							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    168  10f6							;
    169  10f6							; When the progress bar is empty, every bit labeled "X" above should be
    170  10f6							; set (1), and when it is full, every "X" bit should be cleared (0).
    171  10f6							; The bits labeled "o" must ALWAYS be cleared.
    172  10f6							;
    173  10f6							; The leftmost playfield value (the 1st PF0) will be calculated first,
    174  10f6							; and then each playfield value to the right until the 2nd PF1
    175  10f6							; will be calculated.
    176  10f6
    177  10f6		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    178  10f8
    179  10f8		       38		      sec		; 2
    180  10f9		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    181  10fb		       30 1e		      bmi	.Underflow1	; 2/3
    182  10fd		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    183  10ff
    184  10ff		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    185  1101		       30 23		      bmi	.Underflow2	; 2/3
    186  1103		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    187  1105
    188  1105		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    189  1107		       30 28		      bmi	.Underflow3	; 2/3
    190  1109		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    191  110b
    192  110b		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    193  110d		       30 2d		      bmi	.Underflow4	; 2/3
    194  110f		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    195  1111
    196  1111		       aa		      tax		; 2
    197  1112		       bd 0e 19 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    198  1115		       0a		      asl		; 2
    199  1116		       85 8d		      sta	ProgressBar+4	; 3
    200  1118		       4c 44 11 	      jmp	.Finish	; 3
    201  111b
    202  111b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    203  111b				   .Underflow1		; for 1st PF0
    204  111b
    205  111b		       69 03		      adc	#3	; 3 - add back the 3
    206  111d		       aa		      tax		; 2
    207  111e		       bd 1b 19 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    208  1121		       85 89		      sta	ProgressBar	; 3
    209  1123		       4c 44 11 	      jmp	.Finish	; 3
    210  1126
    211  1126							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    212  1126				   .Underflow2		; for 1st PF1
    213  1126
    214  1126		       69 08		      adc	#8	; 3 - add back the 8
    215  1128		       aa		      tax		; 2
    216  1129		       bd 0d 19 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    217  112c		       85 8a		      sta	ProgressBar+1	; 3
    218  112e		       4c 44 11 	      jmp	.Finish	; 3
    219  1131
    220  1131							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    221  1131				   .Underflow3		; for PF2
    222  1131
    223  1131		       69 08		      adc	#8	; 3 - add back the 8
    224  1133		       aa		      tax		; 2
    225  1134		       bd 16 19 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    226  1137		       85 8b		      sta	ProgressBar+2	; 3
    227  1139		       4c 44 11 	      jmp	.Finish	; 3
    228  113c
    229  113c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    230  113c				   .Underflow4		; for 2nd PF0
    231  113c
    232  113c		       69 04		      adc	#4	; 3 - add back the 4
    233  113e		       aa		      tax		; 2
    234  113f		       bd 1a 19 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    235  1142		       85 8c		      sta	ProgressBar+3	; 3
    236  1144
    237  1144							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1144				   .Finish
    239  1144
    240  1144		       85 02		      sta	WSYNC
    241  1146		       85 2b		      sta	HMCLR
    242  1148
    243  1148							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    244  1148							; Prepare Health Display
    245  1148							;
    246  1148							; Set the pointers for the health graphics
    247  1148							;
    248  1148							; Takes 28 cycles to complete
    249  1148							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    250  1148
    251  1148		       18		      clc		; 2
    252  1149
    253  1149		       a9 bd		      lda	#<HealthLeftGfx	; 2
    254  114b		       65 8f		      adc	Health	; 3
    255  114d		       85 98		      sta	HthGfxLPtr	; 3
    256  114f		       a9 18		      lda	#>HealthLeftGfx	; 2
    257  1151		       85 99		      sta	HthGfxLPtr+1	; 3
    258  1153
    259  1153		       a9 dd		      lda	#<HealthRightGfx	; 2
    260  1155		       65 8f		      adc	Health	; 3
    261  1157		       85 9a		      sta	HthGfxRPtr	; 3
    262  1159		       a9 18		      lda	#>HealthRightGfx	; 2
    263  115b		       85 9b		      sta	HthGfxRPtr+1	; 3
    264  115d
    265  115d
    266  115d
    267  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    268  115d							; Prepare for Throbbing Lines
    269  115d							;
    270  115d							; Set the offset value for the throbbing line graphics
    271  115d							;
    272  115d							; Takes 20 cycles to complete
    273  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    274  115d
    275  115d		       a5 80		      lda	Frame	; 3 - get the current frame number
    276  115f		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    277  1161		       4a		      lsr		; 2
    278  1162		       4a		      lsr		; 2 - shift to get a value from 0-7
    279  1163		       85 be		      sta	Temp	; 3
    280  1165		       0a		      asl		; 2 - carry flag will always be clear after this
    281  1166		       65 be		      adc	Temp	; 3 - multiply by 3
    282  1168		       a8		      tay
    283  1169		       b9 a0 18 	      lda	LineThrobGfx+0,y
    284  116c		       85 b8		      sta	ThrobColor+0
    285  116e		       b9 a1 18 	      lda	LineThrobGfx+1,y
    286  1171		       85 b9		      sta	ThrobColor+1
    287  1173		       b9 a2 18 	      lda	LineThrobGfx+2,y
    288  1176		       85 ba		      sta	ThrobColor+2
    289  1178
    290  1178
    291  1178
    292  1178							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    293  1178							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    294  1178
    295  1178		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2
    296  117a
    297  117a		       85 04		      sta	NUSIZ0
    298  117c		       85 05		      sta	NUSIZ1
    299  117e
    300  117e		       85 25		      sta	VDELP0
    301  1180		       85 26		      sta	VDELP1
    302  1182
    303  1182		       a9 02		      lda	#COL_SCORE
    304  1184		       85 86		      sta	ScoreColor
    305  1186
    306  1186		       a5 86		      lda	ScoreColor
    307  1188		       85 06		      sta	COLUP0	; set color registers
    308  118a		       85 07		      sta	COLUP1
    309  118c		       85 08		      sta	COLUPF
    310  118e		       85 09		      sta	COLUBK
    311  1190
    312  1190
    313  1190
    314  1190							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    315  1190							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1190							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    317  1190
    318  1190		       a9 1a		      lda	#>FoodGfx
    319  1192		       85 91		      sta	FoodGfxPtr1+1
    320  1194		       85 93		      sta	FoodGfxPtr2+1
    321  1196
    322  1196		       a9 07		      lda	#<CatTartGfx
    323  1198		       85 94		      sta	TartGfxPtr
    324  119a		       a9 1b		      lda	#>CatTartGfx
    325  119c		       85 95		      sta	TartGfxPtr+1
    326  119e
    327  119e		       a9 10		      lda	#$10
    328  11a0		       85 a3		      sta	FoodItemL+0
    329  11a2		       a9 70		      lda	#$70
    330  11a4		       85 aa		      sta	FoodItemR+0
    331  11a6		       a9 20		      lda	#$20
    332  11a8		       85 a4		      sta	FoodItemL+1
    333  11aa		       a9 80		      lda	#$80
    334  11ac		       85 ab		      sta	FoodItemR+1
    335  11ae		       a9 30		      lda	#$30
    336  11b0		       85 a5		      sta	FoodItemL+2
    337  11b2		       a9 90		      lda	#$90
    338  11b4		       85 ac		      sta	FoodItemR+2
    339  11b6		       a9 40		      lda	#$40
    340  11b8		       85 a6		      sta	FoodItemL+3
    341  11ba		       a9 a0		      lda	#$A0
    342  11bc		       85 ad		      sta	FoodItemR+3
    343  11be		       a9 50		      lda	#$50
    344  11c0		       85 a7		      sta	FoodItemL+4
    345  11c2		       a9 b0		      lda	#$B0
    346  11c4		       85 ae		      sta	FoodItemR+4
    347  11c6		       a9 60		      lda	#$60
    348  11c8		       85 a8		      sta	FoodItemL+5
    349  11ca		       a9 c0		      lda	#$C0
    350  11cc		       85 af		      sta	FoodItemR+5
    351  11ce		       a9 d0		      lda	#$D0
    352  11d0		       85 a9		      sta	FoodItemL+6
    353  11d2		       a9 e0		      lda	#$E0
    354  11d4		       85 b0		      sta	FoodItemR+6
    355  11d6
    356  11d6		       a9 48		      lda	#<CatFaceGfx
    357  11d8		       85 96		      sta	CatGfxPtr
    358  11da		       a9 19		      lda	#>CatFaceGfx
    359  11dc		       85 97		      sta	CatGfxPtr+1
    360  11de
    361  11de		       c6 b1		      dec	FoodPosX
    362  11e0		       10 04		      bpl	.NoReset
    363  11e2		       a9 58		      lda	#88
    364  11e4		       85 b1		      sta	FoodPosX
    365  11e6				   .NoReset
    366  11e6
    367  11e6		       a5 b1		      lda	FoodPosX
    368  11e8		       38		      sec
    369  11e9
    370  11e9		       e9 29		      sbc	#41
    371  11eb		       b0 02		      bcs	.Rock1
    372  11ed		       69 59		      adc	#89
    373  11ef				   .Rock1
    374  11ef		       85 b2		      sta	FoodPosX+1
    375  11f1
    376  11f1		       e9 11		      sbc	#17
    377  11f3		       b0 02		      bcs	.Rock2
    378  11f5		       69 59		      adc	#89
    379  11f7				   .Rock2
    380  11f7		       85 b3		      sta	FoodPosX+2
    381  11f9
    382  11f9		       4a		      lsr
    383  11fa		       85 b4		      sta	FoodPosX+3
    384  11fc
    385  11fc		       e9 1d		      sbc	#29
    386  11fe		       b0 02		      bcs	.Rock4
    387  1200		       69 59		      adc	#89
    388  1202				   .Rock4
    389  1202		       85 b5		      sta	FoodPosX+4
    390  1204
    391  1204		       4a		      lsr
    392  1205		       85 b6		      sta	FoodPosX+5
    393  1207
    394  1207		       e9 39		      sbc	#57
    395  1209		       b0 02		      bcs	.Rock6
    396  120b		       69 59		      adc	#89
    397  120d				   .Rock6
    398  120d		       85 b7		      sta	FoodPosX+6
    399  120f
    400  120f		       a9 56		      lda	#$56
    401  1211		       85 8e		      sta	PgBarColor
    402  1213
    403  1213		       a5 80		      lda	Frame
    404  1215		       29 08		      and	#%00001000
    405  1217		       4a		      lsr
    406  1218		       4a		      lsr
    407  1219		       4a		      lsr
    408  121a		       a8		      tay
    409  121b		       b9 2e 19 	      lda	RainbowGfx,y
    410  121e		       85 9f		      sta	Rainbow
    411  1220
    412  1220
    413  1220
    414  1220							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    415  1220							; Prepare for Main Gameplay Kernel
    416  1220							;
    417  1220							; Figure out how many rows to draw before and after the two cat rows
    418  1220							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    419  1220
    420  1220		       a9 03		      lda	#3
    421  1222		       85 a1		      sta	PreCatRows
    422  1224		       a9 02		      lda	#2
    423  1226		       85 a2		      sta	PostCatRows
    424  1228
    425  1228
    426  1228
    427  1228							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    428  1228							; Finish Vertical Blanking
    429  1228							;
    430  1228							; Loop until the end of vertical blanking
    431  1228							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    432  1228
    433  1228				   VblankTimerLoop
    434  1228		       ad 84 02 	      lda	INTIM
    435  122b		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     62  122d
     63  122d
     64  122d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  122d							; Kernel
     66  122d							;
     67  122d							; Draw the screen
     68  122d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  122d
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  122d					      include	code/Kernel.asm
      1  122d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  122d							; Kernel
      3  122d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  122d
      5  122d		       a9 00		      lda	#0
      6  122f		       85 02		      sta	WSYNC
      7  1231		       85 01		      sta	VBLANK	; enable display
      8  1233
      9  1233							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  1233					      include	code/ScoreboardKernel.asm
      1  1233							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1233							; Scoreboard Display
      3  1233							;
      4  1233							; Draw the 6-digit score and level counter.
      5  1233							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1233
      7  1233					      SUBROUTINE
      8  1233
      9  1233		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  1235		       85 0a		      sta	CTRLPF
     11  1237
     12  1237		       a9 ff		      lda	#$FF
     13  1239		       85 0d		      sta	PF0
     14  123b
     15  123b		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  123d		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  123f		       85 0e		      sta	PF1	; display kernel loop.
     18  1241
     19  1241		       a0 04		      ldy	#4
     20  1243
     21  1243							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  1243				   ScoreTop		; draw border above scoreboard
     23  1243
     24  1243		       85 02		      sta	WSYNC
     25  1245
     26  1245		       a9 00		      lda	#0
     27  1247		       85 1b		      sta	GRP0
     28  1249		       85 1c		      sta	GRP1
     29  124b
     30  124b		       88		      dey
     31  124c		       d0 f5		      bne	ScoreTop
     32  124e
     33  124e		       a9 80		      lda	#$80
     34  1250		       85 0e		      sta	PF1
     35  1252
     36  1252		       a9 0e		      lda	#COL_SCOREBOARD
     37  1254		       85 09		      sta	COLUBK
     38  1256
     39  1256		       85 02		      sta	WSYNC
     40  1258		       85 02		      sta	WSYNC
     41  125a
      0  125a					      SLEEP	37
      1  125a				   .CYCLES    SET	37
      2  125a
      3  125a				  -	      IF	.CYCLES < 2
      4  125a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  125a				  -	      ERR
      6  125a					      ENDIF
      7  125a
      8  125a					      IF	.CYCLES & 1
      9  125a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  125a		       04 00		      nop	0
     11  125c				  -	      ELSE
     12  125c				  -	      bit	VSYNC
     13  125c					      ENDIF
     14  125c				   .CYCLES    SET	.CYCLES - 3
     15  125c					      ENDIF
     16  125c
     17  125c					      REPEAT	.CYCLES / 2
     18  125c		       ea		      nop
     17  125c					      REPEND
     18  125d		       ea		      nop
     17  125d					      REPEND
     18  125e		       ea		      nop
     17  125e					      REPEND
     18  125f		       ea		      nop
     17  125f					      REPEND
     18  1260		       ea		      nop
     17  1260					      REPEND
     18  1261		       ea		      nop
     17  1261					      REPEND
     18  1262		       ea		      nop
     17  1262					      REPEND
     18  1263		       ea		      nop
     17  1263					      REPEND
     18  1264		       ea		      nop
     17  1264					      REPEND
     18  1265		       ea		      nop
     17  1265					      REPEND
     18  1266		       ea		      nop
     17  1266					      REPEND
     18  1267		       ea		      nop
     17  1267					      REPEND
     18  1268		       ea		      nop
     17  1268					      REPEND
     18  1269		       ea		      nop
     17  1269					      REPEND
     18  126a		       ea		      nop
     17  126a					      REPEND
     18  126b		       ea		      nop
     17  126b					      REPEND
     18  126c		       ea		      nop
     19  126d					      REPEND
     43  126d
     44  126d		       a9 01		      lda	#$01
     45  126f		       85 85		      sta	BCDScoreAdd+1
     46  1271
     47  1271		       a9 14		      lda	#$14
     48  1273		       85 87		      sta	BCDLevel
     49  1275
     50  1275							; draw ball if level > 9
     51  1275
     52  1275		       a5 87		      lda	BCDLevel
     53  1277		       4a		      lsr
     54  1278		       4a		      lsr
     55  1279		       4a		      lsr
     56  127a		       aa		      tax
     57  127b
     58  127b		       68		      pla		; pull gfx for digit0
     59  127c		       86 1f		      stx	ENABL
     60  127e
     61  127e		       4c 1b 13 	      jmp	.EntrancePoint
     62  1281
     63  1300		       00 00 00 00*	      ALIGN	$100
     64  1300
     65  1300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66  1300				   .ScoreDigitLoop
     67  1300
     68  1300							; A contains gfx for digit3
     69  1300		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     70  1302
     71  1302							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     72  1302
     73  1302		       68		      pla		; 18 - pull gfx for digit3...
     74  1303		       a8		      tay		; 20 - ...and store in Y
     75  1304		       68		      pla		; 24 - pull gfx data for digit4...
     76  1305		       aa		      tax		; 26 - ...and store in X
     77  1306		       68		      pla		; 30 - pull gfx data for digit5 to A
     78  1307
     79  1307		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     80  1309		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     81  130b		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     82  130d		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     83  130f
     84  130f		       68		      pla		; 46 - pull gfx data for level counter
     85  1310		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     86  1312		       2a		      rol		; 51
     87  1313		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     88  1315		       6a		      ror		; 56
     89  1316		       6a		      ror		; 58
     90  1317		       6a		      ror		; 60
     91  1318		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     92  131a
     93  131a		       68		      pla		; 67 - pull gfx for digit0
     94  131b				   .EntrancePoint
     95  131b		       85 1b		      sta	GRP0	; 70 - digit0 -> [GRP0]
     96  131d
     97  131d		       68		      pla		; 74 - pull gfx for digit1
     98  131e		       8d 1c 00 	      sta.w	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
     99  1321							;	(use an extra cycle for timing reasons)
    100  1321
    101  1321		       68		      pla		; 06 - pull gfx for digit2
    102  1322
    103  1322							; On the final iteration of the loop, the stack will have wrapped
    104  1322							; and pulled from location $02 at this point.
    105  1322							; This happens to be the collision register CXP0FB.
    106  1322							; Bit-7 will always be set in this register,
    107  1322							; and bit-7 is always clear in the score graphics,
    108  1322							; so checking bit-7 of the data pulled is all that you need
    109  1322							; to determine when to terminate the loop.
    110  1322
    111  1322		       aa		      tax		; 08 - set flags according to pulled data
    112  1323
    113  1323		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
    114  1325
    115  1325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1325					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1325							; We are currently at cycle 37 in the current scanline.
      3  1325
      4  1325
      5  1325
      6  1325							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  1325							; Output 4 blank scanlines, while setting up the graphics objects.
      8  1325
      9  1325				   PreKernel
     10  1325
     11  1325		       a9 00		      lda	#0	; 12
     12  1327		       85 1d		      sta	ENAM0	; 15 - disable missiles
     13  1329		       85 1e		      sta	ENAM1	; 18
     14  132b		       85 1b		      sta	GRP0	; 21 - disable player graphics
     15  132d		       85 1c		      sta	GRP1	; 24
     16  132f		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
     17  1331		       85 26		      sta	VDELP1	; 30
     18  1333		       85 1f		      sta	ENABL	; 33 - disable ball
     19  1335		       8d bf 00 	      sta.w	CurrentRow	; 37
     20  1338
     21  1338
     22  1338							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  1338							; Clear the RAM for the rainbow colors - 127 cycles
     24  1338
     25  1338
     26  1338		       a2 fd		      ldx	#$FD
     27  133a		       9a		      txs
     28  133b
     29  133b		       a0 04		      ldy	#4
     30  133d				   .ClearRainbow
     31  133d		       48		      pha
     32  133e		       48		      pha
     33  133f		       48		      pha
     34  1340		       48		      pha
     35  1341		       48		      pha
     36  1342		       48		      pha
     37  1343		       48		      pha
     38  1344		       48		      pha
     39  1345
     40  1345		       88		      dey
     41  1346		       d0 f5		      bne	.ClearRainbow
     42  1348
     43  1348		       48		      pha
     44  1349		       48		      pha		; 12
     45  134a
     46  134a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  134a							; Load the rainbow colors into RAM - 65 cycles
     48  134a
     49  134a		       a2 e9		      ldx	#$FD - 20
     50  134c		       9a		      txs
     51  134d
     52  134d		       ad 05 1b 	      lda	RainbowColors+5
     53  1350		       48		      pha
     54  1351		       48		      pha
     55  1352		       ad 04 1b 	      lda	RainbowColors+4
     56  1355		       48		      pha
     57  1356		       48		      pha
     58  1357		       ad 03 1b 	      lda	RainbowColors+3
     59  135a		       48		      pha
     60  135b		       48		      pha
     61  135c		       ad 02 1b 	      lda	RainbowColors+2
     62  135f		       48		      pha
     63  1360		       48		      pha
     64  1361		       ad 01 1b 	      lda	RainbowColors+1
     65  1364		       48		      pha
     66  1365		       48		      pha
     67  1366		       ad 00 1b 	      lda	RainbowColors+0
     68  1369		       48		      pha
     69  136a		       48		      pha		; 00
     70  136b
     71  136b
     72  136b
     73  136b							; Player 0 is already aligned for drawing the cat's face.
     74  136b
     75  136b							; Align player 1 to draw the current frame's food items for the top row.
     76  136b
     77  136b							; food item can be placed anywhere from 0-88
     78  136b							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     79  136b
     80  136b		       a4 bf		      ldy	CurrentRow	; 03 - get the row we are drawing
     81  136d		       b9 b1 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     82  1370
     83  1370		       38		      sec		; 09
     84  1371				   .DivideLoop
     85  1371		       e9 0f		      sbc	#15	; 11
     86  1373		       b0 fc		      bcs	.DivideLoop	; 13
     87  1375
     88  1375		       49 07		      eor	#7	; 15
     89  1377		       69 01		      adc	#1	; 17
     90  1379		       0a		      asl		; 19
     91  137a		       0a		      asl		; 21
     92  137b		       0a		      asl		; 23
     93  137c
     94  137c		       85 11		      sta	RESP1	; 26
     95  137e
     96  137e
     97  137e
     98  137e		       0a		      asl		; 53
     99  137f		       85 21		      sta	HMP1	; 56
    100  1381
    101  1381		       a9 00		      lda	#ONE_COPY	; 58
    102  1383		       85 04		      sta	NUSIZ0	; 61
    103  1385		       a9 04		      lda	#TWO_WIDE	; 63
    104  1387		       85 05		      sta	NUSIZ1	; 66
    105  1389
    106  1389		       a9 80		      lda	#$80	; 68
    107  138b		       85 20		      sta	HMP0	; 71
    108  138d
    109  138d		       85 02		      sta	WSYNC
    110  138f
    111  138f		       a5 b9		      lda	ThrobColor+1	; 03
    112  1391		       85 09		      sta	COLUBK	; 06
    113  1393		       85 08		      sta	COLUPF	; 09
    114  1395
    115  1395
    116  1395
    117  1395
    118  1395		       a9 01		      lda	#PF_REFLECT	; 11
    119  1397		       85 0a		      sta	CTRLPF	; 14
    120  1399
    121  1399		       a5 9f		      lda	Rainbow	; 17
    122  139b		       85 0d		      sta	PF0	; 20
    123  139d
    124  139d		       a9 06		      lda	#COL_CAT_FACE	; 22
    125  139f		       85 06		      sta	COLUP0	; 25
    126  13a1
    127  13a1		       a5 a3		      lda	FoodItemL	; 28
    128  13a3		       29 f0		      and	#$F0	; 30
    129  13a5		       85 90		      sta	FoodGfxPtr1	; 33
    130  13a7		       aa		      tax		; 35
    131  13a8		       bd 0e 1a 	      lda	FoodGfx+14,x	; 39
    132  13ab		       85 c0		      sta	FoodColor1	; 42
    133  13ad
    134  13ad		       a5 aa		      lda	FoodItemR	; 45
    135  13af		       29 f0		      and	#$F0	; 47
    136  13b1		       85 92		      sta	FoodGfxPtr2	; 50
    137  13b3		       aa		      tax		; 52
    138  13b4		       bd 0e 1a 	      lda	FoodGfx+14,x	; 56
    139  13b7		       85 c1		      sta	FoodColor2	; 59
    140  13b9
    141  13b9		       a5 b1		      lda	FoodPosX	; 62
    142  13bb		       8d be 00 	      sta.w	Temp	; 66
    143  13be
    144  13be		       a2 ff		      ldx	#$FF	; 68
    145  13c0		       9a		      txs		; 70
    146  13c1
    147  13c1		       85 2a		      sta	HMOVE	; 73
    148  13c3
    149  13c3							; If any part of the cat needs to be drawn in the top row,
    150  13c3							; skip straight to CatRows.
    151  13c3
    152  13c3
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  13c3					      include	code/Gameplay Kernel/HiRows.asm
      1  13c3							; Draw all the rows above the cat's two rows
      2  13c3				   HiRows     SUBROUTINE
      3  13c3
      4  13c3		       85 02		      sta	WSYNC
      5  13c5
      6  13c5		       a5 b8		      lda	ThrobColor+0
      7  13c7		       85 09		      sta	COLUBK
      8  13c9		       85 08		      sta	COLUPF
      9  13cb
     10  13cb							; First, output a single-color line to draw the bottom of a "throb" line.
     11  13cb							; This will probably be a good time to prepare the pointers for the
     12  13cb							; food items' graphics, as well as loading the colors for the food items.
     13  13cb
     14  13cb							; After that, output 14 lines to draw a single row with food items,
     15  13cb							; but without drawing the cat. The food graphics will be updated every line,
     16  13cb							; but there will probably not be enough time to also update the food colors
     17  13cb							; every line throughout the kernel.
     18  13cb
     19  13cb		       20 75 14 	      jsr	DrawFoodRow	; 46
     20  13ce
     21  13ce		       85 02		      sta	WSYNC
     22  13d0
     23  13d0
     24  13d0							; Lastly, output four single-color lines to draw most of a "throb" line,
     25  13d0							; while setting the position of player 1 to draw the next set of food items.
     26  13d0
     27  13d0
     28  13d0		       a5 b8		      lda	ThrobColor+0
     29  13d2		       85 09		      sta	COLUBK
     30  13d4		       85 08		      sta	COLUPF
     31  13d6		       a9 00		      lda	#0
     32  13d8		       85 1b		      sta	GRP0
     33  13da		       85 1c		      sta	GRP1
     34  13dc		       85 02		      sta	WSYNC
     35  13de
     36  13de		       a5 b9		      lda	ThrobColor+1	; 03
     37  13e0		       85 09		      sta	COLUBK	; 06
     38  13e2		       85 08		      sta	COLUPF	; 09
     39  13e4
     40  13e4		       a4 bf		      ldy	CurrentRow	; 12 - get the row we are drawing
     41  13e6		       b9 b1 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     42  13e9
     43  13e9		       38		      sec		; 18
     44  13ea				   .DivideLoop
     45  13ea		       e9 0f		      sbc	#15	; 20
     46  13ec		       b0 fc		      bcs	.DivideLoop	; 22
     47  13ee
     48  13ee		       8d 11 00 	      sta.w	RESP1	; 26
     49  13f1
     50  13f1		       49 07		      eor	#7
     51  13f3		       69 01		      adc	#1
     52  13f5		       0a		      asl
     53  13f6		       0a		      asl
     54  13f7		       0a		      asl
     55  13f8		       0a		      asl
     56  13f9		       85 21		      sta	HMP1
     57  13fb
     58  13fb		       85 02		      sta	WSYNC
     59  13fd
     60  13fd		       a5 ba		      lda	ThrobColor+2	; 03
     61  13ff		       85 09		      sta	COLUBK	; 06
     62  1401		       85 08		      sta	COLUPF	; 09
     63  1403
     64  1403		       20 9b 14 	      jsr	Sleep12
     65  1406		       20 9b 14 	      jsr	Sleep12
     66  1409		       20 9b 14 	      jsr	Sleep12
     67  140c		       20 9b 14 	      jsr	Sleep12
     68  140f		       20 9b 14 	      jsr	Sleep12	; 69
     69  1412
     70  1412		       8d 2a 00 	      sta.w	HMOVE	; 73
     71  1415
     72  1415		       85 02		      sta	WSYNC
     73  1417
     74  1417		       a5 b9		      lda	ThrobColor+1
     75  1419		       85 09		      sta	COLUBK
     76  141b		       85 08		      sta	COLUPF
     77  141d
     78  141d		       a4 bf		      ldy	CurrentRow	; 11
     79  141f
     80  141f		       b9 a3 00 	      lda	FoodItemL,y	; 15
     81  1422		       29 f0		      and	#$F0	; 17
     82  1424		       85 90		      sta	FoodGfxPtr1	; 20
     83  1426		       aa		      tax		; 22
     84  1427		       bd 0e 1a 	      lda	FoodGfx+14,x	; 26
     85  142a		       85 c0		      sta	FoodColor1	; 29
     86  142c
     87  142c		       b9 aa 00 	      lda	FoodItemR,y	; 33
     88  142f		       29 f0		      and	#$F0	; 36
     89  1431		       85 92		      sta	FoodGfxPtr2	; 38
     90  1433		       aa		      tax		; 40
     91  1434		       bd 0e 1a 	      lda	FoodGfx+14,x	; 44
     92  1437		       85 c1		      sta	FoodColor2	; 47
     93  1439
     94  1439		       b9 b1 00 	      lda	FoodPosX,y	; 51
     95  143c		       85 be		      sta	Temp	; 54
     96  143e
     97  143e		       c6 a1		      dec	PreCatRows
     98  1440		       d0 81		      bne	HiRows
     99  1442
    100  1442		       85 02		      sta	WSYNC
    101  1444
      0  1444					      SLEEP	2
      1  1444				   .CYCLES    SET	2
      2  1444
      3  1444				  -	      IF	.CYCLES < 2
      4  1444				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1444				  -	      ERR
      6  1444					      ENDIF
      7  1444
      8  1444				  -	      IF	.CYCLES & 1
      9  1444				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1444				  -	      nop	0
     11  1444				  -	      ELSE
     12  1444				  -	      bit	VSYNC
     13  1444				  -	      ENDIF
     14  1444				  -.CYCLES    SET	.CYCLES - 3
     15  1444					      ENDIF
     16  1444
     17  1444					      REPEAT	.CYCLES / 2
     18  1444		       ea		      nop
     19  1445					      REPEND
    103  1445
    104  1445							; If this is not the last row before drawing the cat's rows,
    105  1445							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  1445					      include	code/Gameplay Kernel/CatRows.asm
      1  1445							; Draw the two rows that contain the cat.
      2  1445				   CatRows    SUBROUTINE
      3  1445
      4  1445							; Output a line to finish the bottom of a "throb" line, like in HiRows.
      5  1445							; If the cat is at the very top of the row, draw the top of the pop-tart.
      6  1445
      7  1445		       a5 b8		      lda	ThrobColor+0
      8  1447		       85 09		      sta	COLUBK
      9  1449		       85 08		      sta	COLUPF
     10  144b
     11  144b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12  144b							; Cat Row Kernel
     13  144b							;
     14  144b							; This is the subroutine that is used to draw the two gameplay kernel rows
     15  144b							; containing the cat. It does not draw the throbbing line between the two rows,
     16  144b							; it only draws a single, 14-scanline row with the cat and food items.
     17  144b							; This subroutine is called twice in the kernel, once for each of the two rows
     18  144b							; containing the cat.
     19  144b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     20  144b
     21  144b				   DrawCatRow
     22  144b
     23  144b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  144b
     25  144b		       a6 c1		      ldx	FoodColor2
     26  144d		       9a		      txs
     27  144e
     28  144e							; Then output the 14 lines to draw a single row. This will include drawing
     29  144e							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     30  144e							; All graphics will be updated every line.
     31  144e
      0  144e					      SLEEP	10
      1  144e				   .CYCLES    SET	10
      2  144e
      3  144e				  -	      IF	.CYCLES < 2
      4  144e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  144e				  -	      ERR
      6  144e					      ENDIF
      7  144e
      8  144e				  -	      IF	.CYCLES & 1
      9  144e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  144e				  -	      nop	0
     11  144e				  -	      ELSE
     12  144e				  -	      bit	VSYNC
     13  144e				  -	      ENDIF
     14  144e				  -.CYCLES    SET	.CYCLES - 3
     15  144e					      ENDIF
     16  144e
     17  144e					      REPEAT	.CYCLES / 2
     18  144e		       ea		      nop
     17  144e					      REPEND
     18  144f		       ea		      nop
     17  144f					      REPEND
     18  1450		       ea		      nop
     17  1450					      REPEND
     18  1451		       ea		      nop
     17  1451					      REPEND
     18  1452		       ea		      nop
     19  1453					      REPEND
     33  1453
     34  1453		       a0 0d		      ldy	#13
     35  1455		       b1 94		      lda	(TartGfxPtr),y
     36  1457		       85 0e		      sta	PF1
     37  1459
     38  1459		       a0 0d		      ldy	#13
     39  145b
     40  145b		       a6 bf		      ldx	CurrentRow
     41  145d		       b5 b1		      lda	FoodPosX,x	; 47
     42  145f
     43  145f		       c9 31		      cmp	#49	; 49
     44  1461		       30 0d		      bmi	.FoodRight	; 52/51
     45  1463
     46  1463		       a2 00		      ldx	#COL_BACKGROUND
     47  1465
     48  1465		       c6 94		      dec	TartGfxPtr	; 56
     49  1467		       c6 96		      dec	CatGfxPtr	; 61
     50  1469
      0  1469					      SLEEP	7	; 68
      1  1469				   .CYCLES    SET	7
      2  1469
      3  1469				  -	      IF	.CYCLES < 2
      4  1469				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1469				  -	      ERR
      6  1469					      ENDIF
      7  1469
      8  1469					      IF	.CYCLES & 1
      9  1469					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1469		       04 00		      nop	0
     11  146b				  -	      ELSE
     12  146b				  -	      bit	VSYNC
     13  146b					      ENDIF
     14  146b				   .CYCLES    SET	.CYCLES - 3
     15  146b					      ENDIF
     16  146b
     17  146b					      REPEAT	.CYCLES / 2
     18  146b		       ea		      nop
     17  146b					      REPEND
     18  146c		       ea		      nop
     19  146d					      REPEND
     52  146d
     53  146d		       4c 00 15 	      jmp	.KernelLoop1	; 71
     54  1470
     55  1470				   .FoodRight
     56  1470		       a2 00		      ldx	#COL_BACKGROUND
     57  1472
     58  1472		       4c 32 15 	      jmp	.KernelLoop2	; 55
     59  1475
     60  1475
     61  1475
     62  1475
     63  1475
     64  1475
     65  1475				   DrawFoodRow
     66  1475
     67  1475		       a0 0d		      ldy	#13	; 02
     68  1477
     69  1477				   .FoodLoop
     70  1477		       a9 00		      lda	#COL_BACKGROUND	; 04
     71  1479		       85 02		      sta	WSYNC	; 07/00
     72  147b
     73  147b				   .EnterHere
     74  147b		       85 09		      sta	COLUBK	; 03
     75  147d		       85 08		      sta	COLUPF	; 06
     76  147f
     77  147f		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     78  1481		       85 1c		      sta	GRP1	; 14
     79  1483		       a5 c0		      lda	FoodColor1	; 17
     80  1485		       85 07		      sta	COLUP1	; 20
     81  1487
     82  1487		       a5 be		      lda	Temp	; 23
     83  1489
     84  1489		       38		      sec		; 25
     85  148a				   .WaitLoop
     86  148a		       e9 17		      sbc	#23	; 27
     87  148c		       b0 fc		      bcs	.WaitLoop	; 29
     88  148e
     89  148e		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     90  1490		       a6 c1		      ldx	FoodColor2	; 52
     91  1492		       85 1c		      sta	GRP1	; 55
     92  1494		       86 07		      stx	COLUP1	; 58
     93  1496
     94  1496		       88		      dey		; 60
     95  1497		       10 de		      bpl	.FoodLoop	; 62
     96  1499
     97  1499		       e6 bf		      inc	CurrentRow	; 65
     98  149b				   Sleep12
     99  149b		       60		      rts		; 71
    100  149c
    101  149c
    102  149c
    103  149c
    104  149c
    105  149c
    106  1500		       00 00 00 00*	      ALIGN	$100
    107  1500
    108  1500				   .KernelLoop1
    109  1500
    110  1500							; 7 cycles to prepare PF rainbow colors
    111  1500		       b9 dd 00 	      lda	RamBowColors+1,y	; 75
    112  1503		       85 08		      sta	COLUPF	; 02
    113  1505
    114  1505							; 7 cycles to prepare BK rainbow colors
    115  1505		       b9 dc 00 	      lda	RamBowColors,y	; 06
    116  1508		       85 09		      sta	COLUBK	; 09
    117  150a
    118  150a							; 14 cycles to prepare 1st food item's graphics
    119  150a		       b1 90		      lda	(FoodGfxPtr1),y	; 14
    120  150c		       85 1c		      sta	GRP1	; 17
    121  150e		       a5 c0		      lda	FoodColor1	; 20
    122  1510		       85 07		      sta	COLUP1	; 23
    123  1512
    124  1512							; 5 cycles to set tart color
    125  1512		       a9 4a		      lda	#COL_CAT_TART	; 25
    126  1514		       85 08		      sta	COLUPF	; 28
    127  1516
    128  1516							; 3 cycles to clear BK color to black
    129  1516							; x is pre-loaded with 0, the color black
    130  1516		       86 09		      stx	COLUBK	; 31
    131  1518
    132  1518							; 8 cycles to prepare cat face graphics
    133  1518		       b1 96		      lda	(CatGfxPtr),y	; 36
    134  151a		       85 1b		      sta	GRP0	; 39
    135  151c
    136  151c							; 8 cycles to prepare tart graphics
    137  151c		       b1 94		      lda	(TartGfxPtr),y	; 44
    138  151e		       85 0e		      sta	PF1	; 47
    139  1520
    140  1520							; 13 cycles to prepare 2nd food item's graphics
    141  1520		       b1 92		      lda	(FoodGfxPtr2),y	; 52
    142  1522		       ba		      tsx		; 54
    143  1523		       85 1c		      sta	GRP1	; 57
    144  1525		       86 07		      stx	COLUP1	; 60
    145  1527
    146  1527							; 6 cycles to clear PF color to black
    147  1527		       a2 00		      ldx	#COL_BACKGROUND	; 62
    148  1529		       8e 08 00 	      stx.w	COLUPF	; 66
    149  152c
    150  152c							; 5 cycles to finish the loop mechanism
    151  152c		       88		      dey		; 68
    152  152d		       10 d1		      bpl	.KernelLoop1	; 71/70
    153  152f
    154  152f							; exactly 76 cycles total
    155  152f
    156  152f		       4c 61 15 	      jmp	.Nanny
    157  1532
    158  1532
    159  1532
    160  1532
    161  1532
    162  1532				   .KernelLoop2
    163  1532
    164  1532							; 8 cycles to prepare cat face graphics
    165  1532		       b1 96		      lda	(CatGfxPtr),y	; 60
    166  1534		       85 1b		      sta	GRP0	; 63
    167  1536
    168  1536							; 14 cycles to prepare 1st food item's graphics
    169  1536		       b1 90		      lda	(FoodGfxPtr1),y	; 68
    170  1538		       85 1c		      sta	GRP1	; 71
    171  153a		       a5 c0		      lda	FoodColor1	; 74
    172  153c		       85 07		      sta	COLUP1	; 01
    173  153e
    174  153e							; 7 cycles to prepare PF rainbow colors
    175  153e		       b9 dd 00 	      lda	RamBowColors+1,y	; 05
    176  1541		       85 08		      sta	COLUPF	; 08
    177  1543
    178  1543							; 7 cycles to prepare BK rainbow colors
    179  1543		       b9 dc 00 	      lda	RamBowColors,y	; 12
    180  1546		       85 09		      sta	COLUBK	; 15
    181  1548
    182  1548							; 8 cycles to prepare tart graphics
    183  1548		       b1 94		      lda	(TartGfxPtr),y	; 20
    184  154a		       85 0e		      sta	PF1	; 23
    185  154c
    186  154c							; 5 cycles to set tart color
    187  154c		       a9 4a		      lda	#COL_CAT_TART	; 25
    188  154e		       85 08		      sta	COLUPF	; 28
    189  1550
    190  1550							; 3 cycles to clear BK color to black
    191  1550							; x is pre-loaded with 0, the color black
    192  1550		       86 09		      stx	COLUBK	; 31
    193  1552
    194  1552							; 13 cycles to prepare 2nd food item's graphics
    195  1552		       b1 92		      lda	(FoodGfxPtr2),y	; 36
    196  1554		       ba		      tsx		; 38
    197  1555		       85 1c		      sta	GRP1	; 41
    198  1557		       86 07		      stx	COLUP1	; 44
    199  1559
    200  1559							; 6 cycles to clear PF color to black
    201  1559		       a2 00		      ldx	#COL_BACKGROUND	; 46
    202  155b		       8e 08 00 	      stx.w	COLUPF	; 50
    203  155e
    204  155e							; 5 cycles to finish the loop mechanism
    205  155e		       88		      dey		; 52
    206  155f		       10 d1		      bpl	.KernelLoop2	; 55/54
    207  1561
    208  1561							; exactly 76 cycles total
    209  1561
    210  1561				   .Nanny
    211  1561
    212  1561		       85 02		      sta	WSYNC
    213  1563
    214  1563		       e6 bf		      inc	CurrentRow
    215  1565
    216  1565		       86 1c		      stx	GRP1
    217  1567
    218  1567
    219  1567
    220  1567
    221  1567							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    222  1567							; cat with the rainbow. In order to align player 1 for the next row's
    223  1567							; food items, it will be neccesary to have three versions of this kernel,
    224  1567							; one for each of the three 60-color-clock spaced positions to reset.
    225  1567							; HMOVE will be written to on the first four scanlines. With a maximum
    226  1567							; movement of 15 color-clocks per scanline, this will allow a movement of
    227  1567							; up to 60 color clocks. With three versions of the kernel, it should be
    228  1567							; possible to put player 1 anywhere on the screen.
    229  1567
    230  1567		       a5 b8		      lda	ThrobColor+0
    231  1569		       85 09		      sta	COLUBK
    232  156b		       85 08		      sta	COLUPF
    233  156d		       a2 00		      ldx	#0
    234  156f		       86 1b		      stx	GRP0
    235  1571		       86 1c		      stx	GRP1
    236  1573
    237  1573		       a2 ff		      ldx	#$FF
    238  1575		       9a		      txs
    239  1576
    240  1576		       85 02		      sta	WSYNC
    241  1578
    242  1578		       a5 b9		      lda	ThrobColor+1
    243  157a		       85 09		      sta	COLUBK
    244  157c		       85 08		      sta	COLUPF
    245  157e		       85 02		      sta	WSYNC
    246  1580
    247  1580		       a5 ba		      lda	ThrobColor+2
    248  1582		       85 09		      sta	COLUBK
    249  1584		       85 08		      sta	COLUPF
    250  1586		       85 02		      sta	WSYNC
    251  1588
    252  1588		       a5 b9		      lda	ThrobColor+1
    253  158a		       85 09		      sta	COLUBK
    254  158c		       85 08		      sta	COLUPF
    255  158e		       85 02		      sta	WSYNC
    256  1590
    257  1590		       a5 b8		      lda	ThrobColor+0
    258  1592		       85 09		      sta	COLUBK
    259  1594		       85 08		      sta	COLUPF
    260  1596		       85 02		      sta	WSYNC
    261  1598
    262  1598							; Then output 14 lines to draw the next row, exactly the same way as the
    263  1598							; previous one. It will be neccesary to have multiple versions of this, as well,
    264  1598							; since GRP1 needs to be updated at the correct time depending on the position
    265  1598							; of player 1.
    266  1598
    267  1598		       a9 00		      lda	#COL_BACKGROUND
    268  159a		       85 09		      sta	COLUBK
    269  159c		       85 08		      sta	COLUPF
    270  159e
    271  159e		       a0 0e		      ldy	#14
    272  15a0				   .Loop3
    273  15a0		       85 02		      sta	WSYNC
    274  15a2		       88		      dey
    275  15a3		       d0 fb		      bne	.Loop3
    276  15a5
    277  15a5							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    278  15a5							; Use this time to prepare the next row's food item pointers (unless this is
    279  15a5							; the last row). If this is the last row, skip over LoRows.
    280  15a5
    281  15a5		       a5 b8		      lda	ThrobColor+0
    282  15a7		       85 09		      sta	COLUBK
    283  15a9		       85 08		      sta	COLUPF
    284  15ab
    285  15ab							; If the cat is at the very bottom of the screen, don't disable the
    286  15ab							; missile/player graphics until after they are drawn, so they don't get
    287  15ab							; clipped at the bottom of the screen. An easy way to do this would be to
    288  15ab							; simply disable them after they would have been drawn, whether they are
    289  15ab							; already disabled or not.
    290  15ab
    291  15ab		       4c 00 16 	      jmp	LoRows
    292  15ae
    293  15ae
    294  15ae
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  15ae					      include	code/Gameplay Kernel/LoRows.asm
      1  1600		       00 00 00 00*	      ALIGN	$100
      2  1600
      3  1600							; Draw all the rows below the cat's two rows.
      4  1600				   LoRows     SUBROUTINE
      5  1600
      6  1600		       85 02		      sta	WSYNC
      7  1602
      8  1602							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1602							; player 1 for the next row's food items.
     10  1602
     11  1602		       a5 b9		      lda	ThrobColor+1	; 03
     12  1604		       85 09		      sta	COLUBK	; 06
     13  1606		       85 08		      sta	COLUPF	; 09
     14  1608
     15  1608		       a4 bf		      ldy	CurrentRow	; 12 - get the row we are drawing
     16  160a		       b9 b1 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     17  160d
     18  160d		       38		      sec		; 18
     19  160e				   .DivideLoop
     20  160e		       e9 0f		      sbc	#15	; 20
     21  1610		       b0 fc		      bcs	.DivideLoop	; 22
     22  1612
     23  1612		       8d 11 00 	      sta.w	RESP1	; 26
     24  1615
     25  1615		       49 07		      eor	#7
     26  1617
     27  1617		       69 01		      adc	#1
     28  1619		       0a		      asl
     29  161a		       0a		      asl
     30  161b		       0a		      asl
     31  161c		       0a		      asl
     32  161d		       85 21		      sta	HMP1
     33  161f
     34  161f		       85 02		      sta	WSYNC
     35  1621
     36  1621		       a5 ba		      lda	ThrobColor+2	; 03
     37  1623		       85 09		      sta	COLUBK	; 06
     38  1625		       85 08		      sta	COLUPF	; 09
     39  1627
     40  1627		       20 9b 14 	      jsr	Sleep12
     41  162a		       20 9b 14 	      jsr	Sleep12
     42  162d		       20 9b 14 	      jsr	Sleep12
     43  1630		       20 9b 14 	      jsr	Sleep12
     44  1633		       20 9b 14 	      jsr	Sleep12	; 69
     45  1636
     46  1636		       8d 2a 00 	      sta.w	HMOVE	; 73
     47  1639
     48  1639		       85 02		      sta	WSYNC
     49  163b
     50  163b		       a5 b9		      lda	ThrobColor+1
     51  163d		       85 09		      sta	COLUBK
     52  163f		       85 08		      sta	COLUPF
     53  1641		       85 02		      sta	WSYNC
     54  1643
     55  1643		       a5 b8		      lda	ThrobColor+0
     56  1645		       85 09		      sta	COLUBK
     57  1647		       85 08		      sta	COLUPF
     58  1649
     59  1649		       a4 bf		      ldy	CurrentRow	; 11
     60  164b
     61  164b		       b9 a3 00 	      lda	FoodItemL,y	; 15
     62  164e		       29 f0		      and	#$F0	; 17
     63  1650		       85 90		      sta	FoodGfxPtr1	; 20
     64  1652		       aa		      tax		; 22
     65  1653		       bd 0e 1a 	      lda	FoodGfx+14,x	; 26
     66  1656		       85 c0		      sta	FoodColor1	; 29
     67  1658
     68  1658		       b9 aa 00 	      lda	FoodItemR,y	; 33
     69  165b		       29 f0		      and	#$F0	; 36
     70  165d		       85 92		      sta	FoodGfxPtr2	; 38
     71  165f		       aa		      tax		; 40
     72  1660		       bd 0e 1a 	      lda	FoodGfx+14,x	; 44
     73  1663		       85 c1		      sta	FoodColor2	; 47
     74  1665
     75  1665		       b9 b1 00 	      lda	FoodPosX,y	; 51
     76  1668		       85 be		      sta	Temp	; 54
     77  166a
     78  166a							; Output 14 lines to draw a row, exactly the same as in HiRows.
     79  166a							; It may be possible to code this as a subroutine to save ROM space.
     80  166a
     81  166a		       20 75 14 	      jsr	DrawFoodRow
     82  166d
     83  166d		       85 02		      sta	WSYNC
     84  166f
     85  166f							; Lastly, output a single line for the next "throb" line.
     86  166f							; Use this time to prepare the next row's food item pointers (unless this is
     87  166f							; the last row). If this is not the last row, loop to LoRows for the next row.
     88  166f
     89  166f		       a5 b8		      lda	ThrobColor+0
     90  1671		       85 09		      sta	COLUBK
     91  1673		       85 08		      sta	COLUPF
     92  1675
     93  1675		       c6 a2		      dec	PostCatRows
     94  1677		       d0 87		      bne	LoRows
     95  1679
     96  1679		       85 02		      sta	WSYNC
      0  167b					      SLEEP	2
      1  167b				   .CYCLES    SET	2
      2  167b
      3  167b				  -	      IF	.CYCLES < 2
      4  167b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  167b				  -	      ERR
      6  167b					      ENDIF
      7  167b
      8  167b				  -	      IF	.CYCLES & 1
      9  167b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  167b				  -	      nop	0
     11  167b				  -	      ELSE
     12  167b				  -	      bit	VSYNC
     13  167b				  -	      ENDIF
     14  167b				  -.CYCLES    SET	.CYCLES - 3
     15  167b					      ENDIF
     16  167b
     17  167b					      REPEAT	.CYCLES / 2
     18  167b		       ea		      nop
     19  167c					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  167c					      include	code/ProgressHealthKernel.asm
      1  167c		       a5 b9		      lda	ThrobColor+1
      2  167e		       85 09		      sta	COLUBK
      3  1680		       a9 00		      lda	#0
      4  1682		       85 0d		      sta	PF0
      5  1684		       85 0a		      sta	CTRLPF
      6  1686		       a9 06		      lda	#COL_CAT_FACE
      7  1688		       85 08		      sta	COLUPF
      8  168a
      0  168a					      SLEEP	32	; 53
      1  168a				   .CYCLES    SET	32
      2  168a
      3  168a				  -	      IF	.CYCLES < 2
      4  168a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  168a				  -	      ERR
      6  168a					      ENDIF
      7  168a
      8  168a				  -	      IF	.CYCLES & 1
      9  168a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  168a				  -	      nop	0
     11  168a				  -	      ELSE
     12  168a				  -	      bit	VSYNC
     13  168a				  -	      ENDIF
     14  168a				  -.CYCLES    SET	.CYCLES - 3
     15  168a					      ENDIF
     16  168a
     17  168a					      REPEAT	.CYCLES / 2
     18  168a		       ea		      nop
     17  168a					      REPEND
     18  168b		       ea		      nop
     17  168b					      REPEND
     18  168c		       ea		      nop
     17  168c					      REPEND
     18  168d		       ea		      nop
     17  168d					      REPEND
     18  168e		       ea		      nop
     17  168e					      REPEND
     18  168f		       ea		      nop
     17  168f					      REPEND
     18  1690		       ea		      nop
     17  1690					      REPEND
     18  1691		       ea		      nop
     17  1691					      REPEND
     18  1692		       ea		      nop
     17  1692					      REPEND
     18  1693		       ea		      nop
     17  1693					      REPEND
     18  1694		       ea		      nop
     17  1694					      REPEND
     18  1695		       ea		      nop
     17  1695					      REPEND
     18  1696		       ea		      nop
     17  1696					      REPEND
     18  1697		       ea		      nop
     17  1697					      REPEND
     18  1698		       ea		      nop
     17  1698					      REPEND
     18  1699		       ea		      nop
     19  169a					      REPEND
     10  169a
     11  169a		       a9 20		      lda	#$20	; 55
     12  169c		       85 20		      sta	HMP0	; 58
     13  169e		       a9 b0		      lda	#$B0	; 60
     14  16a0		       85 21		      sta	HMP1	; 63
     15  16a2
     16  16a2		       85 10		      sta	RESP0	; 66
     17  16a4		       85 11		      sta	RESP1	; 69
     18  16a6
     19  16a6		       a9 00		      lda	#$00	; 71
     20  16a8
     21  16a8		       85 2a		      sta	HMOVE	; 74
     22  16aa
     23  16aa		       85 06		      sta	COLUP0
     24  16ac		       85 07		      sta	COLUP1
     25  16ae
     26  16ae		       a9 0e		      lda	#COL_SCOREBOARD
     27  16b0		       85 09		      sta	COLUBK
     28  16b2
     29  16b2		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  16b4		       85 04		      sta	NUSIZ0
     31  16b6		       85 05		      sta	NUSIZ1
     32  16b8
     33  16b8		       a9 08		      lda	#REFP_TRUE
     34  16ba		       85 0c		      sta	REFP1
     35  16bc
     36  16bc					      SUBROUTINE
     37  16bc
     38  16bc		       a0 04		      ldy	#4
     39  16be		       85 02		      sta	WSYNC
     40  16c0
     41  16c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  16c0				   .HealthTop		; draw top of health
     43  16c0
     44  16c0		       a2 03		      ldx	#3
     45  16c2
     46  16c2				   .Loop
     47  16c2		       85 02		      sta	WSYNC
     48  16c4
     49  16c4		       b9 b8 18 	      lda	HealthTopGfx,y	; 04
     50  16c7		       85 1b		      sta	GRP0	; 07
     51  16c9		       85 1c		      sta	GRP1	; 10
     52  16cb		       a9 00		      lda	#$00	; 12
     53  16cd		       85 0f		      sta	PF2	; 15
      0  16cf					      SLEEP	26	; 37
      1  16cf				   .CYCLES    SET	26
      2  16cf
      3  16cf				  -	      IF	.CYCLES < 2
      4  16cf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16cf				  -	      ERR
      6  16cf					      ENDIF
      7  16cf
      8  16cf				  -	      IF	.CYCLES & 1
      9  16cf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16cf				  -	      nop	0
     11  16cf				  -	      ELSE
     12  16cf				  -	      bit	VSYNC
     13  16cf				  -	      ENDIF
     14  16cf				  -.CYCLES    SET	.CYCLES - 3
     15  16cf					      ENDIF
     16  16cf
     17  16cf					      REPEAT	.CYCLES / 2
     18  16cf		       ea		      nop
     17  16cf					      REPEND
     18  16d0		       ea		      nop
     17  16d0					      REPEND
     18  16d1		       ea		      nop
     17  16d1					      REPEND
     18  16d2		       ea		      nop
     17  16d2					      REPEND
     18  16d3		       ea		      nop
     17  16d3					      REPEND
     18  16d4		       ea		      nop
     17  16d4					      REPEND
     18  16d5		       ea		      nop
     17  16d5					      REPEND
     18  16d6		       ea		      nop
     17  16d6					      REPEND
     18  16d7		       ea		      nop
     17  16d7					      REPEND
     18  16d8		       ea		      nop
     17  16d8					      REPEND
     18  16d9		       ea		      nop
     17  16d9					      REPEND
     18  16da		       ea		      nop
     17  16da					      REPEND
     18  16db		       ea		      nop
     19  16dc					      REPEND
     55  16dc		       b9 08 19 	      lda	HealthBgGfx+8,y	; 41
     56  16df		       85 0f		      sta	PF2	; 44
     57  16e1
     58  16e1		       ca		      dex
     59  16e2		       d0 de		      bne	.Loop
     60  16e4
     61  16e4		       88		      dey
     62  16e5		       10 d9		      bpl	.HealthTop
     63  16e7
     64  16e7
     65  16e7					      SUBROUTINE
     66  16e7
     67  16e7
     68  16e7		       a0 03		      ldy	#3
     69  16e9		       a2 03		      ldx	#3
     70  16eb		       86 be		      stx	Temp
     71  16ed
     72  16ed		       4c 00 17 	      jmp	.HealthMiddle
     73  16f0
     74  1700		       00 00 00 00*	      ALIGN	$100	; align to page
     75  1700
     76  1700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  1700				   .HealthMiddle		; draw middle of health, with progress bar
     78  1700
     79  1700		       85 02		      sta	WSYNC
     80  1702				   .Loop
     81  1702		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     82  1704		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     83  1706
     84  1706		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     85  1708		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     86  170a
     87  170a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     88  170c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     89  170e
     90  170e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     91  1710		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     92  1712
     93  1712		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     94  1714		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     95  1716
     96  1716		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     97  1718		       85 1b		      sta	GRP0	; 38 - for the left half of health
     98  171a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     99  171c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    100  171e
    101  171e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    102  1720		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    103  1722		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    104  1724		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
    105  1727
    106  1727		       a9 0e		      lda	#COL_SCOREBOARD	; 60 - get the color for the background
    107  1729		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    108  172c
    109  172c		       ca		      dex		; 66
    110  172d		       d0 d1		      bne	.HealthMiddle	; 68
    111  172f
    112  172f		       a6 be		      ldx	Temp	; 71
    113  1731
    114  1731		       88		      dey		; 73
    115  1732		       10 ce		      bpl	.Loop	; 76 / 00
    116  1734
    117  1734
    118  1734
    119  1734
    120  1734
    121  1734
    122  1734
    123  1734
    124  1734
    125  1734					      SUBROUTINE
    126  1734
    127  1734
    128  1734		       a9 00		      lda	#0
    129  1736		       85 0d		      sta	PF0
    130  1738		       85 0e		      sta	PF1
    131  173a
    132  173a		       a0 07		      ldy	#7
    133  173c
    134  173c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  173c				   .HealthBottom		; draw bottom of health
    136  173c
    137  173c		       a2 03		      ldx	#3
    138  173e				   .Loop
    139  173e		       b1 98		      lda	(HthGfxLPtr),y
    140  1740		       85 1b		      sta	GRP0
    141  1742		       b1 9a		      lda	(HthGfxRPtr),y
    142  1744		       85 1c		      sta	GRP1
    143  1746		       a9 00		      lda	#$00
    144  1748		       85 0f		      sta	PF2
    145  174a
      0  174a					      SLEEP	14
      1  174a				   .CYCLES    SET	14
      2  174a
      3  174a				  -	      IF	.CYCLES < 2
      4  174a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  174a				  -	      ERR
      6  174a					      ENDIF
      7  174a
      8  174a				  -	      IF	.CYCLES & 1
      9  174a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  174a				  -	      nop	0
     11  174a				  -	      ELSE
     12  174a				  -	      bit	VSYNC
     13  174a				  -	      ENDIF
     14  174a				  -.CYCLES    SET	.CYCLES - 3
     15  174a					      ENDIF
     16  174a
     17  174a					      REPEAT	.CYCLES / 2
     18  174a		       ea		      nop
     17  174a					      REPEND
     18  174b		       ea		      nop
     17  174b					      REPEND
     18  174c		       ea		      nop
     17  174c					      REPEND
     18  174d		       ea		      nop
     17  174d					      REPEND
     18  174e		       ea		      nop
     17  174e					      REPEND
     18  174f		       ea		      nop
     17  174f					      REPEND
     18  1750		       ea		      nop
     19  1751					      REPEND
    147  1751
    148  1751		       b9 fc 18 	      lda	HealthBgGfx-4,y
    149  1754		       85 0f		      sta	PF2
    150  1756		       85 02		      sta	WSYNC
    151  1758
    152  1758		       ca		      dex
    153  1759		       d0 e3		      bne	.Loop
    154  175b
    155  175b		       88		      dey
    156  175c		       c0 03		      cpy	#3
    157  175e		       d0 dc		      bne	.HealthBottom
    158  1760
    159  1760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    160  1760
    161  1760		       a9 00		      lda	#$00
    162  1762		       85 1b		      sta	GRP0
    163  1764		       85 1c		      sta	GRP1
    164  1766		       85 0b		      sta	REFP0
    165  1768		       85 0c		      sta	REFP1
    166  176a		       85 0f		      sta	PF2
    167  176c
    168  176c		       85 02		      sta	WSYNC
    169  176e
------- FILE code/Kernel.asm
     13  176e
     14  176e		       a9 02		      lda	#2
     15  1770		       85 01		      sta	VBLANK	; disable display
     16  1772
     17  1772		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     71  1775
     72  1775				   Z_EndOfCode		; label to show how much ROM is used for the code
     73  1775
     74  1775
     75  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  1775							; Data Tables
     77  1775							;
     78  1775							; Include data tables
     79  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  1775
     81  1775							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1775					      include	data/Graphics.asm
      1  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1775							; Graphics Tables
      3  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1775
      5  1800		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1800
      7  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1800							; Digit graphics for the scoreboard
      9  1800							;
     10  1800							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1800							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1800							; to normal when it is pulled from the stack.
     13  1800							;
     14  1800							; Table takes up $50 (80) bytes of ROM
     15  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1800
     17  1800				   ScoreGfx
     18  1800
     19  1800		       1c		      .byte.b	%00011100	; digit 0
     20  1801		       26		      .byte.b	%00100110
     21  1802		       63		      .byte.b	%01100011
     22  1803		       63		      .byte.b	%01100011
     23  1804		       63		      .byte.b	%01100011
     24  1805		       32		      .byte.b	%00110010
     25  1806		       1c		      .byte.b	%00011100
     26  1807		       00		      .byte.b	%00000000
     27  1808
     28  1808							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1808
     30  1808		       18		      .byte.b	%00011000	; digit 1
     31  1809		       38		      .byte.b	%00111000
     32  180a		       18		      .byte.b	%00011000
     33  180b		       18		      .byte.b	%00011000
     34  180c		       18		      .byte.b	%00011000
     35  180d		       18		      .byte.b	%00011000
     36  180e		       7e		      .byte.b	%01111110
     37  180f		       00		      .byte.b	%00000000
     38  1810
     39  1810							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1810
     41  1810		       3e		      .byte.b	%00111110	; digit 2
     42  1811		       63		      .byte.b	%01100011
     43  1812		       07		      .byte.b	%00000111
     44  1813		       1e		      .byte.b	%00011110
     45  1814		       3c		      .byte.b	%00111100
     46  1815		       70		      .byte.b	%01110000
     47  1816		       7f		      .byte.b	%01111111
     48  1817		       00		      .byte.b	%00000000
     49  1818
     50  1818							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1818
     52  1818		       7f		      .byte.b	%01111111	; digit 3
     53  1819		       06		      .byte.b	%00000110
     54  181a		       0c		      .byte.b	%00001100
     55  181b		       1e		      .byte.b	%00011110
     56  181c		       03		      .byte.b	%00000011
     57  181d		       63		      .byte.b	%01100011
     58  181e		       3e		      .byte.b	%00111110
     59  181f		       00		      .byte.b	%00000000
     60  1820
     61  1820							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1820
     63  1820		       0e		      .byte.b	%00001110	; digit 4
     64  1821		       1e		      .byte.b	%00011110
     65  1822		       36		      .byte.b	%00110110
     66  1823		       66		      .byte.b	%01100110
     67  1824		       7f		      .byte.b	%01111111
     68  1825		       06		      .byte.b	%00000110
     69  1826		       06		      .byte.b	%00000110
     70  1827		       00		      .byte.b	%00000000
     71  1828
     72  1828							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1828
     74  1828		       7e		      .byte.b	%01111110	; digit 5
     75  1829		       60		      .byte.b	%01100000
     76  182a		       7e		      .byte.b	%01111110
     77  182b		       03		      .byte.b	%00000011
     78  182c		       03		      .byte.b	%00000011
     79  182d		       63		      .byte.b	%01100011
     80  182e		       3e		      .byte.b	%00111110
     81  182f		       00		      .byte.b	%00000000
     82  1830
     83  1830							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1830
     85  1830		       1e		      .byte.b	%00011110	; digit 6
     86  1831		       30		      .byte.b	%00110000
     87  1832		       60		      .byte.b	%01100000
     88  1833		       7e		      .byte.b	%01111110
     89  1834		       63		      .byte.b	%01100011
     90  1835		       63		      .byte.b	%01100011
     91  1836		       3e		      .byte.b	%00111110
     92  1837		       00		      .byte.b	%00000000
     93  1838
     94  1838							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1838
     96  1838		       7f		      .byte.b	%01111111	; digit 7
     97  1839		       03		      .byte.b	%00000011
     98  183a		       06		      .byte.b	%00000110
     99  183b		       0c		      .byte.b	%00001100
    100  183c		       18		      .byte.b	%00011000
    101  183d		       18		      .byte.b	%00011000
    102  183e		       18		      .byte.b	%00011000
    103  183f		       00		      .byte.b	%00000000
    104  1840
    105  1840							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1840
    107  1840		       3c		      .byte.b	%00111100	; digit 8
    108  1841		       62		      .byte.b	%01100010
    109  1842		       72		      .byte.b	%01110010
    110  1843		       3c		      .byte.b	%00111100
    111  1844		       43		      .byte.b	%01000011
    112  1845		       43		      .byte.b	%01000011
    113  1846		       3e		      .byte.b	%00111110
    114  1847		       00		      .byte.b	%00000000
    115  1848
    116  1848							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1848
    118  1848		       3e		      .byte.b	%00111110	; digit 9
    119  1849		       63		      .byte.b	%01100011
    120  184a		       63		      .byte.b	%01100011
    121  184b		       3f		      .byte.b	%00111111
    122  184c		       03		      .byte.b	%00000011
    123  184d		       06		      .byte.b	%00000110
    124  184e		       3c		      .byte.b	%00111100
    125  184f		       00		      .byte.b	%00000000
    126  1850
    127  1850
    128  1850
    129  1850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  1850							; NUSIZx and ENAMx data for level counter graphics
    131  1850							;
    132  1850							; This table enables or disables each missile and adjusts the left missile's
    133  1850							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  1850							; left digit. (The right digit is drawn with the ball.)
    135  1850							; Bit-1 is used to enable or disable the left missile,
    136  1850							; and bit-0 is used to enable or disable the right missile.
    137  1850							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  1850							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  1850							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  1850							; correct for the score display.
    141  1850							;
    142  1850							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  1850							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  1850							; to normal when it is pulled from the stack.
    145  1850							;
    146  1850							; Table takes up $50 (80) bytes of ROM
    147  1850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1850
    149  1850				   LevelGfx
    150  1850
    151  1850							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  1850							; ^^^^^^^^^
    153  1850		       8f		      .byte.b	%10001111	; digit 0
    154  1851		       4f		      .byte.b	%01001111
    155  1852		       4f		      .byte.b	%01001111
    156  1853		       4f		      .byte.b	%01001111
    157  1854		       4f		      .byte.b	%01001111
    158  1855		       4f		      .byte.b	%01001111
    159  1856		       8f		      .byte.b	%10001111
    160  1857		       00		      .byte.b	%00000000
    161  1858
    162  1858							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  1858
    164  1858							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  1858							; ^^^^^^^^^
    166  1858		       8d		      .byte.b	%10001101	; digit 1
    167  1859		       4d		      .byte.b	%01001101
    168  185a		       4d		      .byte.b	%01001101
    169  185b		       8d		      .byte.b	%10001101
    170  185c		       4d		      .byte.b	%01001101
    171  185d		       4d		      .byte.b	%01001101
    172  185e		       8d		      .byte.b	%10001101
    173  185f		       00		      .byte.b	%00000000
    174  1860
    175  1860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  1860
    177  1860							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  1860							; ^^^^^^^^^
    179  1860		       8f		      .byte.b	%10001111	; digit 2
    180  1861		       4d		      .byte.b	%01001101
    181  1862		       4d		      .byte.b	%01001101
    182  1863		       8f		      .byte.b	%10001111
    183  1864		       4e		      .byte.b	%01001110
    184  1865		       4e		      .byte.b	%01001110
    185  1866		       8f		      .byte.b	%10001111
    186  1867		       00		      .byte.b	%00000000
    187  1868
    188  1868							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  1868
    190  1868							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  1868							; ^^^^^^^^^
    192  1868		       8f		      .byte.b	%10001111	; digit 3
    193  1869		       4d		      .byte.b	%01001101
    194  186a		       4d		      .byte.b	%01001101
    195  186b		       8f		      .byte.b	%10001111
    196  186c		       4d		      .byte.b	%01001101
    197  186d		       4d		      .byte.b	%01001101
    198  186e		       8f		      .byte.b	%10001111
    199  186f		       00		      .byte.b	%00000000
    200  1870
    201  1870							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  1870
    203  1870							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  1870							; ^^^^^^^^^
    205  1870		       4f		      .byte.b	%01001111	; digit 4
    206  1871		       4f		      .byte.b	%01001111
    207  1872		       4f		      .byte.b	%01001111
    208  1873		       8f		      .byte.b	%10001111
    209  1874		       4d		      .byte.b	%01001101
    210  1875		       4d		      .byte.b	%01001101
    211  1876		       4d		      .byte.b	%01001101
    212  1877		       00		      .byte.b	%00000000
    213  1878
    214  1878							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  1878
    216  1878							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  1878							; ^^^^^^^^^
    218  1878		       8f		      .byte.b	%10001111	; digit 5
    219  1879		       4e		      .byte.b	%01001110
    220  187a		       4e		      .byte.b	%01001110
    221  187b		       8f		      .byte.b	%10001111
    222  187c		       4d		      .byte.b	%01001101
    223  187d		       4d		      .byte.b	%01001101
    224  187e		       8f		      .byte.b	%10001111
    225  187f		       00		      .byte.b	%00000000
    226  1880
    227  1880							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  1880
    229  1880							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  1880							; ^^^^^^^^^
    231  1880		       8f		      .byte.b	%10001111	; digit 6
    232  1881		       4e		      .byte.b	%01001110
    233  1882		       4e		      .byte.b	%01001110
    234  1883		       8f		      .byte.b	%10001111
    235  1884		       4f		      .byte.b	%01001111
    236  1885		       4f		      .byte.b	%01001111
    237  1886		       8f		      .byte.b	%10001111
    238  1887		       00		      .byte.b	%00000000
    239  1888
    240  1888							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1888
    242  1888							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  1888							; ^^^^^^^^^
    244  1888		       8f		      .byte.b	%10001111	; digit 7
    245  1889		       4d		      .byte.b	%01001101
    246  188a		       4d		      .byte.b	%01001101
    247  188b		       8d		      .byte.b	%10001101
    248  188c		       4d		      .byte.b	%01001101
    249  188d		       4d		      .byte.b	%01001101
    250  188e		       8d		      .byte.b	%10001101
    251  188f		       00		      .byte.b	%00000000
    252  1890
    253  1890							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  1890
    255  1890							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  1890							; ^^^^^^^^^
    257  1890		       8f		      .byte.b	%10001111	; digit 8
    258  1891		       4f		      .byte.b	%01001111
    259  1892		       4f		      .byte.b	%01001111
    260  1893		       8f		      .byte.b	%10001111
    261  1894		       4f		      .byte.b	%01001111
    262  1895		       4f		      .byte.b	%01001111
    263  1896		       8f		      .byte.b	%10001111
    264  1897		       00		      .byte.b	%00000000
    265  1898
    266  1898							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1898
    268  1898							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  1898							; ^^^^^^^^^
    270  1898		       8f		      .byte.b	%10001111	; digit 9
    271  1899		       4f		      .byte.b	%01001111
    272  189a		       4f		      .byte.b	%01001111
    273  189b		       8f		      .byte.b	%10001111
    274  189c		       4d		      .byte.b	%01001101
    275  189d		       4d		      .byte.b	%01001101
    276  189e		       8f		      .byte.b	%10001111
    277  189f		       00		      .byte.b	%00000000
    278  18a0
    279  18a0
    280  18a0
    281  18a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  18a0							; Throbbing Line Graphics
    283  18a0							;
    284  18a0							; Graphics tables for the throbbing lines
    285  18a0							;
    286  18a0							; Table takes up $18 (24) bytes of ROM
    287  18a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  18a0
    289  18a0				   LineThrobGfx
    290  18a0
    291  18a0		       00		      .byte.b	COL_LINES + LUM_0	; frame 0
    292  18a1		       02		      .byte.b	COL_LINES + LUM_2
    293  18a2		       04		      .byte.b	COL_LINES + LUM_4
    294  18a3
    295  18a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  18a3
    297  18a3		       00		      .byte.b	COL_LINES + LUM_0	; frame 1
    298  18a4		       04		      .byte.b	COL_LINES + LUM_4
    299  18a5		       06		      .byte.b	COL_LINES + LUM_6
    300  18a6
    301  18a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  18a6
    303  18a6		       00		      .byte.b	COL_LINES + LUM_0	; frame 2
    304  18a7		       06		      .byte.b	COL_LINES + LUM_6
    305  18a8		       08		      .byte.b	COL_LINES + LUM_8
    306  18a9
    307  18a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  18a9
    309  18a9		       02		      .byte.b	COL_LINES + LUM_2	; frame 3
    310  18aa		       08		      .byte.b	COL_LINES + LUM_8
    311  18ab		       0c		      .byte.b	COL_LINES + LUM_C
    312  18ac
    313  18ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  18ac
    315  18ac		       04		      .byte.b	COL_LINES + LUM_4	; frame 4
    316  18ad		       0a		      .byte.b	COL_LINES + LUM_A
    317  18ae		       0e		      .byte.b	COL_LINES + LUM_E
    318  18af
    319  18af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  18af
    321  18af		       02		      .byte.b	COL_LINES + LUM_2	; frame 5
    322  18b0		       08		      .byte.b	COL_LINES + LUM_8
    323  18b1		       0c		      .byte.b	COL_LINES + LUM_C
    324  18b2
    325  18b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  18b2
    327  18b2		       00		      .byte.b	COL_LINES + LUM_0	; frame 6
    328  18b3		       06		      .byte.b	COL_LINES + LUM_6
    329  18b4		       0a		      .byte.b	COL_LINES + LUM_A
    330  18b5
    331  18b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  18b5
    333  18b5		       00		      .byte.b	COL_LINES + LUM_0	; frame 7
    334  18b6		       04		      .byte.b	COL_LINES + LUM_4
    335  18b7		       06		      .byte.b	COL_LINES + LUM_6
    336  18b8
    337  18b8
    338  18b8
    339  18b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  18b8							; Health Graphics
    341  18b8							;
    342  18b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  18b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  18b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  18b8							; the graphics for the lower right are flipped.
    346  18b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  18b8							; are set up in a confusing way. They are upside-down, but they are split
    348  18b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  18b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  18b8							; LOWER 4 lines of graphics (also upside-down).
    351  18b8							; The last table (HealthBgGfx) is for the grey background of the
    352  18b8							; health graphics drawn with the playfield.
    353  18b8							;
    354  18b8							; Table takes up $45 (69) bytes of ROM
    355  18b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  18b8
    357  18b8				   HealthTopGfx
    358  18b8
    359  18b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  18b9		       43		      .byte.b	%01000011
    361  18ba		       44		      .byte.b	%01000100
    362  18bb		       48		      .byte.b	%01001000
    363  18bc		       30		      .byte.b	%00110000
    364  18bd
    365  18bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  18bd				   HealthLeftGfx
    367  18bd
    368  18bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  18be		       8c		      .byte.b	%10001100
    370  18bf		       84		      .byte.b	%10000100
    371  18c0		       80		      .byte.b	%10000000
    372  18c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  18c2		       20		      .byte.b	%00100000
    374  18c3		       47		      .byte.b	%01000111
    375  18c4		       84		      .byte.b	%10000100
    376  18c5
    377  18c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  18c5
    379  18c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  18c6		       8c		      .byte.b	%10001100
    381  18c7		       84		      .byte.b	%10000100
    382  18c8		       80		      .byte.b	%10000000
    383  18c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  18ca		       20		      .byte.b	%00100000
    385  18cb		       47		      .byte.b	%01000111
    386  18cc		       80		      .byte.b	%10000000
    387  18cd
    388  18cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  18cd
    390  18cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  18ce		       8c		      .byte.b	%10001100
    392  18cf		       84		      .byte.b	%10000100
    393  18d0		       80		      .byte.b	%10000000
    394  18d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  18d2		       20		      .byte.b	%00100000
    396  18d3		       44		      .byte.b	%01000100
    397  18d4		       87		      .byte.b	%10000111
    398  18d5
    399  18d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  18d5
    401  18d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  18d6		       9c		      .byte.b	%10011100
    403  18d7		       80		      .byte.b	%10000000
    404  18d8		       80		      .byte.b	%10000000
    405  18d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  18da		       20		      .byte.b	%00100000
    407  18db		       46		      .byte.b	%01000110
    408  18dc		       81		      .byte.b	%10000001
    409  18dd
    410  18dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  18dd				   HealthRightGfx
    412  18dd
    413  18dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  18de		       9a		      .byte.b	%10011010
    415  18df		       90		      .byte.b	%10010000
    416  18e0		       80		      .byte.b	%10000000
    417  18e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  18e2		       20		      .byte.b	%00100000
    419  18e3		       4f		      .byte.b	%01001111
    420  18e4		       89		      .byte.b	%10001001
    421  18e5
    422  18e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  18e5
    424  18e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  18e6		       9a		      .byte.b	%10011010
    426  18e7		       90		      .byte.b	%10010000
    427  18e8		       80		      .byte.b	%10000000
    428  18e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  18ea		       20		      .byte.b	%00100000
    430  18eb		       4f		      .byte.b	%01001111
    431  18ec		       80		      .byte.b	%10000000
    432  18ed
    433  18ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  18ed
    435  18ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  18ee		       9a		      .byte.b	%10011010
    437  18ef		       88		      .byte.b	%10001000
    438  18f0		       80		      .byte.b	%10000000
    439  18f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  18f2		       20		      .byte.b	%00100000
    441  18f3		       48		      .byte.b	%01001000
    442  18f4		       8f		      .byte.b	%10001111
    443  18f5
    444  18f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  18f5
    446  18f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  18f6		       ba		      .byte.b	%10111010
    448  18f7		       80		      .byte.b	%10000000
    449  18f8		       80		      .byte.b	%10000000
    450  18f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  18fa		       20		      .byte.b	%00100000
    452  18fb		       4c		      .byte.b	%01001100
    453  18fc		       83		      .byte.b	%10000011
    454  18fd
    455  18fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  18fd
    457  18fd							; 3 bytes left in this page
    458  18fd
    459  1900		       00 00 00 	      ALIGN	$100	; align to page
    460  1900
    461  1900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  1900				   HealthBgGfx
    463  1900							; 13 bytes
    464  1900
    465  1900		       00		      .byte.b	%00000000
    466  1901		       3e		      .byte.b	%00111110
    467  1902		       7f		      .byte.b	%01111111
    468  1903		       7f		      .byte.b	%01111111
    469  1904		       7f		      .byte.b	%01111111
    470  1905		       7f		      .byte.b	%01111111
    471  1906		       7f		      .byte.b	%01111111
    472  1907		       7f		      .byte.b	%01111111
    473  1908		       7f		      .byte.b	%01111111
    474  1909		       7f		      .byte.b	%01111111
    475  190a		       63		      .byte.b	%01100011
    476  190b		       63		      .byte.b	%01100011
    477  190c		       00		      .byte.b	%00000000
    478  190d
    479  190d
    480  190d
    481  190d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  190d							; Progress Bar Graphics
    483  190d							;
    484  190d							;
    485  190d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  190d
    487  190d				   PgBarGfx
    488  190d							; 9 bytes
    489  190d
    490  190d		       ff		      .byte.b	%11111111	; 1st PF1
    491  190e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  190f		       3f		      .byte.b	%00111111
    493  1910		       1f		      .byte.b	%00011111
    494  1911		       0f		      .byte.b	%00001111
    495  1912		       07		      .byte.b	%00000111
    496  1913		       03		      .byte.b	%00000011
    497  1914		       01		      .byte.b	%00000001
    498  1915		       00		      .byte.b	%00000000
    499  1916
    500  1916							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  1916				   PgBarGfxR
    502  1916							; 8 bytes
    503  1916
    504  1916		       ff		      .byte.b	%11111111	; PF2
    505  1917		       fe		      .byte.b	%11111110
    506  1918		       fc		      .byte.b	%11111100
    507  1919		       f8		      .byte.b	%11111000
    508  191a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  191b		       e0		      .byte.b	%11100000	; 1st PF0
    510  191c		       c0		      .byte.b	%11000000
    511  191d		       80		      .byte.b	%10000000
    512  191e
    513  191e
    514  191e
    515  191e				   FineHmove73
    516  191e
    517  191e		       70 60 50 40	      HEX	70 60 50 40
    518  1922		       30 20 10 00	      HEX	30 20 10 00
    519  1926		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  192a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  192e
    522  192e
    523  192e
    524  192e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  192e							; Cat Rainbow Graphics
    526  192e							;
    527  192e							;
    528  192e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  192e
    530  192e				   RainbowGfx
    531  192e							; 4 bytes
    532  192e
    533  192e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  192f
    535  192f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  1930
    537  1930		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    538  1931
    539  1931		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    540  1932
    541  1932
    542  1932		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    543  1948
    544  1948				   CatFaceGfx
    545  1948
    546  1948		       36		      .byte.b	%00110110
    547  1949		       36		      .byte.b	%00110110
    548  194a		       00		      .byte.b	%00000000
    549  194b		       7e		      .byte.b	%01111110
    550  194c		       c1		      .byte.b	%11000001
    551  194d		       d5		      .byte.b	%11010101
    552  194e		       ff		      .byte.b	%11111111
    553  194f		       d5		      .byte.b	%11010101
    554  1950		       dd		      .byte.b	%11011101
    555  1951		       ff		      .byte.b	%11111111
    556  1952		       66		      .byte.b	%01100110
    557  1953		       66		      .byte.b	%01100110
    558  1954		       42		      .byte.b	%01000010
    559  1955
    560  1955		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    561  196a							;140 bytes used in page
    562  196a
    563  1a00		       00 00 00 00*	      ALIGN	$100
    564  1a00
    565  1a00				   FoodGfx
    566  1a00
    567  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    568  1a00							; 0 - blank
    569  1a00
    570  1a00		       00		      .byte.b	%00000000
    571  1a01		       00		      .byte.b	%00000000
    572  1a02		       00		      .byte.b	%00000000
    573  1a03		       00		      .byte.b	%00000000
    574  1a04		       00		      .byte.b	%00000000
    575  1a05		       00		      .byte.b	%00000000
    576  1a06		       00		      .byte.b	%00000000
    577  1a07		       00		      .byte.b	%00000000
    578  1a08		       00		      .byte.b	%00000000
    579  1a09		       00		      .byte.b	%00000000
    580  1a0a		       00		      .byte.b	%00000000
    581  1a0b		       00		      .byte.b	%00000000
    582  1a0c		       00		      .byte.b	%00000000
    583  1a0d		       00		      .byte.b	%00000000
    584  1a0e
    585  1a0e		       0e		      .byte.b	$0E
    586  1a0f		       00		      .byte.b	0
    587  1a10
    588  1a10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  1a10							; 1 - apple
    590  1a10
    591  1a10		       34		      .byte.b	%00110100
    592  1a11		       7e		      .byte.b	%01111110
    593  1a12		       7e		      .byte.b	%01111110
    594  1a13		       ff		      .byte.b	%11111111
    595  1a14		       ff		      .byte.b	%11111111
    596  1a15		       ff		      .byte.b	%11111111
    597  1a16		       ff		      .byte.b	%11111111
    598  1a17		       ff		      .byte.b	%11111111
    599  1a18		       ff		      .byte.b	%11111111
    600  1a19		       7f		      .byte.b	%01111111
    601  1a1a		       6a		      .byte.b	%01101010
    602  1a1b		       08		      .byte.b	%00001000
    603  1a1c		       0c		      .byte.b	%00001100
    604  1a1d		       04		      .byte.b	%00000100
    605  1a1e
    606  1a1e		       46		      .byte.b	$46
    607  1a1f		       00		      .byte.b	0
    608  1a20
    609  1a20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  1a20							; 2 - peach
    611  1a20
    612  1a20		       3c		      .byte.b	%00111100
    613  1a21		       6e		      .byte.b	%01101110
    614  1a22		       6e		      .byte.b	%01101110
    615  1a23		       df		      .byte.b	%11011111
    616  1a24		       df		      .byte.b	%11011111
    617  1a25		       bf		      .byte.b	%10111111
    618  1a26		       bf		      .byte.b	%10111111
    619  1a27		       bf		      .byte.b	%10111111
    620  1a28		       de		      .byte.b	%11011110
    621  1a29		       5e		      .byte.b	%01011110
    622  1a2a		       6c		      .byte.b	%01101100
    623  1a2b		       18		      .byte.b	%00011000
    624  1a2c		       10		      .byte.b	%00010000
    625  1a2d		       30		      .byte.b	%00110000
    626  1a2e
    627  1a2e		       3a		      .byte.b	$3A
    628  1a2f		       00		      .byte.b	0
    629  1a30
    630  1a30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  1a30							; 3 - banana
    632  1a30
    633  1a30		       38		      .byte.b	%00111000
    634  1a31		       7c		      .byte.b	%01111100
    635  1a32		       fe		      .byte.b	%11111110
    636  1a33		       fe		      .byte.b	%11111110
    637  1a34		       ff		      .byte.b	%11111111
    638  1a35		       ff		      .byte.b	%11111111
    639  1a36		       8f		      .byte.b	%10001111
    640  1a37		       07		      .byte.b	%00000111
    641  1a38		       07		      .byte.b	%00000111
    642  1a39		       03		      .byte.b	%00000011
    643  1a3a		       03		      .byte.b	%00000011
    644  1a3b		       02		      .byte.b	%00000010
    645  1a3c		       06		      .byte.b	%00000110
    646  1a3d		       06		      .byte.b	%00000110
    647  1a3e
    648  1a3e		       1e		      .byte.b	$1E
    649  1a3f		       00		      .byte.b	0
    650  1a40
    651  1a40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  1a40							; 4 - pear
    653  1a40
    654  1a40		       38		      .byte.b	%00111000
    655  1a41		       7c		      .byte.b	%01111100
    656  1a42		       fe		      .byte.b	%11111110
    657  1a43		       fe		      .byte.b	%11111110
    658  1a44		       fe		      .byte.b	%11111110
    659  1a45		       fe		      .byte.b	%11111110
    660  1a46		       7c		      .byte.b	%01111100
    661  1a47		       7c		      .byte.b	%01111100
    662  1a48		       38		      .byte.b	%00111000
    663  1a49		       38		      .byte.b	%00111000
    664  1a4a		       30		      .byte.b	%00110000
    665  1a4b		       10		      .byte.b	%00010000
    666  1a4c		       18		      .byte.b	%00011000
    667  1a4d		       08		      .byte.b	%00001000
    668  1a4e
    669  1a4e		       cc		      .byte.b	$CC
    670  1a4f		       00		      .byte.b	0
    671  1a50
    672  1a50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  1a50							; 5 - plum
    674  1a50
    675  1a50		       38		      .byte.b	%00111000
    676  1a51		       6c		      .byte.b	%01101100
    677  1a52		       6e		      .byte.b	%01101110
    678  1a53		       de		      .byte.b	%11011110
    679  1a54		       df		      .byte.b	%11011111
    680  1a55		       bf		      .byte.b	%10111111
    681  1a56		       bf		      .byte.b	%10111111
    682  1a57		       bf		      .byte.b	%10111111
    683  1a58		       de		      .byte.b	%11011110
    684  1a59		       de		      .byte.b	%11011110
    685  1a5a		       5e		      .byte.b	%01011110
    686  1a5b		       3c		      .byte.b	%00111100
    687  1a5c		       20		      .byte.b	%00100000
    688  1a5d		       60		      .byte.b	%01100000
    689  1a5e
    690  1a5e		       88		      .byte.b	$88
    691  1a5f		       00		      .byte.b	0
    692  1a60
    693  1a60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  1a60							; 6 - grapes
    695  1a60
    696  1a60		       18		      .byte.b	%00011000
    697  1a61		       08		      .byte.b	%00001000
    698  1a62		       36		      .byte.b	%00110110
    699  1a63		       12		      .byte.b	%00010010
    700  1a64		       6c		      .byte.b	%01101100
    701  1a65		       24		      .byte.b	%00100100
    702  1a66		       db		      .byte.b	%11011011
    703  1a67		       49		      .byte.b	%01001001
    704  1a68		       36		      .byte.b	%00110110
    705  1a69		       12		      .byte.b	%00010010
    706  1a6a		       6c		      .byte.b	%01101100
    707  1a6b		       34		      .byte.b	%00110100
    708  1a6c		       10		      .byte.b	%00010000
    709  1a6d		       18		      .byte.b	%00011000
    710  1a6e
    711  1a6e		       64		      .byte.b	$64
    712  1a6f		       00		      .byte.b	0
    713  1a70
    714  1a70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  1a70							; 7 - broccoli
    716  1a70
    717  1a70		       00		      .byte.b	%00000000
    718  1a71		       00		      .byte.b	%00000000
    719  1a72		       18		      .byte.b	%00011000
    720  1a73		       18		      .byte.b	%00011000
    721  1a74		       3e		      .byte.b	%00111110
    722  1a75		       2a		      .byte.b	%00101010
    723  1a76		       ea		      .byte.b	%11101010
    724  1a77		       df		      .byte.b	%11011111
    725  1a78		       ff		      .byte.b	%11111111
    726  1a79		       ff		      .byte.b	%11111111
    727  1a7a		       7e		      .byte.b	%01111110
    728  1a7b		       18		      .byte.b	%00011000
    729  1a7c		       00		      .byte.b	%00000000
    730  1a7d		       00		      .byte.b	%00000000
    731  1a7e
    732  1a7e		       c6		      .byte.b	$C6
    733  1a7f		       00		      .byte.b	0
    734  1a80
    735  1a80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  1a80							; 8 - cabbage
    737  1a80
    738  1a80		       18		      .byte.b	%00011000
    739  1a81		       76		      .byte.b	%01110110
    740  1a82		       76		      .byte.b	%01110110
    741  1a83		       7a		      .byte.b	%01111010
    742  1a84		       f9		      .byte.b	%11111001
    743  1a85		       fb		      .byte.b	%11111011
    744  1a86		       ed		      .byte.b	%11101101
    745  1a87		       db		      .byte.b	%11011011
    746  1a88		       fb		      .byte.b	%11111011
    747  1a89		       e9		      .byte.b	%11101001
    748  1a8a		       56		      .byte.b	%01010110
    749  1a8b		       76		      .byte.b	%01110110
    750  1a8c		       6e		      .byte.b	%01101110
    751  1a8d		       18		      .byte.b	%00011000
    752  1a8e
    753  1a8e		       da		      .byte.b	$DA
    754  1a8f		       00		      .byte.b	0
    755  1a90
    756  1a90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  1a90							; 9 - celery
    758  1a90
    759  1a90		       c0		      .byte.b	%11000000
    760  1a91		       e0		      .byte.b	%11100000
    761  1a92		       70		      .byte.b	%01110000
    762  1a93		       30		      .byte.b	%00110000
    763  1a94		       18		      .byte.b	%00011000
    764  1a95		       18		      .byte.b	%00011000
    765  1a96		       0c		      .byte.b	%00001100
    766  1a97		       0c		      .byte.b	%00001100
    767  1a98		       0e		      .byte.b	%00001110
    768  1a99		       06		      .byte.b	%00000110
    769  1a9a		       0d		      .byte.b	%00001101
    770  1a9b		       0b		      .byte.b	%00001011
    771  1a9c		       0d		      .byte.b	%00001101
    772  1a9d		       06		      .byte.b	%00000110
    773  1a9e
    774  1a9e		       d6		      .byte.b	$D6
    775  1a9f		       00		      .byte.b	0
    776  1aa0
    777  1aa0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  1aa0							; A - green pepper
    779  1aa0
    780  1aa0		       6c		      .byte.b	%01101100
    781  1aa1		       6c		      .byte.b	%01101100
    782  1aa2		       fe		      .byte.b	%11111110
    783  1aa3		       fe		      .byte.b	%11111110
    784  1aa4		       f6		      .byte.b	%11110110
    785  1aa5		       f6		      .byte.b	%11110110
    786  1aa6		       f6		      .byte.b	%11110110
    787  1aa7		       f6		      .byte.b	%11110110
    788  1aa8		       f6		      .byte.b	%11110110
    789  1aa9		       ec		      .byte.b	%11101100
    790  1aaa		       7c		      .byte.b	%01111100
    791  1aab		       10		      .byte.b	%00010000
    792  1aac		       18		      .byte.b	%00011000
    793  1aad		       08		      .byte.b	%00001000
    794  1aae
    795  1aae		       c8		      .byte.b	$C8
    796  1aaf		       00		      .byte.b	0
    797  1ab0
    798  1ab0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  1ab0							; B - potato
    800  1ab0
    801  1ab0		       00		      .byte.b	%00000000
    802  1ab1		       00		      .byte.b	%00000000
    803  1ab2		       00		      .byte.b	%00000000
    804  1ab3		       1c		      .byte.b	%00011100
    805  1ab4		       7e		      .byte.b	%01111110
    806  1ab5		       ff		      .byte.b	%11111111
    807  1ab6		       ff		      .byte.b	%11111111
    808  1ab7		       ef		      .byte.b	%11101111
    809  1ab8		       f6		      .byte.b	%11110110
    810  1ab9		       78		      .byte.b	%01111000
    811  1aba		       30		      .byte.b	%00110000
    812  1abb		       00		      .byte.b	%00000000
    813  1abc		       00		      .byte.b	%00000000
    814  1abd		       00		      .byte.b	%00000000
    815  1abe
    816  1abe		       f6		      .byte.b	$F6
    817  1abf		       00		      .byte.b	0
    818  1ac0
    819  1ac0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  1ac0							; C - mushroom
    821  1ac0
    822  1ac0		       00		      .byte.b	%00000000
    823  1ac1		       18		      .byte.b	%00011000
    824  1ac2		       18		      .byte.b	%00011000
    825  1ac3		       18		      .byte.b	%00011000
    826  1ac4		       18		      .byte.b	%00011000
    827  1ac5		       99		      .byte.b	%10011001
    828  1ac6		       db		      .byte.b	%11011011
    829  1ac7		       ff		      .byte.b	%11111111
    830  1ac8		       ff		      .byte.b	%11111111
    831  1ac9		       ff		      .byte.b	%11111111
    832  1aca		       7e		      .byte.b	%01111110
    833  1acb		       7e		      .byte.b	%01111110
    834  1acc		       18		      .byte.b	%00011000
    835  1acd		       00		      .byte.b	%00000000
    836  1ace
    837  1ace		       08		      .byte.b	$08
    838  1acf		       00		      .byte.b	0
    839  1ad0
    840  1ad0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  1ad0							; D - key
    842  1ad0
    843  1ad0		       10		      .byte.b	%00010000
    844  1ad1		       1e		      .byte.b	%00011110
    845  1ad2		       1e		      .byte.b	%00011110
    846  1ad3		       18		      .byte.b	%00011000
    847  1ad4		       1e		      .byte.b	%00011110
    848  1ad5		       1e		      .byte.b	%00011110
    849  1ad6		       10		      .byte.b	%00010000
    850  1ad7		       10		      .byte.b	%00010000
    851  1ad8		       10		      .byte.b	%00010000
    852  1ad9		       10		      .byte.b	%00010000
    853  1ada		       38		      .byte.b	%00111000
    854  1adb		       6c		      .byte.b	%01101100
    855  1adc		       6c		      .byte.b	%01101100
    856  1add		       38		      .byte.b	%00111000
    857  1ade
    858  1ade		       2c		      .byte.b	$2C
    859  1adf		       00		      .byte.b	0
    860  1ae0
    861  1ae0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  1ae0							; E - ring
    863  1ae0
    864  1ae0		       00		      .byte.b	%00000000
    865  1ae1		       18		      .byte.b	%00011000
    866  1ae2		       3c		      .byte.b	%00111100
    867  1ae3		       66		      .byte.b	%01100110
    868  1ae4		       42		      .byte.b	%01000010
    869  1ae5		       42		      .byte.b	%01000010
    870  1ae6		       42		      .byte.b	%01000010
    871  1ae7		       66		      .byte.b	%01100110
    872  1ae8		       3c		      .byte.b	%00111100
    873  1ae9		       18		      .byte.b	%00011000
    874  1aea		       18		      .byte.b	%00011000
    875  1aeb		       2c		      .byte.b	%00101100
    876  1aec		       18		      .byte.b	%00011000
    877  1aed		       00		      .byte.b	%00000000
    878  1aee
    879  1aee		       2c		      .byte.b	$2C
    880  1aef		       00		      .byte.b	0
    881  1af0
    882  1af0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  1af0							; F - heart
    884  1af0
    885  1af0		       00		      .byte.b	%00000000
    886  1af1		       18		      .byte.b	%00011000
    887  1af2		       18		      .byte.b	%00011000
    888  1af3		       3c		      .byte.b	%00111100
    889  1af4		       3c		      .byte.b	%00111100
    890  1af5		       7e		      .byte.b	%01111110
    891  1af6		       7e		      .byte.b	%01111110
    892  1af7		       ff		      .byte.b	%11111111
    893  1af8		       ff		      .byte.b	%11111111
    894  1af9		       ff		      .byte.b	%11111111
    895  1afa		       e7		      .byte.b	%11100111
    896  1afb		       e7		      .byte.b	%11100111
    897  1afc		       42		      .byte.b	%01000010
    898  1afd		       00		      .byte.b	%00000000
    899  1afe
    900  1afe		       4a		      .byte.b	$4A
    901  1aff		       00		      .byte.b	0
    902  1b00
    903  1b00				   RainbowColors
    904  1b00
    905  1b00		       64		      .byte.b	$64
    906  1b01		       88		      .byte.b	$88
    907  1b02		       c8		      .byte.b	$C8
    908  1b03		       1e		      .byte.b	$1E
    909  1b04		       28		      .byte.b	$28
    910  1b05		       44		      .byte.b	$44
    911  1b06
    912  1b06		       00		      .byte.b	0
    913  1b07
    914  1b07				   CatTartGfx
    915  1b07
    916  1b07		       00		      .byte.b	%00000000
    917  1b08		       00		      .byte.b	%00000000
    918  1b09		       e0		      .byte.b	%11100000
    919  1b0a		       c0		      .byte.b	%11000000
    920  1b0b		       c0		      .byte.b	%11000000
    921  1b0c		       c0		      .byte.b	%11000000
    922  1b0d		       c0		      .byte.b	%11000000
    923  1b0e		       c0		      .byte.b	%11000000
    924  1b0f		       c0		      .byte.b	%11000000
    925  1b10		       e0		      .byte.b	%11100000
    926  1b11		       e0		      .byte.b	%11100000
    927  1b12		       e0		      .byte.b	%11100000
    928  1b13		       e0		      .byte.b	%11100000
    929  1b14		       e0		      .byte.b	%11100000
------- FILE main.asm
     83  1b15
     84  1b15
     85  1b15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  1b15							; End of ROM
     87  1b15							;
     88  1b15							; Define the end of the cartridge
     89  1b15							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  1b15
     91  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     92  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     93  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     94  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
