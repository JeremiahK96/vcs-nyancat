------- FILE main.asm LEVEL 1 PASS 2
      1  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  4000 ????						; Project - Nyan Cat Game
      3  4000 ????						; by Jeremiah Knol
      4  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  4000 ????						; 11-01-2018 Version 4.3
      6  4000 ????						;
      7  4000 ????						; Add music
      8  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  4000 ????
     10  4000 ????				      PROCESSOR	6502
     11  4000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  4000 ????				      include	headers/vcs.h
      1  4000 ????						; VCS.H
      2  4000 ????						; Version 1.05, 13/November/2003
      3  4000 ????
      4  4000 ????	       00 69	   VERSION_VCS =	105
      5  4000 ????
      6  4000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  4000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  4000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  4000 ????						;
     10  4000 ????						; This file defines hardware registers and memory mapping for the
     11  4000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  4000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  4000 ????						; available at at http://www.atari2600.org/dasm
     14  4000 ????						;
     15  4000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  4000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  4000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  4000 ????						; with your views.  Please contribute, if you think you can improve this
     19  4000 ????						; file!
     20  4000 ????						;
     21  4000 ????						; Latest Revisions...
     22  4000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  4000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  4000 ????						;			    This will allow conditional code to verify VCS.H being
     25  4000 ????						;			    used for code assembly.
     26  4000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  4000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  4000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  4000 ????						;			 readability issue, and binary compatibility with disassembled
     30  4000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  4000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  4000 ????						;			 which was broken by the use of segments in this file, as
     33  4000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  4000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  4000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  4000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  4000 ????						;						   it is safe to leave it undefined, and the base address will
     38  4000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  4000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  4000 ????						;			  - register definitions are now generated through assignment
     41  4000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  4000 ????						;			    address architecture.
     43  4000 ????						; 1.0	22/MAR/2003		Initial release
     44  4000 ????
     45  4000 ????
     46  4000 ????						;-------------------------------------------------------------------------------
     47  4000 ????
     48  4000 ????						; TIA_BASE_ADDRESS
     49  4000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  4000 ????						; Normally 0, the base address should (externally, before including this file)
     51  4000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  4000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  4000 ????						; < $40 as a bankswitch.
     54  4000 ????
     55  4000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  4000 ????			  -TIA_BASE_ADDRESS =	0
     57  4000 ????				      ENDIF
     58  4000 ????
     59  4000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  4000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  4000 ????						; *OR* by declaring the label before including this file, eg:
     62  4000 ????						; TIA_BASE_ADDRESS = $40
     63  4000 ????						;   include "vcs.h"
     64  4000 ????
     65  4000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  4000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  4000 ????						; for the mirrored ROM hardware registers.
     68  4000 ????
     69  4000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  4000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  4000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  4000 ????
     73  4000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  4000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  4000 ????				      ENDIF
     76  4000 ????
     77  4000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  4000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  4000 ????				      ENDIF
     80  4000 ????
     81  4000 ????						;-------------------------------------------------------------------------------
     82  4000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????	       00 28	   VBLANK_LINES_NTSC equ	40
     48  0000 ????	       00 1e	   OSCAN_LINES_NTSC equ	30
     49  0000 ????	       00 2b	   VBLANK_NTSC equ	[[VBLANK_LINES_NTSC - 3] * 76 - 7] / 64
     50  0000 ????	       00 24	   OSCAN_NTSC equ	[[OSCAN_LINES_NTSC] * 76 + 26] / 64
     51  0000 ????
     52  0000 ????	       00 42	   VBLANK_LINES_PAL equ	66
     53  0000 ????	       00 36	   OSCAN_LINES_PAL equ	54
     54  0000 ????	       00 4a	   VBLANK_PAL equ	[[VBLANK_LINES_PAL - 3] * 76 - 7] / 64
     55  0000 ????	       00 40	   OSCAN_PAL  equ	[[OSCAN_LINES_PAL] * 76 + 26] / 64
     56  0000 ????
     57  0000 ????						; colors
     58  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     59  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     60  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     61  0000 ????	       00 08	   COL_CAT_FACE equ	$08
     62  0000 ????	       00 5f	   COL_CAT_TART equ	$5F
     63  0000 ????
     64  0000 ????						; luminosity values for throb line data
     65  0000 ????	       00 00	   LUM_0      equ	$0>>1
     66  0000 ????	       00 01	   LUM_2      equ	$2>>1
     67  0000 ????	       00 02	   LUM_4      equ	$4>>1
     68  0000 ????	       00 03	   LUM_6      equ	$6>>1
     69  0000 ????	       00 04	   LUM_8      equ	$8>>1
     70  0000 ????	       00 05	   LUM_A      equ	$A>>1
     71  0000 ????	       00 06	   LUM_C      equ	$C>>1
     72  0000 ????	       00 07	   LUM_E      equ	$E>>1
     73  0000 ????
     74  0000 ????						; color modes for throb line data
     75  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     76  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     77  0000 ????
     78  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     79  0000 ????
     80  0000 ????						; bankswitching hotspots
     81  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     82  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     83  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     84  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00ab ????				      SEG.U	VARS
      6 U00ab ????				      RORG	$80
      7 U00ab ????
------- FILE headers/ram_global.asm LEVEL 3 PASS 2
      0 U00ab ????				      include	headers/ram_global.asm
      1 U00ab ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00ab ????						; Global Variables
      3 U00ab ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U00ab ????						; These variables are used globally and cannot be shared or otherwise corrupted
      5 U00ab ????						;
      6 U00ab ????						; Uses 13 bytes of RAM
      7 U00ab ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U00ab ????
      9 U00ab ????			   RamGlobal
     10 U00ab ????
     11 U00ab ????						; Game housekeeping - 2 bytes
     12 U00ab ????	       00	   Frame      ds	1	; current frame mod 256
     13 U00ac ????			   Variation		; game variation options
     14 U00ac ????	       00		      ds	1	; x-------	number of players
     15 U00ad ????						; -x------	current player
     16 U00ad ????						; --xx----	P1 difficulty
     17 U00ad ????						; ----xx--	P2 difficulty
     18 U00ad ????
     19 U00ad ????						; Scores and current level - 7 bytes
     20 U00ad ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     21 U00ad ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     22 U00b3 ????						; last 3 for player 2.
     23 U00b3 ????			   Level		; value for the current level
     24 U00b3 ????	       00		      ds	1
     25 U00b4 ????
     26 U00b4 ????						; Random Numbers - 2 bytes
     27 U00b4 ????	       00 00	   Rand16     ds	2	; 16-bit random number
     28 U00b6 ????
     29 U00b6 ????						; Cat colors - 2 bytes
     30 U00b6 ????			   CatTartColor 		; color for current player's cat in the kernels
     31 U00b6 ????	       00		      ds	1
     32 U00b7 ????			   OtherTartColor		; color for the other player's cat
     33 U00b7 ????	       00		      ds	1
     34 U00b8 ????
     35 U00b8 ????			   MusicNote
     36 U00b8 ????	       00		      ds	1
     37 U00b9 ????			   NoteData
     38 U00b9 ????	       00		      ds	1
     39 U00ba ????
     40 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41 U00ba ????						; Local Variables
     42 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43 U00ba ????						; These variables are only used locally, and are redefined for each area of code
     44 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45 U00ba ????
     46 U00ba ????			   RamLocal
     47 U00ba ????
------- FILE headers/variables.h
------- FILE headers/ram_menu.asm LEVEL 3 PASS 2
      0 U00ba ????				      include	headers/ram_menu.asm
      1 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00ba ????						; Menu Variables
      3 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U00ba ????						; These variables are only needed in the main menu routine.
      5 U00ba ????						;
      6 U00ba ????						; Uses 96 bytes of RAM
      7 U00ba ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U00ba ????
      9 U00ba ????				      RORG	RamLocal
     10 U00ba ????
     11 U00ba ????						; Menu navigation - 1 byte
     12 U00ba ????			   CursorPos		; -----xxx	cursor position
     13 U00ba ????
     14 U00ba ????						; Frame counters - 2 bytes
     15 U00ba ????			   MenuCatFrame 		; animation frame for menu cat
     16 U00ba ????	       00		      ds	1
     17 U00bb ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     18 U00bb ????	       00		      ds	1
     19 U00bc ????
     20 U00bc ????						; Pointers - 8 bytes
     21 U00bc ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     22 U00bc ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     23 U00bc ????	       00 00		      ds	2
     24 U00be ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     25 U00be ????	       00 00		      ds	2
     26 U00c0 ????			   MenuCatMslPtr		; pointer used to access missile graphics
     27 U00c0 ????	       00 00		      ds	2
     28 U00c2 ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     29 U00c2 ????	       00 00		      ds	2
     30 U00c4 ????
     31 U00c4 ????						; Pre-load variables for within kernel - 4 bytes
     32 U00c4 ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     33 U00c4 ????	       00		      ds	1
     34 U00c5 ????			   RamMenuCatMissile		; missile graphics in menu cat
     35 U00c5 ????	       00		      ds	1
     36 U00c6 ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
     37 U00c6 ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
     38 U00c6 ????	       00		      ds	1
     39 U00c7 ????			   MenuCatShift
     40 U00c7 ????	       00		      ds	1
     41 U00c8 ????
     42 U00c8 ????						; Data blocks - 82 bytes
     43 U00c8 ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
     44 U00c8 ????	       00 00 00 00*	      ds	14
     45 U00d6 ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
     46 U00d6 ????	       00 00 00 00*	      ds	15
     47 U00e5 ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
     48 U00e5 ????	       00 00 00 00*	      ds	15
     49 U00f4 ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
     50 U00f4 ????	       00 00 00 00*	      ds	16
     51 U0104 ????	       00		      ds	1	; extra byte needed for next data block
     52 U0105 ????			   RamBowColorsBk		; rainbow colors
     53 U0105 ????	       00 00 00 00*	      ds	20
     54 U0119 ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
     55 U0119 ????	       00		      ds	1
     56 U011a ????
     57 U011a ????						; 18 bytes free
------- FILE headers/variables.h
------- FILE headers/ram_gameplay.asm LEVEL 3 PASS 2
      0 U011a ????				      include	headers/ram_gameplay.asm
      1 U011a ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U011a ????						; Gameplay variables
      3 U011a ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U011a ????						; These variables are only needed in the gameplay routine
      5 U011a ????						;
      6 U011a ????						; Uses 55 bytes of RAM
      7 U011a ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U011a ????
      9 U011a ????				      RORG	RamLocal
     10 U011a ????
     11 U011a ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12 U011a ????						; Variables that shouldn't be shared - ? bytes
     13 U011a ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14 U011a ????
     15 U011a ????						; Pointers - 14 bytes
     16 U011a ????
     17 U011a ????						; The unused 3 bits of the high byte in each pointer
     18 U011a ????						; may be used for the speeds of each row
     19 U011a ????
     20 U011a ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
     21 U011a ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     22 U011a ????	       00 00		      ds	2
     23 U011c ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
     24 U011c ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     25 U011c ????	       00 00		      ds	2
     26 U011e ????			   TartGfxPtr1		; pointer for the tart graphics
     27 U011e ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     28 U011e ????	       00 00		      ds	2
     29 U0120 ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
     30 U0120 ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     31 U0120 ????	       00 00		      ds	2
     32 U0122 ????			   TartGfxPtr2		; pointer for the tart graphics
     33 U0122 ????			   HthGfxLPtr		; pointer for left half of the health graphics
     34 U0122 ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     35 U0122 ????	       00 00		      ds	2
     36 U0124 ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
     37 U0124 ????			   HthGfxRPtr		; pointer for right half of the health graphics
     38 U0124 ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     39 U0124 ????	       00 00		      ds	2
     40 U0126 ????			   ThrobPtr		; pointer for loading the throb colors
     41 U0126 ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     42 U0126 ????	       00 00		      ds	2
     43 U0128 ????
     44 U0128 ????						; Variable game colors - 2 bytes
     45 U0128 ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
     46 U0129 ????	       00	   PgBarColor ds	1	; color for full part of progress bar
     47 U012a ????
     48 U012a ????						; Variables used when drawing the cat - 5 bytes
     49 U012a ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     50 U012b ????			   CatPosition		; data describing the cat's position
     51 U012b ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     52 U012c ????						; bits 4-0 store the number of scanlines to skip after
     53 U012c ????						; top of the cat's row before drawing the cat, from 0-18
     54 U012c ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
     55 U012d ????			   JoyCenter		; least significant bit, true if joystick has been returned to center
     56 U012d ????	       00		      ds	1
     57 U012e ????			   PreCatRows		; number of rows to draw before the two "cat" rows
     58 U012e ????	       00		      ds	1
     59 U012f ????
     60 U012f ????						; Variables used for the food items - 21 bytes
     61 U012f ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
     62 U012f ????	       00 00 00 00*	      ds	7	; this frame.
     63 U0136 ????						; Lo nybble either holds the pre-loaded value of the next
     64 U0136 ????						; food item to appear in this row, or temporarily holds the
     65 U0136 ????						; 3rd food item which isn't shown this frame, based on how many
     66 U0136 ????						; food items are visible in this row (2-3), which is determined
     67 U0136 ????						; by the position of the leftmost food item.
     68 U0136 ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
     69 U0136 ????	       00 00 00 00*	      ds	7	; this frame.
     70 U013d ????						; Lo nybble holds the fractional positional value
     71 U013d ????						; for the row's position (0-15).
     72 U013d ????			   FoodPosX		; (range 0-88)
     73 U013d ????	       00 00 00 00*	      ds	7
     74 U0144 ????
     75 U0144 ????						; Variables for the progress bar and health display - 2 bytes
     76 U0144 ????			   Progress		; value for level progress, which can be
     77 U0144 ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     78 U0145 ????			   Health		; amount of health
     79 U0145 ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     80 U0146 ????						;ProgressBar	; array of 5 playfield values for progress bar
     81 U0146 ????						; (shared with next 5 bytes of RAM)
     82 U0146 ????
     83 U0146 ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
     84 U0146 ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
     85 U0146 ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
     86 U0149 ????			   CatRow2FoodL
     87 U0149 ????	       00		      ds	1
     88 U014a ????			   CatRow2FoodR
     89 U014a ????	       00		      ds	1
     90 U014b ????			   CatRow2Color1
     91 U014b ????	       00		      ds	1
     92 U014c ????			   CatRow2Color2
     93 U014c ????	       00		      ds	1
     94 U014d ????
     95 U014d ????						; Variables for the throbbing lines' colors - 4 bytes
     96 U014d ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     97 U0150 ????						; throbbing lines. The first color is darkest,
     98 U0150 ????						; the last is brightest.
     99 U0150 ????	       00	   CatThrobPF ds	1
    100 U0151 ????
    101 U0151 ????						; Temporary variables - 2 bytes
    102 U0151 ????			   ProgressBar
    103 U0151 ????	       00	   Temp       ds	1
    104 U0152 ????	       00	   TempLoop   ds	1
    105 U0153 ????
    106 U0153 ????						; 51 bytes free
    107 U0153 ????
    108 U0153 ????						; Variables which can be shared with the scoreboard stack - 3 bytes
    109 U0153 ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    110 U0154 ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    111 U0155 ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    112 U0156 ????
    113 U0156 ????						; 7 of 15 available temporary RAM bytes used (8 left)
    114 U0156 ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    115 U0156 ????
    116 U0156 ????				      RORG	$100 - 34
    117 U0156 ????			   RamBowColors
------- FILE headers/variables.h
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U0156 ????				      include	headers/macros.h
      1 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0156 ????						; Start Bank
      3 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0156 ????						; Takes an integer for the bank
      5 U0156 ????						;
      6 U0156 ????						; Placed at the start of each bank
      7 U0156 ????						; Sets the bank's ROM location, and adds the global jump table
      8 U0156 ????						;
      9 U0156 ????						; Uses 18 bytes of ROM for the jump table
     10 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U0156 ????
     12 U0156 ????				      MAC	start_bank
     13 U0156 ????				      SEG	BANK_{1}
     14 U0156 ????				      ORG	[{1} - 1] * $1000
     15 U0156 ????				      RORG	$1000
     16 U0156 ????				      SUBROUTINE
     17 U0156 ????
     18 U0156 ????			   JmpInitSystem
     19 U0156 ????				      nop	SelectBank1
     20 U0156 ????				      jmp	InitSystem
     21 U0156 ????			   JmpMenuOverScan
     22 U0156 ????				      nop	SelectBank1
     23 U0156 ????				      jmp	MenuOverScan
     24 U0156 ????			   JmpGamePlay
     25 U0156 ????				      nop	SelectBank2
     26 U0156 ????				      jmp	GameplayInit
     27 U0156 ????
     28 U0156 ????				      ENDM
     29 U0156 ????
     30 U0156 ????
     31 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     32 U0156 ????						; End Bank
     33 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34 U0156 ????						; Takes an integer for the bank
     35 U0156 ????						;
     36 U0156 ????						; Placed at the end of each bank
     37 U0156 ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     38 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     39 U0156 ????
     40 U0156 ????				      MAC	end_bank
     41 U0156 ????				      ORG	[{1} - 1] * $1000 + $0FFA
     42 U0156 ????
     43 U0156 ????				      .word	JmpInitSystem	; NMI
     44 U0156 ????				      .word	JmpInitSystem	; RESET
     45 U0156 ????				      .word	JmpInitSystem	; IRQ
     46 U0156 ????
     47 U0156 ????				      ENDM
     48 U0156 ????
     49 U0156 ????
     50 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51 U0156 ????						; Set Overscan Timer
     52 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0156 ????						; Sets and starts the timer for the overscan
     54 U0156 ????						;
     55 U0156 ????						; Uses 13 bytes of ROM
     56 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57 U0156 ????
     58 U0156 ????				      MAC	set_oscan_timer
     59 U0156 ????				      SUBROUTINE
     60 U0156 ????
     61 U0156 ????				      lda	#OSCAN_NTSC
     62 U0156 ????				      bit	Variation
     63 U0156 ????				      bmi	.NtscMode
     64 U0156 ????				      lda	#OSCAN_PAL
     65 U0156 ????			   .NtscMode
     66 U0156 ????				      sta	WSYNC
     67 U0156 ????				      sta	TIM64T	; set overscan timer
     68 U0156 ????
     69 U0156 ????				      ENDM
     70 U0156 ????
     71 U0156 ????
     72 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73 U0156 ????						; Vertical Sync
     74 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75 U0156 ????						; Performs a vertical sync, and starts the timer for vertical blanking
     76 U0156 ????						;
     77 U0156 ????						; Uses 22 bytes of ROM
     78 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U0156 ????
     80 U0156 ????				      MAC	vert_sync
     81 U0156 ????				      SUBROUTINE
     82 U0156 ????
     83 U0156 ????				      ldx	#VBLANK_NTSC	; TIM64T value for NTSC mode
     84 U0156 ????				      bit	Variation
     85 U0156 ????				      bmi	.NtscMode
     86 U0156 ????				      ldx	#VBLANK_PAL	; TIM64T value for PAL mode
     87 U0156 ????			   .NtscMode
     88 U0156 ????				      lda	#%1110
     89 U0156 ????			   .VsyncLoop
     90 U0156 ????				      sta	WSYNC
     91 U0156 ????				      sta	VSYNC
     92 U0156 ????				      sta	VBLANK
     93 U0156 ????				      stx	TIM64T
     94 U0156 ????				      lsr
     95 U0156 ????				      bne	.VsyncLoop
     96 U0156 ????
     97 U0156 ????				      ENDM
     98 U0156 ????
     99 U0156 ????
    100 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101 U0156 ????						; Timer Loop
    102 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103 U0156 ????						; Loops until the timer runs down
    104 U0156 ????						; Used to finish vertical blanking and overscan
    105 U0156 ????						;
    106 U0156 ????						; Uses 5 bytes of ROM
    107 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108 U0156 ????
    109 U0156 ????				      MAC	timer_loop
    110 U0156 ????				      SUBROUTINE
    111 U0156 ????
    112 U0156 ????			   .TimerLoop
    113 U0156 ????				      lda	INTIM
    114 U0156 ????				      bne	.TimerLoop	; loop until end of vertical blanking
    115 U0156 ????
    116 U0156 ????				      ENDM
    117 U0156 ????
    118 U0156 ????
    119 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    120 U0156 ????						; Throb Rainbow Background
    121 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122 U0156 ????						; Checks the background color, and if black, the throb color is used instead
    123 U0156 ????						; The throb color must be pre-loaded into the X register
    124 U0156 ????						;
    125 U0156 ????						; Uses 11 bytes of ROM
    126 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    127 U0156 ????
    128 U0156 ????				      MAC	throb_rainbow_bk
    129 U0156 ????				      SUBROUTINE
    130 U0156 ????			   .X	      SET	{1}
    131 U0156 ????
    132 U0156 ????				      lda	RamBowColors+.X	; 3
    133 U0156 ????				      bne	.Rainbow	; 5/6
    134 U0156 ????				      stx	COLUBK	; 8
    135 U0156 ????				      beq	.End	; 11
    136 U0156 ????			   .Rainbow
    137 U0156 ????				      sta	COLUBK	; 9
    138 U0156 ????				      nop		; 11
    139 U0156 ????			   .End
    140 U0156 ????				      ENDM
    141 U0156 ????
    142 U0156 ????
    143 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    144 U0156 ????						; Throb Rainbow Playfield
    145 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    146 U0156 ????						; Checks the playfield color, and if black, the throb color is used instead
    147 U0156 ????						; The throb color must be pre-loaded into the X register
    148 U0156 ????						;
    149 U0156 ????						; Uses 11 bytes of ROM
    150 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    151 U0156 ????
    152 U0156 ????				      MAC	throb_rainbow_pf
    153 U0156 ????				      SUBROUTINE
    154 U0156 ????			   .X	      SET	{1}
    155 U0156 ????
    156 U0156 ????				      lda	RamBowColors+.X	; 3
    157 U0156 ????				      bne	.Rainbow	; 5/6
    158 U0156 ????				      stx	COLUPF	; 8
    159 U0156 ????				      beq	.End	; 11
    160 U0156 ????			   .Rainbow
    161 U0156 ????				      sta	COLUPF	; 9
    162 U0156 ????				      nop		; 11
    163 U0156 ????			   .End
    164 U0156 ????				      ENDM
    165 U0156 ????
    166 U0156 ????
    167 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168 U0156 ????						; Jump to Next Page
    169 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    170 U0156 ????						; Jumps to the beginning of the next page, padding the end of the current one
    171 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U0156 ????
    173 U0156 ????				      MAC	next_page
    174 U0156 ????				      SUBROUTINE
    175 U0156 ????
    176 U0156 ????				      jmp	.NextPage
    177 U0156 ????				      ALIGN	$100
    178 U0156 ????			   .NextPage
    179 U0156 ????
    180 U0156 ????				      ENDM
    181 U0156 ????
    182 U0156 ????
    183 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    184 U0156 ????						; Skip Word
    185 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186 U0156 ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    187 U0156 ????						; skipping the next two bytes of ROM.
    188 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189 U0156 ????
    190 U0156 ????				      MAC	skip_word
    191 U0156 ????				      HEX	0C
    192 U0156 ????				      ENDM
------- FILE main.asm
     18 U0156 ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U0156 ????				      include	bank1.asm
      1 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0156 ????						; Bank 1
      3 U0156 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0156 ????
      0 U0156 ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 12 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c 20 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c		       0c f7 1f 	      nop	SelectBank2
     14  000f		       4c 12 10 	      jmp	GameplayInit
     15  0012
      6  0012
------- FILE init.asm LEVEL 3 PASS 2
      0  0012					      include	init.asm
      1  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0012							; Clear system registers and RAM
      3  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0012							; Uses 14 bytes of ROM
      5  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0012
      7  0012				   InitSystem
      8  0012
      9  0012							; clear CPU and zeropage
     10  0012		       d8		      cld
     11  0013		       ab 00		      lxa	#0
     12  0015		       a8		      tay
     13  0016				   .ClearStack
     14  0016		       ca		      dex
     15  0017		       9a		      txs
     16  0018		       48		      pha
     17  0019		       d0 fb		      bne	.ClearStack
     18  001b
     19  001b							; check for forced 50hz mode
     20  001b		       4e 82 02 	      lsr	SWCHB	; reset switch state -> carry flag
     21  001e		       66 81		      ror	Variation	; write to D7
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  0020					      include	bank1/code/oscan_logic.asm
      1  0020							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0020							; Overscan logic for menu
      3  0020							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0020
      5  0020				   MenuOverScan
      0  0020					      SET_OSCAN_TIMER
      1  0020					      SUBROUTINE
      2  0020
      3  0020		       a9 24		      lda	#OSCAN_NTSC
      4  0022		       24 81		      bit	Variation
      5  0024		       30 02		      bmi	.NtscMode
      6  0026		       a9 40		      lda	#OSCAN_PAL
      7  0028				   .NtscMode
      8  0028		       85 02		      sta	WSYNC
      9  002a		       8d 96 02 	      sta	TIM64T
     10  002d
      7  002d
      8  002d		       a9 02		      lda	#2	; temp menu bypass
      9  002f		       2c 82 02 	      bit	SWCHB
     10  0032		       d0 03		      bne	.NoResetPress
     11  0034		       4c 0c 10 	      jmp	JmpGamePlay
     12  0037				   .NoResetPress
     13  0037
     14  0037		       e6 80		      inc	Frame	; next frame
     15  0039		       a5 80		      lda	Frame
     16  003b		       29 03		      and	#%00000011	; update animation every 4 frames
     17  003d		       d0 0b		      bne	.NoFrameInc
     18  003f
     19  003f		       a6 8f		      ldx	MenuCatFrame
     20  0041		       e8		      inx
     21  0042		       e0 06		      cpx	#6
     22  0044		       d0 02		      bne	.NoReset
     23  0046		       a2 00		      ldx	#0
     24  0048				   .NoReset
     25  0048		       86 8f		      stx	MenuCatFrame
     26  004a				   .NoFrameInc
     27  004a
      0  004a					      TIMER_LOOP
      1  004a					      SUBROUTINE
      2  004a
      3  004a				   .TimerLoop
      4  004a		       ad 84 02 	      lda	INTIM
      5  004d		       d0 fb		      bne	.TimerLoop
      6  004f
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  004f					      include	bank1/code/vblank_logic.asm
      1  004f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  004f							; Vertical Sync and Logic
      3  004f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  004f
      0  004f					      VERT_SYNC		; 11
      1  004f					      SUBROUTINE
      2  004f
      3  004f		       a2 2b		      ldx	#VBLANK_NTSC
      4  0051		       24 81		      bit	Variation
      5  0053		       30 02		      bmi	.NtscMode
      6  0055		       a2 4a		      ldx	#VBLANK_PAL
      7  0057				   .NtscMode
      8  0057		       a9 0e		      lda	#%1110
      9  0059				   .VsyncLoop
     10  0059		       85 02		      sta	WSYNC
     11  005b		       85 00		      sta	VSYNC
     12  005d		       85 01		      sta	VBLANK
     13  005f		       8e 96 02 	      stx	TIM64T
     14  0062		       4a		      lsr
     15  0063		       d0 f4		      bne	.VsyncLoop
     16  0065
      6  0065
      7  0065		       a2 ed		      ldx	#RamBowColorsBk+19
      8  0067		       a5 80		      lda	Frame
      9  0069		       29 08		      and	#%00001000
     10  006b		       d0 0f		      bne	.Rainbow1
     11  006d		       a9 e0		      lda	#%11100000
     12  006f		       85 0d		      sta	PF0
     13  0071		       a9 c1		      lda	#%11000001
     14  0073		       85 0e		      sta	PF1
     15  0075		       a9 eb		      lda	#RamBowColorsBk+17
     16  0077		       85 97		      sta	BowColorsPfPtr
     17  0079		       4c 89 10 	      jmp	.Rainbow2
     18  007c				   .Rainbow1
     19  007c		       ca		      dex
     20  007d		       a9 c0		      lda	#%11000000
     21  007f		       85 0d		      sta	PF0
     22  0081		       a9 e0		      lda	#%11100000
     23  0083		       85 0e		      sta	PF1
     24  0085		       a9 e9		      lda	#RamBowColorsBk+15
     25  0087		       85 97		      sta	BowColorsPfPtr
     26  0089				   .Rainbow2
     27  0089		       a9 00		      lda	#0
     28  008b		       85 98		      sta	BowColorsPfPtr+1
     29  008d
     30  008d		       a5 ee		      lda	MenuBgColor
     31  008f		       85 d9		      sta	RamBowColorsBk-1
     32  0091		       85 da		      sta	RamBowColorsBk
     33  0093		       85 db		      sta	RamBowColorsBk+1
     34  0095		       85 ec		      sta	RamBowColorsBk+18
     35  0097		       85 ed		      sta	RamBowColorsBk+19
     36  0099		       85 ee		      sta	RamBowColorsBk+20
     37  009b
     38  009b		       a5 8f		      lda	MenuCatFrame
     39  009d		       c9 02		      cmp	#2
     40  009f		       10 01		      bpl	.Jmp2
     41  00a1		       ca		      dex
     42  00a2				   .Jmp2
     43  00a2		       9a		      txs
     44  00a3
     45  00a3		       a2 00		      ldx	#0
     46  00a5		       a9 08		      lda	#%1000
     47  00a7		       2c 82 02 	      bit	SWCHB
     48  00aa		       d0 02		      bne	.NtscMode
     49  00ac		       a2 08		      ldx	#8
     50  00ae				   .NtscMode
     51  00ae
     52  00ae		       bd b9 18 	      lda	MenuColors,x
     53  00b1		       85 ee		      sta	MenuBgColor
     54  00b3		       e8		      inx
     55  00b4		       bd b9 18 	      lda	MenuColors,x
     56  00b7		       85 8b		      sta	CatTartColor
     57  00b9
     58  00b9		       a0 06		      ldy	#6
     59  00bb				   .SetBowColors
     60  00bb		       bd ba 18 	      lda	MenuColors+1,x
     61  00be		       48		      pha
     62  00bf		       48		      pha
     63  00c0		       48		      pha
     64  00c1		       e8		      inx
     65  00c2		       88		      dey
     66  00c3		       d0 f6		      bne	.SetBowColors
     67  00c5
     68  00c5		       a2 d8		      ldx	#RamMenuCatGfxR+15
     69  00c7		       9a		      txs
     70  00c8
     71  00c8							; push graphics for GRP1
     72  00c8		       a9 17		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
     73  00ca		       85 92		      sta	MenuCatRamPtr+1	; and set pointer to this page
     74  00cc		       a6 8f		      ldx	MenuCatFrame	; get animation frame
     75  00ce		       bd ad 18 	      lda	MenuCatOffsetGfx,x	; get offset within page
     76  00d1		       85 91		      sta	MenuCatRamPtr	; and set pointer address
     77  00d3
     78  00d3		       a0 0d		      ldy	#13
     79  00d5				   .LoopGfxR
     80  00d5		       b1 91		      lda	(MenuCatRamPtr),y	; get next byte of gfx
     81  00d7		       48		      pha		; and push to RAM
     82  00d8		       88		      dey
     83  00d9		       10 fa		      bpl	.LoopGfxR
     84  00db
     85  00db		       8a		      txa		; get animation frame
     86  00dc		       0a		      asl		; multiply by 2
     87  00dd		       a8		      tay
     88  00de		       b9 54 18 	      lda	MenuCatLowGfxR,y
     89  00e1		       48		      pha
     90  00e2		       c8		      iny
     91  00e3		       b9 54 18 	      lda	MenuCatLowGfxR,y
     92  00e6		       48		      pha
     93  00e7
     94  00e7							; push graphics for right copies of PF2
     95  00e7		       bd b3 18 	      lda	MenuCatOffsetPf,x
     96  00ea		       85 91		      sta	MenuCatRamPtr
     97  00ec
     98  00ec		       a0 0c		      ldy	#12
     99  00ee				   .LoopPfR
    100  00ee		       b1 91		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    101  00f0		       48		      pha		; and push to RAM
    102  00f1		       88		      dey
    103  00f2		       10 fa		      bpl	.LoopPfR
    104  00f4
    105  00f4		       8a		      txa		; get animation frame
    106  00f5		       0a		      asl		; multiply by 2
    107  00f6		       a8		      tay
    108  00f7		       b9 60 18 	      lda	MenuCatLowPfGfxR,y
    109  00fa		       48		      pha
    110  00fb		       c8		      iny
    111  00fc		       b9 60 18 	      lda	MenuCatLowPfGfxR,y
    112  00ff		       48		      pha
    113  0100		       85 9c		      sta	MenuCatShift	; use highest bit for cat face shift
    114  0102
    115  0102							; push graphics for left copies of PF2
    116  0102		       8a		      txa		; get animation frame
    117  0103		       0a		      asl
    118  0104		       0a		      asl
    119  0105		       0a		      asl
    120  0106		       38		      sec
    121  0107		       e5 8f		      sbc	MenuCatFrame
    122  0109		       0a		      asl		; multiply by 14 (clears carry flag)
    123  010a		       85 90		      sta	MenuCatFrameX14	; save to reuse later
    124  010c		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    125  010e		       85 91		      sta	MenuCatRamPtr	; and set pointer address
    126  0110
    127  0110		       a0 0e		      ldy	#14
    128  0112				   .LoopPfL
    129  0112		       b1 91		      lda	(MenuCatRamPtr),y
    130  0114		       48		      pha
    131  0115		       88		      dey
    132  0116		       10 fa		      bpl	.LoopPfL
    133  0118
    134  0118							; push graphics for GRP0
    135  0118		       a9 18		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    136  011a		       85 92		      sta	MenuCatRamPtr+1	; and set pointer to this page
    137  011c		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    138  011e		       85 91		      sta	MenuCatRamPtr	; and set pointer address
    139  0120
    140  0120		       a0 0d		      ldy	#13
    141  0122				   .LoopGfxL
    142  0122		       b1 91		      lda	(MenuCatRamPtr),y
    143  0124		       48		      pha
    144  0125		       88		      dey
    145  0126		       10 fa		      bpl	.LoopGfxL
    146  0128
    147  0128							; prepare graphics pointers for kernel
    148  0128		       a9 17		      lda	#>MenuCatGfxPage1
    149  012a		       85 94		      sta	MenuCatHmvPtrP+1
    150  012c		       85 96		      sta	MenuCatMslPtr+1
    151  012e		       a9 18		      lda	#>MenuCatGfxPage2
    152  0130		       85 92		      sta	MenuCatHmvPtrM+1
    153  0132
    154  0132		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    155  0134		       e0 05		      cpx	#5
    156  0136		       d0 03		      bne	.NotFrame5
    157  0138		       38		      sec
    158  0139		       e9 0e		      sbc	#14
    159  013b				   .NotFrame5
    160  013b		       18		      clc
    161  013c		       69 ad		      adc	#<MenuCatHmoveP
    162  013e		       85 93		      sta	MenuCatHmvPtrP
    163  0140		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    164  0142		       38		      sec
    165  0143		       e5 8f		      sbc	MenuCatFrame	; adjust to times 13
    166  0145		       e0 00		      cpx	#0
    167  0147		       f0 03		      beq	.Frame0
    168  0149		       38		      sec
    169  014a		       e9 0d		      sbc	#13
    170  014c				   .Frame0
    171  014c		       18		      clc
    172  014d		       69 6c		      adc	#<MenuCatHmoveM
    173  014f		       85 91		      sta	MenuCatHmvPtrM
    174  0151		       a0 f3		      ldy	#<MenuCatMslGfx
    175  0153		       e0 05		      cpx	#5
    176  0155		       d0 01		      bne	.Not5
    177  0157		       88		      dey
    178  0158				   .Not5
    179  0158		       84 95		      sty	MenuCatMslPtr
    180  015a
------- FILE bank1/code/music.asm LEVEL 4 PASS 2
      0  015a					      include	bank1/code/music.asm
      1  015a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  015a							; Music Engine
      3  015a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  015a							; Handles the main music melody, using voice 0
      5  015a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  015a
      7  015a							; NoteData:	-----xxx	frames left in note
      8  015a							;		xxxxx---	note length table offset
      9  015a
     10  015a							; MusicNote:	----xxxx	current note in sequence
     11  015a							;		xxxx----	current sequence table
     12  015a
     13  015a							; write audio registers for music
     14  015a
     15  015a							; volume
     16  015a							; frequency and voice
     17  015a
     18  015a							; get current note offset and store in Y
     19  015a		       a7 8d		      lax	MusicNote
     20  015c		       4a		      lsr
     21  015d		       4a		      lsr
     22  015e		       4a		      lsr
     23  015f		       4a		      lsr
     24  0160		       a8		      tay
     25  0161		       8a		      txa
     26  0162		       29 0f		      and	#$F
     27  0164		       18		      clc
     28  0165		       79 ea 18 	      adc	MusicSeqs,y
     29  0168		       a8		      tay
     30  0169
     31  0169							; set note volume and frequency
     32  0169		       a9 0c		      lda	#$C
     33  016b		       be fa 18 	      ldx	MusicSeq0,y
     34  016e		       f0 08		      beq	.Hold
     35  0170		       10 02		      bpl	.HiNote
     36  0172		       a9 04		      lda	#$4
     37  0174		       85 15	   .HiNote    sta	AUDC0
     38  0176		       86 17		      stx	AUDF0
     39  0178				   .Hold
     40  0178
     41  0178							; set note volume
     42  0178		       a5 8e		      lda	NoteData
     43  017a		       4a		      lsr
     44  017b		       4a		      lsr
     45  017c		       4a		      lsr
     46  017d		       a8		      tay
     47  017e
     48  017e		       a5 8e		      lda	NoteData
     49  0180		       29 07		      and	#7
     50  0182
     51  0182		       ca		      dex
     52  0183		       e8		      inx
     53  0184		       d0 04		      bne	.NoHold
     54  0186		       18		      clc
     55  0187		       79 c9 18 	      adc	NoteLengths-1,y
     56  018a		       aa	   .NoHold    tax
     57  018b		       bd dc 18 	      lda	VlmEnvelope,x
     58  018e		       4a		      lsr
     59  018f		       85 19		      sta	AUDV0
     60  0191
     61  0191							; update music state for next frame
     62  0191		       e6 8e		      inc	NoteData
     63  0193		       a5 8e		      lda	NoteData
     64  0195		       29 07		      and	#7
     65  0197		       d9 ca 18 	      cmp	NoteLengths,y
     66  019a		       d0 11		      bne	.Same
     67  019c
     68  019c		       a5 8e		      lda	NoteData
     69  019e		       29 f8		      and	#$F8
     70  01a0		       18		      clc
     71  01a1		       69 08		      adc	#1<<3
     72  01a3		       c9 90		      cmp	#18<<3
     73  01a5		       d0 02		      bne	.NoRoll
     74  01a7		       a9 00		      lda	#0
     75  01a9				   .NoRoll
     76  01a9		       85 8e		      sta	NoteData
     77  01ab
     78  01ab		       e6 8d		      inc	MusicNote
     79  01ad				   .Same
     80  01ad
------- FILE bank1/code/vblank_logic.asm
    182  01ad
      0  01ad					      TIMER_LOOP
      1  01ad					      SUBROUTINE
      2  01ad
      3  01ad				   .TimerLoop
      4  01ad		       ad 84 02 	      lda	INTIM
      5  01b0		       d0 fb		      bne	.TimerLoop
      6  01b2
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  01b2					      include	bank1/code/kernel.asm
      1  01b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01b2							; Kernel
      3  01b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01b2
      5  01b2		       85 02		      sta	WSYNC
      6  01b4
------- FILE bank1/code/menuscore.asm LEVEL 4 PASS 2
      0  01b4					      include	bank1/code/menuscore.asm
      1  01b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01b4							; Scoreboard for main menu
      3  01b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01b4
      5  01b4
      6  01b4
      7  01b4		       a0 3e		      ldy	#62
      8  01b6		       88	   .Loop1     dey
      9  01b7		       85 02		      sta	WSYNC
     10  01b9		       d0 fb		      bne	.Loop1
     11  01bb
------- FILE bank1/code/kernel.asm
      8  01bb
------- FILE bank1/code/menucat_prep.asm LEVEL 4 PASS 2
      0  01bb					      include	bank1/code/menucat_prep.asm
      1  01bb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01bb							; Menu Cat Prep
      3  01bb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01bb							; Positions the graphics objects for the giant Nyan Cat display on the menu.
      5  01bb							;
      6  01bb							; Uses 64 bytes of ROM
      7  01bb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  01bb
      0  01bb					      SLEEP	13	; 15
      1  01bb				   .CYCLES    SET	13
      2  01bb
      3  01bb				  -	      IF	.CYCLES < 2
      4  01bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  01bb				  -	      ERR
      6  01bb					      ENDIF
      7  01bb
      8  01bb					      IF	.CYCLES & 1
      9  01bb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  01bb		       04 00		      nop	0
     11  01bd				  -	      ELSE
     12  01bd				  -	      bit	VSYNC
     13  01bd					      ENDIF
     14  01bd				   .CYCLES    SET	.CYCLES - 3
     15  01bd					      ENDIF
     16  01bd
     17  01bd					      REPEAT	.CYCLES / 2
     18  01bd		       ea		      nop
     17  01bd					      REPEND
     18  01be		       ea		      nop
     17  01be					      REPEND
     18  01bf		       ea		      nop
     17  01bf					      REPEND
     18  01c0		       ea		      nop
     17  01c0					      REPEND
     18  01c1		       ea		      nop
     19  01c2					      REPEND
     10  01c2
     11  01c2		       a9 10		      lda	#$10	; 17
     12  01c4		       85 21		      sta	HMP1	; 20	left 9 clocks
     13  01c6		       0a		      asl		; 22	A = #$20
     14  01c7		       85 24		      sta	HMBL	; 25	left 10 clocks
     15  01c9		       85 23		      sta	HMM1	; 28	left 10 clocks
     16  01cb		       a0 80		      ldy	#$80	; 30
     17  01cd		       84 20		      sty	HMP0	; 33	no movement
     18  01cf		       a9 90		      lda	#$90	; 35
     19  01d1
     20  01d1		       85 14		      sta	RESBL	; 38
     21  01d3		       85 22		      sta	HMM0	; 41	left 1 clock
     22  01d5		       85 10		      sta	RESP0	; 44
     23  01d7		       85 12		      sta	RESM0	; 47
     24  01d9		       85 13		      sta	RESM1	; 50
     25  01db		       85 11		      sta	RESP1	; 53
     26  01dd
     27  01dd		       a9 07		      lda	#QUAD_SIZE	; 55
     28  01df		       85 04		      sta	NUSIZ0	; 58
     29  01e1		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     30  01e3							; 60
     31  01e3		       85 05		      sta	NUSIZ1	; 63
     32  01e5		       a9 31		      lda	#$31	; 65
     33  01e7		       85 0a		      sta	CTRLPF	; 68
     34  01e9		       85 25		      sta	VDELP0	; 71	enable VDELP0
     35  01eb		       85 2a		      sta	HMOVE	; 74	cycle 74!
     36  01ed
     37  01ed		       ea		      nop		; 00
     38  01ee		       0a		      asl		; 02	A = #$62
     39  01ef		       a2 e0		      ldx	#$E0	; 04
     40  01f1		       85 20		      sta	HMP0	; 07	left 6 clocks
     41  01f3		       86 22		      stx	HMM0	; 10	right 2 clocks
     42  01f5		       86 21		      stx	HMP1	; 13	right 2 clocks
     43  01f7		       86 23		      stx	HMM1	; 16	right 2 clocks
     44  01f9		       84 24		      sty	HMBL	; 19	no movement
------- FILE bank1/code/kernel.asm
     10  01fb
     11  01fb		       a5 8f		      lda	MenuCatFrame
     12  01fd		       c9 02		      cmp	#2
     13  01ff		       30 06		      bmi	.HiCat
     14  0201		       85 02		      sta	WSYNC
     15  0203		       85 02		      sta	WSYNC
     16  0205		       85 02		      sta	WSYNC
     17  0207		       85 02	   .HiCat     sta	WSYNC
     18  0209		       ea		      nop		; 02
     19  020a
      0  020a					      NEXT_PAGE
      1  020a					      SUBROUTINE
      2  020a
      3  020a		       4c 00 13 	      jmp	.NextPage
      4  0300		       00 00 00 00*	      ALIGN	$100
      5  0300				   .NextPage
      6  0300
     21  0300
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0300					      include	bank1/code/menucat1_4.asm
      1  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0300							; Menu Cat Kernel (Blocks 1-3)
      3  0300							;
      4  0300							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0300							;
      6  0300							; 70 bytes
      7  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0300
      9  0300							; 16 bytes
     10  0300		       85 02		      sta	WSYNC	;	2
     11  0302		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0304		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0307		       a0 0b		      ldy	#11	; 08	2
     14  0309		       88	   .LP	      dey		; 59	1
     15  030a		       c0 03		      cpy	#3	; 61	2
     16  030c		       d0 fb		      bne	.LP	; 63	2
      0  030e					      SLEEP	2	; 65	1
      1  030e				   .CYCLES    SET	2
      2  030e
      3  030e				  -	      IF	.CYCLES < 2
      4  030e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  030e				  -	      ERR
      6  030e					      ENDIF
      7  030e
      8  030e				  -	      IF	.CYCLES & 1
      9  030e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  030e				  -	      nop	0
     11  030e				  -	      ELSE
     12  030e				  -	      bit	VSYNC
     13  030e				  -	      ENDIF
     14  030e				  -.CYCLES    SET	.CYCLES - 3
     15  030e					      ENDIF
     16  030e
     17  030e					      REPEAT	.CYCLES / 2
     18  030e		       ea		      nop
     19  030f					      REPEND
     18  030f		       4c 1c 13 	      jmp	.Enter1_3	; 68	2
     19  0312
     20  0312				   .Loop
     21  0312
     22  0312		       85 09		      sta	COLUBK	; 56	2
     23  0314		       85 02		      sta	WSYNC	; 00	2
     24  0316
      0  0316					      SLEEP	4	; 04	2
      1  0316				   .CYCLES    SET	4
      2  0316
      3  0316				  -	      IF	.CYCLES < 2
      4  0316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0316				  -	      ERR
      6  0316					      ENDIF
      7  0316
      8  0316				  -	      IF	.CYCLES & 1
      9  0316				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0316				  -	      nop	0
     11  0316				  -	      ELSE
     12  0316				  -	      bit	VSYNC
     13  0316				  -	      ENDIF
     14  0316				  -.CYCLES    SET	.CYCLES - 3
     15  0316					      ENDIF
     16  0316
     17  0316					      REPEAT	.CYCLES / 2
     18  0316		       ea		      nop
     17  0316					      REPEND
     18  0317		       ea		      nop
     19  0318					      REPEND
     26  0318		       d0 0d		      bne	.Skip	; 07	2
     27  031a
     28  031a				   MenuCatKernel1_3
     29  031a
     30  031a							; 10 bytes
      0  031a					      SLEEP	3	; 68	2
      1  031a				   .CYCLES    SET	3
      2  031a
      3  031a				  -	      IF	.CYCLES < 2
      4  031a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  031a				  -	      ERR
      6  031a					      ENDIF
      7  031a
      8  031a					      IF	.CYCLES & 1
      9  031a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  031a		       04 00		      nop	0
     11  031c				  -	      ELSE
     12  031c				  -	      bit	VSYNC
     13  031c					      ENDIF
     14  031c				   .CYCLES    SET	.CYCLES - 3
     15  031c					      ENDIF
     16  031c
     17  031c				  -	      REPEAT	.CYCLES / 2
     18  031c				  -	      nop
     19  031c					      REPEND
     32  031c				   .Enter1_3
     33  031c		       84 1f		      sty	ENABL	; 71	2
     34  031e		       a2 03		      ldx	#3	; 73	2
     35  0320		       85 2a		      sta	HMOVE	; 00	2
     36  0322
     37  0322							; 4 bytes
     38  0322		       b9 31 17 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0325		       85 1b		      sta	GRP0	; 07	2
     40  0327
     41  0327				   .Skip
     42  0327
     43  0327							; 8 bytes
     44  0327		       b9 ea 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  032a		       85 09		      sta	COLUBK	; 14	2
     46  032c		       b1 97		      lda	(BowColorsPfPtr),y	; 19	2
     47  032e		       85 08		      sta	COLUPF	; 22	2
     48  0330
     49  0330							; 8 bytes
     50  0330		       b9 2d 17 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0333		       85 1c		      sta	GRP1	; 29	2
     52  0335		       b9 00 17 	      lda	MenuCatTopPf,y	; 33	2
     53  0338		       85 0f		      sta	PF2	; 36	2
     54  033a
     55  033a							; 17 bytes
     56  033a		       a5 8b		      lda	CatTartColor	; 39	2
     57  033c		       85 09		      sta	COLUBK	; 42	2
     58  033e		       a5 ee		      lda	MenuBgColor	; 45	2
     59  0340		       85 08		      sta	COLUPF	; 48	2
     60  0342		       ca		      dex		; 50	1
     61  0343		       d0 cd		      bne	.Loop	; 53/52	2
     62  0345		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0347							; 54	2
     64  0347		       85 09		      sta	COLUBK	; 57	2
     65  0349		       86 04		      stx	NUSIZ0	; 60	2
     66  034b
     67  034b							; 5 bytes
     68  034b		       88		      dey		; 62	1
     69  034c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  034e
     71  034e
     72  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  034e							; Menu Cat Kernel (Block 4)
     74  034e							;
     75  034e							; This kernel draws block 4 of the cat in the menu display.
     76  034e							;
     77  034e							; ? bytes
     78  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  034e
     80  034e		       a2 03		      ldx	#3	; 66	2
     81  0350
     82  0350		       ad 31 17 	      lda	MenuCatTopGfxL	; 69	2
     83  0353		       85 1b		      sta	GRP0	; 72	2
     84  0355		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0358
      0  0358					      SLEEP	3	; 03	2
      1  0358				   .CYCLES    SET	3
      2  0358
      3  0358				  -	      IF	.CYCLES < 2
      4  0358				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0358				  -	      ERR
      6  0358					      ENDIF
      7  0358
      8  0358					      IF	.CYCLES & 1
      9  0358					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0358		       04 00		      nop	0
     11  035a				  -	      ELSE
     12  035a				  -	      bit	VSYNC
     13  035a					      ENDIF
     14  035a				   .CYCLES    SET	.CYCLES - 3
     15  035a					      ENDIF
     16  035a
     17  035a				  -	      REPEAT	.CYCLES / 2
     18  035a				  -	      nop
     19  035a					      REPEND
     87  035a				   .Loop4
     88  035a		       a5 ea		      lda	RamBowColorsBk+16	; 06	2
     89  035c		       85 09		      sta	COLUBK	; 09	2
     90  035e		       b1 97		      lda	(BowColorsPfPtr),y	; 14	2
     91  0360		       85 08		      sta	COLUPF	; 17	2
     92  0362
     93  0362		       ad 2d 17 	      lda	MenuCatTopGfxR	; 20	2
     94  0365		       85 1c		      sta	GRP1	; 23	2
     95  0367
     96  0367		       86 20		      stx	HMP0	; 26	2
     97  0369		       86 24		      stx	HMBL	; 29	2
     98  036b
      0  036b					      SLEEP	6	; 36	4
      1  036b				   .CYCLES    SET	6
      2  036b
      3  036b				  -	      IF	.CYCLES < 2
      4  036b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  036b				  -	      ERR
      6  036b					      ENDIF
      7  036b
      8  036b				  -	      IF	.CYCLES & 1
      9  036b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  036b				  -	      nop	0
     11  036b				  -	      ELSE
     12  036b				  -	      bit	VSYNC
     13  036b				  -	      ENDIF
     14  036b				  -.CYCLES    SET	.CYCLES - 3
     15  036b					      ENDIF
     16  036b
     17  036b					      REPEAT	.CYCLES / 2
     18  036b		       ea		      nop
     17  036b					      REPEND
     18  036c		       ea		      nop
     17  036c					      REPEND
     18  036d		       ea		      nop
     19  036e					      REPEND
    100  036e
    101  036e		       a5 8b		      lda	CatTartColor	; 39	2
    102  0370		       85 09		      sta	COLUBK	; 42	2
    103  0372		       a5 ee		      lda	MenuBgColor	; 45	2
    104  0374		       85 08		      sta	COLUPF	; 48	2
    105  0376
    106  0376		       38		      sec		; 50	1
    107  0377		       ca		      dex		; 52	1
    108  0378
    109  0378		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  037b
    111  037b		       f0 04		      beq	.Exit4	; 59/58	2
    112  037d		       85 02		      sta	WSYNC	; 00	2
    113  037f		       d0 d9		      bne	.Loop4	; 03	2
    114  0381
    115  0381				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0381					      include	bank1/code/menucat5.asm
      1  0381							;
      2  0381
      3  0381		       a5 9c		      lda	MenuCatShift	; 62	2
      4  0383		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0385					      SKIP_WORD		; 68	1
      1  0385		       0c		      HEX	0C
      6  0386				   .ClearHmove
      7  0386		       85 2b		      sta	HMCLR	; 68	2
      8  0388
      9  0388		       a5 97		      lda	BowColorsPfPtr	; 71	2
     10  038a		       e9 0d		      sbc	#13	; 73	2
     11  038c		       85 97		      sta	BowColorsPfPtr	; 00	2
     12  038e
     13  038e		       85 2a		      sta	HMOVE	; 03	2
     14  0390		       85 97		      sta	BowColorsPfPtr	; 06	2
     15  0392		       a0 0c		      ldy	#12	; 08	2
     16  0394
     17  0394							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0394
     19  0394							; 10 bytes
     20  0394		       a5 e9		      lda	RamBowColorsBk+15	; 11	2
     21  0396		       85 09		      sta	COLUBK	; 14	2
     22  0398		       b1 97		      lda	(BowColorsPfPtr),y	; 19	2
     23  039a		       85 08		      sta	COLUPF	; 22	2
     24  039c		       85 9b		      sta	RainbowColorPf	; 25	2
     25  039e
     26  039e							; 7 bytes
     27  039e		       a5 d8		      lda	RamMenuCatGfxR+15	; 28	2
     28  03a0		       85 1c		      sta	GRP1	; 31	2
     29  03a2		       4a		      lsr		; 33	1
     30  03a3		       85 1d		      sta	ENAM0	; 36	2
     31  03a5
     32  03a5							; 4 bytes
     33  03a5		       a5 8b		      lda	CatTartColor	; 39	2
     34  03a7		       85 09		      sta	COLUBK	; 42	2
     35  03a9
     36  03a9							; 5 bytes
     37  03a9		       a5 d7		      lda	RamMenuCatGfxR+14	; 45	2
     38  03ab		       85 99		      sta	RamMenuCatGfx	; 48	2
     39  03ad
     40  03ad							; 10 bytes
     41  03ad		       a5 ee		      lda	MenuBgColor	; 51	2
     42  03af		       85 08		      sta	COLUPF	; 54	2
     43  03b1		       85 09		      sta	COLUBK	; 57	2
     44  03b3		       85 2b		      sta	HMCLR	; 60	2
     45  03b5		       85 02		      sta	WSYNC	; 00	2
     46  03b7
     47  03b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  03b7
     49  03b7							; 8 bytes
     50  03b7		       a5 e9		      lda	RamBowColorsBk+15	; 03	2
     51  03b9		       85 09		      sta	COLUBK	; 06	2
     52  03bb		       a5 9b		      lda	RainbowColorPf	; 09	2
     53  03bd		       85 08		      sta	COLUPF	; 12	2
     54  03bf
     55  03bf							; 8 bytes
     56  03bf		       b1 91		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  03c1		       85 22		      sta	HMM0	; 20	2
     58  03c3		       0a		      asl		; 22	1
     59  03c4		       0a		      asl		; 24	1
     60  03c5		       0a		      asl		; 26	1
     61  03c6		       0a		      asl		; 28	1
     62  03c7		       85 23		      sta	HMM1	; 31
     63  03c9
     64  03c9							; 11 bytes
      0  03c9					      SLEEP	2	; 33	3
      1  03c9				   .CYCLES    SET	2
      2  03c9
      3  03c9				  -	      IF	.CYCLES < 2
      4  03c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  03c9				  -	      ERR
      6  03c9					      ENDIF
      7  03c9
      8  03c9				  -	      IF	.CYCLES & 1
      9  03c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  03c9				  -	      nop	0
     11  03c9				  -	      ELSE
     12  03c9				  -	      bit	VSYNC
     13  03c9				  -	      ENDIF
     14  03c9				  -.CYCLES    SET	.CYCLES - 3
     15  03c9					      ENDIF
     16  03c9
     17  03c9					      REPEAT	.CYCLES / 2
     18  03c9		       ea		      nop
     19  03ca					      REPEND
     66  03ca		       a5 8b		      lda	CatTartColor	; 36	2
     67  03cc		       85 09		      sta	COLUBK	; 39	2
     68  03ce
     69  03ce		       b1 95		      lda	(MenuCatMslPtr),y	; 44	2
     70  03d0		       85 9a		      sta	RamMenuCatMissile	; 47	2
     71  03d2
     72  03d2							; 8 bytes
     73  03d2		       a5 ee		      lda	MenuBgColor	; 50	2
     74  03d4		       85 08		      sta	COLUPF	; 53	2
     75  03d6		       85 09		      sta	COLUBK	; 56	2
     76  03d8		       85 02		      sta	WSYNC	; 00	2
     77  03da
     78  03da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  03da
     80  03da							; 8 bytes
     81  03da		       a5 e9		      lda	RamBowColorsBk+15	; 03	2
     82  03dc		       85 09		      sta	COLUBK	; 06	2
     83  03de		       a5 9b		      lda	RainbowColorPf	; 09	2
     84  03e0		       85 08		      sta	COLUPF	; 12	2
     85  03e2
     86  03e2							; 11 bytes
      0  03e2					      SLEEP	20	; 32	10
      1  03e2				   .CYCLES    SET	20
      2  03e2
      3  03e2				  -	      IF	.CYCLES < 2
      4  03e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  03e2				  -	      ERR
      6  03e2					      ENDIF
      7  03e2
      8  03e2				  -	      IF	.CYCLES & 1
      9  03e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  03e2				  -	      nop	0
     11  03e2				  -	      ELSE
     12  03e2				  -	      bit	VSYNC
     13  03e2				  -	      ENDIF
     14  03e2				  -.CYCLES    SET	.CYCLES - 3
     15  03e2					      ENDIF
     16  03e2
     17  03e2					      REPEAT	.CYCLES / 2
     18  03e2		       ea		      nop
     17  03e2					      REPEND
     18  03e3		       ea		      nop
     17  03e3					      REPEND
     18  03e4		       ea		      nop
     17  03e4					      REPEND
     18  03e5		       ea		      nop
     17  03e5					      REPEND
     18  03e6		       ea		      nop
     17  03e6					      REPEND
     18  03e7		       ea		      nop
     17  03e7					      REPEND
     18  03e8		       ea		      nop
     17  03e8					      REPEND
     18  03e9		       ea		      nop
     17  03e9					      REPEND
     18  03ea		       ea		      nop
     17  03ea					      REPEND
     18  03eb		       ea		      nop
     19  03ec					      REPEND
     88  03ec		       88		      dey		; 34	1
     89  03ed
     90  03ed							; 6 bytes
     91  03ed		       a5 8b		      lda	CatTartColor	; 37	2
     92  03ef		       85 09		      sta	COLUBK	; 40	2
     93  03f1
     94  03f1							; 12 bytes
     95  03f1		       a2 ff		      ldx	#$FF	; 42	2
     96  03f3		       a5 ee		      lda	MenuBgColor	; 45	3
     97  03f5		       85 08		      sta	COLUPF	; 48	2
     98  03f7		       86 1f		      stx	ENABL	; 51	2
     99  03f9		       86 1e		      stx	ENAM1	; 54	2
    100  03fb		       85 09		      sta	COLUBK	; 57	2
    101  03fd		       4c 1a 14 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0400					      include	bank1/code/menucat6_17.asm
      1  0400							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0400							; Menu Cat Kernel (Blocks 6-17)
      3  0400							;
      4  0400							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0400							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0400							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0400							;
      8  0400							; 179 bytes
      9  0400							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0400
     11  0400					      ALIGN	$100
     12  0400
     13  0400				   MenuCatKernel6_17
     14  0400
     15  0400							; 24 bytes
     16  0400		       b9 af 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0403		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0405		       a9 08		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0407		       a6 8b		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0409		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  040b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  040e		       b9 be 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0411		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0413		       a5 ee		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0415		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0417		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  041a
     28  041a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  041a
     30  041a				   .Enter6_17		; enter sandman
     31  041a
     32  041a							; 14 bytes
     33  041a		       a5 99		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  041c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  041e		       a5 9a		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0420		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0422		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0424		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0426		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0428
     41  0428							; 12 bytes
     42  0428		       b9 dd 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  042b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  042d		       85 9b		      sta	RainbowColorBk	; 14	2 - save for later
     45  042f		       b3 97		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0431		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0433		       9a		      txs		; 24	1 - save for later
     48  0434
     49  0434							; 26 bytes
     50  0434		       b9 ae 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0437		       85 0f		      sta	PF2	; 31	2
     52  0439		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     53  043b		       a6 8b		      ldx	CatTartColor	; 36	2
     54  043d		       85 09		      sta	COLUBK	; 39	2
     55  043f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0442		       b9 bd 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0445		       85 0f		      sta	PF2	; 50	2
     58  0447		       a5 ee		      lda	MenuBgColor	; 53	2
     59  0449		       85 08		      sta	COLUPF	; 56	2
     60  044b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  044e
     62  044e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  044e
     64  044e							; 10 bytes
     65  044e		       b1 91		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0450		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0452		       0a		      asl		; 70	1
     68  0453		       0a		      asl		; 72	1
     69  0454		       0a		      asl		; 74	1
     70  0455		       0a		      asl		; 00	1
     71  0456		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0458
     73  0458							; 7 bytes
     74  0458		       a5 9b		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  045a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  045c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  045d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  045f
     79  045f							; 5 bytes
     80  045f		       b1 93		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0461		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0463		       ea		      nop		; 24	1
     83  0464
     84  0464							; 26 bytes
     85  0464		       b9 ae 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0467		       85 0f		      sta	PF2	; 31	2
     87  0469		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     88  046b		       a6 8b		      ldx	CatTartColor	; 36	2
     89  046d		       85 09		      sta	COLUBK	; 39	2
     90  046f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0472		       b9 bd 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0475		       85 0f		      sta	PF2	; 50	2
     93  0477		       a5 ee		      lda	MenuBgColor	; 53	2
     94  0479		       85 08		      sta	COLUPF	; 56	2
     95  047b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  047e
     97  047e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  047e
     99  047e							; 14 bytes
    100  047e		       b9 9f 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0481		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0483		       b9 cb 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0486		       85 99		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0488		       b1 95		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  048a		       85 9a		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  048c
    107  048c							; 7 bytes
    108  048c		       a5 9b		      lda	RainbowColorBk	; 09	2
    109  048e		       85 09		      sta	COLUBK	; 12	2
    110  0490		       ba		      tsx		; 14	1
    111  0491		       86 08		      stx	COLUPF	; 17	2
    112  0493
    113  0493							; 6 bytes
    114  0493		       88		      dey		; 19	1 - dec y for next kernel block
    115  0494		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0496		       4c 00 14 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0499
    118  0499				   .Exit
    119  0499
    120  0499							; 25 bytes
    121  0499		       4c 00 15 	      jmp	.Align6_17	; 25	2
    122  049c
    123  0500		       00 00 00 00*	      ALIGN	$100
    124  0500				   .Align6_17
    125  0500
    126  0500		       a5 ae		      lda	RamMenuCatPfL+3	; 28	2
    127  0502		       85 0f		      sta	PF2	; 31	2
    128  0504		       a9 08		      lda	#COL_CAT_FACE	; 33	2
    129  0506		       a6 8b		      ldx	CatTartColor	; 36	2
    130  0508		       85 09		      sta	COLUBK	; 39	2
    131  050a		       ea		      nop		; 41	1
    132  050b		       86 08		      stx	COLUPF	; 44	2
    133  050d		       a5 bd		      lda	RamMenuCatPfR+3	; 47	2
    134  050f		       85 0f		      sta	PF2	; 50	2
    135  0511		       a5 ee		      lda	MenuBgColor	; 53	2
    136  0513		       85 08		      sta	COLUPF	; 56	2
    137  0515		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0517					      include	bank1/code/menucat18.asm
      1  0517
      2  0517							; 59
      3  0517		       84 1d		      sty	ENAM0	; 62	2
      4  0519		       a5 99		      lda	RamMenuCatGfx	; 65	2
      5  051b		       85 1c		      sta	GRP1	; 68	2
      6  051d		       a9 60		      lda	#$60	; 70	2
      7  051f		       85 21		      sta	HMP1	; 73	2
      8  0521		       85 2a		      sta	HMOVE	; 00	2
      9  0523
     10  0523		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0525							; 02	2
     12  0525		       85 04		      sta	NUSIZ0	; 05	2
     13  0527
     14  0527		       a5 dc		      lda	RamBowColorsBk+2	; 08	2
     15  0529		       85 09		      sta	COLUBK	; 11	2
     16  052b		       85 08		      sta	COLUPF	; 14	2
     17  052d
     18  052d		       a0 02		      ldy	#2	; 16	2
     19  052f		       ea		      nop		; 18	1
     20  0530		       a6 ee		      ldx	MenuBgColor	; 21	2
     21  0532		       9a		      txs		; 23	1
     22  0533
     23  0533				   .Loop18
     24  0533
     25  0533		       a5 ad		      lda	RamMenuCatPfL+2	; 26	2
     26  0535		       85 0f		      sta	PF2	; 29	2
     27  0537
     28  0537		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     29  0539		       a2 00		      ldx	#0	; 33	2
     30  053b		       86 1f		      stx	ENABL	; 36	2
     31  053d		       85 09		      sta	COLUBK	; 39	2
     32  053f		       86 08		      stx	COLUPF	; 42	2
     33  0541		       85 12		      sta	RESM0	; 45	2
     34  0543		       a5 bc		      lda	RamMenuCatPfR+2	; 48	2
     35  0545		       85 0f		      sta	PF2	; 51	2
     36  0547		       ba		      tsx		; 53	1
     37  0548		       86 08		      stx	COLUPF	; 56	2
     38  054a		       86 09		      stx	COLUBK	; 59	2
     39  054c		       88		      dey		; 61	1
     40  054d		       f0 16		      beq	.Exit18	; 64/63	2
     41  054f
      0  054f					      SLEEP	8	; 71	2
      1  054f				   .CYCLES    SET	8
      2  054f
      3  054f				  -	      IF	.CYCLES < 2
      4  054f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  054f				  -	      ERR
      6  054f					      ENDIF
      7  054f
      8  054f				  -	      IF	.CYCLES & 1
      9  054f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  054f				  -	      nop	0
     11  054f				  -	      ELSE
     12  054f				  -	      bit	VSYNC
     13  054f				  -	      ENDIF
     14  054f				  -.CYCLES    SET	.CYCLES - 3
     15  054f					      ENDIF
     16  054f
     17  054f					      REPEAT	.CYCLES / 2
     18  054f		       ea		      nop
     17  054f					      REPEND
     18  0550		       ea		      nop
     17  0550					      REPEND
     18  0551		       ea		      nop
     17  0551					      REPEND
     18  0552		       ea		      nop
     19  0553					      REPEND
     43  0553
     44  0553		       a5 dc		      lda	RamBowColorsBk+2	; 74	2
     45  0555		       85 09		      sta	COLUBK	; 01	2
     46  0557		       85 08		      sta	COLUPF	; 04	2
     47  0559
     48  0559		       84 9b		      sty	RainbowColorBk	; 07
     49  055b		       a0 0d		      ldy	#13	; 09
     50  055d		       b1 93		      lda	(MenuCatHmvPtrP),y	; 14
     51  055f		       85 21		      sta	HMP1	; 17
     52  0561		       a4 9b		      ldy	RainbowColorBk	; 20
     53  0563
     54  0563		       d0 ce		      bne	.Loop18	; 23	2
     55  0565
     56  0565				   .Exit18		; 64
     57  0565
     58  0565		       85 02		      sta	WSYNC	; 00
     59  0567
     60  0567		       a5 dc		      lda	RamBowColorsBk+2	; 03
     61  0569		       85 09		      sta	COLUBK	; 06
     62  056b		       85 08		      sta	COLUPF	; 09
     63  056d
     64  056d		       a5 97		      lda	BowColorsPfPtr	; 12
     65  056f		       38		      sec		; 14
     66  0570		       e9 03		      sbc	#3	; 16
     67  0572		       85 97		      sta	BowColorsPfPtr	; 19
      0  0574					      SLEEP	4	; 23
      1  0574				   .CYCLES    SET	4
      2  0574
      3  0574				  -	      IF	.CYCLES < 2
      4  0574				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0574				  -	      ERR
      6  0574					      ENDIF
      7  0574
      8  0574				  -	      IF	.CYCLES & 1
      9  0574				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0574				  -	      nop	0
     11  0574				  -	      ELSE
     12  0574				  -	      bit	VSYNC
     13  0574				  -	      ENDIF
     14  0574				  -.CYCLES    SET	.CYCLES - 3
     15  0574					      ENDIF
     16  0574
     17  0574					      REPEAT	.CYCLES / 2
     18  0574		       ea		      nop
     17  0574					      REPEND
     18  0575		       ea		      nop
     19  0576					      REPEND
     69  0576
     70  0576		       a5 ad		      lda	RamMenuCatPfL+2	; 26	2
     71  0578		       85 0f		      sta	PF2	; 29	2
     72  057a
     73  057a		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     74  057c		       a2 00		      ldx	#0	; 33	2
     75  057e		       86 1f		      stx	ENABL	; 36	2
     76  0580		       85 09		      sta	COLUBK	; 39	2
     77  0582		       86 08		      stx	COLUPF	; 42	2
     78  0584		       85 12		      sta	RESM0	; 45	2
     79  0586		       a5 bc		      lda	RamMenuCatPfR+2	; 48	2
     80  0588		       85 0f		      sta	PF2	; 51	2
     81  058a		       ba		      tsx		; 53	1
     82  058b		       86 08		      stx	COLUPF	; 56	2
     83  058d		       86 09		      stx	COLUBK	; 59	2
     84  058f
      0  058f					      SLEEP	5	; 64
      1  058f				   .CYCLES    SET	5
      2  058f
      3  058f				  -	      IF	.CYCLES < 2
      4  058f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  058f				  -	      ERR
      6  058f					      ENDIF
      7  058f
      8  058f					      IF	.CYCLES & 1
      9  058f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  058f		       04 00		      nop	0
     11  0591				  -	      ELSE
     12  0591				  -	      bit	VSYNC
     13  0591					      ENDIF
     14  0591				   .CYCLES    SET	.CYCLES - 3
     15  0591					      ENDIF
     16  0591
     17  0591					      REPEAT	.CYCLES / 2
     18  0591		       ea		      nop
     19  0592					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0592					      include	bank1/code/menucat19_20.asm
      1  0592							;
      2  0592
      3  0592		       a0 01		      ldy	#1	; 66	2
      4  0594
      5  0594				   MenuCatKernel19_20
      6  0594
      7  0594		       b9 9d 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0597		       85 1b		      sta	GRP0	; 73	2
      9  0599		       85 2a		      sta	HMOVE	; 00	2
     10  059b		       b9 c9 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  059e		       85 1c		      sta	GRP1	; 07	2
     12  05a0
     13  05a0		       b9 da 00 	      lda	RamBowColorsBk,y	; 11	3
     14  05a3		       85 09		      sta	COLUBK	; 14	2
     15  05a5		       b1 97		      lda	(BowColorsPfPtr),y	; 19	2
     16  05a7		       85 08		      sta	COLUPF	; 22	2
     17  05a9		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  05ac		       85 0f		      sta	PF2	; 29	2
      0  05ae					      SLEEP	2	; 31	1
      1  05ae				   .CYCLES    SET	2
      2  05ae
      3  05ae				  -	      IF	.CYCLES < 2
      4  05ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05ae				  -	      ERR
      6  05ae					      ENDIF
      7  05ae
      8  05ae				  -	      IF	.CYCLES & 1
      9  05ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05ae				  -	      nop	0
     11  05ae				  -	      ELSE
     12  05ae				  -	      bit	VSYNC
     13  05ae				  -	      ENDIF
     14  05ae				  -.CYCLES    SET	.CYCLES - 3
     15  05ae					      ENDIF
     16  05ae
     17  05ae					      REPEAT	.CYCLES / 2
     18  05ae		       ea		      nop
     19  05af					      REPEND
     20  05af
     21  05af		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     22  05b1		       a6 ee		      ldx	MenuBgColor	; 36	2
     23  05b3		       85 09		      sta	COLUBK	; 39	2
     24  05b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  05b8		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  05bb		       85 0f		      sta	PF2	; 50	2
     27  05bd
     28  05bd		       85 2b		      sta	HMCLR	; 53	2
      0  05bf					      SLEEP	2	; 55	1
      1  05bf				   .CYCLES    SET	2
      2  05bf
      3  05bf				  -	      IF	.CYCLES < 2
      4  05bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05bf				  -	      ERR
      6  05bf					      ENDIF
      7  05bf
      8  05bf				  -	      IF	.CYCLES & 1
      9  05bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05bf				  -	      nop	0
     11  05bf				  -	      ELSE
     12  05bf				  -	      bit	VSYNC
     13  05bf				  -	      ENDIF
     14  05bf				  -.CYCLES    SET	.CYCLES - 3
     15  05bf					      ENDIF
     16  05bf
     17  05bf					      REPEAT	.CYCLES / 2
     18  05bf		       ea		      nop
     19  05c0					      REPEND
     30  05c0
     31  05c0		       86 09		      stx	COLUBK	; 58	2
     32  05c2		       85 02		      sta	WSYNC	; 00	2
     33  05c4
     34  05c4		       b9 da 00 	      lda	RamBowColorsBk,y	; 04	3
     35  05c7		       85 09		      sta	COLUBK	; 07	2
     36  05c9		       b1 97		      lda	(BowColorsPfPtr),y	; 12	2
     37  05cb		       85 08		      sta	COLUPF	; 15	2
     38  05cd		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  05d0		       85 0f		      sta	PF2	; 22	2
     40  05d2
     41  05d2		       a9 00		      lda	#$00	; 24	2
     42  05d4		       85 20		      sta	HMP0	; 27	2
     43  05d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  05d9
     45  05d9		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     46  05db		       a6 ee		      ldx	MenuBgColor	; 36	2
     47  05dd		       85 09		      sta	COLUBK	; 39	2
     48  05df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  05e2		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  05e5		       85 0f		      sta	PF2	; 50	2
     51  05e7
     52  05e7		       a9 20		      lda	#$20	; 52	2
     53  05e9		       85 22		      sta	HMM0	; 55	2
     54  05eb
     55  05eb		       86 09		      stx	COLUBK	; 58	2
     56  05ed		       85 02		      sta	WSYNC	; 00	2
     57  05ef
     58  05ef		       b9 da 00 	      lda	RamBowColorsBk,y	; 04	3
     59  05f2		       85 09		      sta	COLUBK	; 07	2
     60  05f4		       b1 97		      lda	(BowColorsPfPtr),y	; 12	2
     61  05f6		       85 08		      sta	COLUPF	; 15	2
     62  05f8		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  05fb		       85 0f		      sta	PF2	; 22	2
     64  05fd
     65  05fd		       a9 e0		      lda	#$E0	; 24	2
     66  05ff		       85 23		      sta	HMM1	; 27	2
      0  0601					      SLEEP	4	; 31	5
      1  0601				   .CYCLES    SET	4
      2  0601
      3  0601				  -	      IF	.CYCLES < 2
      4  0601				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0601				  -	      ERR
      6  0601					      ENDIF
      7  0601
      8  0601				  -	      IF	.CYCLES & 1
      9  0601				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0601				  -	      nop	0
     11  0601				  -	      ELSE
     12  0601				  -	      bit	VSYNC
     13  0601				  -	      ENDIF
     14  0601				  -.CYCLES    SET	.CYCLES - 3
     15  0601					      ENDIF
     16  0601
     17  0601					      REPEAT	.CYCLES / 2
     18  0601		       ea		      nop
     17  0601					      REPEND
     18  0602		       ea		      nop
     19  0603					      REPEND
     68  0603
     69  0603		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     70  0605		       a6 ee		      ldx	MenuBgColor	; 36	2
     71  0607		       85 09		      sta	COLUBK	; 39	2
     72  0609		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  060c		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  060f		       85 0f		      sta	PF2	; 50	2
     75  0611
      0  0611					      SLEEP	5	; 55	3
      1  0611				   .CYCLES    SET	5
      2  0611
      3  0611				  -	      IF	.CYCLES < 2
      4  0611				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0611				  -	      ERR
      6  0611					      ENDIF
      7  0611
      8  0611					      IF	.CYCLES & 1
      9  0611					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0611		       04 00		      nop	0
     11  0613				  -	      ELSE
     12  0613				  -	      bit	VSYNC
     13  0613					      ENDIF
     14  0613				   .CYCLES    SET	.CYCLES - 3
     15  0613					      ENDIF
     16  0613
     17  0613					      REPEAT	.CYCLES / 2
     18  0613		       ea		      nop
     19  0614					      REPEND
     77  0614
     78  0614		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0617
     80  0617		       88		      dey		; 61	1
     81  0618		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  061a		       4c 94 15 	      jmp	MenuCatKernel19_20	; 66	2
     83  061d
     84  061d				   .Exit19_20
     85  061d
     86  061d		       a9 00		      lda	#0
     87  061f		       85 1b		      sta	GRP0
     88  0621		       85 1c		      sta	GRP1
     89  0623		       85 1d		      sta	ENAM0
     90  0625		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     27  0627
     28  0627		       a5 8f		      lda	MenuCatFrame
     29  0629		       c9 02		      cmp	#2
     30  062b		       10 06		      bpl	.LoCat
     31  062d		       85 02		      sta	WSYNC
     32  062f		       85 02		      sta	WSYNC
     33  0631		       85 02		      sta	WSYNC
     34  0633		       85 02	   .LoCat     sta	WSYNC
     35  0635
     36  0635		       a0 3e		      ldy	#62
     37  0637				   .Loop8
     38  0637		       88		      dey
     39  0638		       85 02		      sta	WSYNC
     40  063a		       d0 fb		      bne	.Loop8
     41  063c
     42  063c		       4c 20 10 	      jmp	MenuOverScan
     43  063f
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  063f					      include	bank1/data/menucatgfx.asm
      1  063f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  063f							; Menu Cat Graphics
      3  063f							;
      4  063f							; Graphics for drawing the menu cat display
      5  063f							;
      6  063f							; Uses 1 page + 173 bytes of ROM
      7  063f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  063f
      9  0700		       00 00 00 00*	      ALIGN	$100
     10  0700
     11  0700				   MenuCatGfxPage1
     12  0700
     13  0700
     14  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0700							; Menu Cat Top Playfield Graphics
     16  0700							;
     17  0700							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0700							;
     19  0700							; 3 bytes of ROM
     20  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0700
     22  0700				   MenuCatTopPf
     23  0700
     24  0700		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0701		       07		      .byte.b	%00000111
     26  0702		       07		      .byte.b	%00000111
     27  0703							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0703
     29  0703							; 3 bytes used in page
     30  0703
     31  0703
     32  0703							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0703							; Menu Cat Right Player Graphics
     34  0703							;
     35  0703							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0703							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0703							;
     38  0703							; 42 bytes of ROM (14 per frame)
     39  0703							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0703
     41  0703				   MenuCatGfxR
     42  0703
     43  0703							; frames 1/5
     44  0703		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0704		       04		      .byte.b	%00000100
     46  0705		       f2		      .byte.b	%11110010
     47  0706		       91		      .byte.b	%10010001
     48  0707		       01		      .byte.b	%00000001
     49  0708		       59		      .byte.b	%01011001
     50  0709		       09		      .byte.b	%00001001
     51  070a		       01		      .byte.b	%00000001
     52  070b		       02		      .byte.b	%00000010
     53  070c		       c2		      .byte.b	%11000010
     54  070d		       22		      .byte.b	%00100010
     55  070e		       32		      .byte.b	%00110010
     56  070f		       2c		      .byte.b	%00101100
     57  0710		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0711
     59  0711							; frames 2/3/4
     60  0711		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0712		       04		      .byte.b	%00000100
     62  0713		       f2		      .byte.b	%11110010
     63  0714		       91		      .byte.b	%10010001
     64  0715		       01		      .byte.b	%00000001
     65  0716		       59		      .byte.b	%01011001
     66  0717		       09		      .byte.b	%00001001
     67  0718		       01		      .byte.b	%00000001
     68  0719		       02		      .byte.b	%00000010
     69  071a		       c2		      .byte.b	%11000010
     70  071b		       62		      .byte.b	%01100010
     71  071c		       52		      .byte.b	%01010010
     72  071d		       4c		      .byte.b	%01001100
     73  071e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  071f
     75  071f							; frame 6
     76  071f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0720		       f8		      .byte.b	%11111000
     78  0721		       04		      .byte.b	%00000100
     79  0722		       f2		      .byte.b	%11110010
     80  0723		       91		      .byte.b	%10010001
     81  0724		       01		      .byte.b	%00000001
     82  0725		       59		      .byte.b	%01011001
     83  0726		       09		      .byte.b	%00001001
     84  0727		       01		      .byte.b	%00000001
     85  0728		       02		      .byte.b	%00000010
     86  0729		       c2		      .byte.b	%11000010
     87  072a		       22		      .byte.b	%00100010
     88  072b		       32		      .byte.b	%00110010
     89  072c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  072d
     91  072d							; 45 bytes used in page
     92  072d
     93  072d
     94  072d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  072d							; Menu Cat Top Right Player Graphics
     96  072d							;
     97  072d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  072d							;
     99  072d							; 4 bytes of ROM
    100  072d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  072d
    102  072d				   MenuCatTopGfxR
    103  072d
    104  072d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  072e		       10		      .byte.b	%00010000
    106  072f		       10		      .byte.b	%00010000
    107  0730		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0731
    109  0731							; 49 bytes used in page
    110  0731
    111  0731
    112  0731							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0731							; Menu Cat Top Left Player Graphics
    114  0731							;
    115  0731							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0731							;
    117  0731							; 3 bytes of ROM
    118  0731							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0731
    120  0731				   MenuCatTopGfxL
    121  0731
    122  0731		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0732		       08		      .byte.b	%00001000
    124  0733		       20		      .byte.b	%00100000
    125  0734							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0734
    127  0734							; 52 bytes used in page
    128  0734
    129  0734
    130  0734							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0734							; Menu Cat Left Playfield Graphics
    132  0734							;
    133  0734							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0734							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0734							;
    136  0734							; 84 bytes of ROM (14 per frame)
    137  0734							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0734
    139  0734				   MenuCatPfL
    140  0734
    141  0734							; frame 1
    142  0734		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0735		       93		      .byte.b	%10010011
    144  0736		       f3		      .byte.b	%11110011
    145  0737		       bf		      .byte.b	%10111111
    146  0738		       bf		      .byte.b	%10111111
    147  0739		       3f		      .byte.b	%00111111
    148  073a		       3f		      .byte.b	%00111111
    149  073b		       3f		      .byte.b	%00111111
    150  073c		       3b		      .byte.b	%00111011
    151  073d		       39		      .byte.b	%00111001
    152  073e		       bd		      .byte.b	%10111101
    153  073f		       bc		      .byte.b	%10111100
    154  0740		       bf		      .byte.b	%10111111
    155  0741		       bf		      .byte.b	%10111111
    156  0742		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0743
    158  0743							; frame 2
    159  0743							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0743		       97		      .byte.b	%10010111
    161  0744		       f7		      .byte.b	%11110111
    162  0745		       bf		      .byte.b	%10111111
    163  0746		       bf		      .byte.b	%10111111
    164  0747		       bf		      .byte.b	%10111111
    165  0748		       bf		      .byte.b	%10111111
    166  0749		       bb		      .byte.b	%10111011
    167  074a		       b9		      .byte.b	%10111001
    168  074b		       bc		      .byte.b	%10111100
    169  074c		       bc		      .byte.b	%10111100
    170  074d		       bf		      .byte.b	%10111111
    171  074e		       bf		      .byte.b	%10111111
    172  074f		       bf		      .byte.b	%10111111
    173  0750		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0751
    175  0751							; frame 3
    176  0751							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0751		       a7		      .byte.b	%10100111
    178  0752		       f7		      .byte.b	%11110111
    179  0753		       bf		      .byte.b	%10111111
    180  0754		       bf		      .byte.b	%10111111
    181  0755		       bf		      .byte.b	%10111111
    182  0756		       bc		      .byte.b	%10111100
    183  0757		       b9		      .byte.b	%10111001
    184  0758		       bf		      .byte.b	%10111111
    185  0759		       bf		      .byte.b	%10111111
    186  075a		       bf		      .byte.b	%10111111
    187  075b		       bf		      .byte.b	%10111111
    188  075c		       bf		      .byte.b	%10111111
    189  075d		       bf		      .byte.b	%10111111
    190  075e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  075f
    192  075f							; frame 4
    193  075f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  075f		       97		      .byte.b	%10010111
    195  0760		       f7		      .byte.b	%11110111
    196  0761		       bf		      .byte.b	%10111111
    197  0762		       bf		      .byte.b	%10111111
    198  0763		       bc		      .byte.b	%10111100
    199  0764		       bc		      .byte.b	%10111100
    200  0765		       b9		      .byte.b	%10111001
    201  0766		       bb		      .byte.b	%10111011
    202  0767		       bf		      .byte.b	%10111111
    203  0768		       bf		      .byte.b	%10111111
    204  0769		       bf		      .byte.b	%10111111
    205  076a		       bf		      .byte.b	%10111111
    206  076b		       bf		      .byte.b	%10111111
    207  076c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  076d
    209  076d							; frame 5
    210  076d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  076d		       cb		      .byte.b	%11001011
    212  076e		       f3		      .byte.b	%11110011
    213  076f		       bf		      .byte.b	%10111111
    214  0770		       bf		      .byte.b	%10111111
    215  0771		       3f		      .byte.b	%00111111
    216  0772		       3f		      .byte.b	%00111111
    217  0773		       3f		      .byte.b	%00111111
    218  0774		       3b		      .byte.b	%00111011
    219  0775		       38		      .byte.b	%00111000
    220  0776		       bc		      .byte.b	%10111100
    221  0777		       bf		      .byte.b	%10111111
    222  0778		       bf		      .byte.b	%10111111
    223  0779		       bf		      .byte.b	%10111111
    224  077a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  077b
    226  077b							; frame 6
    227  077b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  077b		       cb		      .byte.b	%11001011
    229  077c		       f3		      .byte.b	%11110011
    230  077d		       bb		      .byte.b	%10111011
    231  077e		       bf		      .byte.b	%10111111
    232  077f		       bf		      .byte.b	%10111111
    233  0780		       3f		      .byte.b	%00111111
    234  0781		       3f		      .byte.b	%00111111
    235  0782		       3b		      .byte.b	%00111011
    236  0783		       39		      .byte.b	%00111001
    237  0784		       3c		      .byte.b	%00111100
    238  0785		       bc		      .byte.b	%10111100
    239  0786		       bf		      .byte.b	%10111111
    240  0787		       bf		      .byte.b	%10111111
    241  0788							;	.byte %10111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0788
    243  0788							; 136 bytes used in page
    244  0788
    245  0788
    246  0788							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0788							; Menu Cat Right Playfield Graphics
    248  0788							;
    249  0788							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0788							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0788							;
    252  0788							; 37 bytes of ROM (12 per frame + 1)
    253  0788							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0788
    255  0788				   MenuCatPfR
    256  0788
    257  0788							; frames 1/5
    258  0788		       bf		      .byte.b	%10111111	; PF2(R) gfx block 18
    259  0789		       81		      .byte.b	%10000001
    260  078a		       81		      .byte.b	%10000001
    261  078b		       80		      .byte.b	%10000000
    262  078c		       80		      .byte.b	%10000000
    263  078d		       80		      .byte.b	%10000000
    264  078e		       80		      .byte.b	%10000000
    265  078f		       80		      .byte.b	%10000000
    266  0790		       81		      .byte.b	%10000001
    267  0791		       99		      .byte.b	%10011001
    268  0792		       99		      .byte.b	%10011001
    269  0793		       bd		      .byte.b	%10111101
    270  0794							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0794
    272  0794							; frames 2/3/4
    273  0794		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0795		       c1		      .byte.b	%11000001
    275  0796		       80		      .byte.b	%10000000
    276  0797		       80		      .byte.b	%10000000
    277  0798		       80		      .byte.b	%10000000
    278  0799		       80		      .byte.b	%10000000
    279  079a		       80		      .byte.b	%10000000
    280  079b		       80		      .byte.b	%10000000
    281  079c		       80		      .byte.b	%10000000
    282  079d		       88		      .byte.b	%10001000
    283  079e		       9c		      .byte.b	%10011100
    284  079f		       9c		      .byte.b	%10011100
    285  07a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  07a0
    287  07a0							; frame 6
    288  07a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  07a1		       ff		      .byte.b	%11111111
    290  07a2		       81		      .byte.b	%10000001
    291  07a3		       81		      .byte.b	%10000001
    292  07a4		       80		      .byte.b	%10000000
    293  07a5		       80		      .byte.b	%10000000
    294  07a6		       80		      .byte.b	%10000000
    295  07a7		       80		      .byte.b	%10000000
    296  07a8		       80		      .byte.b	%10000000
    297  07a9		       81		      .byte.b	%10000001
    298  07aa		       99		      .byte.b	%10011001
    299  07ab		       99		      .byte.b	%10011001
    300  07ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  07ad							; 173 bytes used in page
    302  07ad
    303  07ad
    304  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  07ad							; Menu Cat Player Hmove Graphics
    306  07ad							;
    307  07ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  07ad							; The frame's graphics will be accessed through a pointer.
    309  07ad							;
    310  07ad							; 70 bytes of ROM (14 per frame)
    311  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  07ad
    313  07ad				   MenuCatHmoveP
    314  07ad
    315  07ad							; frame 1
    316  07ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  07ae		       a0		      .byte.b	$A0
    318  07af		       c0		      .byte.b	$C0
    319  07b0		       00		      .byte.b	$00
    320  07b1		       00		      .byte.b	$00
    321  07b2		       00		      .byte.b	$00
    322  07b3		       00		      .byte.b	$00
    323  07b4		       00		      .byte.b	$00
    324  07b5		       00		      .byte.b	$00
    325  07b6		       00		      .byte.b	$00
    326  07b7		       00		      .byte.b	$00
    327  07b8		       00		      .byte.b	$00
    328  07b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  07ba
    330  07ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  07bb
    332  07bb							; frame 2
    333  07bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  07bc		       a0		      .byte.b	$A0
    335  07bd		       a0		      .byte.b	$A0
    336  07be		       00		      .byte.b	$00
    337  07bf		       00		      .byte.b	$00
    338  07c0		       00		      .byte.b	$00
    339  07c1		       00		      .byte.b	$00
    340  07c2		       00		      .byte.b	$00
    341  07c3		       00		      .byte.b	$00
    342  07c4		       00		      .byte.b	$00
    343  07c5		       00		      .byte.b	$00
    344  07c6		       00		      .byte.b	$00
    345  07c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  07c8
    347  07c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  07c9
    349  07c9							; frame 3
    350  07c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  07ca		       80		      .byte.b	$80
    352  07cb		       a0		      .byte.b	$A0
    353  07cc		       00		      .byte.b	$00
    354  07cd		       00		      .byte.b	$00
    355  07ce		       00		      .byte.b	$00
    356  07cf		       00		      .byte.b	$00
    357  07d0		       00		      .byte.b	$00
    358  07d1		       00		      .byte.b	$00
    359  07d2		       00		      .byte.b	$00
    360  07d3		       00		      .byte.b	$00
    361  07d4		       00		      .byte.b	$00
    362  07d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  07d6
    364  07d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  07d7
    366  07d7							; frame 4
    367  07d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  07d8		       80		      .byte.b	$80
    369  07d9		       c0		      .byte.b	$C0
    370  07da		       00		      .byte.b	$00
    371  07db		       00		      .byte.b	$00
    372  07dc		       00		      .byte.b	$00
    373  07dd		       00		      .byte.b	$00
    374  07de		       00		      .byte.b	$00
    375  07df		       00		      .byte.b	$00
    376  07e0		       00		      .byte.b	$00
    377  07e1		       00		      .byte.b	$00
    378  07e2		       00		      .byte.b	$00
    379  07e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  07e4
    381  07e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  07e5
    383  07e5							; frames 5/6
    384  07e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  07e6		       c0		      .byte.b	$C0
    386  07e7		       c0		      .byte.b	$C0
    387  07e8		       00		      .byte.b	$00
    388  07e9		       00		      .byte.b	$00
    389  07ea		       00		      .byte.b	$00
    390  07eb		       00		      .byte.b	$00
    391  07ec		       00		      .byte.b	$00
    392  07ed		       00		      .byte.b	$00
    393  07ee		       00		      .byte.b	$00
    394  07ef		       00		      .byte.b	$00
    395  07f0		       00		      .byte.b	$00
    396  07f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  07f2
    398  07f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  07f3
    400  07f3							; 243 bytes used in page
    401  07f3
    402  07f3
    403  07f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  07f3							; Menu Cat Missile Graphics
    405  07f3							;
    406  07f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  07f3							; menu cat display.
    408  07f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  07f3							; Because of that, this table cannot be at the start of a page.
    410  07f3							;
    411  07f3							; 13 bytes of ROM
    412  07f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  07f3
    414  07f3				   MenuCatMslGfx
    415  07f3
    416  07f3							; frame 6
    417  07f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  07f4
    419  07f4							; frames 5/4/3/2/1
    420  07f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  07f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  07f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  07f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  07f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  07f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  07fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  07fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  07fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  07fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  07fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  07ff
    432  07ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0800
    434  0800							; all 256 bytes used in page
    435  0800
    436  0800
    437  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0800							; PAGE BOUNDARY
    439  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0800
    441  0800				   MenuCatGfxPage2
    442  0800
    443  0800
    444  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0800							; Menu Cat Left Player Graphics
    446  0800							;
    447  0800							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0800							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0800							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0800							;
    451  0800							; 84 bytes of ROM (14 per frame)
    452  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0800
    454  0800				   MenuCatGfxL
    455  0800
    456  0800							; frame 1
    457  0800		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0801		       9a		      .byte.b	%10011010
    459  0802		       8f		      .byte.b	%10001111
    460  0803		       70		      .byte.b	%01110000
    461  0804		       04		      .byte.b	%00000100
    462  0805		       01		      .byte.b	%00000001
    463  0806		       03		      .byte.b	%00000011
    464  0807		       0f		      .byte.b	%00001111
    465  0808		       19		      .byte.b	%00011001
    466  0809		       33		      .byte.b	%00110011
    467  080a		       67		      .byte.b	%01100111
    468  080b		       4d		      .byte.b	%01001101
    469  080c		       79		      .byte.b	%01111001
    470  080d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  080e
    472  080e							; frame 2
    473  080e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  080f		       94		      .byte.b	%10010100
    475  0810		       9f		      .byte.b	%10011111
    476  0811		       60		      .byte.b	%01100000
    477  0812		       08		      .byte.b	%00001000
    478  0813		       01		      .byte.b	%00000001
    479  0814		       07		      .byte.b	%00000111
    480  0815		       19		      .byte.b	%00011001
    481  0816		       21		      .byte.b	%00100001
    482  0817		       4f		      .byte.b	%01001111
    483  0818		       49		      .byte.b	%01001001
    484  0819		       31		      .byte.b	%00110001
    485  081a		       01		      .byte.b	%00000001
    486  081b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  081c
    488  081c							; frame 3
    489  081c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  081d		       94		      .byte.b	%10010100
    491  081e		       bf		      .byte.b	%10111111
    492  081f		       c0		      .byte.b	%11000000
    493  0820		       08		      .byte.b	%00001000
    494  0821		       3d		      .byte.b	%00111101
    495  0822		       47		      .byte.b	%01000111
    496  0823		       61		      .byte.b	%01100001
    497  0824		       1f		      .byte.b	%00011111
    498  0825		       03		      .byte.b	%00000011
    499  0826		       01		      .byte.b	%00000001
    500  0827		       01		      .byte.b	%00000001
    501  0828		       01		      .byte.b	%00000001
    502  0829		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  082a
    504  082a							; frame 4
    505  082a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  082b		       94		      .byte.b	%10010100
    507  082c		       9f		      .byte.b	%10011111
    508  082d		       60		      .byte.b	%01100000
    509  082e		       c4		      .byte.b	%11000100
    510  082f		       49		      .byte.b	%01001001
    511  0830		       4f		      .byte.b	%01001111
    512  0831		       21		      .byte.b	%00100001
    513  0832		       19		      .byte.b	%00011001
    514  0833		       07		      .byte.b	%00000111
    515  0834		       01		      .byte.b	%00000001
    516  0835		       01		      .byte.b	%00000001
    517  0836		       01		      .byte.b	%00000001
    518  0837		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0838
    520  0838							; frame 5
    521  0838		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0839		       94		      .byte.b	%10010100
    523  083a		       8f		      .byte.b	%10001111
    524  083b		       78		      .byte.b	%01111000
    525  083c		       0c		      .byte.b	%00001100
    526  083d		       01		      .byte.b	%00000001
    527  083e		       01		      .byte.b	%00000001
    528  083f		       07		      .byte.b	%00000111
    529  0840		       3d		      .byte.b	%00111101
    530  0841		       c3		      .byte.b	%11000011
    531  0842		       8f		      .byte.b	%10001111
    532  0843		       79		      .byte.b	%01111001
    533  0844		       01		      .byte.b	%00000001
    534  0845		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0846
    536  0846							; frame 6
    537  0846		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0847		       94		      .byte.b	%10010100
    539  0848		       8f		      .byte.b	%10001111
    540  0849		       58		      .byte.b	%01011000
    541  084a		       0c		      .byte.b	%00001100
    542  084b		       01		      .byte.b	%00000001
    543  084c		       01		      .byte.b	%00000001
    544  084d		       07		      .byte.b	%00000111
    545  084e		       19		      .byte.b	%00011001
    546  084f		       21		      .byte.b	%00100001
    547  0850		       4f		      .byte.b	%01001111
    548  0851		       49		      .byte.b	%01001001
    549  0852		       31		      .byte.b	%00110001
    550  0853		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0854
    552  0854							; 84 bytes used in page
    553  0854
    554  0854
    555  0854							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0854							; Menu Cat Lower Right Player Graphics
    557  0854							;
    558  0854							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0854							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0854							;
    561  0854							; 12 bytes of ROM (2 per frame)
    562  0854							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0854
    564  0854				   MenuCatLowGfxR
    565  0854
    566  0854							; frame 1
    567  0854		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0855		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0856
    570  0856							; frame 2
    571  0856		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0857		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0858
    574  0858							; frame 3
    575  0858		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0859		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  085a
    578  085a							; frame 4
    579  085a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  085b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  085c
    582  085c							; frame 5
    583  085c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  085d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  085e
    586  085e							; frame 6
    587  085e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  085f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0860
    590  0860							; 96 bytes used in page
    591  0860
    592  0860
    593  0860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0860							; Menu Cat Lower Right Playfield Graphics
    595  0860							;
    596  0860							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0860							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0860							;
    599  0860							; 12 bytes of ROM (2 per frame)
    600  0860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0860
    602  0860				   MenuCatLowPfGfxR
    603  0860
    604  0860							; frame 1
    605  0860		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0861		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0862
    608  0862							; frame 2
    609  0862		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0863		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0864
    612  0864							; frame 3
    613  0864		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0865		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0866
    616  0866							; frame 4
    617  0866		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0867		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0868
    620  0868							; frame 5
    621  0868		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0869		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  086a
    624  086a							; frame 6
    625  086a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  086b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  086c
    628  086c							; 108 bytes used in page
    629  086c
    630  086c
    631  086c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  086c							; Menu Cat Missile Hmove Graphics
    633  086c							;
    634  086c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  086c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  086c							; The frame's graphics will be accessed through a pointer.
    637  086c							;
    638  086c							; 65 bytes of ROM (13 per frame)
    639  086c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  086c
    641  086c				   MenuCatHmoveM
    642  086c
    643  086c							; frames 1/2
    644  086c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  086d		       0e		      .byte.b	$0E
    646  086e		       0e		      .byte.b	$0E
    647  086f		       e0		      .byte.b	$E0
    648  0870		       00		      .byte.b	$00
    649  0871		       20		      .byte.b	$20
    650  0872		       20		      .byte.b	$20
    651  0873		       02		      .byte.b	$02
    652  0874		       00		      .byte.b	$00
    653  0875		       e0		      .byte.b	$E0
    654  0876		       e0		      .byte.b	$E0
    655  0877		       c2		      .byte.b	$C2
    656  0878		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0879
    658  0879							; frame 3
    659  0879		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  087a		       0e		      .byte.b	$0E
    661  087b		       0e		      .byte.b	$0E
    662  087c		       e0		      .byte.b	$E0
    663  087d		       00		      .byte.b	$00
    664  087e		       20		      .byte.b	$20
    665  087f		       20		      .byte.b	$20
    666  0880		       02		      .byte.b	$02
    667  0881		       00		      .byte.b	$00
    668  0882		       e0		      .byte.b	$E0
    669  0883		       e0		      .byte.b	$E0
    670  0884		       c2		      .byte.b	$C2
    671  0885		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0886
    673  0886							; frame 4
    674  0886		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0887		       0e		      .byte.b	$0E
    676  0888		       0e		      .byte.b	$0E
    677  0889		       e0		      .byte.b	$E0
    678  088a		       00		      .byte.b	$00
    679  088b		       20		      .byte.b	$20
    680  088c		       20		      .byte.b	$20
    681  088d		       02		      .byte.b	$02
    682  088e		       00		      .byte.b	$00
    683  088f		       e0		      .byte.b	$E0
    684  0890		       e0		      .byte.b	$E0
    685  0891		       c2		      .byte.b	$C2
    686  0892		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0893
    688  0893							; frame 5
    689  0893		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0894		       0e		      .byte.b	$0E
    691  0895		       0e		      .byte.b	$0E
    692  0896		       e0		      .byte.b	$E0
    693  0897		       00		      .byte.b	$00
    694  0898		       20		      .byte.b	$20
    695  0899		       20		      .byte.b	$20
    696  089a		       02		      .byte.b	$02
    697  089b		       00		      .byte.b	$00
    698  089c		       e0		      .byte.b	$E0
    699  089d		       e0		      .byte.b	$E0
    700  089e		       c2		      .byte.b	$C2
    701  089f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  08a0
    703  08a0							; frame 6
    704  08a0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  08a1		       2e		      .byte.b	$2E
    706  08a2		       0e		      .byte.b	$0E
    707  08a3		       0e		      .byte.b	$0E
    708  08a4		       e0		      .byte.b	$E0
    709  08a5		       00		      .byte.b	$00
    710  08a6		       20		      .byte.b	$20
    711  08a7		       20		      .byte.b	$20
    712  08a8		       02		      .byte.b	$02
    713  08a9		       00		      .byte.b	$00
    714  08aa		       e0		      .byte.b	$E0
    715  08ab		       e0		      .byte.b	$E0
    716  08ac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  08ad
    718  08ad							; 173 bytes used in page
    719  08ad
    720  08ad
    721  08ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  08ad							; Offset Tables
    723  08ad							;
    724  08ad							; Tables of offsets to the correct data for frames that can share graphics.
    725  08ad							;
    726  08ad							; 12 bytes of ROM (6 bytes per table)
    727  08ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  08ad
    729  08ad				   MenuCatOffsetGfx
    730  08ad		       03		      .byte.b	<MenuCatGfxR+0
    731  08ae		       11		      .byte.b	<MenuCatGfxR+14
    732  08af		       11		      .byte.b	<MenuCatGfxR+14
    733  08b0		       11		      .byte.b	<MenuCatGfxR+14
    734  08b1		       03		      .byte.b	<MenuCatGfxR+0
    735  08b2		       1f		      .byte.b	<MenuCatGfxR+28
    736  08b3
    737  08b3				   MenuCatOffsetPf
    738  08b3		       88		      .byte.b	<MenuCatPfR+0
    739  08b4		       94		      .byte.b	<MenuCatPfR+12
    740  08b5		       94		      .byte.b	<MenuCatPfR+12
    741  08b6		       94		      .byte.b	<MenuCatPfR+12
    742  08b7		       88		      .byte.b	<MenuCatPfR+0
    743  08b8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
------- FILE bank1/data/colors.asm LEVEL 3 PASS 2
      0  08b9					      include	bank1/data/colors.asm
      1  08b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  08b9							;
      3  08b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  08b9
      5  08b9				   MenuColors
      6  08b9
      7  08b9							; NTSC
      8  08b9		       a2		      .byte.b	$A2	; menu bg color
      9  08ba		       5f		      .byte.b	$5F	; cat tart color
     10  08bb		       44		      .byte.b	$44	; rainbow color red
     11  08bc		       38		      .byte.b	$38	; rainbow color orange
     12  08bd		       1c		      .byte.b	$1C	; rainbow color yellow
     13  08be		       ca		      .byte.b	$CA	; rainbow color green
     14  08bf		       a8		      .byte.b	$A8	; rainbow color blue
     15  08c0		       76		      .byte.b	$76	; rainbow color purple
     16  08c1
     17  08c1							; PAL
     18  08c1		       92		      .byte.b	$92	; menu bg color
     19  08c2		       6f		      .byte.b	$6F	; cat tart color
     20  08c3		       64		      .byte.b	$64	; rainbow color red
     21  08c4		       48		      .byte.b	$48	; rainbow color orange
     22  08c5		       3c		      .byte.b	$3C	; rainbow color yellow
     23  08c6		       5a		      .byte.b	$5A	; rainbow color green
     24  08c7		       b8		      .byte.b	$B8	; rainbow color blue
     25  08c8		       c6		      .byte.b	$C6	; rainbow color purple
------- FILE bank1.asm
------- FILE bank1/data/music.asm LEVEL 3 PASS 2
      0  08c9					      include	bank1/data/music.asm
      1  08c9		       00 00	   NOTE_HOLD  equ	0
      2  08c9		       00 10	   NOTE_D4S   equ	16
      3  08c9		       00 0f	   NOTE_E4    equ	15
      4  08c9		       00 0d	   NOTE_F4S   equ	13
      5  08c9		       00 0c	   NOTE_G4S   equ	12
      6  08c9		       00 0a	   NOTE_A4S   equ	10
      7  08c9		       00 9f	   NOTE_B4    equ	128 + 31
      8  08c9		       00 9b	   NOTE_C5S   equ	128 + 27
      9  08c9		       00 9a	   NOTE_D5    equ	128 + 26
     10  08c9		       00 98	   NOTE_D5S   equ	128 + 24
     11  08c9		       00 97	   NOTE_E5    equ	128 + 23
     12  08c9		       00 94	   NOTE_F5S   equ	128 + 20
     13  08c9		       00 92	   NOTE_G5S   equ	128 + 18
     14  08c9
     15  08c9		       06		      .byte.b	6
     16  08ca				   NoteLengths
     17  08ca		       06		      .byte.b	6
     18  08cb		       07		      .byte.b	7
     19  08cc		       06		      .byte.b	6
     20  08cd		       06		      .byte.b	6
     21  08ce		       07		      .byte.b	7
     22  08cf		       06		      .byte.b	6
     23  08d0		       06		      .byte.b	6
     24  08d1		       07		      .byte.b	7
     25  08d2		       06		      .byte.b	6
     26  08d3		       06		      .byte.b	6
     27  08d4		       07		      .byte.b	7
     28  08d5		       06		      .byte.b	6
     29  08d6		       06		      .byte.b	6
     30  08d7		       07		      .byte.b	7
     31  08d8		       06		      .byte.b	6
     32  08d9		       06		      .byte.b	6
     33  08da		       07		      .byte.b	7
     34  08db		       06		      .byte.b	6
     35  08dc
     36  08dc				   VlmEnvelope
     37  08dc		       09 0b 0d 0e*	      HEX	09 0B 0D 0E 0F 0F 0F
     38  08e3		       0e 0d 0c 0a*	      HEX	0E 0D 0C 0A 09 07 05
     39  08ea
     40  08ea				   MusicSeqs
     41  08ea		       00		      HEX	00
     42  08eb		       10		      HEX	10
     43  08ec		       20		      HEX	20
     44  08ed		       30		      HEX	30
     45  08ee		       00		      HEX	00
     46  08ef		       10		      HEX	10
     47  08f0		       20		      HEX	20
     48  08f1		       40		      HEX	40
     49  08f2		       50		      HEX	50
     50  08f3		       60		      HEX	60
     51  08f4		       70		      HEX	70
     52  08f5		       80		      HEX	80
     53  08f6		       50		      HEX	50
     54  08f7		       60		      HEX	60
     55  08f8		       70		      HEX	70
     56  08f9		       90		      HEX	90
     57  08fa
     58  08fa				   MusicSeq0
     59  08fa		       94		      .byte.b	NOTE_F5S
     60  08fb		       00		      .byte.b	NOTE_HOLD
     61  08fc		       92		      .byte.b	NOTE_G5S
     62  08fd		       00		      .byte.b	NOTE_HOLD
     63  08fe		       98		      .byte.b	NOTE_D5S
     64  08ff		       98		      .byte.b	NOTE_D5S
     65  0900		       00		      .byte.b	NOTE_HOLD
     66  0901		       9f		      .byte.b	NOTE_B4
     67  0902		       9a		      .byte.b	NOTE_D5
     68  0903		       9b		      .byte.b	NOTE_C5S
     69  0904		       9f		      .byte.b	NOTE_B4
     70  0905		       00		      .byte.b	NOTE_HOLD
     71  0906		       9f		      .byte.b	NOTE_B4
     72  0907		       00		      .byte.b	NOTE_HOLD
     73  0908		       9b		      .byte.b	NOTE_C5S
     74  0909		       00		      .byte.b	NOTE_HOLD
     75  090a
     76  090a				   MusicSeq1
     77  090a		       9a		      .byte.b	NOTE_D5
     78  090b		       00		      .byte.b	NOTE_HOLD
     79  090c		       9a		      .byte.b	NOTE_D5
     80  090d		       9b		      .byte.b	NOTE_C5S
     81  090e		       9f		      .byte.b	NOTE_B4
     82  090f		       9b		      .byte.b	NOTE_C5S
     83  0910		       98		      .byte.b	NOTE_D5S
     84  0911		       94		      .byte.b	NOTE_F5S
     85  0912		       92		      .byte.b	NOTE_G5S
     86  0913		       98		      .byte.b	NOTE_D5S
     87  0914		       94		      .byte.b	NOTE_F5S
     88  0915		       9b		      .byte.b	NOTE_C5S
     89  0916		       98		      .byte.b	NOTE_D5S
     90  0917		       9f		      .byte.b	NOTE_B4
     91  0918		       9b		      .byte.b	NOTE_C5S
     92  0919		       9f		      .byte.b	NOTE_B4
     93  091a
     94  091a				   MusicSeq2
     95  091a		       98		      .byte.b	NOTE_D5S
     96  091b		       00		      .byte.b	NOTE_HOLD
     97  091c		       94		      .byte.b	NOTE_F5S
     98  091d		       00		      .byte.b	NOTE_HOLD
     99  091e		       92		      .byte.b	NOTE_G5S
    100  091f		       98		      .byte.b	NOTE_D5S
    101  0920		       94		      .byte.b	NOTE_F5S
    102  0921		       9b		      .byte.b	NOTE_C5S
    103  0922		       98		      .byte.b	NOTE_D5S
    104  0923		       9f		      .byte.b	NOTE_B4
    105  0924		       9b		      .byte.b	NOTE_C5S
    106  0925		       98		      .byte.b	NOTE_D5S
    107  0926		       9a		      .byte.b	NOTE_D5
    108  0927		       9b		      .byte.b	NOTE_C5S
    109  0928		       9f		      .byte.b	NOTE_B4
    110  0929		       9b		      .byte.b	NOTE_C5S
    111  092a
    112  092a				   MusicSeq3
    113  092a		       9a		      .byte.b	NOTE_D5
    114  092b		       00		      .byte.b	NOTE_HOLD
    115  092c		       9f		      .byte.b	NOTE_B4
    116  092d		       9b		      .byte.b	NOTE_C5S
    117  092e		       98		      .byte.b	NOTE_D5S
    118  092f		       94		      .byte.b	NOTE_F5S
    119  0930		       9b		      .byte.b	NOTE_C5S
    120  0931		       9a		      .byte.b	NOTE_D5
    121  0932		       9b		      .byte.b	NOTE_C5S
    122  0933		       9f		      .byte.b	NOTE_B4
    123  0934		       9b		      .byte.b	NOTE_C5S
    124  0935		       00		      .byte.b	NOTE_HOLD
    125  0936		       9f		      .byte.b	NOTE_B4
    126  0937		       00		      .byte.b	NOTE_HOLD
    127  0938		       9b		      .byte.b	NOTE_C5S
    128  0939		       00		      .byte.b	NOTE_HOLD
    129  093a
    130  093a				   MusicSeq4
    131  093a		       9a		      .byte.b	NOTE_D5
    132  093b		       00		      .byte.b	NOTE_HOLD
    133  093c		       9f		      .byte.b	NOTE_B4
    134  093d		       9b		      .byte.b	NOTE_C5S
    135  093e		       98		      .byte.b	NOTE_D5S
    136  093f		       94		      .byte.b	NOTE_F5S
    137  0940		       9b		      .byte.b	NOTE_C5S
    138  0941		       9a		      .byte.b	NOTE_D5
    139  0942		       9b		      .byte.b	NOTE_C5S
    140  0943		       9f		      .byte.b	NOTE_B4
    141  0944		       9b		      .byte.b	NOTE_C5S
    142  0945		       00		      .byte.b	NOTE_HOLD
    143  0946		       9f		      .byte.b	NOTE_B4
    144  0947		       00		      .byte.b	NOTE_HOLD
    145  0948		       9f		      .byte.b	NOTE_B4
    146  0949		       00		      .byte.b	NOTE_HOLD
    147  094a
    148  094a				   MusicSeq5
    149  094a		       9f		      .byte.b	NOTE_B4
    150  094b		       00		      .byte.b	NOTE_HOLD
    151  094c		       0d		      .byte.b	NOTE_F4S
    152  094d		       0c		      .byte.b	NOTE_G4S
    153  094e		       9f		      .byte.b	NOTE_B4
    154  094f		       00		      .byte.b	NOTE_HOLD
    155  0950		       0d		      .byte.b	NOTE_F4S
    156  0951		       0c		      .byte.b	NOTE_G4S
    157  0952		       9f		      .byte.b	NOTE_B4
    158  0953		       9b		      .byte.b	NOTE_C5S
    159  0954		       98		      .byte.b	NOTE_D5S
    160  0955		       9f		      .byte.b	NOTE_B4
    161  0956		       97		      .byte.b	NOTE_E5
    162  0957		       98		      .byte.b	NOTE_D5S
    163  0958		       97		      .byte.b	NOTE_E5
    164  0959		       94		      .byte.b	NOTE_F5S
    165  095a
    166  095a				   MusicSeq6
    167  095a		       9f		      .byte.b	NOTE_B4
    168  095b		       00		      .byte.b	NOTE_HOLD
    169  095c		       9f		      .byte.b	NOTE_B4
    170  095d		       00		      .byte.b	NOTE_HOLD
    171  095e		       0d		      .byte.b	NOTE_F4S
    172  095f		       0c		      .byte.b	NOTE_G4S
    173  0960		       9f		      .byte.b	NOTE_B4
    174  0961		       0d		      .byte.b	NOTE_F4S
    175  0962		       97		      .byte.b	NOTE_E5
    176  0963		       98		      .byte.b	NOTE_D5S
    177  0964		       9b		      .byte.b	NOTE_C5S
    178  0965		       9f		      .byte.b	NOTE_B4
    179  0966		       0d		      .byte.b	NOTE_F4S
    180  0967		       10		      .byte.b	NOTE_D4S
    181  0968		       0f		      .byte.b	NOTE_E4
    182  0969		       0d		      .byte.b	NOTE_F4S
    183  096a
    184  096a				   MusicSeq7
    185  096a		       9f		      .byte.b	NOTE_B4
    186  096b		       00		      .byte.b	NOTE_HOLD
    187  096c		       0d		      .byte.b	NOTE_F4S
    188  096d		       0c		      .byte.b	NOTE_G4S
    189  096e		       9f		      .byte.b	NOTE_B4
    190  096f		       00		      .byte.b	NOTE_HOLD
    191  0970		       0d		      .byte.b	NOTE_F4S
    192  0971		       0c		      .byte.b	NOTE_G4S
    193  0972		       9f		      .byte.b	NOTE_B4
    194  0973		       9f		      .byte.b	NOTE_B4
    195  0974		       9b		      .byte.b	NOTE_C5S
    196  0975		       98		      .byte.b	NOTE_D5S
    197  0976		       9f		      .byte.b	NOTE_B4
    198  0977		       0d		      .byte.b	NOTE_F4S
    199  0978		       0c		      .byte.b	NOTE_G4S
    200  0979		       0d		      .byte.b	NOTE_F4S
    201  097a
    202  097a				   MusicSeq8
    203  097a		       9f		      .byte.b	NOTE_B4
    204  097b		       00		      .byte.b	NOTE_HOLD
    205  097c		       9f		      .byte.b	NOTE_B4
    206  097d		       0a		      .byte.b	NOTE_A4S
    207  097e		       9f		      .byte.b	NOTE_B4
    208  097f		       0d		      .byte.b	NOTE_F4S
    209  0980		       0c		      .byte.b	NOTE_G4S
    210  0981		       9f		      .byte.b	NOTE_B4
    211  0982		       97		      .byte.b	NOTE_E5
    212  0983		       98		      .byte.b	NOTE_D5S
    213  0984		       97		      .byte.b	NOTE_E5
    214  0985		       94		      .byte.b	NOTE_F5S
    215  0986		       9f		      .byte.b	NOTE_B4
    216  0987		       00		      .byte.b	NOTE_HOLD
    217  0988		       0a		      .byte.b	NOTE_A4S
    218  0989		       00		      .byte.b	NOTE_HOLD
    219  098a
    220  098a				   MusicSeq9
    221  098a		       9f		      .byte.b	NOTE_B4
    222  098b		       00		      .byte.b	NOTE_HOLD
    223  098c		       9f		      .byte.b	NOTE_B4
    224  098d		       0a		      .byte.b	NOTE_A4S
    225  098e		       9f		      .byte.b	NOTE_B4
    226  098f		       0d		      .byte.b	NOTE_F4S
    227  0990		       0c		      .byte.b	NOTE_G4S
    228  0991		       9f		      .byte.b	NOTE_B4
    229  0992		       97		      .byte.b	NOTE_E5
    230  0993		       98		      .byte.b	NOTE_D5S
    231  0994		       97		      .byte.b	NOTE_E5
    232  0995		       94		      .byte.b	NOTE_F5S
    233  0996		       9f		      .byte.b	NOTE_B4
    234  0997		       00		      .byte.b	NOTE_HOLD
    235  0998		       9b		      .byte.b	NOTE_C5S
    236  0999		       00		      .byte.b	NOTE_HOLD
    237  099a
    238  099a				   MusicSeqA
    239  099a		       10		      .byte.b	NOTE_D4S
    240  099b		       0f		      .byte.b	NOTE_E4
    241  099c		       0d		      .byte.b	NOTE_F4S
    242  099d		       00		      .byte.b	NOTE_HOLD
    243  099e		       9f		      .byte.b	NOTE_B4
    244  099f		       00		      .byte.b	NOTE_HOLD
    245  09a0		       10		      .byte.b	NOTE_D4S
    246  09a1		       0f		      .byte.b	NOTE_E4
    247  09a2		       0d		      .byte.b	NOTE_F4S
    248  09a3		       9f		      .byte.b	NOTE_B4
    249  09a4		       9b		      .byte.b	NOTE_C5S
    250  09a5		       98		      .byte.b	NOTE_D5S
    251  09a6		       9b		      .byte.b	NOTE_C5S
    252  09a7		       0a		      .byte.b	NOTE_A4S
    253  09a8		       9f		      .byte.b	NOTE_B4
    254  09a9		       00		      .byte.b	NOTE_HOLD
    255  09aa
    256  09aa				   MusicSeqB
    257  09aa		       0d		      .byte.b	NOTE_F4S
    258  09ab		       00		      .byte.b	NOTE_HOLD
    259  09ac		       10		      .byte.b	NOTE_D4S
    260  09ad		       0f		      .byte.b	NOTE_E4
    261  09ae		       0d		      .byte.b	NOTE_F4S
    262  09af		       00		      .byte.b	NOTE_HOLD
    263  09b0		       9f		      .byte.b	NOTE_B4
    264  09b1		       00		      .byte.b	NOTE_HOLD
    265  09b2		       9b		      .byte.b	NOTE_C5S
    266  09b3		       0a		      .byte.b	NOTE_A4S
    267  09b4		       9f		      .byte.b	NOTE_B4
    268  09b5		       9b		      .byte.b	NOTE_C5S
    269  09b6		       97		      .byte.b	NOTE_E5
    270  09b7		       98		      .byte.b	NOTE_D5S
    271  09b8		       97		      .byte.b	NOTE_E5
    272  09b9		       9b		      .byte.b	NOTE_C5S
    273  09ba
------- FILE bank1.asm
     14  09ba
      0  09ba					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
------- FILE main.asm
------- FILE bank2.asm LEVEL 2 PASS 2
      0  1000					      include	bank2.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Bank 2
      3  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1000
      0  1000					      START_BANK	2
      1  2000 ????				      SEG	BANK_2
      2  1000					      ORG	[2 - 1] * $1000
      3  1000					      RORG	$1000
      4  1000					      SUBROUTINE
      5  1000
      6  1000				   JmpInitSystem
      7  1000		       0c f6 1f 	      nop	SelectBank1
      8  1003		       4c 12 10 	      jmp	InitSystem
      9  1006				   JmpMenuOverScan
     10  1006		       0c f6 1f 	      nop	SelectBank1
     11  1009		       4c 20 10 	      jmp	MenuOverScan
     12  100c				   JmpGamePlay
     13  100c		       0c f7 1f 	      nop	SelectBank2
     14  100f		       4c 12 10 	      jmp	GameplayInit
     15  1012
      6  1012
------- FILE bank2/init.asm LEVEL 3 PASS 2
      0  1012					      include	bank2/init.asm
      1  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1012							; Gameplay Initialization
      3  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1012
      5  1012				   GameplayInit SUBROUTINE
      6  1012
      7  1012		       a9 00		      lda	#0
      8  1014		       a2 8f		      ldx	#RamLocal
      9  1016				   .ClearRam
     10  1016		       95 00		      sta	$00,x
     11  1018		       9a		      txs
     12  1019		       e8		      inx
     13  101a		       d0 fa		      bne	.ClearRam
     14  101c
     15  101c							; Set the food items (temporary demo code)
     16  101c		       a9 10		      lda	#$10
     17  101e		       85 a4		      sta	FoodItemL+0
     18  1020		       a9 70		      lda	#$70
     19  1022		       85 ab		      sta	FoodItemR+0
     20  1024
     21  1024		       a9 20		      lda	#$20
     22  1026		       85 a5		      sta	FoodItemL+1
     23  1028		       a9 80		      lda	#$80
     24  102a		       85 ac		      sta	FoodItemR+1
     25  102c
     26  102c		       a9 30		      lda	#$30
     27  102e		       85 a6		      sta	FoodItemL+2
     28  1030		       a9 90		      lda	#$90
     29  1032		       85 ad		      sta	FoodItemR+2
     30  1034
     31  1034		       a9 40		      lda	#$40
     32  1036		       85 a7		      sta	FoodItemL+3
     33  1038		       a9 a0		      lda	#$A0
     34  103a		       85 ae		      sta	FoodItemR+3
     35  103c
     36  103c		       a9 50		      lda	#$50
     37  103e		       85 a8		      sta	FoodItemL+4
     38  1040		       a9 b0		      lda	#$B0
     39  1042		       85 af		      sta	FoodItemR+4
     40  1044
     41  1044		       a9 60		      lda	#$60
     42  1046		       85 a9		      sta	FoodItemL+5
     43  1048		       a9 c0		      lda	#$C0
     44  104a		       85 b0		      sta	FoodItemR+5
     45  104c
     46  104c		       a9 d0		      lda	#$D0
     47  104e		       85 aa		      sta	FoodItemL+6
     48  1050		       a9 e0		      lda	#$E0
     49  1052		       85 b1		      sta	FoodItemR+6
------- FILE bank2.asm
------- FILE bank2/code/oscan_logic.asm LEVEL 3 PASS 2
      0  1054					      include	bank2/code/oscan_logic.asm
      1  1054							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1054							; Overscan
      3  1054							;
      4  1054							; Start the overscan timer and do game logic
      5  1054							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1054
      7  1054				   Overscan   SUBROUTINE
      8  1054
      9  1054		       e6 80		      inc	Frame	; increment the frame number
      0  1056					      SET_OSCAN_TIMER
      1  1056					      SUBROUTINE
      2  1056
      3  1056		       a9 24		      lda	#OSCAN_NTSC
      4  1058		       24 81		      bit	Variation
      5  105a		       30 02		      bmi	.NtscMode
      6  105c		       a9 40		      lda	#OSCAN_PAL
      7  105e				   .NtscMode
      8  105e		       85 02		      sta	WSYNC
      9  1060		       8d 96 02 	      sta	TIM64T
     10  1063
     11  1063
     12  1063							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     13  1063							; Proccess Joysticks
     14  1063							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  1063
     16  1063		       a9 00		      lda	#0
     17  1065		       8d 81 02 	      sta	SWACNT	; set all I/O pins to input for joystick reading
     18  1068		       ad 80 02 	      lda	SWCHA	; get joystick position for this frame ONLY ONCE
     19  106b		       85 c6		      sta	Temp	; save joystick position for consistency
     20  106d		       29 30		      and	#$30	; check left stick's up/down bit states
     21  106f		       c9 30		      cmp	#$30	; to see if they are both HI (joystick centered)
     22  1071		       d0 06		      bne	.NotCenter	; if not, skip ahead
     23  1073		       a5 a2		      lda	JoyCenter	; otherwise set rightmost bit of JoyCenter
     24  1075		       09 01		      ora	#1	; (to signify that the joystick HAS been re-centered
     25  1077		       85 a2		      sta	JoyCenter	; before the cat's next movement)
     26  1079				   .NotCenter
     27  1079		       a5 0c		      lda	INPT4	; if the left fire button is pressed,
     28  107b		       10 06		      bpl	.CheckPos	; skip the check for a previously centered joystick
     29  107d		       a5 a2		      lda	JoyCenter	; otherwise, check if the joystick has been centered
     30  107f		       29 01		      and	#1
     31  1081		       f0 2a		      beq	.Skip	; if it hasn't, don't make a movement
     32  1083				   .CheckPos
     33  1083		       a5 a0		      lda	CatPosition	; get cat's position
     34  1085		       29 1f		      and	#$1F	; check right 5 bits only
     35  1087		       f0 04		      beq	.ReadJoy	; if zero, we are centered on a row (read joystick)
     36  1089		       c9 13		      cmp	#19	; or if 19, we are centered on the bottom row
     37  108b		       d0 20		      bne	.Skip	; if not centered, skip reading joystick
     38  108d				   .ReadJoy
     39  108d		       a5 c6		      lda	Temp
     40  108f		       0a		      asl		; ignore joystick right
     41  1090		       0a		      asl		; ignore joystick left
     42  1091		       0a		      asl		; check joystick down
     43  1092		       b0 09		      bcs	.NoDown
     44  1094
     45  1094							; Now that we know the player is pressing the joystick down, we need to
     46  1094							; decide if the cat should be moved down a row.
     47  1094
     48  1094		       a6 a1		      ldx	CatRow
     49  1096		       e0 06		      cpx	#6
     50  1098		       f0 13		      beq	.Skip	; If already at the bottom row, don't move down
     51  109a		       e8		      inx
     52  109b		       d0 08		      bne	.ChangeRow
     53  109d
     54  109d				   .NoDown
     55  109d		       0a		      asl		; check joystick up
     56  109e		       b0 0d		      bcs	.Skip
     57  10a0		       a6 a1		      ldx	CatRow
     58  10a2		       f0 09		      beq	.Skip	; If already at the top row, don't move up
     59  10a4		       ca		      dex
     60  10a5				   .ChangeRow
     61  10a5		       86 a1		      stx	CatRow
     62  10a7		       a5 a2		      lda	JoyCenter
     63  10a9		       29 fe		      and	#$FE
     64  10ab		       85 a2		      sta	JoyCenter	; clear rightmost bit in JoyCenter
     65  10ad				   .Skip
     66  10ad
     67  10ad
     68  10ad							; Caclulate cat's position data
     69  10ad					      SUBROUTINE
     70  10ad
     71  10ad		       a5 a1		      lda	CatRow
     72  10af		       29 07		      and	#$07
     73  10b1		       aa		      tax
     74  10b2		       bd 5b 1e 	      lda	RowPosition,x
     75  10b5		       c5 9f		      cmp	CatPosY
     76  10b7		       f0 17		      beq	.NoMove
     77  10b9		       30 08		      bmi	.MoveUp
     78  10bb				   .MoveDown
     79  10bb		       38		      sec
     80  10bc		       e5 9f		      sbc	CatPosY
     81  10be		       4a		      lsr
     82  10bf		       65 9f		      adc	CatPosY
     83  10c1		       d0 0b		      bne	.UpdatePos
     84  10c3				   .MoveUp
     85  10c3		       a5 9f		      lda	CatPosY
     86  10c5		       38		      sec
     87  10c6		       fd 5b 1e 	      sbc	RowPosition,x
     88  10c9		       4a		      lsr
     89  10ca		       18		      clc
     90  10cb		       7d 5b 1e 	      adc	RowPosition,x
     91  10ce				   .UpdatePos
     92  10ce		       85 9f		      sta	CatPosY
     93  10d0				   .NoMove
     94  10d0		       a2 00		      ldx	#0
     95  10d2				   .DivideLoop
     96  10d2		       38		      sec
     97  10d3		       e8		      inx
     98  10d4		       e9 13		      sbc	#19
     99  10d6		       90 07		      bcc	.AddBack
    100  10d8
    101  10d8		       e0 05		      cpx	#5
    102  10da		       d0 f6		      bne	.DivideLoop
    103  10dc		       e8		      inx
    104  10dd		       d0 02		      bne	.SetCatPos
    105  10df				   .AddBack
    106  10df		       69 13		      adc	#19
    107  10e1				   .SetCatPos
    108  10e1		       85 a0		      sta	CatPosition
    109  10e3		       8a		      txa
    110  10e4		       0a		      asl
    111  10e5		       0a		      asl
    112  10e6		       0a		      asl
    113  10e7		       0a		      asl
    114  10e8		       0a		      asl
    115  10e9		       65 a0		      adc	CatPosition
    116  10eb		       85 a0		      sta	CatPosition
    117  10ed		       ca		      dex
    118  10ee		       86 a3		      stx	PreCatRows
    119  10f0
    120  10f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121  10f0							; Finish Overscan
    122  10f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    123  10f0
      0  10f0					      TIMER_LOOP
      1  10f0					      SUBROUTINE
      2  10f0
      3  10f0				   .TimerLoop
      4  10f0		       ad 84 02 	      lda	INTIM
      5  10f3		       d0 fb		      bne	.TimerLoop
      6  10f5
------- FILE bank2.asm
------- FILE bank2/code/vblank_logic.asm LEVEL 3 PASS 2
      0  10f5					      include	bank2/code/vblank_logic.asm
      1  10f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10f5							; Vertical Blank
      3  10f5							;
      4  10f5							; Do the vertical blanking and game logic
      5  10f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  10f5
      0  10f5					      VERT_SYNC
      1  10f5					      SUBROUTINE
      2  10f5
      3  10f5		       a2 2b		      ldx	#VBLANK_NTSC
      4  10f7		       24 81		      bit	Variation
      5  10f9		       30 02		      bmi	.NtscMode
      6  10fb		       a2 4a		      ldx	#VBLANK_PAL
      7  10fd				   .NtscMode
      8  10fd		       a9 0e		      lda	#%1110
      9  10ff				   .VsyncLoop
     10  10ff		       85 02		      sta	WSYNC
     11  1101		       85 00		      sta	VSYNC
     12  1103		       85 01		      sta	VBLANK
     13  1105		       8e 96 02 	      stx	TIM64T
     14  1108		       4a		      lsr
     15  1109		       d0 f4		      bne	.VsyncLoop
     16  110b
      8  110b
      9  110b		       85 2b		      sta	HMCLR
     10  110d		       85 02		      sta	WSYNC
     11  110f
     12  110f							; set gfx obj positions for scoreboard display
     13  110f		       a9 f0		      lda	#$F0	; 02
     14  1111		       85 23		      sta	HMM1	; 05
     15  1113		       a9 10		      lda	#$10	; 07
     16  1115		       85 21		      sta	HMP1	; 10
     17  1117		       85 22		      sta	HMM0	; 13
      0  1119					      SLEEP	7	; 20
      1  1119				   .CYCLES    SET	7
      2  1119
      3  1119				  -	      IF	.CYCLES < 2
      4  1119				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1119				  -	      ERR
      6  1119					      ENDIF
      7  1119
      8  1119					      IF	.CYCLES & 1
      9  1119					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1119		       04 00		      nop	0
     11  111b				  -	      ELSE
     12  111b				  -	      bit	VSYNC
     13  111b					      ENDIF
     14  111b				   .CYCLES    SET	.CYCLES - 3
     15  111b					      ENDIF
     16  111b
     17  111b					      REPEAT	.CYCLES / 2
     18  111b		       ea		      nop
     17  111b					      REPEND
     18  111c		       ea		      nop
     19  111d					      REPEND
     19  111d		       85 13		      sta	RESM1	; 23
      0  111f					      SLEEP	3	; 26
      1  111f				   .CYCLES    SET	3
      2  111f
      3  111f				  -	      IF	.CYCLES < 2
      4  111f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  111f				  -	      ERR
      6  111f					      ENDIF
      7  111f
      8  111f					      IF	.CYCLES & 1
      9  111f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  111f		       04 00		      nop	0
     11  1121				  -	      ELSE
     12  1121				  -	      bit	VSYNC
     13  1121					      ENDIF
     14  1121				   .CYCLES    SET	.CYCLES - 3
     15  1121					      ENDIF
     16  1121
     17  1121				  -	      REPEAT	.CYCLES / 2
     18  1121				  -	      nop
     19  1121					      REPEND
     21  1121		       85 14		      sta	RESBL	; 29
     22  1123		       20 24 18 	      jsr	Sleep12	; 41
      0  1126					      SLEEP	11	; 52
      1  1126				   .CYCLES    SET	11
      2  1126
      3  1126				  -	      IF	.CYCLES < 2
      4  1126				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1126				  -	      ERR
      6  1126					      ENDIF
      7  1126
      8  1126					      IF	.CYCLES & 1
      9  1126					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1126		       04 00		      nop	0
     11  1128				  -	      ELSE
     12  1128				  -	      bit	VSYNC
     13  1128					      ENDIF
     14  1128				   .CYCLES    SET	.CYCLES - 3
     15  1128					      ENDIF
     16  1128
     17  1128					      REPEAT	.CYCLES / 2
     18  1128		       ea		      nop
     17  1128					      REPEND
     18  1129		       ea		      nop
     17  1129					      REPEND
     18  112a		       ea		      nop
     17  112a					      REPEND
     18  112b		       ea		      nop
     19  112c					      REPEND
     24  112c		       85 10		      sta	RESP0	; 55
     25  112e		       85 11		      sta	RESP1	; 58
     26  1130		       20 24 18 	      jsr	Sleep12	; 67
     27  1133		       85 12		      sta	RESM0	; 70
     28  1135
     29  1135		       85 02		      sta	WSYNC
     30  1137		       85 2a		      sta	HMOVE
     31  1139
     32  1139							; prepare for throbbing lines
     33  1139		       a5 80		      lda	Frame	; get the current frame number
     34  113b		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     35  113d		       4a		      lsr
     36  113e		       4a		      lsr		; shift to get a value from 0-7
     37  113f		       85 c6		      sta	Temp
     38  1141		       0a		      asl		; carry flag will always be clear after this
     39  1142		       65 c6		      adc	Temp	; multiply by 3
     40  1144		       a8		      tay
     41  1145
     42  1145		       a5 9d		      lda	ScoreColor
     43  1147		       29 f0		      and	#$F0
     44  1149		       85 c6		      sta	Temp
     45  114b		       b9 57 1b 	      lda	ThrobGfx+0,y
     46  114e		       0a		      asl
     47  114f		       90 01		      bcc	.Color0
      0  1151					      SKIP_WORD
      1  1151		       0c		      HEX	0C
     49  1152				   .Color0
     50  1152		       65 c6		      adc	Temp
     51  1154		       85 c2		      sta	ThrobColor+0
     52  1156		       b9 58 1b 	      lda	ThrobGfx+1,y
     53  1159		       0a		      asl
     54  115a		       90 01		      bcc	.Color1
      0  115c					      SKIP_WORD
      1  115c		       0c		      HEX	0C
     56  115d				   .Color1
     57  115d		       65 c6		      adc	Temp
     58  115f		       85 c3		      sta	ThrobColor+1
     59  1161		       b9 59 1b 	      lda	ThrobGfx+2,y
     60  1164		       0a		      asl
     61  1165		       90 01		      bcc	.Color2
      0  1167					      SKIP_WORD
      1  1167		       0c		      HEX	0C
     63  1168				   .Color2
     64  1168		       65 c6		      adc	Temp
     65  116a		       85 c4		      sta	ThrobColor+2
     66  116c
     67  116c					      SUBROUTINE
     68  116c
     69  116c							; get graphics data for the scoreboard and push it onto the stack
     70  116c
     71  116c							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
     72  116c		       a9 1b		      lda	#>ScoreGfx
     73  116e		       85 90		      sta	LvlLoadPtr+1
     74  1170		       85 92		      sta	ScrLoadPtr0+1
     75  1172		       85 94		      sta	ScrLoadPtr1+1
     76  1174		       85 96		      sta	ScrLoadPtr2+1
     77  1176		       85 98		      sta	ScrLoadPtr3+1
     78  1178		       85 9a		      sta	ScrLoadPtr4+1
     79  117a		       85 9c		      sta	ScrLoadPtr5+1
     80  117c
     81  117c							; Prepare pointer for level digit graphics - 14 cycles
     82  117c		       a5 88		      lda	Level
     83  117e		       c9 10		      cmp	#$10
     84  1180		       30 02		      bmi	.Less10_1
     85  1182		       e9 0a		      sbc	#10
     86  1184				   .Less10_1
     87  1184		       85 8f		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
     88  1186
     89  1186							; Prepare pointers for score digit graphics - 69 cycles
     90  1186		       a7 82		      lax	BCDScore+0
     91  1188		       29 f0		      and	#$F0
     92  118a		       4a		      lsr
     93  118b		       85 91		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
     94  118d
     95  118d		       8a		      txa
     96  118e		       29 0f		      and	#$0F
     97  1190		       0a		      asl
     98  1191		       0a		      asl
     99  1192		       0a		      asl
    100  1193		       85 93		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    101  1195
    102  1195		       a7 83		      lax	BCDScore+1
    103  1197		       29 f0		      and	#$F0
    104  1199		       4a		      lsr
    105  119a		       85 95		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    106  119c
    107  119c		       8a		      txa
    108  119d		       29 0f		      and	#$0F
    109  119f		       0a		      asl
    110  11a0		       0a		      asl
    111  11a1		       0a		      asl
    112  11a2		       85 97		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    113  11a4
    114  11a4		       a7 84		      lax	BCDScore+2
    115  11a6		       29 f0		      and	#$F0
    116  11a8		       4a		      lsr
    117  11a9		       85 99		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    118  11ab
    119  11ab		       8a		      txa
    120  11ac		       29 0f		      and	#$0F
    121  11ae		       0a		      asl
    122  11af		       0a		      asl
    123  11b0		       0a		      asl
    124  11b1		       85 9b		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    125  11b3
    126  11b3							; Load the stack with the graphics for the scoreboard - 428 cycles
    127  11b3		       a0 06		      ldy	#6
    128  11b5				   .LoadScoreboard
    129  11b5		       b1 9b		      lda	(ScrLoadPtr5),y
    130  11b7		       48		      pha
    131  11b8		       b1 99		      lda	(ScrLoadPtr4),y
    132  11ba		       48		      pha
    133  11bb		       b1 97		      lda	(ScrLoadPtr3),y
    134  11bd		       48		      pha
    135  11be		       b1 95		      lda	(ScrLoadPtr2),y
    136  11c0		       48		      pha
    137  11c1		       b1 93		      lda	(ScrLoadPtr1),y
    138  11c3		       48		      pha
    139  11c4		       b1 91		      lda	(ScrLoadPtr0),y
    140  11c6		       48		      pha
    141  11c7		       b1 8f		      lda	(LvlLoadPtr),y
    142  11c9		       48		      pha
    143  11ca		       88		      dey
    144  11cb		       10 e8		      bpl	.LoadScoreboard
    145  11cd
    146  11cd		       a5 80		      lda	Frame
    147  11cf		       4a		      lsr
    148  11d0		       4a		      lsr
    149  11d1		       4a		      lsr
    150  11d2		       85 b9		      sta	Progress
    151  11d4
    152  11d4		       85 2b		      sta	HMCLR
    153  11d6		       a6 b2		      ldx	FoodPosX
    154  11d8		       ca		      dex
    155  11d9		       10 02		      bpl	.NoReset0
    156  11db		       a2 58		      ldx	#88
    157  11dd				   .NoReset0
    158  11dd		       86 b2		      stx	FoodPosX+0
    159  11df
    160  11df		       8a		      txa
    161  11e0		       38		      sec
    162  11e1		       e9 12		      sbc	#18
    163  11e3		       b0 02		      bcs	.NoReset1
    164  11e5		       69 59		      adc	#89
    165  11e7				   .NoReset1
    166  11e7		       85 b3		      sta	FoodPosX+1
    167  11e9
    168  11e9		       e9 34		      sbc	#52
    169  11eb		       b0 02		      bcs	.NoReset2
    170  11ed		       69 59		      adc	#89
    171  11ef				   .NoReset2
    172  11ef		       85 b4		      sta	FoodPosX+2
    173  11f1
    174  11f1		       e9 1b		      sbc	#27
    175  11f3		       b0 02		      bcs	.NoReset3
    176  11f5		       69 59		      adc	#89
    177  11f7				   .NoReset3
    178  11f7		       85 b5		      sta	FoodPosX+3
    179  11f9
    180  11f9		       e9 3f		      sbc	#63
    181  11fb		       b0 02		      bcs	.NoReset4
    182  11fd		       69 59		      adc	#89
    183  11ff				   .NoReset4
    184  11ff		       85 b6		      sta	FoodPosX+4
    185  1201
    186  1201		       e9 29		      sbc	#41
    187  1203		       b0 02		      bcs	.NoReset5
    188  1205		       69 59		      adc	#89
    189  1207				   .NoReset5
    190  1207		       85 b7		      sta	FoodPosX+5
    191  1209
    192  1209		       e9 11		      sbc	#17
    193  120b		       b0 02		      bcs	.NoReset6
    194  120d		       69 59		      adc	#89
    195  120f				   .NoReset6
    196  120f		       85 b8		      sta	FoodPosX+6
    197  1211
    198  1211
    199  1211							; Calculate Hmove offsets for 2nd cat row's food items
    200  1211		       a9 05		      lda	#5
    201  1213		       38		      sec
    202  1214		       e5 a3		      sbc	PreCatRows
    203  1216		       a8		      tay
    204  1217
    205  1217		       b9 a4 00 	      lda	FoodItemL,y
    206  121a		       29 f0		      and	#$F0
    207  121c		       85 be		      sta	CatRow2FoodL
    208  121e		       aa		      tax
    209  121f		       bd 0f 1d 	      lda	FoodGfx+15,x
    210  1222		       85 c0		      sta	CatRow2Color1
    211  1224
    212  1224		       b9 ab 00 	      lda	FoodItemR,y
    213  1227		       29 f0		      and	#$F0
    214  1229		       85 bf		      sta	CatRow2FoodR
    215  122b		       aa		      tax
    216  122c		       bd 0f 1d 	      lda	FoodGfx+15,x
    217  122f		       85 c1		      sta	CatRow2Color2
    218  1231
    219  1231		       b9 b2 00 	      lda	FoodPosX,y
    220  1234		       e9 2c		      sbc	#44
    221  1236		       f0 04		      beq	.Prepare
    222  1238		       90 02		      bcc	.Prepare
    223  123a		       e9 2d		      sbc	#45
    224  123c				   .Prepare
    225  123c		       38		      sec
    226  123d		       e9 01		      sbc	#1
    227  123f		       a2 70		      ldx	#$70
    228  1241		       a0 02		      ldy	#2
    229  1243				   .OffsetLoop
    230  1243		       18		      clc
    231  1244		       69 0f		      adc	#15
    232  1246		       f0 02		      beq	.CalcOffset
    233  1248		       30 0d		      bmi	.MaxOffset
    234  124a				   .CalcOffset
    235  124a		       49 07		      eor	#7
    236  124c		       0a		      asl
    237  124d		       0a		      asl
    238  124e		       0a		      asl
    239  124f		       0a		      asl
    240  1250		       99 bb 00 	      sta	CatRowHmove,y
    241  1253		       a9 00		      lda	#0
    242  1255		       f0 02		      beq	.NextOffset
    243  1257				   .MaxOffset
    244  1257		       96 bb		      stx	CatRowHmove,y
    245  1259				   .NextOffset
    246  1259		       88		      dey
    247  125a		       10 e7		      bpl	.OffsetLoop
    248  125c
    249  125c
    250  125c					      SUBROUTINE
    251  125c
    252  125c		       a9 0a		      lda	#10
    253  125e		       85 88		      sta	Level
    254  1260
    255  1260		       a5 88		      lda	Level
    256  1262		       c9 10		      cmp	#$10
    257  1264		       30 02		      bmi	.Less10
    258  1266		       e9 06		      sbc	#6
    259  1268				   .Less10
    260  1268		       0a		      asl
    261  1269		       aa		      tax
    262  126a		       bd 62 1e 	      lda	LevelColors,x
    263  126d		       85 9d		      sta	ScoreColor
    264  126f		       85 06		      sta	COLUP0
    265  1271		       85 07		      sta	COLUP1
    266  1273		       85 08		      sta	COLUPF
    267  1275		       85 09		      sta	COLUBK
    268  1277
    269  1277
    270  1277							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1277							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1277							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    273  1277
    274  1277		       a9 1d		      lda	#>FoodGfx
    275  1279		       85 90		      sta	FoodGfxPtr1+1
    276  127b		       85 92		      sta	FoodGfxPtr2+1
    277  127d
    278  127d		       a9 1e		      lda	#>CatTartGfx
    279  127f		       85 94		      sta	TartGfxPtr1+1
    280  1281		       85 98		      sta	TartGfxPtr2+1
    281  1283
    282  1283		       a9 1e		      lda	#>CatFaceGfx
    283  1285		       85 96		      sta	CatGfxPtr1+1
    284  1287		       85 9a		      sta	CatGfxPtr2+1
    285  1289
    286  1289		       a5 a0		      lda	CatPosition
    287  128b		       29 1f		      and	#%00011111
    288  128d		       aa		      tax
    289  128e		       18		      clc
    290  128f		       69 06		      adc	#<CatTartGfx
    291  1291		       85 97		      sta	TartGfxPtr2
    292  1293		       69 13		      adc	#19
    293  1295		       85 93		      sta	TartGfxPtr1
    294  1297
    295  1297		       8a		      txa
    296  1298		       69 28		      adc	#<CatFaceGfx
    297  129a		       85 99		      sta	CatGfxPtr2
    298  129c		       69 13		      adc	#19
    299  129e		       85 95		      sta	CatGfxPtr1
    300  12a0
    301  12a0		       a9 56		      lda	#$56
    302  12a2		       85 9e		      sta	PgBarColor
    303  12a4		       a9 5f		      lda	#COL_CAT_TART
    304  12a6		       85 8b		      sta	CatTartColor
    305  12a8
    306  12a8
    307  12a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  12a8							; Prepare for Main Gameplay Kernel
    309  12a8							;
    310  12a8							; Figure out how many rows to draw before and after the two cat rows
    311  12a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  12a8
    313  12a8
    314  12a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    315  12a8							; Finish Vertical Blanking
    316  12a8							;
    317  12a8							; Loop until the end of vertical blanking
    318  12a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    319  12a8
      0  12a8					      NEXT_PAGE
      1  12a8					      SUBROUTINE
      2  12a8
      3  12a8		       4c 00 13 	      jmp	.NextPage
      4  1300		       00 00 00 00*	      ALIGN	$100
      5  1300				   .NextPage
      6  1300
      0  1300					      TIMER_LOOP
      1  1300					      SUBROUTINE
      2  1300
      3  1300				   .TimerLoop
      4  1300		       ad 84 02 	      lda	INTIM
      5  1303		       d0 fb		      bne	.TimerLoop
      6  1305
------- FILE bank2.asm
------- FILE bank2/code/kernel.asm LEVEL 3 PASS 2
      0  1305					      include	bank2/code/kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       85 02		      sta	WSYNC
      0  1307					      SLEEP	3
      1  1307				   .CYCLES    SET	3
      2  1307
      3  1307				  -	      IF	.CYCLES < 2
      4  1307				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1307				  -	      ERR
      6  1307					      ENDIF
      7  1307
      8  1307					      IF	.CYCLES & 1
      9  1307					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1307		       04 00		      nop	0
     11  1309				  -	      ELSE
     12  1309				  -	      bit	VSYNC
     13  1309					      ENDIF
     14  1309				   .CYCLES    SET	.CYCLES - 3
     15  1309					      ENDIF
     16  1309
     17  1309				  -	      REPEAT	.CYCLES / 2
     18  1309				  -	      nop
     19  1309					      REPEND
      7  1309
      8  1309							; Include kernel routines
------- FILE bank2/code/kernel_score.asm LEVEL 4 PASS 2
      0  1309					      include	bank2/code/kernel_score.asm
      1  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1309							; Scoreboard Display
      3  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1309							; Draw the 6-digit score and level counter
      5  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1309
      7  1309					      SUBROUTINE
      8  1309
      9  1309		       a9 13		      lda	#$13
     10  130b		       85 04		      sta	NUSIZ0
     11  130d		       a9 20		      lda	#%00100000
     12  130f		       85 0d		      sta	PF0
     13  1311		       a9 35		      lda	#%00110101
     14  1313		       85 0a		      sta	CTRLPF
     15  1315
     16  1315		       a5 88		      lda	Level
     17  1317		       c9 10		      cmp	#$10
     18  1319		       2a		      rol
     19  131a		       0a		      asl
     20  131b		       85 1d		      sta	ENAM0
     21  131d		       85 1e		      sta	ENAM1
     22  131f
     23  131f		       a9 00		      lda	#0
     24  1321		       85 06		      sta	COLUP0
     25  1323		       85 07		      sta	COLUP1
     26  1325		       85 1b		      sta	GRP0
     27  1327
     28  1327		       a9 ff		      lda	#$FF
     29  1329		       85 1f		      sta	ENABL
     30  132b		       85 25		      sta	VDELP0
     31  132d		       85 26		      sta	VDELP1
     32  132f
     33  132f		       a9 08		      lda	#8
     34  1331		       8d 96 02 	      sta	TIM64T
     35  1334		       a0 05		      ldy	#5
     36  1336
     37  1336		       85 02		      sta	WSYNC
     38  1338
     39  1338				   ScoreboardLoop
     40  1338		       b9 50 1b 	      lda	LevelGfx,y	; 04
     41  133b		       8d 05 00 	      sta.w	NUSIZ1	; 08
     42  133e
     43  133e		       68		      pla		; 12
     44  133f		       85 1c		      sta	GRP1	; 15
     45  1341		       68		      pla		; 19
     46  1342		       85 1b		      sta	GRP0	; 22
     47  1344
     48  1344		       68		      pla		; 26
     49  1345		       85 1c		      sta	GRP1	; 29
     50  1347		       68		      pla		; 33
     51  1348		       85 1b		      sta	GRP0	; 36
     52  134a
     53  134a		       a9 03		      lda	#3	; 38
     54  134c		       85 05		      sta	NUSIZ1	; 41
     55  134e
     56  134e		       68		      pla		; 45
     57  134f		       aa		      tax		; 47
     58  1350		       68		      pla		; 51
     59  1351		       a8		      tay		; 53
     60  1352		       68		      pla		; 57
     61  1353
     62  1353		       86 1c		      stx	GRP1	; 60
     63  1355		       84 1b		      sty	GRP0	; 63
     64  1357		       85 1c		      sta	GRP1	; 66
     65  1359		       85 1b		      sta	GRP0	; 69
     66  135b
     67  135b		       ac 84 02 	      ldy	INTIM	; 73
     68  135e		       10 d8		      bpl	ScoreboardLoop	; 00/75
     69  1360
     70  1360		       a9 00		      lda	#0	; 01
     71  1362		       85 1b		      sta	GRP0	; 04
     72  1364		       85 1c		      sta	GRP1	; 07
     73  1366		       85 26		      sta	VDELP1	; 10
     74  1368		       85 25		      sta	VDELP0	; 13
     75  136a		       85 1f		      sta	ENABL	; 16
     76  136c		       85 1d		      sta	ENAM0	; 19
     77  136e		       85 1e		      sta	ENAM1	; 22
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_gameplay.asm LEVEL 4 PASS 2
      0  1370					      include	bank2/code/kernel_gameplay.asm
      1  1370							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1370							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1370							; CPU is at cycle 33
      4  1370							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  1370
      6  1370							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1370		       a2 ff		      ldx	#$FF
      8  1372		       9a		      txs
      9  1373
     10  1373		       a0 11		      ldy	#17
     11  1375				   .ClearRainbow
     12  1375		       48		      pha
     13  1376		       48		      pha
     14  1377		       88		      dey
     15  1378		       d0 fb		      bne	.ClearRainbow
     16  137a
     17  137a							; Load rainbow colors into RAM - 65 cycles
     18  137a		       a9 14		      lda	#20
     19  137c		       e5 a0		      sbc	CatPosition	; carry is assumed to be set
     20  137e		       29 1f		      and	#%00011111
     21  1380		       18		      clc
     22  1381		       69 eb		      adc	#RamBowColors+13
     23  1383		       aa		      tax
     24  1384		       9a		      txs
     25  1385
     26  1385		       a0 05		      ldy	#5
     27  1387				   .LoadRainbow
     28  1387		       b9 00 1e 	      lda	RainbowColors,y
     29  138a		       48		      pha
     30  138b		       48		      pha
     31  138c		       88		      dey
     32  138d		       10 f8		      bpl	.LoadRainbow
     33  138f
     34  138f		       a9 00		      lda	#ONE_COPY
     35  1391		       85 04		      sta	NUSIZ0
     36  1393		       a9 04		      lda	#TWO_WIDE
     37  1395		       85 05		      sta	NUSIZ1
     38  1397		       a9 06		      lda	#6
     39  1399		       85 c8		      sta	CurrentRow
     40  139b		       85 02		      sta	WSYNC
     41  139d
     42  139d		       a5 9d		      lda	ScoreColor
     43  139f		       85 09		      sta	COLUBK
     44  13a1		       a2 dd		      ldx	#GAMEPLAY_STACK
     45  13a3		       9a		      txs
     46  13a4		       20 5c 14 	      jsr	SetFoodPosition
     47  13a7		       85 02		      sta	WSYNC
     48  13a9
      0  13a9					      NEXT_PAGE
      1  13a9					      SUBROUTINE
      2  13a9
      3  13a9		       4c 00 14 	      jmp	.NextPage
      4  1400		       00 00 00 00*	      ALIGN	$100
      5  1400				   .NextPage
      6  1400
     50  1400
     51  1400				   PreKernel
     52  1400		       85 02		      sta	WSYNC
     53  1402
     54  1402		       a5 f1		      lda	RamBowColors+19
     55  1404		       d0 02		      bne	.SetCatThrobPF
     56  1406		       a5 c2		      lda	ThrobColor+0
     57  1408				   .SetCatThrobPF
     58  1408		       85 c5		      sta	CatThrobPF
     59  140a
     60  140a		       a5 80		      lda	Frame
     61  140c		       29 08		      and	#%00001000
     62  140e		       4a		      lsr
     63  140f		       4a		      lsr
     64  1410		       4a		      lsr
     65  1411		       a8		      tay
     66  1412		       b9 1e 1c 	      lda	RainbowGfx,y
     67  1415		       85 0d		      sta	PF0
     68  1417
     69  1417		       85 02		      sta	WSYNC
     70  1419
      0  1419					      SLEEP	8	; 08
      1  1419				   .CYCLES    SET	8
      2  1419
      3  1419				  -	      IF	.CYCLES < 2
      4  1419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1419				  -	      ERR
      6  1419					      ENDIF
      7  1419
      8  1419				  -	      IF	.CYCLES & 1
      9  1419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1419				  -	      nop	0
     11  1419				  -	      ELSE
     12  1419				  -	      bit	VSYNC
     13  1419				  -	      ENDIF
     14  1419				  -.CYCLES    SET	.CYCLES - 3
     15  1419					      ENDIF
     16  1419
     17  1419					      REPEAT	.CYCLES / 2
     18  1419		       ea		      nop
     17  1419					      REPEND
     18  141a		       ea		      nop
     17  141a					      REPEND
     18  141b		       ea		      nop
     17  141b					      REPEND
     18  141c		       ea		      nop
     19  141d					      REPEND
     72  141d		       a9 90		      lda	#$90	; 10
     73  141f		       85 20		      sta	HMP0	; 13
     74  1421		       a9 01		      lda	#PF_REFLECT	; 15
     75  1423		       85 0a		      sta	CTRLPF	; 18
     76  1425		       a9 08		      lda	#COL_CAT_FACE	; 20
     77  1427		       85 06		      sta	COLUP0	; 23
     78  1429
     79  1429		       a5 aa		      lda	FoodItemL+6	; 26
     80  142b		       85 10		      sta	RESP0	; 29
     81  142d		       29 f0		      and	#$F0	; 31
     82  142f		       85 8f		      sta	FoodGfxPtr1	; 34
     83  1431		       aa		      tax		; 36
     84  1432		       bd 0f 1d 	      lda	FoodGfx+15,x	; 40
     85  1435		       85 c9		      sta	FoodColor1	; 43
     86  1437
     87  1437		       a5 b1		      lda	FoodItemR+6	; 46
     88  1439		       29 f0		      and	#$F0	; 48
     89  143b		       85 91		      sta	FoodGfxPtr2	; 51
     90  143d		       aa		      tax		; 53
     91  143e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 57
     92  1441		       85 ca		      sta	FoodColor2	; 60
     93  1443
     94  1443		       a5 b8		      lda	FoodPosX+6	; 63
     95  1445		       85 c6		      sta	Temp	; 66
      0  1447					      SLEEP	4	; 70
      1  1447				   .CYCLES    SET	4
      2  1447
      3  1447				  -	      IF	.CYCLES < 2
      4  1447				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1447				  -	      ERR
      6  1447					      ENDIF
      7  1447
      8  1447				  -	      IF	.CYCLES & 1
      9  1447				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1447				  -	      nop	0
     11  1447				  -	      ELSE
     12  1447				  -	      bit	VSYNC
     13  1447				  -	      ENDIF
     14  1447				  -.CYCLES    SET	.CYCLES - 3
     15  1447					      ENDIF
     16  1447
     17  1447					      REPEAT	.CYCLES / 2
     18  1447		       ea		      nop
     17  1447					      REPEND
     18  1448		       ea		      nop
     19  1449					      REPEND
     97  1449		       85 2a		      sta	HMOVE	; 73
     98  144b
     99  144b		       a5 c3		      lda	ThrobColor+1	; 03
    100  144d		       85 09		      sta	COLUBK	; 06
    101  144f		       85 08		      sta	COLUPF	; 09
    102  1451		       a9 80		      lda	#$80	; 11
    103  1453		       85 20		      sta	HMP0	; 14
    104  1455
    105  1455		       a5 a3		      lda	PreCatRows
    106  1457		       d0 22		      bne	HiRows
    107  1459		       4c e0 14 	      jmp	CatRows
    108  145c
    109  145c							; If any part of the cat needs to be drawn in the top row,
    110  145c							; skip straight to CatRows.
    111  145c
------- FILE bank2/code/kernel_hi_rows.asm LEVEL 5 PASS 2
      0  145c					      include	bank2/code/kernel_hi_rows.asm
      1  145c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  145c							; Draw all the rows above the cat's two rows
      3  145c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  145c
------- FILE bank2/subroutines/set_food_pos.asm LEVEL 6 PASS 2
      0  145c					      include	bank2/subroutines/set_food_pos.asm
      1  145c				   SetFoodPosition
      2  145c
      3  145c		       85 02		      sta	WSYNC	; 00
      4  145e
      5  145e		       85 09		      sta	COLUBK	; 03
      6  1460		       85 08		      sta	COLUPF	; 06
      7  1462
      0  1462					      SLEEP	4	; 10
      1  1462				   .CYCLES    SET	4
      2  1462
      3  1462				  -	      IF	.CYCLES < 2
      4  1462				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1462				  -	      ERR
      6  1462					      ENDIF
      7  1462
      8  1462				  -	      IF	.CYCLES & 1
      9  1462				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1462				  -	      nop	0
     11  1462				  -	      ELSE
     12  1462				  -	      bit	VSYNC
     13  1462				  -	      ENDIF
     14  1462				  -.CYCLES    SET	.CYCLES - 3
     15  1462					      ENDIF
     16  1462
     17  1462					      REPEAT	.CYCLES / 2
     18  1462		       ea		      nop
     17  1462					      REPEND
     18  1463		       ea		      nop
     19  1464					      REPEND
      9  1464
     10  1464		       a4 c8		      ldy	CurrentRow	; 13
     11  1466		       b9 b2 00 	      lda	FoodPosX,y	; 17
     12  1469
     13  1469		       38		      sec		; 19
     14  146a				   .DivideLoop
     15  146a		       e9 0f		      sbc	#15	; 21
     16  146c		       b0 fc		      bcs	.DivideLoop	; 23
     17  146e
     18  146e		       85 11		      sta	RESP1	; 26
     19  1470
     20  1470		       49 07		      eor	#7
     21  1472		       69 01		      adc	#1
     22  1474		       0a		      asl
     23  1475		       0a		      asl
     24  1476		       0a		      asl
     25  1477		       0a		      asl
     26  1478		       85 21		      sta	HMP1	; 41/66
     27  147a
     28  147a		       60		      rts		; 47/72
------- FILE bank2/code/kernel_hi_rows.asm
      6  147b
      7  147b				   HiRows
      8  147b					      SUBROUTINE
      9  147b
     10  147b		       85 02		      sta	WSYNC
     11  147d		       a5 c2		      lda	ThrobColor+0
     12  147f		       85 09		      sta	COLUBK
     13  1481		       85 08		      sta	COLUPF
     14  1483
     15  1483							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1483							; This will probably be a good time to prepare the pointers for the
     17  1483							; food items' graphics, as well as loading the colors for the food items.
     18  1483
     19  1483							; After that, output 14 lines to draw a single row with food items,
     20  1483							; but without drawing the cat. The food graphics will be updated every line,
     21  1483							; but there will probably not be enough time to also update the food colors
     22  1483							; every line throughout the kernel.
     23  1483
     24  1483		       20 00 18 	      jsr	DrawFoodRow
     25  1486		       c6 c8		      dec	CurrentRow	; 73
     26  1488		       85 02		      sta	WSYNC
     27  148a
     28  148a							; Lastly, output four single-color lines to draw most of a "throb" line,
     29  148a							; while setting the position of player 1 to draw the next set of food items.
     30  148a
     31  148a		       a5 c2		      lda	ThrobColor+0
     32  148c		       85 09		      sta	COLUBK
     33  148e		       85 08		      sta	COLUPF
     34  1490		       a9 00		      lda	#0
     35  1492		       85 1b		      sta	GRP0
     36  1494		       85 1c		      sta	GRP1
     37  1496		       a5 c3		      lda	ThrobColor+1
     38  1498		       20 5c 14 	      jsr	SetFoodPosition
     39  149b		       85 02		      sta	WSYNC
     40  149d
     41  149d		       a5 c4		      lda	ThrobColor+2	; 03
     42  149f		       85 09		      sta	COLUBK	; 06
     43  14a1		       85 08		      sta	COLUPF	; 09
     44  14a3		       20 24 18 	      jsr	Sleep12
     45  14a6		       20 24 18 	      jsr	Sleep12
     46  14a9		       20 24 18 	      jsr	Sleep12
     47  14ac		       20 24 18 	      jsr	Sleep12
     48  14af		       20 24 18 	      jsr	Sleep12	; 69
     49  14b2		       8d 2a 00 	      sta.w	HMOVE	; 73
     50  14b5		       85 02		      sta	WSYNC
     51  14b7
     52  14b7		       a5 c3		      lda	ThrobColor+1	; 03
     53  14b9		       85 09		      sta	COLUBK	; 06
     54  14bb		       85 08		      sta	COLUPF	; 09
     55  14bd
     56  14bd		       b9 a4 00 	      lda	FoodItemL,y	; 13
     57  14c0		       29 f0		      and	#$F0	; 15
     58  14c2		       85 8f		      sta	FoodGfxPtr1	; 18
     59  14c4		       aa		      tax		; 20
     60  14c5		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     61  14c8		       85 c9		      sta	FoodColor1	; 27
     62  14ca
     63  14ca		       b9 ab 00 	      lda	FoodItemR,y	; 31
     64  14cd		       29 f0		      and	#$F0	; 33
     65  14cf		       85 91		      sta	FoodGfxPtr2	; 36
     66  14d1		       aa		      tax		; 38
     67  14d2		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     68  14d5		       85 ca		      sta	FoodColor2	; 45
     69  14d7
     70  14d7		       b9 b2 00 	      lda	FoodPosX,y	; 49
     71  14da		       85 c6		      sta	Temp	; 52
     72  14dc		       c6 a3		      dec	PreCatRows
     73  14de		       d0 9b		      bne	HiRows
     74  14e0
     75  14e0							; If this is not the last row before drawing the cat's rows,
     76  14e0							; loop back to HiRows to draw the next row.
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_cat_rows.asm LEVEL 5 PASS 2
      0  14e0					      include	bank2/code/kernel_cat_rows.asm
      1  14e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14e0							; Cat Row Kernel
      3  14e0							;
      4  14e0							; This is the kernel that is used to draw the two rows containing the cat.
      5  14e0							; It also draw the throbbing line between the cat's rows.
      6  14e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  14e0
      8  14e0				   CatRows
      9  14e0					      SUBROUTINE
     10  14e0
     11  14e0		       85 02		      sta	WSYNC
     12  14e2
     13  14e2							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     14  14e2		       a6 c2		      ldx	ThrobColor+0	; 03
     15  14e4		       86 09		      stx	COLUBK	; 06
     16  14e6		       86 08		      stx	COLUPF	; 09
     17  14e8		       a0 0d		      ldy	#13	; 11
     18  14ea		       b1 93		      lda	(TartGfxPtr1),y	; 16
     19  14ec		       85 0e		      sta	PF1	; 19
      0  14ee					      SLEEP	3	; 22
      1  14ee				   .CYCLES    SET	3
      2  14ee
      3  14ee				  -	      IF	.CYCLES < 2
      4  14ee				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14ee				  -	      ERR
      6  14ee					      ENDIF
      7  14ee
      8  14ee					      IF	.CYCLES & 1
      9  14ee					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14ee		       04 00		      nop	0
     11  14f0				  -	      ELSE
     12  14f0				  -	      bit	VSYNC
     13  14f0					      ENDIF
     14  14f0				   .CYCLES    SET	.CYCLES - 3
     15  14f0					      ENDIF
     16  14f0
     17  14f0				  -	      REPEAT	.CYCLES / 2
     18  14f0				  -	      nop
     19  14f0					      REPEND
     21  14f0		       a5 8b		      lda	CatTartColor	; 25
     22  14f2		       85 08		      sta	COLUPF	; 28
      0  14f4					      SLEEP	2	; 30
      1  14f4				   .CYCLES    SET	2
      2  14f4
      3  14f4				  -	      IF	.CYCLES < 2
      4  14f4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14f4				  -	      ERR
      6  14f4					      ENDIF
      7  14f4
      8  14f4				  -	      IF	.CYCLES & 1
      9  14f4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  14f4				  -	      nop	0
     11  14f4				  -	      ELSE
     12  14f4				  -	      bit	VSYNC
     13  14f4				  -	      ENDIF
     14  14f4				  -.CYCLES    SET	.CYCLES - 3
     15  14f4					      ENDIF
     16  14f4
     17  14f4					      REPEAT	.CYCLES / 2
     18  14f4		       ea		      nop
     19  14f5					      REPEND
     24  14f5		       86 08		      stx	COLUPF	; 33
     25  14f7
     26  14f7					      SUBROUTINE
     27  14f7
     28  14f7		       a6 c8		      ldx	CurrentRow	; 36
     29  14f9		       b5 b2		      lda	FoodPosX,x	; 40
     30  14fb
      0  14fb					      NEXT_PAGE
      1  14fb					      SUBROUTINE
      2  14fb
      3  14fb		       4c 00 15 	      jmp	.NextPage
      4  1500		       00 00		      ALIGN	$100
      5  1500				   .NextPage
      6  1500
     32  1500
      0  1500					      SLEEP	5	; 48
      1  1500				   .CYCLES    SET	5
      2  1500
      3  1500				  -	      IF	.CYCLES < 2
      4  1500				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1500				  -	      ERR
      6  1500					      ENDIF
      7  1500
      8  1500					      IF	.CYCLES & 1
      9  1500					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1500		       04 00		      nop	0
     11  1502				  -	      ELSE
     12  1502				  -	      bit	VSYNC
     13  1502					      ENDIF
     14  1502				   .CYCLES    SET	.CYCLES - 3
     15  1502					      ENDIF
     16  1502
     17  1502					      REPEAT	.CYCLES / 2
     18  1502		       ea		      nop
     19  1503					      REPEND
     34  1503		       a6 ca		      ldx	FoodColor2	; 51
     35  1505		       9a		      txs		; 53
     36  1506		       c9 30		      cmp	#48	; 55
     37  1508		       a2 00		      ldx	#0	; 57
     38  150a
     39  150a							; Then output the 14 lines to draw a single row. This will include drawing
     40  150a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  150a							; All graphics will be updated every line.
     42  150a
     43  150a		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  150c		       90 42		      bcc	.LeftEntrance	; 62
     45  150e
     46  150e							; 14 bytes into the page
     47  150e
     48  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  150e							; Kernel used when food items are closer to the right edge of the screen
     50  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  150e
     52  150e				   .RightLoop
     53  150e							; 8 cycles
     54  150e		       b1 95		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     55  1510		       85 1b		      sta	GRP0	; 52
     56  1512
     57  1512							; 9 cycles
     58  1512		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     59  1514		       ba		      tsx		; 57 - load 2nd food item's color
     60  1515		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     61  1517
     62  1517				   .RightEntrance		; enter loop here
     63  1517							; 2 cycles
     64  1517		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     65  1519
     66  1519							; 8 cycles
     67  1519		       b1 93		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     68  151b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     69  151d
     70  151d							; 8 cycles
     71  151d		       b1 8f		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     72  151f		       85 1c		      sta	GRP1	; 02
     73  1521
     74  1521							; 7 cycles
     75  1521		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     76  1524		       85 09		      sta	COLUBK	; 09
     77  1526
     78  1526							; 7 cycles
     79  1526		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     80  1529		       85 08		      sta	COLUPF	; 16
     81  152b
     82  152b							; 6 cycles
     83  152b		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
     84  152d		       85 07		      sta	COLUP1	; 22
     85  152f
     86  152f							; 8 cycles
     87  152f		       a5 8b		      lda	CatTartColor	; 25
     88  1531		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     89  1533		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     90  1535		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     91  1537
     92  1537							; 5 cycles
     93  1537		       b3 91		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     94  1539
     95  1539							; 2 cycles
     96  1539		       88		      dey		; 41
     97  153a		       10 d2		      bpl	.RightLoop	; 44/43
     98  153c
     99  153c		       a0 12		      ldy	#18	; 45
    100  153e		       b1 97		      lda	(TartGfxPtr2),y	; 50
      0  1540					      SLEEP	2	; 52
      1  1540				   .CYCLES    SET	2
      2  1540
      3  1540				  -	      IF	.CYCLES < 2
      4  1540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1540				  -	      ERR
      6  1540					      ENDIF
      7  1540
      8  1540				  -	      IF	.CYCLES & 1
      9  1540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1540				  -	      nop	0
     11  1540				  -	      ELSE
     12  1540				  -	      bit	VSYNC
     13  1540				  -	      ENDIF
     14  1540				  -.CYCLES    SET	.CYCLES - 3
     15  1540					      ENDIF
     16  1540
     17  1540					      REPEAT	.CYCLES / 2
     18  1540		       ea		      nop
     19  1541					      REPEND
    102  1541		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    103  1543		       ba		      tsx		; 57 - load 2nd food item's color
    104  1544		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    105  1546		       b0 38		      bcs	.End	; 63
    106  1548
    107  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108  1548							; Kernel used when food items are closer to the left edge of the screen
    109  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    110  1548
    111  1548				   .LeftLoop
    112  1548							; 8 cycles
    113  1548		       b1 95		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    114  154a		       85 1b		      sta	GRP0	; 57
    115  154c
    116  154c							; 5 cycles
    117  154c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    118  154e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    119  1550
    120  1550				   .LeftEntrance		; enter loop here
    121  1550							; 8 cycles
    122  1550		       b1 93		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    123  1552		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    124  1554
    125  1554							; 8 cycles
    126  1554		       b1 8f		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    127  1556		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    128  1558
    129  1558							; 7 cycles
    130  1558		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    131  155b		       85 09		      sta	COLUBK	; 09
    132  155d
    133  155d							; 7 cycles
    134  155d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    135  1560		       85 08		      sta	COLUPF	; 16
    136  1562
    137  1562							; 6 cycles
    138  1562		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    139  1564		       85 07		      sta	COLUP1	; 22
    140  1566
    141  1566							; 8 cycles
    142  1566		       a5 8b		      lda	CatTartColor	; 25
    143  1568		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    144  156a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    145  156c
    146  156c							; 13 cycles
    147  156c		       b1 91		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    148  156e		       ba		      tsx		; 38 - load 2nd food item's color
    149  156f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    150  1571		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    151  1573
    152  1573							; 5 cycles
    153  1573		       88		      dey		; 46
    154  1574		       10 d2		      bpl	.LeftLoop	; 49/48
    155  1576
    156  1576		       a2 00		      ldx	#0	; 50
    157  1578		       86 08		      stx	COLUPF	; 53
    158  157a
    159  157a		       a0 12		      ldy	#18	; 55
    160  157c		       b1 97		      lda	(TartGfxPtr2),y	; 60
    161  157e
    162  157e		       86 1c		      stx	GRP1	; 63
    163  1580
    164  1580				   .End
    165  1580
    166  1580
    167  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1580							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    169  1580							; cat with the rainbow. In order to align player 1 for the next row's
    170  1580							; food items, it will be neccesary to have three versions of this kernel,
    171  1580							; one for each of the three 60-color-clock spaced positions to reset.
    172  1580							; HMOVE will be written to on the first four scanlines. With a maximum
    173  1580							; movement of 15 color-clocks per scanline, this will allow a movement of
    174  1580							; up to 60 color clocks. With three versions of the kernel, it should be
    175  1580							; possible to put player 1 anywhere on the screen.
    176  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    177  1580
    178  1580							; Draw throb line #1
    179  1580		       85 0e		      sta	PF1	; 66
    180  1582		       b1 99		      lda	(CatGfxPtr2),y	; 71
    181  1584		       85 1b		      sta	GRP0	; 74
    182  1586		       a6 c2		      ldx	ThrobColor+0	; 01
    183  1588
      0  1588					      THROB_RAINBOW_BK	18	; 12
      1  1588					      SUBROUTINE
      2  1588				   .X	      SET	18
      3  1588
      4  1588		       a5 f0		      lda	RamBowColors+.X
      5  158a		       d0 04		      bne	.Rainbow
      6  158c		       86 09		      stx	COLUBK
      7  158e		       f0 03		      beq	.End
      8  1590				   .Rainbow
      9  1590		       85 09		      sta	COLUBK
     10  1592		       ea		      nop
     11  1593				   .End
    185  1593
    186  1593		       a5 c5		      lda	CatThrobPF	; 15
    187  1595		       85 08		      sta	COLUPF	; 18
    188  1597		       8e 07 00 	      stx.w	COLUP1	; 22
    189  159a		       a5 8b		      lda	CatTartColor	; 25
    190  159c		       85 08		      sta	COLUPF	; 28
    191  159e		       86 09		      stx	COLUBK	; 31
    192  15a0		       88		      dey		; 33
    193  15a1		       85 11		      sta	RESP1	; 36
    194  15a3		       86 08		      stx	COLUPF	; 39
    195  15a5		       b1 99		      lda	(CatGfxPtr2),y	; 44
    196  15a7		       85 1b		      sta	GRP0	; 47
    197  15a9		       b1 97		      lda	(TartGfxPtr2),y	; 52
    198  15ab		       85 0e		      sta	PF1	; 55
    199  15ad		       c6 c8		      dec	CurrentRow	; 60
    200  15af		       a2 00		      ldx	#0	; 62
    201  15b1		       86 1c		      stx	GRP1	; 65
    202  15b3
    203  15b3							; Draw throb line #2
    204  15b3		       a5 bd		      lda	CatRowHmove+2	; 68
    205  15b5		       85 21		      sta	HMP1	; 71
      0  15b7					      SLEEP	2	; 73
      1  15b7				   .CYCLES    SET	2
      2  15b7
      3  15b7				  -	      IF	.CYCLES < 2
      4  15b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b7				  -	      ERR
      6  15b7					      ENDIF
      7  15b7
      8  15b7				  -	      IF	.CYCLES & 1
      9  15b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b7				  -	      nop	0
     11  15b7				  -	      ELSE
     12  15b7				  -	      bit	VSYNC
     13  15b7				  -	      ENDIF
     14  15b7				  -.CYCLES    SET	.CYCLES - 3
     15  15b7					      ENDIF
     16  15b7
     17  15b7					      REPEAT	.CYCLES / 2
     18  15b7		       ea		      nop
     19  15b8					      REPEND
    207  15b8		       a6 c3		      ldx	ThrobColor+1	; 00
      0  15ba					      THROB_RAINBOW_BK	17	; 11
      1  15ba					      SUBROUTINE
      2  15ba				   .X	      SET	17
      3  15ba
      4  15ba		       a5 ef		      lda	RamBowColors+.X
      5  15bc		       d0 04		      bne	.Rainbow
      6  15be		       86 09		      stx	COLUBK
      7  15c0		       f0 03		      beq	.End
      8  15c2				   .Rainbow
      9  15c2		       85 09		      sta	COLUBK
     10  15c4		       ea		      nop
     11  15c5				   .End
      0  15c5					      THROB_RAINBOW_PF	18	; 22
      1  15c5					      SUBROUTINE
      2  15c5				   .X	      SET	18
      3  15c5
      4  15c5		       a5 f0		      lda	RamBowColors+.X
      5  15c7		       d0 04		      bne	.Rainbow
      6  15c9		       86 08		      stx	COLUPF
      7  15cb		       f0 03		      beq	.End
      8  15cd				   .Rainbow
      9  15cd		       85 08		      sta	COLUPF
     10  15cf		       ea		      nop
     11  15d0				   .End
    210  15d0		       a5 8b		      lda	CatTartColor	; 25
    211  15d2		       85 08		      sta	COLUPF	; 28
    212  15d4		       86 09		      stx	COLUBK	; 31
    213  15d6		       86 08		      stx	COLUPF	; 34
    214  15d8		       88		      dey		; 36
    215  15d9		       a6 c8		      ldx	CurrentRow	; 39
    216  15db		       b5 b2		      lda	FoodPosX,x	; 43
    217  15dd		       c9 2d		      cmp	#45	; 45
    218  15df		       10 01		      bpl	.RightSide	; 48/47
      0  15e1					      SKIP_WORD		; 51
      1  15e1		       0c		      HEX	0C
    220  15e2				   .RightSide
    221  15e2		       85 11		      sta	RESP1	; 51
    222  15e4		       b1 99		      lda	(CatGfxPtr2),y	; 56
    223  15e6		       85 1b		      sta	GRP0	; 59
    224  15e8		       b1 97		      lda	(TartGfxPtr2),y	; 64
    225  15ea		       85 0e		      sta	PF1	; 67
      0  15ec					      SLEEP	3	; 70
      1  15ec				   .CYCLES    SET	3
      2  15ec
      3  15ec				  -	      IF	.CYCLES < 2
      4  15ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ec				  -	      ERR
      6  15ec					      ENDIF
      7  15ec
      8  15ec					      IF	.CYCLES & 1
      9  15ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ec		       04 00		      nop	0
     11  15ee				  -	      ELSE
     12  15ee				  -	      bit	VSYNC
     13  15ee					      ENDIF
     14  15ee				   .CYCLES    SET	.CYCLES - 3
     15  15ee					      ENDIF
     16  15ee
     17  15ee				  -	      REPEAT	.CYCLES / 2
     18  15ee				  -	      nop
     19  15ee					      REPEND
    227  15ee		       85 2a		      sta	HMOVE	; 73
    228  15f0
    229  15f0							; Draw throb line #3
    230  15f0		       a6 c4		      ldx	ThrobColor+2	; 00
      0  15f2					      THROB_RAINBOW_BK	16	; 11
      1  15f2					      SUBROUTINE
      2  15f2				   .X	      SET	16
      3  15f2
      4  15f2		       a5 ee		      lda	RamBowColors+.X
      5  15f4		       d0 04		      bne	.Rainbow
      6  15f6		       86 09		      stx	COLUBK
      7  15f8		       f0 03		      beq	.End
      8  15fa				   .Rainbow
      9  15fa		       85 09		      sta	COLUBK
     10  15fc		       ea		      nop
     11  15fd				   .End
      0  15fd					      THROB_RAINBOW_PF	17	; 22
      1  15fd					      SUBROUTINE
      2  15fd				   .X	      SET	17
      3  15fd
      4  15fd		       a5 ef		      lda	RamBowColors+.X
      5  15ff		       d0 04		      bne	.Rainbow
      6  1601		       86 08		      stx	COLUPF
      7  1603		       f0 03		      beq	.End
      8  1605				   .Rainbow
      9  1605		       85 08		      sta	COLUPF
     10  1607		       ea		      nop
     11  1608				   .End
    233  1608		       a5 8b		      lda	CatTartColor	; 25
    234  160a		       85 08		      sta	COLUPF	; 28
    235  160c		       86 09		      stx	COLUBK	; 31
    236  160e		       86 08		      stx	COLUPF	; 34
    237  1610		       88		      dey		; 36
    238  1611		       b1 99		      lda	(CatGfxPtr2),y	; 41
    239  1613		       85 1b		      sta	GRP0	; 44
    240  1615		       b1 97		      lda	(TartGfxPtr2),y	; 49
    241  1617		       85 0e		      sta	PF1	; 52
    242  1619		       a5 be		      lda	CatRow2FoodL	; 55
    243  161b		       85 8f		      sta	FoodGfxPtr1	; 58
    244  161d		       a5 bf		      lda	CatRow2FoodR	; 61
    245  161f		       85 91		      sta	FoodGfxPtr2	; 64
    246  1621		       a5 bc		      lda	CatRowHmove+1	; 67
    247  1623		       85 21		      sta	HMP1	; 70
    248  1625		       85 2a		      sta	HMOVE	; 73
    249  1627
    250  1627							; Draw throb line #4
    251  1627		       a6 c3		      ldx	ThrobColor+1	; 00
      0  1629					      THROB_RAINBOW_BK	15	; 11
      1  1629					      SUBROUTINE
      2  1629				   .X	      SET	15
      3  1629
      4  1629		       a5 ed		      lda	RamBowColors+.X
      5  162b		       d0 04		      bne	.Rainbow
      6  162d		       86 09		      stx	COLUBK
      7  162f		       f0 03		      beq	.End
      8  1631				   .Rainbow
      9  1631		       85 09		      sta	COLUBK
     10  1633		       ea		      nop
     11  1634				   .End
      0  1634					      THROB_RAINBOW_PF	16	; 22
      1  1634					      SUBROUTINE
      2  1634				   .X	      SET	16
      3  1634
      4  1634		       a5 ee		      lda	RamBowColors+.X
      5  1636		       d0 04		      bne	.Rainbow
      6  1638		       86 08		      stx	COLUPF
      7  163a		       f0 03		      beq	.End
      8  163c				   .Rainbow
      9  163c		       85 08		      sta	COLUPF
     10  163e		       ea		      nop
     11  163f				   .End
    254  163f		       a5 8b		      lda	CatTartColor	; 25
    255  1641		       85 08		      sta	COLUPF	; 28
    256  1643		       86 09		      stx	COLUBK	; 31
    257  1645		       86 08		      stx	COLUPF	; 34
    258  1647		       88		      dey		; 36
    259  1648		       b1 99		      lda	(CatGfxPtr2),y	; 41
    260  164a		       85 1b		      sta	GRP0	; 44
    261  164c		       b1 97		      lda	(TartGfxPtr2),y	; 49
    262  164e		       85 0e		      sta	PF1	; 52
    263  1650		       a5 c0		      lda	CatRow2Color1	; 55
    264  1652		       85 c9		      sta	FoodColor1	; 58
    265  1654		       ae c1 00 	      ldx.w	CatRow2Color2	; 55
    266  1657		       9a		      txs		; 58
    267  1658		       a5 bb		      lda	CatRowHmove+0	; 67
    268  165a		       85 21		      sta	HMP1	; 70
    269  165c		       85 2a		      sta	HMOVE	; 73
    270  165e
    271  165e							; Draw throb line #5
    272  165e					      SUBROUTINE
    273  165e
    274  165e		       a6 c2		      ldx	ThrobColor+0	; 00
      0  1660					      THROB_RAINBOW_BK	14	; 11
      1  1660					      SUBROUTINE
      2  1660				   .X	      SET	14
      3  1660
      4  1660		       a5 ec		      lda	RamBowColors+.X
      5  1662		       d0 04		      bne	.Rainbow
      6  1664		       86 09		      stx	COLUBK
      7  1666		       f0 03		      beq	.End
      8  1668				   .Rainbow
      9  1668		       85 09		      sta	COLUBK
     10  166a		       ea		      nop
     11  166b				   .End
      0  166b					      THROB_RAINBOW_PF	15	; 22
      1  166b					      SUBROUTINE
      2  166b				   .X	      SET	15
      3  166b
      4  166b		       a5 ed		      lda	RamBowColors+.X
      5  166d		       d0 04		      bne	.Rainbow
      6  166f		       86 08		      stx	COLUPF
      7  1671		       f0 03		      beq	.End
      8  1673				   .Rainbow
      9  1673		       85 08		      sta	COLUPF
     10  1675		       ea		      nop
     11  1676				   .End
    277  1676		       a5 8b		      lda	CatTartColor	; 25
    278  1678		       85 08		      sta	COLUPF	; 28
    279  167a		       86 09		      stx	COLUBK	; 31
    280  167c		       86 08		      stx	COLUPF	; 34
    281  167e		       88		      dey		; 36
    282  167f		       b1 99		      lda	(CatGfxPtr2),y	; 41
    283  1681		       85 1b		      sta	GRP0	; 44
    284  1683		       a6 c8		      ldx	CurrentRow	; 47
    285  1685		       b5 b2		      lda	FoodPosX,x	; 51
    286  1687		       c9 30		      cmp	#48	; 53
    287  1689		       a2 00		      ldx	#0	; 55
    288  168b		       ea		      nop		; 57
    289  168c
    290  168c							; Then output the 14 lines to draw a single row. This will include drawing
    291  168c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    292  168c							; All graphics will be updated every line.
    293  168c
    294  168c		       b0 0b		      bcs	.RightEntrance	; 60/59
    295  168e		       90 42		      bcc	.LeftEntrance	; 62
    296  1690
    297  1690							; 14 bytes into the page
    298  1690
    299  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    300  1690							; Kernel used when food items are closer to the right edge of the screen
    301  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  1690
    303  1690				   .RightLoop
    304  1690							; 8 cycles
    305  1690		       b1 99		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    306  1692		       85 1b		      sta	GRP0	; 52
    307  1694
    308  1694							; 9 cycles
    309  1694		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    310  1696		       ba		      tsx		; 57 - load 2nd food item's color
    311  1697		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    312  1699
    313  1699				   .RightEntrance		; enter loop here
    314  1699							; 2 cycles
    315  1699		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    316  169b
    317  169b							; 8 cycles
    318  169b		       b1 97		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    319  169d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    320  169f
    321  169f							; 8 cycles
    322  169f		       b1 8f		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    323  16a1		       85 1c		      sta	GRP1	; 02
    324  16a3
    325  16a3							; 7 cycles
    326  16a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    327  16a6		       85 09		      sta	COLUBK	; 09
    328  16a8
    329  16a8							; 7 cycles
    330  16a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    331  16ab		       85 08		      sta	COLUPF	; 16
    332  16ad
    333  16ad							; 6 cycles
    334  16ad		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    335  16af		       85 07		      sta	COLUP1	; 22
    336  16b1
    337  16b1							; 8 cycles
    338  16b1		       a5 8b		      lda	CatTartColor	; 25
    339  16b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    340  16b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    341  16b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    342  16b9
    343  16b9							; 5 cycles
    344  16b9		       b3 91		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    345  16bb
    346  16bb							; 2 cycles
    347  16bb		       88		      dey		; 41
    348  16bc		       10 d2		      bpl	.RightLoop	; 44/43
    349  16be
    350  16be		       a0 12		      ldy	#18	; 45
    351  16c0		       b1 97		      lda	(TartGfxPtr2),y	; 50
      0  16c2					      SLEEP	2	; 52
      1  16c2				   .CYCLES    SET	2
      2  16c2
      3  16c2				  -	      IF	.CYCLES < 2
      4  16c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c2				  -	      ERR
      6  16c2					      ENDIF
      7  16c2
      8  16c2				  -	      IF	.CYCLES & 1
      9  16c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c2				  -	      nop	0
     11  16c2				  -	      ELSE
     12  16c2				  -	      bit	VSYNC
     13  16c2				  -	      ENDIF
     14  16c2				  -.CYCLES    SET	.CYCLES - 3
     15  16c2					      ENDIF
     16  16c2
     17  16c2					      REPEAT	.CYCLES / 2
     18  16c2		       ea		      nop
     19  16c3					      REPEND
    353  16c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    354  16c5		       ba		      tsx		; 57 - load 2nd food item's color
    355  16c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    356  16c8		       b0 36		      bcs	.End	; 63
    357  16ca
    358  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    359  16ca							; Kernel used when food items are closer to the left edge of the screen
    360  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  16ca
    362  16ca				   .LeftLoop
    363  16ca							; 8 cycles
    364  16ca		       b1 99		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    365  16cc		       85 1b		      sta	GRP0	; 57
    366  16ce
    367  16ce							; 5 cycles
    368  16ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    369  16d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    370  16d2
    371  16d2							; enter loop here
    372  16d2				   .LeftEntrance
    373  16d2							; 8 cycles
    374  16d2		       b1 97		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    375  16d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    376  16d6
    377  16d6							; 8 cycles
    378  16d6		       b1 8f		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    379  16d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    380  16da
    381  16da							; 7 cycles
    382  16da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    383  16dd		       85 09		      sta	COLUBK	; 09
    384  16df
    385  16df							; 7 cycles
    386  16df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    387  16e2		       85 08		      sta	COLUPF	; 16
    388  16e4
    389  16e4							; 6 cycles
    390  16e4		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    391  16e6		       85 07		      sta	COLUP1	; 22
    392  16e8
    393  16e8							; 8 cycles
    394  16e8		       a5 8b		      lda	CatTartColor	; 25
    395  16ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    396  16ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    397  16ee
    398  16ee							; 13 cycles
    399  16ee		       b1 91		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    400  16f0		       ba		      tsx		; 38 - load 2nd food item's color
    401  16f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    402  16f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    403  16f5
    404  16f5							; 5 cycles
    405  16f5		       88		      dey		; 46
    406  16f6		       10 d2		      bpl	.LeftLoop	; 49/48
    407  16f8
    408  16f8		       a2 00		      ldx	#0	; 50
    409  16fa		       86 08		      stx	COLUPF	; 53
    410  16fc
    411  16fc		       a0 12		      ldy	#18	; 55
    412  16fe		       b1 97		      lda	(TartGfxPtr2),y	; 60
    413  1700				   .End
    414  1700
    415  1700		       a2 ff		      ldx	#$FF	; 65
    416  1702		       9a		      txs		; 67
    417  1703		       a2 00		      ldx	#0
    418  1705
    419  1705							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    420  1705							; Use this time to prepare the next row's food item pointers (unless this is
    421  1705							; the last row). If this is the last row, skip over LoRows.
    422  1705
    423  1705		       85 02		      sta	WSYNC
    424  1707		       a5 c2		      lda	ThrobColor+0
    425  1709		       85 09		      sta	COLUBK
    426  170b		       85 08		      sta	COLUPF
    427  170d		       86 1c		      stx	GRP1
      0  170f					      SLEEP	18
      1  170f				   .CYCLES    SET	18
      2  170f
      3  170f				  -	      IF	.CYCLES < 2
      4  170f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  170f				  -	      ERR
      6  170f					      ENDIF
      7  170f
      8  170f				  -	      IF	.CYCLES & 1
      9  170f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  170f				  -	      nop	0
     11  170f				  -	      ELSE
     12  170f				  -	      bit	VSYNC
     13  170f				  -	      ENDIF
     14  170f				  -.CYCLES    SET	.CYCLES - 3
     15  170f					      ENDIF
     16  170f
     17  170f					      REPEAT	.CYCLES / 2
     18  170f		       ea		      nop
     17  170f					      REPEND
     18  1710		       ea		      nop
     17  1710					      REPEND
     18  1711		       ea		      nop
     17  1711					      REPEND
     18  1712		       ea		      nop
     17  1712					      REPEND
     18  1713		       ea		      nop
     17  1713					      REPEND
     18  1714		       ea		      nop
     17  1714					      REPEND
     18  1715		       ea		      nop
     17  1715					      REPEND
     18  1716		       ea		      nop
     17  1716					      REPEND
     18  1717		       ea		      nop
     19  1718					      REPEND
    429  1718		       86 1b		      stx	GRP0
    430  171a		       c6 c8		      dec	CurrentRow
    431  171c		       30 03		      bmi	.GpEnd
    432  171e
    433  171e							; If the cat is at the very bottom of the screen, don't disable the
    434  171e							; missile/player graphics until after they are drawn, so they don't get
    435  171e							; clipped at the bottom of the screen. An easy way to do this would be to
    436  171e							; simply disable them after they would have been drawn, whether they are
    437  171e							; already disabled or not.
    438  171e
    439  171e		       4c 25 18 	      jmp	LoRows
    440  1721				   .GpEnd
    441  1721		       4c 8d 18 	      jmp	GameplayEnd
    442  1724
    443  1800		       00 00 00 00*	      ALIGN	$100
    444  1800
------- FILE bank2/subroutines/draw_food_row.asm LEVEL 6 PASS 2
      0  1800					      include	bank2/subroutines/draw_food_row.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 8f		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 c9		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c6		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 91		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 ca		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE bank2/code/kernel_cat_rows.asm
    446  1825
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_lo_rows.asm LEVEL 5 PASS 2
      0  1825					      include	bank2/code/kernel_lo_rows.asm
      1  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1825							; Draw all the rows below the cat's two rows.
      3  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1825
      5  1825				   LoRows
      6  1825					      SUBROUTINE
      7  1825
      8  1825							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1825							; player 1 for the next row's food items.
     10  1825
     11  1825		       a5 c3		      lda	ThrobColor+1
     12  1827		       20 5c 14 	      jsr	SetFoodPosition
     13  182a		       85 02		      sta	WSYNC
     14  182c
     15  182c		       a5 c4		      lda	ThrobColor+2	; 03
     16  182e		       85 09		      sta	COLUBK	; 06
     17  1830		       85 08		      sta	COLUPF	; 09
     18  1832		       20 24 18 	      jsr	Sleep12
     19  1835		       20 24 18 	      jsr	Sleep12
     20  1838		       20 24 18 	      jsr	Sleep12
     21  183b		       20 24 18 	      jsr	Sleep12
     22  183e		       20 24 18 	      jsr	Sleep12	; 69
     23  1841		       8d 2a 00 	      sta.w	HMOVE	; 73
     24  1844		       85 02		      sta	WSYNC
     25  1846
     26  1846		       a5 c3		      lda	ThrobColor+1
     27  1848		       85 09		      sta	COLUBK
     28  184a		       85 08		      sta	COLUPF
     29  184c		       85 02		      sta	WSYNC
     30  184e
     31  184e		       a5 c2		      lda	ThrobColor+0	; 3
     32  1850		       85 09		      sta	COLUBK	; 6
     33  1852		       85 08		      sta	COLUPF	; 9
     34  1854		       a4 c8		      ldy	CurrentRow	; 12
     35  1856
     36  1856		       b9 a4 00 	      lda	FoodItemL,y	; 16
     37  1859		       29 f0		      and	#$F0	; 18
     38  185b		       85 8f		      sta	FoodGfxPtr1	; 21
     39  185d		       aa		      tax		; 23
     40  185e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     41  1861		       85 c9		      sta	FoodColor1	; 30
     42  1863
     43  1863		       b9 ab 00 	      lda	FoodItemR,y	; 34
     44  1866		       29 f0		      and	#$F0	; 37
     45  1868		       85 91		      sta	FoodGfxPtr2	; 39
     46  186a		       aa		      tax		; 41
     47  186b		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     48  186e		       85 ca		      sta	FoodColor2	; 48
     49  1870
     50  1870		       b9 b2 00 	      lda	FoodPosX,y	; 52
     51  1873		       85 c6		      sta	Temp	; 55
     52  1875
     53  1875							; Output 14 lines to draw a row, exactly the same as in HiRows.
     54  1875							; It may be possible to code this as a subroutine to save ROM space.
     55  1875
     56  1875		       20 00 18 	      jsr	DrawFoodRow	; 61
     57  1878		       85 02		      sta	WSYNC
     58  187a
     59  187a							; Lastly, output a single line for the next "throb" line.
     60  187a							; Use this time to prepare the next row's food item pointers (unless this is
     61  187a							; the last row). If this is not the last row, loop to LoRows for the next row.
     62  187a
     63  187a		       a5 c2		      lda	ThrobColor+0
     64  187c		       85 09		      sta	COLUBK
     65  187e		       85 08		      sta	COLUPF
     66  1880		       a9 00		      lda	#0
     67  1882		       85 1b		      sta	GRP0
     68  1884		       85 1c		      sta	GRP1
     69  1886		       c6 c8		      dec	CurrentRow
     70  1888		       10 9b		      bpl	LoRows
     71  188a
     72  188a		       a2 ff		      ldx	#$FF
     73  188c		       9a		      txs
     74  188d
     75  188d				   GameplayEnd
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_health.asm LEVEL 4 PASS 2
      0  188d					      include	bank2/code/kernel_health.asm
      1  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  188d							; Health Display
      3  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  188d							; Draw the health indicator and progress bar
      5  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  188d
      7  188d					      SUBROUTINE
      8  188d
      9  188d		       85 02		      sta	WSYNC
     10  188f		       a5 c3		      lda	ThrobColor+1	; 03
     11  1891		       85 09		      sta	COLUBK	; 06
     12  1893
     13  1893		       a9 00		      lda	#0	; 08
     14  1895		       85 0d		      sta	PF0	; 11
     15  1897		       85 0a		      sta	CTRLPF	; 14
     16  1899		       85 06		      sta	COLUP0	; 17
     17  189b		       85 07		      sta	COLUP1	; 20
     18  189d
     19  189d		       a9 05		      lda	#DOUBLE_SIZE	; 22
     20  189f		       85 04		      sta	NUSIZ0	; 25
     21  18a1		       85 05		      sta	NUSIZ1	; 28
     22  18a3		       a9 88		      lda	#$80 + REFP_TRUE	; 30
     23  18a5		       85 0c		      sta	REFP1	; 33
     24  18a7		       85 21		      sta	HMP1	; 36
     25  18a9		       a2 ff		      ldx	#$FF	; 38
     26  18ab		       86 20		      stx	HMP0	; 41
     27  18ad
     28  18ad		       86 c7		      stx	ProgressBar+1	; 44
     29  18af		       86 c8		      stx	ProgressBar+2	; 47
     30  18b1		       86 c9		      stx	ProgressBar+3	; 50
     31  18b3		       ca		      dex		; 52
     32  18b4		       86 ca		      stx	ProgressBar+4	; 55
     33  18b6		       a2 e0		      ldx	#$E0	; 57
     34  18b8		       86 c6		      stx	ProgressBar+0	; 60
     35  18ba
     36  18ba		       a9 08		      lda	#COL_CAT_FACE	; 62
     37  18bc		       85 10		      sta	RESP0	; 65
     38  18be		       85 11		      sta	RESP1	; 68
     39  18c0		       85 08		      sta	COLUPF	; 71
     40  18c2		       85 2a		      sta	HMOVE	; 74
     41  18c4
     42  18c4		       a5 9d		      lda	ScoreColor	; 01
     43  18c6		       85 09		      sta	COLUBK	; 04
     44  18c8
     45  18c8							; Load RAM for progress bar display (28-53 cycles)
     46  18c8
     47  18c8		       a5 b9		      lda	Progress	; 3 - get amount of progress
     48  18ca
     49  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  18ca							; The level progress bar uses the following playfield bits:
     51  18ca							; (note that PF0 and PF2 are NOT reversed in this diagram)
     52  18ca							;
     53  18ca							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
     54  18ca							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
     55  18ca							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
     56  18ca							;
     57  18ca							; When the progress bar is empty, every bit labeled "X" above should be
     58  18ca							; set (1), and when it is full, every "X" bit should be cleared (0).
     59  18ca							; The bits labeled "o" must ALWAYS be cleared.
     60  18ca							;
     61  18ca							; The leftmost playfield value (the 1st PF0) will be calculated first,
     62  18ca							; and then each playfield value to the right until the 2nd PF1
     63  18ca							; will be calculated.
     64  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  18ca
     66  18ca		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
     67  18cc
     68  18cc		       38		      sec		; 2
     69  18cd		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
     70  18cf		       30 1e		      bmi	.Underflow1	; 2/3
     71  18d1		       84 c6		      sty	ProgressBar	; 3 - this playfield byte is full
     72  18d3
     73  18d3		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
     74  18d5		       30 23		      bmi	.Underflow2	; 2/3
     75  18d7		       84 c7		      sty	ProgressBar+1	; 3 - this playfield byte is full
     76  18d9
     77  18d9		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
     78  18db		       30 28		      bmi	.Underflow3	; 2/3
     79  18dd		       84 c8		      sty	ProgressBar+2	; 3 - this playfield byte is full
     80  18df
     81  18df		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
     82  18e1		       30 2d		      bmi	.Underflow4	; 2/3
     83  18e3		       84 c9		      sty	ProgressBar+3	; 3 - this playfield byte is full
     84  18e5
     85  18e5		       aa		      tax		; 2
     86  18e6		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
     87  18e9		       0a		      asl		; 2
     88  18ea		       85 ca		      sta	ProgressBar+4	; 3
     89  18ec		       4c 18 19 	      jmp	.Finish	; 3
     90  18ef
     91  18ef				   .Underflow1		; for 1st PF0
     92  18ef		       69 03		      adc	#3	; 3 - add back the 3
     93  18f1		       aa		      tax		; 2
     94  18f2		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
     95  18f5		       85 c6		      sta	ProgressBar	; 3
     96  18f7		       4c 18 19 	      jmp	.Finish	; 3
     97  18fa
     98  18fa				   .Underflow2		; for 1st PF1
     99  18fa		       69 08		      adc	#8	; 3 - add back the 8
    100  18fc		       aa		      tax		; 2
    101  18fd		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    102  1900		       85 c7		      sta	ProgressBar+1	; 3
    103  1902		       4c 18 19 	      jmp	.Finish	; 3
    104  1905
    105  1905				   .Underflow3		; for PF2
    106  1905		       69 08		      adc	#8	; 3 - add back the 8
    107  1907		       aa		      tax		; 2
    108  1908		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    109  190b		       85 c8		      sta	ProgressBar+2	; 3
    110  190d		       4c 18 19 	      jmp	.Finish	; 3
    111  1910
    112  1910				   .Underflow4		; for 2nd PF0
    113  1910		       69 04		      adc	#4	; 3 - add back the 4
    114  1912		       aa		      tax		; 2
    115  1913		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    116  1916		       85 c9		      sta	ProgressBar+3	; 3
    117  1918
    118  1918				   .Finish		; 57
    119  1918
    120  1918		       a0 04		      ldy	#4
    121  191a		       85 02		      sta	WSYNC
    122  191c
    123  191c							; draw top of health
    124  191c				   .HealthTop
    125  191c		       a2 03		      ldx	#3	; 02
    126  191e				   .Loop
    127  191e		       85 02		      sta	WSYNC
    128  1920		       b9 6f 1b 	      lda	HealthTopGfx,y	; 04
    129  1923		       85 1b		      sta	GRP0	; 07
    130  1925		       85 1c		      sta	GRP1	; 10
    131  1927		       a9 00		      lda	#$00	; 12
    132  1929		       85 0f		      sta	PF2	; 15
    133  192b
    134  192b							; Set the pointers for health graphics - 26 cycles
    135  192b		       18		      clc		; 17
    136  192c		       a9 1b		      lda	#>HealthLeftGfx	; 19
    137  192e		       85 98		      sta	HthGfxLPtr+1	; 22
    138  1930		       85 9a		      sta	HthGfxRPtr+1	; 25
    139  1932		       a9 74		      lda	#<HealthLeftGfx	; 27
    140  1934		       65 ba		      adc	Health	; 30
    141  1936		       85 97		      sta	HthGfxLPtr	; 33
    142  1938		       a9 94		      lda	#<HealthRightGfx	; 35
    143  193a		       65 ba		      adc	Health	; 38
    144  193c		       85 99		      sta	HthGfxRPtr	; 41
    145  193e		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
    146  1941		       85 0f		      sta	PF2	; 48
    147  1943
    148  1943		       ca		      dex		; 50
    149  1944		       d0 d8		      bne	.Loop	; 52
    150  1946
    151  1946		       88		      dey		; 54
    152  1947		       10 d3		      bpl	.HealthTop	; 56
    153  1949
    154  1949					      SUBROUTINE
    155  1949
    156  1949		       a0 03		      ldy	#3	; 58
    157  194b		       a2 03		      ldx	#3	; 60
    158  194d		       86 c6		      stx	Temp	; 63
    159  194f
    160  194f		       4c 00 1a 	      jmp	.HealthMiddle	; 66
    161  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
    162  1a00
    163  1a00							; draw middle of health, with progress bar
    164  1a00				   .HealthMiddle
    165  1a00		       85 02		      sta	WSYNC
    166  1a02				   .Loop
    167  1a02		       a5 c6		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    168  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    169  1a06		       a5 c7		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    170  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    171  1a0a		       a5 c8		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    172  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    173  1a0e		       a5 9e		      lda	PgBarColor	; 21 - get the progress bar color
    174  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    175  1a12		       a5 c9		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    176  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    177  1a16		       b1 97		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    178  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    179  1a1a		       b1 99		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    180  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    181  1a1e		       a5 ca		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    182  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    183  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    184  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    185  1a26		       a5 9d		      lda	ScoreColor	; 60 - get the color for the background
    186  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    187  1a2b
    188  1a2b		       ca		      dex		; 66
    189  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    190  1a2e
    191  1a2e		       a6 c6		      ldx	Temp	; 71
    192  1a30		       88		      dey		; 73
    193  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    194  1a33
    195  1a33					      SUBROUTINE
    196  1a33
    197  1a33		       a9 00		      lda	#0
    198  1a35		       85 0d		      sta	PF0
    199  1a37		       85 0e		      sta	PF1
    200  1a39		       a0 07		      ldy	#7
    201  1a3b
    202  1a3b							; draw bottom of health
    203  1a3b				   .HealthBottom
    204  1a3b		       a2 03		      ldx	#3
    205  1a3d				   .Loop
    206  1a3d		       b1 97		      lda	(HthGfxLPtr),y
    207  1a3f		       85 1b		      sta	GRP0
    208  1a41		       b1 99		      lda	(HthGfxRPtr),y
    209  1a43		       85 1c		      sta	GRP1
    210  1a45		       a9 00		      lda	#$00
    211  1a47		       85 0f		      sta	PF2
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    213  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    214  1a53		       85 0f		      sta	PF2
    215  1a55		       85 02		      sta	WSYNC
    216  1a57
    217  1a57		       ca		      dex
    218  1a58		       d0 e3		      bne	.Loop
    219  1a5a
    220  1a5a		       88		      dey
    221  1a5b		       c0 03		      cpy	#3
    222  1a5d		       d0 dc		      bne	.HealthBottom
    223  1a5f
    224  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    225  1a5f
    226  1a5f		       86 1b		      stx	GRP0
    227  1a61		       86 1c		      stx	GRP1
    228  1a63		       86 0c		      stx	REFP1
    229  1a65		       86 0f		      stx	PF2
    230  1a67
    231  1a67		       85 02		      sta	WSYNC
------- FILE bank2/code/kernel.asm
     12  1a69
     13  1a69		       4c 54 10 	      jmp	Overscan
------- FILE bank2.asm
------- FILE bank2/data/graphics.asm LEVEL 3 PASS 2
      0  1a6c					      include	bank2/data/graphics.asm
      1  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a6c							; Graphics Tables
      3  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a6c
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       78		      .byte.b	%01111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50				   LevelGfx
    130  1b50
    131  1b50		       34		      .byte.b	$34
    132  1b51		       04		      .byte.b	$04
    133  1b52		       04		      .byte.b	$04
    134  1b53		       04		      .byte.b	$04
    135  1b54		       04		      .byte.b	$04
    136  1b55		       04		      .byte.b	$04
    137  1b56		       24		      .byte.b	$24
    138  1b57
    139  1b57
    140  1b57
    141  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1b57							; Throbbing Line Graphics
    143  1b57							;
    144  1b57							; Graphics tables for the throbbing lines
    145  1b57							;
    146  1b57							; Table takes up $18 (24) bytes of ROM
    147  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b57
    149  1b57				   ThrobGfx
    150  1b57
    151  1b57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1b58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1b59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1b5a
    155  1b5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1b5a
    157  1b5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1b5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1b5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1b5d
    161  1b5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1b5d
    163  1b5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1b5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1b5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1b60
    167  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1b60
    169  1b60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1b61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1b62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1b63
    173  1b63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1b63
    175  1b63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1b64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1b65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1b66
    179  1b66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1b66
    181  1b66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1b67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1b68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1b69
    185  1b69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1b69
    187  1b69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1b6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1b6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1b6c
    191  1b6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1b6c
    193  1b6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1b6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1b6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1b6f
    197  1b6f
    198  1b6f
    199  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1b6f							; Health Graphics
    201  1b6f							;
    202  1b6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1b6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1b6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1b6f							; the graphics for the lower right are flipped.
    206  1b6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1b6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1b6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1b6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1b6f							; LOWER 4 lines of graphics (also upside-down).
    211  1b6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1b6f							; health graphics drawn with the playfield.
    213  1b6f							;
    214  1b6f							; Table takes up $45 (69) bytes of ROM
    215  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1b6f
    217  1b6f				   HealthTopGfx
    218  1b6f
    219  1b6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1b70		       43		      .byte.b	%01000011
    221  1b71		       44		      .byte.b	%01000100
    222  1b72		       48		      .byte.b	%01001000
    223  1b73		       30		      .byte.b	%00110000
    224  1b74
    225  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1b74				   HealthLeftGfx
    227  1b74
    228  1b74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1b75		       8c		      .byte.b	%10001100
    230  1b76		       84		      .byte.b	%10000100
    231  1b77		       80		      .byte.b	%10000000
    232  1b78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1b79		       20		      .byte.b	%00100000
    234  1b7a		       47		      .byte.b	%01000111
    235  1b7b		       84		      .byte.b	%10000100
    236  1b7c
    237  1b7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1b7c
    239  1b7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1b7d		       8c		      .byte.b	%10001100
    241  1b7e		       84		      .byte.b	%10000100
    242  1b7f		       80		      .byte.b	%10000000
    243  1b80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1b81		       20		      .byte.b	%00100000
    245  1b82		       47		      .byte.b	%01000111
    246  1b83		       80		      .byte.b	%10000000
    247  1b84
    248  1b84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1b84
    250  1b84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1b85		       8c		      .byte.b	%10001100
    252  1b86		       84		      .byte.b	%10000100
    253  1b87		       80		      .byte.b	%10000000
    254  1b88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1b89		       20		      .byte.b	%00100000
    256  1b8a		       44		      .byte.b	%01000100
    257  1b8b		       87		      .byte.b	%10000111
    258  1b8c
    259  1b8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1b8c
    261  1b8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1b8d		       9c		      .byte.b	%10011100
    263  1b8e		       80		      .byte.b	%10000000
    264  1b8f		       80		      .byte.b	%10000000
    265  1b90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1b91		       20		      .byte.b	%00100000
    267  1b92		       46		      .byte.b	%01000110
    268  1b93		       81		      .byte.b	%10000001
    269  1b94
    270  1b94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1b94				   HealthRightGfx
    272  1b94
    273  1b94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1b95		       9a		      .byte.b	%10011010
    275  1b96		       90		      .byte.b	%10010000
    276  1b97		       80		      .byte.b	%10000000
    277  1b98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1b99		       20		      .byte.b	%00100000
    279  1b9a		       4f		      .byte.b	%01001111
    280  1b9b		       89		      .byte.b	%10001001
    281  1b9c
    282  1b9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1b9c
    284  1b9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1b9d		       9a		      .byte.b	%10011010
    286  1b9e		       90		      .byte.b	%10010000
    287  1b9f		       80		      .byte.b	%10000000
    288  1ba0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ba1		       20		      .byte.b	%00100000
    290  1ba2		       4f		      .byte.b	%01001111
    291  1ba3		       80		      .byte.b	%10000000
    292  1ba4
    293  1ba4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ba4
    295  1ba4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ba5		       9a		      .byte.b	%10011010
    297  1ba6		       88		      .byte.b	%10001000
    298  1ba7		       80		      .byte.b	%10000000
    299  1ba8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ba9		       20		      .byte.b	%00100000
    301  1baa		       48		      .byte.b	%01001000
    302  1bab		       8f		      .byte.b	%10001111
    303  1bac
    304  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1bac
    306  1bac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1bad		       ba		      .byte.b	%10111010
    308  1bae		       80		      .byte.b	%10000000
    309  1baf		       80		      .byte.b	%10000000
    310  1bb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1bb1		       20		      .byte.b	%00100000
    312  1bb2		       4c		      .byte.b	%01001100
    313  1bb3		       83		      .byte.b	%10000011
    314  1bb4
    315  1bb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1bb4
    317  1bb4							; 3 bytes left in this page
    318  1bb4
    319  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1c00
    321  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1c00				   HealthBgGfx
    323  1c00							; 13 bytes
    324  1c00
    325  1c00		       00		      .byte.b	%00000000
    326  1c01		       3e		      .byte.b	%00111110
    327  1c02		       7f		      .byte.b	%01111111
    328  1c03		       7f		      .byte.b	%01111111
    329  1c04		       7f		      .byte.b	%01111111
    330  1c05		       7f		      .byte.b	%01111111
    331  1c06		       7f		      .byte.b	%01111111
    332  1c07		       7f		      .byte.b	%01111111
    333  1c08		       7f		      .byte.b	%01111111
    334  1c09		       7f		      .byte.b	%01111111
    335  1c0a		       63		      .byte.b	%01100011
    336  1c0b		       63		      .byte.b	%01100011
    337  1c0c		       00		      .byte.b	%00000000
    338  1c0d
    339  1c0d
    340  1c0d
    341  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1c0d							; Progress Bar Graphics
    343  1c0d							;
    344  1c0d							;
    345  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1c0d
    347  1c0d				   PgBarGfx
    348  1c0d							; 9 bytes
    349  1c0d
    350  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1c0f		       3f		      .byte.b	%00111111
    353  1c10		       1f		      .byte.b	%00011111
    354  1c11		       0f		      .byte.b	%00001111
    355  1c12		       07		      .byte.b	%00000111
    356  1c13		       03		      .byte.b	%00000011
    357  1c14		       01		      .byte.b	%00000001
    358  1c15		       00		      .byte.b	%00000000
    359  1c16
    360  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1c16				   PgBarGfxR
    362  1c16							; 8 bytes
    363  1c16
    364  1c16		       ff		      .byte.b	%11111111	; PF2
    365  1c17		       fe		      .byte.b	%11111110
    366  1c18		       fc		      .byte.b	%11111100
    367  1c19		       f8		      .byte.b	%11111000
    368  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1c1c		       c0		      .byte.b	%11000000
    371  1c1d		       80		      .byte.b	%10000000
    372  1c1e
    373  1c1e
    374  1c1e
    375  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1c1e							; Cat Rainbow Graphics
    377  1c1e							;
    378  1c1e							;
    379  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1c1e
    381  1c1e				   RainbowGfx
    382  1c1e							; 4 bytes
    383  1c1e
    384  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1c1f
    386  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1c20
    388  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1c21
    390  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1c22
    392  1d00		       00 00 00 00*	      ALIGN	$100
    393  1d00
    394  1d00				   FoodGfx
    395  1d00
    396  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1d00							; 0 - blank
    398  1d00
    399  1d00		       01		      .byte.b	%00000001
    400  1d01		       80		      .byte.b	%10000000
    401  1d02		       01		      .byte.b	%00000001
    402  1d03		       80		      .byte.b	%10000000
    403  1d04		       01		      .byte.b	%00000001
    404  1d05		       80		      .byte.b	%10000000
    405  1d06		       01		      .byte.b	%00000001
    406  1d07		       80		      .byte.b	%10000000
    407  1d08		       01		      .byte.b	%00000001
    408  1d09		       80		      .byte.b	%10000000
    409  1d0a		       01		      .byte.b	%00000001
    410  1d0b		       80		      .byte.b	%10000000
    411  1d0c		       01		      .byte.b	%00000001
    412  1d0d		       80		      .byte.b	%10000000
    413  1d0e
    414  1d0e		       00		      .byte.b	0
    415  1d0f		       00		      .byte.b	$00
    416  1d10
    417  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1d10							; 1 - apple
    419  1d10
    420  1d10		       34		      .byte.b	%00110100
    421  1d11		       7e		      .byte.b	%01111110
    422  1d12		       7e		      .byte.b	%01111110
    423  1d13		       ff		      .byte.b	%11111111
    424  1d14		       ff		      .byte.b	%11111111
    425  1d15		       ff		      .byte.b	%11111111
    426  1d16		       ff		      .byte.b	%11111111
    427  1d17		       ff		      .byte.b	%11111111
    428  1d18		       ff		      .byte.b	%11111111
    429  1d19		       7f		      .byte.b	%01111111
    430  1d1a		       6a		      .byte.b	%01101010
    431  1d1b		       08		      .byte.b	%00001000
    432  1d1c		       0c		      .byte.b	%00001100
    433  1d1d		       04		      .byte.b	%00000100
    434  1d1e
    435  1d1e		       00		      .byte.b	0
    436  1d1f		       46		      .byte.b	$46
    437  1d20
    438  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1d20							; 2 - peach
    440  1d20
    441  1d20		       3c		      .byte.b	%00111100
    442  1d21		       6e		      .byte.b	%01101110
    443  1d22		       6e		      .byte.b	%01101110
    444  1d23		       df		      .byte.b	%11011111
    445  1d24		       df		      .byte.b	%11011111
    446  1d25		       bf		      .byte.b	%10111111
    447  1d26		       bf		      .byte.b	%10111111
    448  1d27		       bf		      .byte.b	%10111111
    449  1d28		       de		      .byte.b	%11011110
    450  1d29		       5e		      .byte.b	%01011110
    451  1d2a		       6c		      .byte.b	%01101100
    452  1d2b		       18		      .byte.b	%00011000
    453  1d2c		       10		      .byte.b	%00010000
    454  1d2d		       30		      .byte.b	%00110000
    455  1d2e
    456  1d2e		       00		      .byte.b	0
    457  1d2f		       3a		      .byte.b	$3A
    458  1d30
    459  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1d30							; 3 - banana
    461  1d30
    462  1d30		       38		      .byte.b	%00111000
    463  1d31		       7c		      .byte.b	%01111100
    464  1d32		       fe		      .byte.b	%11111110
    465  1d33		       fe		      .byte.b	%11111110
    466  1d34		       ff		      .byte.b	%11111111
    467  1d35		       ff		      .byte.b	%11111111
    468  1d36		       8f		      .byte.b	%10001111
    469  1d37		       07		      .byte.b	%00000111
    470  1d38		       07		      .byte.b	%00000111
    471  1d39		       03		      .byte.b	%00000011
    472  1d3a		       03		      .byte.b	%00000011
    473  1d3b		       02		      .byte.b	%00000010
    474  1d3c		       06		      .byte.b	%00000110
    475  1d3d		       06		      .byte.b	%00000110
    476  1d3e
    477  1d3e		       00		      .byte.b	0
    478  1d3f		       1e		      .byte.b	$1E
    479  1d40
    480  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1d40							; 4 - pear
    482  1d40
    483  1d40		       38		      .byte.b	%00111000
    484  1d41		       7c		      .byte.b	%01111100
    485  1d42		       fe		      .byte.b	%11111110
    486  1d43		       fe		      .byte.b	%11111110
    487  1d44		       fe		      .byte.b	%11111110
    488  1d45		       fe		      .byte.b	%11111110
    489  1d46		       7c		      .byte.b	%01111100
    490  1d47		       7c		      .byte.b	%01111100
    491  1d48		       38		      .byte.b	%00111000
    492  1d49		       38		      .byte.b	%00111000
    493  1d4a		       30		      .byte.b	%00110000
    494  1d4b		       10		      .byte.b	%00010000
    495  1d4c		       18		      .byte.b	%00011000
    496  1d4d		       08		      .byte.b	%00001000
    497  1d4e
    498  1d4e		       00		      .byte.b	0
    499  1d4f		       cc		      .byte.b	$CC
    500  1d50
    501  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1d50							; 5 - plum
    503  1d50
    504  1d50		       38		      .byte.b	%00111000
    505  1d51		       6c		      .byte.b	%01101100
    506  1d52		       6e		      .byte.b	%01101110
    507  1d53		       de		      .byte.b	%11011110
    508  1d54		       df		      .byte.b	%11011111
    509  1d55		       bf		      .byte.b	%10111111
    510  1d56		       bf		      .byte.b	%10111111
    511  1d57		       bf		      .byte.b	%10111111
    512  1d58		       de		      .byte.b	%11011110
    513  1d59		       de		      .byte.b	%11011110
    514  1d5a		       5e		      .byte.b	%01011110
    515  1d5b		       3c		      .byte.b	%00111100
    516  1d5c		       20		      .byte.b	%00100000
    517  1d5d		       60		      .byte.b	%01100000
    518  1d5e
    519  1d5e		       00		      .byte.b	0
    520  1d5f		       88		      .byte.b	$88
    521  1d60
    522  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1d60							; 6 - grapes
    524  1d60
    525  1d60		       18		      .byte.b	%00011000
    526  1d61		       08		      .byte.b	%00001000
    527  1d62		       36		      .byte.b	%00110110
    528  1d63		       12		      .byte.b	%00010010
    529  1d64		       6c		      .byte.b	%01101100
    530  1d65		       24		      .byte.b	%00100100
    531  1d66		       db		      .byte.b	%11011011
    532  1d67		       49		      .byte.b	%01001001
    533  1d68		       36		      .byte.b	%00110110
    534  1d69		       12		      .byte.b	%00010010
    535  1d6a		       6c		      .byte.b	%01101100
    536  1d6b		       34		      .byte.b	%00110100
    537  1d6c		       10		      .byte.b	%00010000
    538  1d6d		       18		      .byte.b	%00011000
    539  1d6e
    540  1d6e		       00		      .byte.b	0
    541  1d6f		       64		      .byte.b	$64
    542  1d70
    543  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1d70							; 7 - broccoli
    545  1d70
    546  1d70		       18		      .byte.b	%00011000
    547  1d71		       18		      .byte.b	%00011000
    548  1d72		       1c		      .byte.b	%00011100
    549  1d73		       3e		      .byte.b	%00111110
    550  1d74		       2a		      .byte.b	%00101010
    551  1d75		       12		      .byte.b	%00010010
    552  1d76		       2a		      .byte.b	%00101010
    553  1d77		       54		      .byte.b	%01010100
    554  1d78		       aa		      .byte.b	%10101010
    555  1d79		       55		      .byte.b	%01010101
    556  1d7a		       aa		      .byte.b	%10101010
    557  1d7b		       55		      .byte.b	%01010101
    558  1d7c		       2a		      .byte.b	%00101010
    559  1d7d		       04		      .byte.b	%00000100
    560  1d7e
    561  1d7e		       00		      .byte.b	0
    562  1d7f		       c7		      .byte.b	$C7
    563  1d80
    564  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1d80							; 8 - cabbage
    566  1d80
    567  1d80		       18		      .byte.b	%00011000
    568  1d81		       76		      .byte.b	%01110110
    569  1d82		       76		      .byte.b	%01110110
    570  1d83		       7a		      .byte.b	%01111010
    571  1d84		       f9		      .byte.b	%11111001
    572  1d85		       fb		      .byte.b	%11111011
    573  1d86		       ed		      .byte.b	%11101101
    574  1d87		       db		      .byte.b	%11011011
    575  1d88		       fb		      .byte.b	%11111011
    576  1d89		       e9		      .byte.b	%11101001
    577  1d8a		       56		      .byte.b	%01010110
    578  1d8b		       76		      .byte.b	%01110110
    579  1d8c		       6e		      .byte.b	%01101110
    580  1d8d		       18		      .byte.b	%00011000
    581  1d8e
    582  1d8e		       00		      .byte.b	0
    583  1d8f		       da		      .byte.b	$DA
    584  1d90
    585  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1d90							; 9 - celery
    587  1d90
    588  1d90		       c0		      .byte.b	%11000000
    589  1d91		       e0		      .byte.b	%11100000
    590  1d92		       70		      .byte.b	%01110000
    591  1d93		       30		      .byte.b	%00110000
    592  1d94		       18		      .byte.b	%00011000
    593  1d95		       18		      .byte.b	%00011000
    594  1d96		       0c		      .byte.b	%00001100
    595  1d97		       0c		      .byte.b	%00001100
    596  1d98		       0e		      .byte.b	%00001110
    597  1d99		       06		      .byte.b	%00000110
    598  1d9a		       0d		      .byte.b	%00001101
    599  1d9b		       0b		      .byte.b	%00001011
    600  1d9c		       0d		      .byte.b	%00001101
    601  1d9d		       06		      .byte.b	%00000110
    602  1d9e
    603  1d9e		       00		      .byte.b	0
    604  1d9f		       d6		      .byte.b	$D6
    605  1da0
    606  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1da0							; A - green pepper
    608  1da0
    609  1da0		       6c		      .byte.b	%01101100
    610  1da1		       6c		      .byte.b	%01101100
    611  1da2		       fe		      .byte.b	%11111110
    612  1da3		       fe		      .byte.b	%11111110
    613  1da4		       f6		      .byte.b	%11110110
    614  1da5		       f6		      .byte.b	%11110110
    615  1da6		       f6		      .byte.b	%11110110
    616  1da7		       f6		      .byte.b	%11110110
    617  1da8		       f6		      .byte.b	%11110110
    618  1da9		       ec		      .byte.b	%11101100
    619  1daa		       7c		      .byte.b	%01111100
    620  1dab		       10		      .byte.b	%00010000
    621  1dac		       18		      .byte.b	%00011000
    622  1dad		       08		      .byte.b	%00001000
    623  1dae
    624  1dae		       00		      .byte.b	0
    625  1daf		       c8		      .byte.b	$C8
    626  1db0
    627  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1db0							; B - pumpkin
    629  1db0
    630  1db0		       3c		      .byte.b	%00111100
    631  1db1		       56		      .byte.b	%01010110
    632  1db2		       b7		      .byte.b	%10110111
    633  1db3		       ad		      .byte.b	%10101101
    634  1db4		       ad		      .byte.b	%10101101
    635  1db5		       ad		      .byte.b	%10101101
    636  1db6		       ad		      .byte.b	%10101101
    637  1db7		       ad		      .byte.b	%10101101
    638  1db8		       b7		      .byte.b	%10110111
    639  1db9		       56		      .byte.b	%01010110
    640  1dba		       3c		      .byte.b	%00111100
    641  1dbb		       18		      .byte.b	%00011000
    642  1dbc		       0c		      .byte.b	%00001100
    643  1dbd		       0c		      .byte.b	%00001100
    644  1dbe
    645  1dbe		       00		      .byte.b	0
    646  1dbf		       2a		      .byte.b	$2A
    647  1dc0
    648  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1dc0							; C - mushroom
    650  1dc0
    651  1dc0		       18		      .byte.b	%00011000
    652  1dc1		       3c		      .byte.b	%00111100
    653  1dc2		       24		      .byte.b	%00100100
    654  1dc3		       24		      .byte.b	%00100100
    655  1dc4		       24		      .byte.b	%00100100
    656  1dc5		       66		      .byte.b	%01100110
    657  1dc6		       a5		      .byte.b	%10100101
    658  1dc7		       99		      .byte.b	%10011001
    659  1dc8		       e7		      .byte.b	%11100111
    660  1dc9		       ff		      .byte.b	%11111111
    661  1dca		       5a		      .byte.b	%01011010
    662  1dcb		       76		      .byte.b	%01110110
    663  1dcc		       3c		      .byte.b	%00111100
    664  1dcd		       18		      .byte.b	%00011000
    665  1dce
    666  1dce		       00		      .byte.b	0
    667  1dcf		       08		      .byte.b	$08
    668  1dd0
    669  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1dd0							; D - key
    671  1dd0
    672  1dd0		       10		      .byte.b	%00010000
    673  1dd1		       1e		      .byte.b	%00011110
    674  1dd2		       1e		      .byte.b	%00011110
    675  1dd3		       18		      .byte.b	%00011000
    676  1dd4		       1e		      .byte.b	%00011110
    677  1dd5		       1e		      .byte.b	%00011110
    678  1dd6		       10		      .byte.b	%00010000
    679  1dd7		       10		      .byte.b	%00010000
    680  1dd8		       10		      .byte.b	%00010000
    681  1dd9		       10		      .byte.b	%00010000
    682  1dda		       38		      .byte.b	%00111000
    683  1ddb		       6c		      .byte.b	%01101100
    684  1ddc		       6c		      .byte.b	%01101100
    685  1ddd		       38		      .byte.b	%00111000
    686  1dde
    687  1dde		       00		      .byte.b	0
    688  1ddf		       2c		      .byte.b	$2C
    689  1de0
    690  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1de0							; E - ring
    692  1de0
    693  1de0		       00		      .byte.b	%00000000
    694  1de1		       18		      .byte.b	%00011000
    695  1de2		       3c		      .byte.b	%00111100
    696  1de3		       66		      .byte.b	%01100110
    697  1de4		       42		      .byte.b	%01000010
    698  1de5		       42		      .byte.b	%01000010
    699  1de6		       42		      .byte.b	%01000010
    700  1de7		       66		      .byte.b	%01100110
    701  1de8		       3c		      .byte.b	%00111100
    702  1de9		       18		      .byte.b	%00011000
    703  1dea		       18		      .byte.b	%00011000
    704  1deb		       2c		      .byte.b	%00101100
    705  1dec		       18		      .byte.b	%00011000
    706  1ded		       00		      .byte.b	%00000000
    707  1dee
    708  1dee		       00		      .byte.b	0
    709  1def		       2c		      .byte.b	$2C
    710  1df0
    711  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1df0							; F - heart
    713  1df0
    714  1df0		       00		      .byte.b	%00000000
    715  1df1		       18		      .byte.b	%00011000
    716  1df2		       18		      .byte.b	%00011000
    717  1df3		       3c		      .byte.b	%00111100
    718  1df4		       3c		      .byte.b	%00111100
    719  1df5		       7e		      .byte.b	%01111110
    720  1df6		       7e		      .byte.b	%01111110
    721  1df7		       ff		      .byte.b	%11111111
    722  1df8		       ff		      .byte.b	%11111111
    723  1df9		       ff		      .byte.b	%11111111
    724  1dfa		       e7		      .byte.b	%11100111
    725  1dfb		       e7		      .byte.b	%11100111
    726  1dfc		       42		      .byte.b	%01000010
    727  1dfd		       00		      .byte.b	%00000000
    728  1dfe
    729  1dfe		       00		      .byte.b	0
    730  1dff		       4a		      .byte.b	$4A
    731  1e00
    732  1e00				   RainbowColors
    733  1e00
    734  1e00		       64		      .byte.b	$64
    735  1e01		       88		      .byte.b	$88
    736  1e02		       c8		      .byte.b	$C8
    737  1e03		       1e		      .byte.b	$1E
    738  1e04		       28		      .byte.b	$28
    739  1e05		       44		      .byte.b	$44
    740  1e06
    741  1e06				   CatTartGfx
    742  1e06
    743  1e06		       00 00 00 00*	      ds	18, $00
    744  1e18
    745  1e18		       00		      .byte.b	%00000000
    746  1e19		       00		      .byte.b	%00000000
    747  1e1a		       e0		      .byte.b	%11100000
    748  1e1b		       c0		      .byte.b	%11000000
    749  1e1c		       c0		      .byte.b	%11000000
    750  1e1d		       c0		      .byte.b	%11000000
    751  1e1e		       c0		      .byte.b	%11000000
    752  1e1f		       c0		      .byte.b	%11000000
    753  1e20		       c0		      .byte.b	%11000000
    754  1e21		       e0		      .byte.b	%11100000
    755  1e22		       e0		      .byte.b	%11100000
    756  1e23		       e0		      .byte.b	%11100000
    757  1e24		       e0		      .byte.b	%11100000
    758  1e25		       e0		      .byte.b	%11100000
    759  1e26		       e0		      .byte.b	%11100000
    760  1e27		       e0		      .byte.b	%11100000
    761  1e28
    762  1e28				   CatFaceGfx
    763  1e28
    764  1e28		       00 00 00 00*	      ds	18, $00
    765  1e3a
    766  1e3a		       36		      .byte.b	%00110110
    767  1e3b		       36		      .byte.b	%00110110
    768  1e3c		       00		      .byte.b	%00000000
    769  1e3d		       7e		      .byte.b	%01111110
    770  1e3e		       c1		      .byte.b	%11000001
    771  1e3f		       d5		      .byte.b	%11010101
    772  1e40		       ff		      .byte.b	%11111111
    773  1e41		       d5		      .byte.b	%11010101
    774  1e42		       dd		      .byte.b	%11011101
    775  1e43		       ff		      .byte.b	%11111111
    776  1e44		       66		      .byte.b	%01100110
    777  1e45		       66		      .byte.b	%01100110
    778  1e46		       42		      .byte.b	%01000010
    779  1e47		       00		      .byte.b	%00000000
    780  1e48
    781  1e48		       00 00 00 00*	      ds	19, $00
    782  1e5b
    783  1e5b
    784  1e5b
    785  1e5b				   RowPosition
    786  1e5b		       00		      .byte.b	0
    787  1e5c		       13		      .byte.b	19
    788  1e5d		       26		      .byte.b	38
    789  1e5e		       39		      .byte.b	57
    790  1e5f		       4c		      .byte.b	76
    791  1e60		       5f		      .byte.b	95
    792  1e61		       72		      .byte.b	114
------- FILE bank2.asm
------- FILE bank2/data/colors.asm LEVEL 3 PASS 2
      0  1e62					      include	bank2/data/colors.asm
      1  1e62							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1e62							;
      3  1e62							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1e62
      5  1e62				   LevelColors
      6  1e62
      7  1e62							;	score	pgbar
      8  1e62		       7a 56		      HEX	7A 56	; level 0
      9  1e64		       7a 56		      HEX	7A 56	; level 1
     10  1e66		       7a 56		      HEX	7A 56	; level 2
     11  1e68		       7a 56		      HEX	7A 56	; level 3
     12  1e6a		       7a 56		      HEX	7A 56	; level 4
     13  1e6c		       7a 56		      HEX	7A 56	; level 5
     14  1e6e		       7a 56		      HEX	7A 56	; level 6
     15  1e70		       7a 56		      HEX	7A 56	; level 7
     16  1e72		       7a 56		      HEX	7A 56	; level 8
     17  1e74		       7a 56		      HEX	7A 56	; level 9
     18  1e76		       7a 56		      HEX	7A 56	; level 10
     19  1e78		       7a 56		      HEX	7A 56	; level 11
     20  1e7a		       7a 56		      HEX	7A 56	; level 12
     21  1e7c		       7a 56		      HEX	7A 56	; level 13
     22  1e7e		       7a 56		      HEX	7A 56	; level 14
     23  1e80		       7a 56		      HEX	7A 56	; level 15
     24  1e82		       7a 56		      HEX	7A 56	; level 16
     25  1e84		       7a 56		      HEX	7A 56	; level 17
     26  1e86		       7a 56		      HEX	7A 56	; level 18
     27  1e88		       7a 56		      HEX	7A 56	; level 19
------- FILE bank2.asm
     13  1e8a
      0  1e8a					      END_BANK	2
      1  1ffa					      ORG	[2 - 1] * $1000 + $0FFA
      2  1ffa
      3  1ffa		       00 10		      .word.w	JmpInitSystem
      4  1ffc		       00 10		      .word.w	JmpInitSystem
      5  1ffe		       00 10		      .word.w	JmpInitSystem
      6  2000
------- FILE main.asm
------- FILE bank3.asm LEVEL 2 PASS 2
      0  2000					      include	bank3.asm
      1  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000							; Bank 3
      3  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  2000
      0  2000					      START_BANK	3
      1  3000 ????				      SEG	BANK_3
      2  2000					      ORG	[3 - 1] * $1000
      3  2000					      RORG	$1000
      4  2000					      SUBROUTINE
      5  2000
      6  2000				   JmpInitSystem
      7  2000		       0c f6 1f 	      nop	SelectBank1
      8  2003		       4c 12 10 	      jmp	InitSystem
      9  2006				   JmpMenuOverScan
     10  2006		       0c f6 1f 	      nop	SelectBank1
     11  2009		       4c 20 10 	      jmp	MenuOverScan
     12  200c				   JmpGamePlay
     13  200c		       0c f7 1f 	      nop	SelectBank2
     14  200f		       4c 12 10 	      jmp	GameplayInit
     15  2012
      6  2012
      0  2012					      END_BANK	3
      1  2ffa					      ORG	[3 - 1] * $1000 + $0FFA
      2  2ffa
      3  2ffa		       00 10		      .word.w	JmpInitSystem
      4  2ffc		       00 10		      .word.w	JmpInitSystem
      5  2ffe		       00 10		      .word.w	JmpInitSystem
      6  3000
------- FILE main.asm
------- FILE bank4.asm LEVEL 2 PASS 2
      0  3000					      include	bank4.asm
      1  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  3000							; Bank 4
      3  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  3000
      0  3000					      START_BANK	4
      1  4000 ????				      SEG	BANK_4
      2  3000					      ORG	[4 - 1] * $1000
      3  3000					      RORG	$1000
      4  3000					      SUBROUTINE
      5  3000
      6  3000				   JmpInitSystem
      7  3000		       0c f6 1f 	      nop	SelectBank1
      8  3003		       4c 12 10 	      jmp	InitSystem
      9  3006				   JmpMenuOverScan
     10  3006		       0c f6 1f 	      nop	SelectBank1
     11  3009		       4c 20 10 	      jmp	MenuOverScan
     12  300c				   JmpGamePlay
     13  300c		       0c f7 1f 	      nop	SelectBank2
     14  300f		       4c 12 10 	      jmp	GameplayInit
     15  3012
      6  3012
      0  3012					      END_BANK	4
      1  3ffa					      ORG	[4 - 1] * $1000 + $0FFA
      2  3ffa
      3  3ffa		       00 10		      .word.w	JmpInitSystem
      4  3ffc		       00 10		      .word.w	JmpInitSystem
      5  3ffe		       00 10		      .word.w	JmpInitSystem
      6  4000
------- FILE main.asm
