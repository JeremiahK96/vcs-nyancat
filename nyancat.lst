------- FILE main.asm LEVEL 1 PASS 2
      1  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000 ????						; Project - Nyan Cat Game
      3  1000 ????						; by Jeremiah Knol
      4  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  1000 ????						; 10-06-2018 Version 4.1
      6  1000 ????						;
      7  1000 ????						; Add NTSC/PAL functionality
      8  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  1000 ????
     10  1000 ????				      PROCESSOR	6502
     11  1000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  1000 ????				      include	headers/vcs.h
      1  1000 ????						; VCS.H
      2  1000 ????						; Version 1.05, 13/November/2003
      3  1000 ????
      4  1000 ????	       00 69	   VERSION_VCS =	105
      5  1000 ????
      6  1000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  1000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  1000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  1000 ????						;
     10  1000 ????						; This file defines hardware registers and memory mapping for the
     11  1000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  1000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  1000 ????						; available at at http://www.atari2600.org/dasm
     14  1000 ????						;
     15  1000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  1000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  1000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  1000 ????						; with your views.  Please contribute, if you think you can improve this
     19  1000 ????						; file!
     20  1000 ????						;
     21  1000 ????						; Latest Revisions...
     22  1000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  1000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  1000 ????						;			    This will allow conditional code to verify VCS.H being
     25  1000 ????						;			    used for code assembly.
     26  1000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  1000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  1000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  1000 ????						;			 readability issue, and binary compatibility with disassembled
     30  1000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  1000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  1000 ????						;			 which was broken by the use of segments in this file, as
     33  1000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  1000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  1000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  1000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  1000 ????						;						   it is safe to leave it undefined, and the base address will
     38  1000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  1000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  1000 ????						;			  - register definitions are now generated through assignment
     41  1000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  1000 ????						;			    address architecture.
     43  1000 ????						; 1.0	22/MAR/2003		Initial release
     44  1000 ????
     45  1000 ????
     46  1000 ????						;-------------------------------------------------------------------------------
     47  1000 ????
     48  1000 ????						; TIA_BASE_ADDRESS
     49  1000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  1000 ????						; Normally 0, the base address should (externally, before including this file)
     51  1000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  1000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  1000 ????						; < $40 as a bankswitch.
     54  1000 ????
     55  1000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  1000 ????			  -TIA_BASE_ADDRESS =	0
     57  1000 ????				      ENDIF
     58  1000 ????
     59  1000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  1000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  1000 ????						; *OR* by declaring the label before including this file, eg:
     62  1000 ????						; TIA_BASE_ADDRESS = $40
     63  1000 ????						;   include "vcs.h"
     64  1000 ????
     65  1000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  1000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  1000 ????						; for the mirrored ROM hardware registers.
     68  1000 ????
     69  1000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  1000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  1000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  1000 ????
     73  1000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  1000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  1000 ????				      ENDIF
     76  1000 ????
     77  1000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  1000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  1000 ????				      ENDIF
     80  1000 ????
     81  1000 ????						;-------------------------------------------------------------------------------
     82  1000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????	       00 28	   VBLANK_LINES_NTSC equ	40
     48  0000 ????	       00 1e	   OSCAN_LINES_NTSC equ	30
     49  0000 ????	       00 2b	   VBLANK_NTSC equ	[[VBLANK_LINES_NTSC - 3] * 76 - 7] / 64
     50  0000 ????	       00 24	   OSCAN_NTSC equ	[[OSCAN_LINES_NTSC] * 76 + 26] / 64
     51  0000 ????
     52  0000 ????	       00 42	   VBLANK_LINES_PAL equ	66
     53  0000 ????	       00 36	   OSCAN_LINES_PAL equ	54
     54  0000 ????	       00 4a	   VBLANK_PAL equ	[[VBLANK_LINES_PAL - 3] * 76 - 7] / 64
     55  0000 ????	       00 40	   OSCAN_PAL  equ	[[OSCAN_LINES_PAL] * 76 + 26] / 64
     56  0000 ????
     57  0000 ????						; colors
     58  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     59  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     60  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     61  0000 ????	       00 08	   COL_CAT_FACE equ	$08
     62  0000 ????
     63  0000 ????						; luminosity values for throb line data
     64  0000 ????	       00 00	   LUM_0      equ	$0>>1
     65  0000 ????	       00 01	   LUM_2      equ	$2>>1
     66  0000 ????	       00 02	   LUM_4      equ	$4>>1
     67  0000 ????	       00 03	   LUM_6      equ	$6>>1
     68  0000 ????	       00 04	   LUM_8      equ	$8>>1
     69  0000 ????	       00 05	   LUM_A      equ	$A>>1
     70  0000 ????	       00 06	   LUM_C      equ	$C>>1
     71  0000 ????	       00 07	   LUM_E      equ	$E>>1
     72  0000 ????
     73  0000 ????						; color modes for throb line data
     74  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     75  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     76  0000 ????
     77  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     78  0000 ????
     79  0000 ????						; bankswitching hotspots
     80  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     81  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     82  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     83  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00b2 ????				      SEG.U	VARS
      6 U00b2 ????				      RORG	$80
      7 U00b2 ????
      8 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9 U00b2 ????						; Global Variables
     10 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U00b2 ????						; These variables are used globally and cannot be shared or otherwise corrupted
     12 U00b2 ????						;
     13 U00b2 ????						; Uses 14 bytes of RAM
     14 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U00b2 ????
     16 U00b2 ????			   RamGlobal
     17 U00b2 ????
     18 U00b2 ????						; Game housekeeping - 2 bytes
     19 U00b2 ????	       00	   Frame      ds	1	; current frame mod 256
     20 U00b3 ????			   Variation		; game variation options
     21 U00b3 ????	       00		      ds	1
     22 U00b4 ????						; ideas for variations :
     23 U00b4 ????
     24 U00b4 ????						; players - 1 bit
     25 U00b4 ????						;	0 = 1 player, use player 2's score RAM to keep track
     26 U00b4 ????						;	of the highest score
     27 U00b4 ????						;	1 = 2 players, keep track of both scores, erasing any
     28 U00b4 ????						;	high score previously saved (might not need to erase
     29 U00b4 ????						;	high score based on free RAM)
     30 U00b4 ????
     31 U00b4 ????						; randomness - 1 bit
     32 U00b4 ????						;	0 = leave Rand16 as-is at start of game and use player
     33 U00b4 ????						;	input to further randomize numbers
     34 U00b4 ????						;	1 = reset Rand16 at start of game and don't use
     35 U00b4 ????						;	player input to affect randomization
     36 U00b4 ????						;	(same exact game every time)
     37 U00b4 ????
     38 U00b4 ????						; multi-speed rows - 1 bit
     39 U00b4 ????						;	0 = force all rows to be the same speed
     40 U00b4 ????						;	1 = allow levels to randomize row speeds
     41 U00b4 ????
     42 U00b4 ????						; 5 bits still available
     43 U00b4 ????
     44 U00b4 ????						; Scores and current level - 7 bytes
     45 U00b4 ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     46 U00b4 ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     47 U00ba ????						; last 3 for player 2.
     48 U00ba ????			   BCDLevel		; value for the current level which will be stored as a
     49 U00ba ????	       00		      ds	1	; BCD encoded 2-digit number and used to control the
     50 U00bb ????						; level counter display
     51 U00bb ????
     52 U00bb ????						; Random Numbers - 3 bytes
     53 U00bb ????	       00 00	   Rand16     ds	2	; 16-bit random number
     54 U00bd ????	       00	   RandEor    ds	1	; value to eor with random, affected by user input
     55 U00be ????
     56 U00be ????						; Cat colors - 2 bytes
     57 U00be ????			   CatTartColor 		; color for current player's cat in the kernels
     58 U00be ????	       00		      ds	1
     59 U00bf ????			   OtherTartColor		; color for the other player's cat
     60 U00bf ????	       00		      ds	1
     61 U00c0 ????
     62 U00c0 ????
     63 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     64 U00c0 ????						; Local Variables
     65 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66 U00c0 ????						; These variables are only used locally, and are redefined for each area of code
     67 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     68 U00c0 ????
     69 U00c0 ????			   RamLocal
     70 U00c0 ????
     71 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     72 U00c0 ????						; Menu Variables
     73 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     74 U00c0 ????						; These variables are only needed in the main menu routine.
     75 U00c0 ????						;
     76 U00c0 ????						; Uses 96 bytes of RAM
     77 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     78 U00c0 ????
     79 U00c0 ????						; Frame counters - 2 bytes
     80 U00c0 ????			   MenuCatFrame 		; animation frame for menu cat
     81 U00c0 ????	       00		      ds	1
     82 U00c1 ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     83 U00c1 ????	       00		      ds	1
     84 U00c2 ????
     85 U00c2 ????						; Pointers - 8 bytes
     86 U00c2 ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     87 U00c2 ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     88 U00c2 ????	       00 00		      ds	2
     89 U00c4 ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     90 U00c4 ????	       00 00		      ds	2
     91 U00c6 ????			   MenuCatMslPtr		; pointer used to access missile graphics
     92 U00c6 ????	       00 00		      ds	2
     93 U00c8 ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     94 U00c8 ????	       00 00		      ds	2
     95 U00ca ????
     96 U00ca ????						; Pre-load variables for within kernel - 4 bytes
     97 U00ca ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     98 U00ca ????	       00		      ds	1
     99 U00cb ????			   RamMenuCatMissile		; missile graphics in menu cat
    100 U00cb ????	       00		      ds	1
    101 U00cc ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
    102 U00cc ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
    103 U00cc ????	       00		      ds	1
    104 U00cd ????			   MenuCatShift
    105 U00cd ????	       00		      ds	1
    106 U00ce ????
    107 U00ce ????						; Data blocks - 82 bytes
    108 U00ce ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
    109 U00ce ????	       00 00 00 00*	      ds	14
    110 U00dc ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
    111 U00dc ????	       00 00 00 00*	      ds	15
    112 U00eb ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
    113 U00eb ????	       00 00 00 00*	      ds	15
    114 U00fa ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
    115 U00fa ????	       00 00 00 00*	      ds	16
    116 U010a ????	       00		      ds	1	; extra byte needed for next data block
    117 U010b ????			   RamBowColorsBk		; rainbow colors
    118 U010b ????	       00 00 00 00*	      ds	20
    119 U011f ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
    120 U011f ????	       00		      ds	1
    121 U0120 ????
    122 U0120 ????						; 18 bytes free
    123 U0120 ????
    124 U0120 ????
    125 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    126 U0120 ????						; Gameplay variables
    127 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    128 U0120 ????						; These variables are only needed in the gameplay routine
    129 U0120 ????						;
    130 U0120 ????						; Uses 63 bytes of RAM
    131 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    132 U0120 ????
    133 U0120 ????				      RORG	RamLocal
    134 U0120 ????
    135 U0120 ????			   BCDScoreAdd		; 2-byte array for the value to be added to the score
    136 U0120 ????	       00 00		      ds	2	; on the next frame (BCD, max of 9,999)
    137 U0122 ????
    138 U0122 ????						; Pointers - 14 bytes
    139 U0122 ????
    140 U0122 ????						; The unused 3 bits of the high byte in each pointer
    141 U0122 ????						; may be used for the speeds of each row
    142 U0122 ????
    143 U0122 ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
    144 U0122 ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
    145 U0122 ????	       00 00		      ds	2
    146 U0124 ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
    147 U0124 ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
    148 U0124 ????	       00 00		      ds	2
    149 U0126 ????			   TartGfxPtr1		; pointer for the tart graphics
    150 U0126 ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
    151 U0126 ????	       00 00		      ds	2
    152 U0128 ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
    153 U0128 ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
    154 U0128 ????	       00 00		      ds	2
    155 U012a ????			   TartGfxPtr2		; pointer for the tart graphics
    156 U012a ????			   HthGfxLPtr		; pointer for left half of the health graphics
    157 U012a ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
    158 U012a ????	       00 00		      ds	2
    159 U012c ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
    160 U012c ????			   HthGfxRPtr		; pointer for right half of the health graphics
    161 U012c ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
    162 U012c ????	       00 00		      ds	2
    163 U012e ????			   ThrobPtr		; pointer for loading the throb colors
    164 U012e ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
    165 U012e ????	       00 00		      ds	2
    166 U0130 ????
    167 U0130 ????						; Variable game colors - 2 bytes
    168 U0130 ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
    169 U0131 ????	       00	   PgBarColor ds	1	; color for full part of progress bar
    170 U0132 ????
    171 U0132 ????						; Variables for the progress bar and health display - 7 bytes
    172 U0132 ????			   Progress		; value for level progress, which can be
    173 U0132 ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
    174 U0133 ????			   Health		; amount of health
    175 U0133 ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
    176 U0134 ????			   ProgressBar		; array of 5 values to be written to the playfield
    177 U0134 ????	       00 00 00 00*	      ds	5	; registers when drawing progress bar
    178 U0139 ????
    179 U0139 ????						; Variables used when drawing the cat - 6 bytes
    180 U0139 ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
    181 U013a ????			   CatPosition		; data describing the cat's position
    182 U013a ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
    183 U013b ????						; bits 4-0 store the number of scanlines to skip after
    184 U013b ????						; top of the cat's row before drawing the cat, from 0-18
    185 U013b ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
    186 U013c ????			   Rainbow		; PF0 value for the rainbow graphics
    187 U013c ????			   JoyCenter		; least significant bit, true if joystick has been returned to center
    188 U013c ????	       00		      ds	1
    189 U013d ????			   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
    190 U013d ????	       00		      ds	1
    191 U013e ????			   PreCatRows		; number of rows to draw before the two "cat" rows
    192 U013e ????	       00		      ds	1
    193 U013f ????
    194 U013f ????						; Variables used for the food items - 21 bytes
    195 U013f ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
    196 U013f ????	       00 00 00 00*	      ds	7	; this frame.
    197 U0146 ????						; Lo nybble either holds the pre-loaded value of the next
    198 U0146 ????						; food item to appear in this row, or temporarily holds the
    199 U0146 ????						; 3rd food item which isn't shown this frame, based on how many
    200 U0146 ????						; food items are visible in this row (2-3), which is determined
    201 U0146 ????						; by the position of the leftmost food item.
    202 U0146 ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
    203 U0146 ????	       00 00 00 00*	      ds	7	; this frame.
    204 U014d ????						; Lo nybble holds the fractional positional value
    205 U014d ????						; for the row's position (0-15).
    206 U014d ????			   FoodPosX		; (range 0-88)
    207 U014d ????	       00 00 00 00*	      ds	7
    208 U0154 ????
    209 U0154 ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    210 U0154 ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    211 U0154 ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    212 U0157 ????			   CatRow2FoodL
    213 U0157 ????	       00		      ds	1
    214 U0158 ????			   CatRow2FoodR
    215 U0158 ????	       00		      ds	1
    216 U0159 ????			   CatRow2Color1
    217 U0159 ????	       00		      ds	1
    218 U015a ????			   CatRow2Color2
    219 U015a ????	       00		      ds	1
    220 U015b ????
    221 U015b ????						; Variables for the throbbing lines' colors - 4 bytes
    222 U015b ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    223 U015e ????						; throbbing lines. The first color is darkest,
    224 U015e ????						; the last is brightest.
    225 U015e ????	       00	   CatThrobPF ds	1
    226 U015f ????
    227 U015f ????						; Temporary variables - 2 bytes
    228 U015f ????	       00	   Temp       ds	1
    229 U0160 ????	       00	   TempLoop   ds	1
    230 U0161 ????
    231 U0161 ????						; 51 bytes free
    232 U0161 ????
    233 U0161 ????						; Variables which can be shared with the stack - 3 bytes
    234 U0161 ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    235 U0162 ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    236 U0163 ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    237 U0164 ????
    238 U0164 ????						; 7 of 15 available temporary RAM bytes used (8 left)
    239 U0164 ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    240 U0164 ????
    241 U0164 ????				      RORG	$100 - 34
    242 U0164 ????			   RamBowColors
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U0164 ????				      include	headers/macros.h
      1 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0164 ????						; Start Bank
      3 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0164 ????						; Takes an integer for the bank
      5 U0164 ????						;
      6 U0164 ????						; Placed at the start of each bank
      7 U0164 ????						; Sets the bank's ROM location, and adds the global jump table
      8 U0164 ????						;
      9 U0164 ????						; Uses 18 bytes of ROM for the jump table
     10 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U0164 ????
     12 U0164 ????				      MAC	start_bank
     13 U0164 ????				      SEG	BANK_{1}
     14 U0164 ????				      ORG	[{1} - 1] * $1000
     15 U0164 ????				      RORG	$1000
     16 U0164 ????				      SUBROUTINE
     17 U0164 ????
     18 U0164 ????			   JmpInitSystem
     19 U0164 ????				      nop	SelectBank1
     20 U0164 ????				      jmp	InitSystem
     21 U0164 ????			   JmpMenuOverScan
     22 U0164 ????				      nop	SelectBank1
     23 U0164 ????				      jmp	MenuOverScan
     24 U0164 ????			   JmpGamePlay
     25 U0164 ????				      nop	SelectBank2
     26 U0164 ????						;	jmp SystemClear
     27 U0164 ????
     28 U0164 ????				      ENDM
     29 U0164 ????
     30 U0164 ????
     31 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     32 U0164 ????						; End Bank
     33 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34 U0164 ????						; Takes an integer for the bank
     35 U0164 ????						;
     36 U0164 ????						; Placed at the end of each bank
     37 U0164 ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     38 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     39 U0164 ????
     40 U0164 ????				      MAC	end_bank
     41 U0164 ????				      ORG	[{1} - 1] * $1000 + $0FFA
     42 U0164 ????
     43 U0164 ????				      .word	JmpInitSystem	; NMI
     44 U0164 ????				      .word	JmpInitSystem	; RESET
     45 U0164 ????				      .word	JmpInitSystem	; IRQ
     46 U0164 ????
     47 U0164 ????				      ENDM
     48 U0164 ????
     49 U0164 ????
     50 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51 U0164 ????						; Set Overscan Timer
     52 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0164 ????						; Sets and starts the timer for the overscan
     54 U0164 ????						;
     55 U0164 ????						; Uses 7 bytes of ROM
     56 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57 U0164 ????
     58 U0164 ????				      MAC	set_oscan_timer
     59 U0164 ????				      SUBROUTINE
     60 U0164 ????
     61 U0164 ????				      ldx	#OSCAN_NTSC
     62 U0164 ????				      lda	#%1000
     63 U0164 ????				      bit	SWCHB
     64 U0164 ????				      bne	.NtscMode
     65 U0164 ????				      ldx	#OSCAN_PAL
     66 U0164 ????			   .NtscMode
     67 U0164 ????
     68 U0164 ????				      sta	WSYNC
     69 U0164 ????				      stx	TIM64T	; set overscan timer
     70 U0164 ????
     71 U0164 ????				      ENDM
     72 U0164 ????
     73 U0164 ????
     74 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75 U0164 ????						; Vertical Sync
     76 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77 U0164 ????						; Performs a vertical sync, and starts the timer for vertical blanking
     78 U0164 ????						; Also clears any values in the HMOVE registers
     79 U0164 ????						;
     80 U0164 ????						; Uses 22 bytes of ROM
     81 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82 U0164 ????
     83 U0164 ????				      MAC	vert_sync
     84 U0164 ????				      SUBROUTINE
     85 U0164 ????
     86 U0164 ????				      ldx	#VBLANK_NTSC	; TIM64T value for NTSC mode
     87 U0164 ????				      lda	#%1000
     88 U0164 ????				      bit	SWCHB
     89 U0164 ????				      bne	.NtscMode
     90 U0164 ????				      ldx	#VBLANK_PAL	; TIM64T value for PAL mode
     91 U0164 ????			   .NtscMode
     92 U0164 ????
     93 U0164 ????				      lda	#%1110
     94 U0164 ????			   .VsyncLoop
     95 U0164 ????				      sta	WSYNC
     96 U0164 ????				      sta	VSYNC
     97 U0164 ????				      stx	TIM64T
     98 U0164 ????				      lsr
     99 U0164 ????				      bne	.VsyncLoop
    100 U0164 ????
    101 U0164 ????				      ENDM
    102 U0164 ????
    103 U0164 ????
    104 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    105 U0164 ????						; Timer Loop
    106 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    107 U0164 ????						; Loops until the timer runs down
    108 U0164 ????						; Used to finish vertical blanking and overscan
    109 U0164 ????						;
    110 U0164 ????						; Uses 5 bytes of ROM
    111 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    112 U0164 ????
    113 U0164 ????				      MAC	timer_loop
    114 U0164 ????				      SUBROUTINE
    115 U0164 ????
    116 U0164 ????			   .TimerLoop
    117 U0164 ????				      lda	INTIM
    118 U0164 ????				      bne	.TimerLoop	; loop until end of vertical blanking
    119 U0164 ????
    120 U0164 ????				      ENDM
    121 U0164 ????
    122 U0164 ????
    123 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    124 U0164 ????						; Throb Rainbow Background
    125 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    126 U0164 ????						; Checks the background color, and if black, the throb color is used instead
    127 U0164 ????						; The throb color must be pre-loaded into the X register
    128 U0164 ????						;
    129 U0164 ????						; Uses 11 bytes of ROM
    130 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131 U0164 ????
    132 U0164 ????				      MAC	throb_rainbow_bk
    133 U0164 ????				      SUBROUTINE
    134 U0164 ????			   .X	      SET	{1}
    135 U0164 ????
    136 U0164 ????				      lda	RamBowColors+.X	; 3
    137 U0164 ????				      bne	.Rainbow	; 5/6
    138 U0164 ????				      stx	COLUBK	; 8
    139 U0164 ????				      beq	.End	; 11
    140 U0164 ????			   .Rainbow
    141 U0164 ????				      sta	COLUBK	; 9
    142 U0164 ????				      nop		; 11
    143 U0164 ????			   .End
    144 U0164 ????				      ENDM
    145 U0164 ????
    146 U0164 ????
    147 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148 U0164 ????						; Throb Rainbow Playfield
    149 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    150 U0164 ????						; Checks the playfield color, and if black, the throb color is used instead
    151 U0164 ????						; The throb color must be pre-loaded into the X register
    152 U0164 ????						;
    153 U0164 ????						; Uses 11 bytes of ROM
    154 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    155 U0164 ????
    156 U0164 ????				      MAC	throb_rainbow_pf
    157 U0164 ????				      SUBROUTINE
    158 U0164 ????			   .X	      SET	{1}
    159 U0164 ????
    160 U0164 ????				      lda	RamBowColors+.X	; 3
    161 U0164 ????				      bne	.Rainbow	; 5/6
    162 U0164 ????				      stx	COLUPF	; 8
    163 U0164 ????				      beq	.End	; 11
    164 U0164 ????			   .Rainbow
    165 U0164 ????				      sta	COLUPF	; 9
    166 U0164 ????				      nop		; 11
    167 U0164 ????			   .End
    168 U0164 ????				      ENDM
    169 U0164 ????
    170 U0164 ????
    171 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U0164 ????						; Jump to Next Page
    173 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174 U0164 ????						; Jumps to the beginning of the next page, padding the end of the current one
    175 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176 U0164 ????
    177 U0164 ????				      MAC	next_page
    178 U0164 ????				      SUBROUTINE
    179 U0164 ????
    180 U0164 ????				      jmp	.NextPage
    181 U0164 ????				      ALIGN	$100
    182 U0164 ????			   .NextPage
    183 U0164 ????
    184 U0164 ????				      ENDM
    185 U0164 ????
    186 U0164 ????
    187 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    188 U0164 ????						; Skip Word
    189 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    190 U0164 ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    191 U0164 ????						; skipping the next two bytes of ROM.
    192 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    193 U0164 ????
    194 U0164 ????				      MAC	skip_word
    195 U0164 ????				      HEX	0C
    196 U0164 ????				      ENDM
------- FILE main.asm
     18 U0164 ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U0164 ????				      include	bank1.asm
      1 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0164 ????						; Bank 1
      3 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0164 ????
      0 U0164 ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 0f 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c 18 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c		       0c f7 1f 	      nop	SelectBank2
     14  000f
     15  000f
      6  000f
------- FILE init.asm LEVEL 3 PASS 2
      0  000f					      include	init.asm
      1  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  000f							; Clear system registers and RAM
      3  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  000f							; Uses 9 bytes of ROM
      5  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  000f
      7  000f				   InitSystem
      8  000f		       d8		      cld
      9  0010		       ab 00		      lxa	#0
     10  0012		       a8		      tay
     11  0013				   ClearStack
     12  0013		       ca		      dex
     13  0014		       9a		      txs
     14  0015		       48		      pha
     15  0016		       d0 fb		      bne	ClearStack
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  0018					      include	bank1/code/oscan_logic.asm
      1  0018							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0018							; Overscan logic for menu
      3  0018							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0018
      5  0018				   MenuOverScan
      0  0018					      SET_OSCAN_TIMER
      1  0018					      SUBROUTINE
      2  0018
      3  0018		       a2 24		      ldx	#OSCAN_NTSC
      4  001a		       a9 08		      lda	#%1000
      5  001c		       2c 82 02 	      bit	SWCHB
      6  001f		       d0 02		      bne	.NtscMode
      7  0021		       a2 40		      ldx	#OSCAN_PAL
      8  0023				   .NtscMode
      9  0023
     10  0023		       85 02		      sta	WSYNC
     11  0025		       8e 96 02 	      stx	TIM64T
     12  0028
      7  0028
      8  0028		       a9 01		      lda	#1	; temp menu bypass
      9  002a		       2c 82 02 	      bit	SWCHB
     10  002d		       d0 03		      bne	.NoResetPress
     11  002f		       4c 0c 10 	      jmp	JmpGamePlay
     12  0032				   .NoResetPress
     13  0032
     14  0032		       30 18		      bmi	.NoFrameInc
     15  0034
     16  0034		       e6 80		      inc	Frame	; next frame
     17  0036		       a5 80		      lda	Frame
     18  0038		       29 03		      and	#%00000011	; update animation every 4 frames
     19  003a		       d0 10		      bne	.NoFrameInc
     20  003c
     21  003c		       2c 82 02 	      bit	SWCHB
     22  003f		       70 0b		      bvs	.NoFrameInc
     23  0041
     24  0041		       a6 8e		      ldx	MenuCatFrame
     25  0043		       e8		      inx
     26  0044		       e0 06		      cpx	#6
     27  0046		       d0 02		      bne	.NoReset
     28  0048		       a2 00		      ldx	#0
     29  004a				   .NoReset
     30  004a		       86 8e		      stx	MenuCatFrame
     31  004c				   .NoFrameInc
     32  004c
      0  004c					      TIMER_LOOP
      1  004c					      SUBROUTINE
      2  004c
      3  004c				   .TimerLoop
      4  004c		       ad 84 02 	      lda	INTIM
      5  004f		       d0 fb		      bne	.TimerLoop
      6  0051
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  0051					      include	bank1/code/vblank_logic.asm
      1  0051							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0051							; Vertical Sync and Logic
      3  0051							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0051
      0  0051					      VERT_SYNC		; 11
      1  0051					      SUBROUTINE
      2  0051
      3  0051		       a2 2b		      ldx	#VBLANK_NTSC
      4  0053		       a9 08		      lda	#%1000
      5  0055		       2c 82 02 	      bit	SWCHB
      6  0058		       d0 02		      bne	.NtscMode
      7  005a		       a2 4a		      ldx	#VBLANK_PAL
      8  005c				   .NtscMode
      9  005c
     10  005c		       a9 0e		      lda	#%1110
     11  005e				   .VsyncLoop
     12  005e		       85 02		      sta	WSYNC
     13  0060		       85 00		      sta	VSYNC
     14  0062		       8e 96 02 	      stx	TIM64T
     15  0065		       4a		      lsr
     16  0066		       d0 f6		      bne	.VsyncLoop
     17  0068
      6  0068
      7  0068		       a9 40		      lda	#$40	; 13
      8  006a		       85 24		      sta	HMBL	; 16
      9  006c		       a9 d0		      lda	#$D0	; 18
     10  006e		       85 20		      sta	HMP0	; 21
     11  0070		       a9 e0		      lda	#$E0	; 23
     12  0072		       85 23		      sta	HMM1	; 26
     13  0074		       a9 70		      lda	#$70	; 28
     14  0076		       85 22		      sta	HMM0	; 31
     15  0078		       a9 60		      lda	#$60	; 33
     16  007a		       85 14		      sta	RESBL	; 36
     17  007c		       85 21		      sta	HMP1	; 39
     18  007e		       8d 10 00 	      sta.w	RESP0	; 43
     19  0081		       85 13		      sta	RESM1	; 46
     20  0083		       85 12		      sta	RESM0	; 49
     21  0085		       85 11		      sta	RESP1	; 52
     22  0087		       85 02		      sta	WSYNC
     23  0089		       85 2a		      sta	HMOVE
     24  008b
     25  008b		       a9 07		      lda	#QUAD_SIZE
     26  008d		       85 04		      sta	NUSIZ0
     27  008f		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     28  0091		       85 05		      sta	NUSIZ1
     29  0093		       a9 31		      lda	#$31
     30  0095		       85 0a		      sta	CTRLPF
     31  0097		       85 25		      sta	VDELP0
     32  0099
     33  0099		       85 02		      sta	WSYNC
     34  009b		       85 2b		      sta	HMCLR
     35  009d
     36  009d		       a9 60		      lda	#$60
     37  009f		       85 20		      sta	HMP0
     38  00a1		       a9 e0		      lda	#$E0
     39  00a3		       85 22		      sta	HMM0
     40  00a5		       85 21		      sta	HMP1
     41  00a7		       85 23		      sta	HMM1
     42  00a9		       a9 80		      lda	#$80
     43  00ab		       85 24		      sta	HMBL
     44  00ad
     45  00ad		       a2 ec		      ldx	#RamBowColorsBk+19
     46  00af		       a5 80		      lda	Frame
     47  00b1		       29 08		      and	#%00001000
     48  00b3		       d0 0f		      bne	.Rainbow1
     49  00b5		       a9 e0		      lda	#%11100000
     50  00b7		       85 0d		      sta	PF0
     51  00b9		       a9 c1		      lda	#%11000001
     52  00bb		       85 0e		      sta	PF1
     53  00bd		       a9 ea		      lda	#RamBowColorsBk+17
     54  00bf		       85 96		      sta	BowColorsPfPtr
     55  00c1		       4c d1 10 	      jmp	.Rainbow2
     56  00c4				   .Rainbow1
     57  00c4		       ca		      dex
     58  00c5		       a9 c0		      lda	#%11000000
     59  00c7		       85 0d		      sta	PF0
     60  00c9		       a9 e0		      lda	#%11100000
     61  00cb		       85 0e		      sta	PF1
     62  00cd		       a9 e8		      lda	#RamBowColorsBk+15
     63  00cf		       85 96		      sta	BowColorsPfPtr
     64  00d1				   .Rainbow2
     65  00d1		       a9 00		      lda	#0
     66  00d3		       85 97		      sta	BowColorsPfPtr+1
     67  00d5
     68  00d5		       a5 ed		      lda	MenuBgColor
     69  00d7		       85 d8		      sta	RamBowColorsBk-1
     70  00d9		       85 d9		      sta	RamBowColorsBk
     71  00db		       85 da		      sta	RamBowColorsBk+1
     72  00dd		       85 eb		      sta	RamBowColorsBk+18
     73  00df		       85 ec		      sta	RamBowColorsBk+19
     74  00e1		       85 ed		      sta	RamBowColorsBk+20
     75  00e3
     76  00e3		       a5 8e		      lda	MenuCatFrame
     77  00e5		       c9 02		      cmp	#2
     78  00e7		       10 01		      bpl	.Jmp2
     79  00e9		       ca		      dex
     80  00ea				   .Jmp2
     81  00ea		       9a		      txs
     82  00eb
     83  00eb		       a2 00		      ldx	#0
     84  00ed		       a9 08		      lda	#%1000
     85  00ef		       2c 82 02 	      bit	SWCHB
     86  00f2		       d0 02		      bne	.NtscMode
     87  00f4		       a2 08		      ldx	#8
     88  00f6				   .NtscMode
     89  00f6
     90  00f6		       bd b9 17 	      lda	MenuColors,x
     91  00f9		       85 ed		      sta	MenuBgColor
     92  00fb		       e8		      inx
     93  00fc		       bd b9 17 	      lda	MenuColors,x
     94  00ff		       85 8c		      sta	CatTartColor
     95  0101
     96  0101		       a0 06		      ldy	#6
     97  0103				   .SetBowColors
     98  0103		       bd ba 17 	      lda	MenuColors+1,x
     99  0106		       48		      pha
    100  0107		       48		      pha
    101  0108		       48		      pha
    102  0109		       e8		      inx
    103  010a		       88		      dey
    104  010b		       d0 f6		      bne	.SetBowColors
    105  010d
    106  010d		       a2 d7		      ldx	#RamMenuCatGfxR+15
    107  010f		       9a		      txs
    108  0110
    109  0110							; push graphics for GRP1
    110  0110		       a9 16		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
    111  0112		       85 91		      sta	MenuCatRamPtr+1	; and set pointer to this page
    112  0114		       a6 8e		      ldx	MenuCatFrame	; get animation frame
    113  0116		       bd ad 17 	      lda	MenuCatOffsetGfx,x	; get offset within page
    114  0119		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    115  011b
    116  011b		       a0 0d		      ldy	#13
    117  011d				   .LoopGfxR
    118  011d		       b1 90		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    119  011f		       48		      pha		; and push to RAM
    120  0120		       88		      dey
    121  0121		       10 fa		      bpl	.LoopGfxR
    122  0123
    123  0123		       8a		      txa		; get animation frame
    124  0124		       0a		      asl		; multiply by 2
    125  0125		       a8		      tay
    126  0126		       b9 54 17 	      lda	MenuCatLowGfxR,y
    127  0129		       48		      pha
    128  012a		       c8		      iny
    129  012b		       b9 54 17 	      lda	MenuCatLowGfxR,y
    130  012e		       48		      pha
    131  012f
    132  012f							; push graphics for right copies of PF2
    133  012f		       bd b3 17 	      lda	MenuCatOffsetPf,x
    134  0132		       85 90		      sta	MenuCatRamPtr
    135  0134
    136  0134		       a0 0c		      ldy	#12
    137  0136				   .LoopPfR
    138  0136		       b1 90		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    139  0138		       48		      pha		; and push to RAM
    140  0139		       88		      dey
    141  013a		       10 fa		      bpl	.LoopPfR
    142  013c
    143  013c		       8a		      txa		; get animation frame
    144  013d		       0a		      asl		; multiply by 2
    145  013e		       a8		      tay
    146  013f		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    147  0142		       48		      pha
    148  0143		       c8		      iny
    149  0144		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    150  0147		       48		      pha
    151  0148		       85 9b		      sta	MenuCatShift	; use highest bit for cat face shift
    152  014a
    153  014a							; push graphics for left copies of PF2
    154  014a		       8a		      txa		; get animation frame
    155  014b		       0a		      asl
    156  014c		       0a		      asl
    157  014d		       0a		      asl
    158  014e		       38		      sec
    159  014f		       e5 8e		      sbc	MenuCatFrame
    160  0151		       0a		      asl		; multiply by 14 (clears carry flag)
    161  0152		       85 8f		      sta	MenuCatFrameX14	; save to reuse later
    162  0154		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    163  0156		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    164  0158
    165  0158		       a0 0e		      ldy	#14
    166  015a				   .LoopPfL
    167  015a		       b1 90		      lda	(MenuCatRamPtr),y
    168  015c		       48		      pha
    169  015d		       88		      dey
    170  015e		       10 fa		      bpl	.LoopPfL
    171  0160
    172  0160							; push graphics for GRP0
    173  0160		       a9 17		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    174  0162		       85 91		      sta	MenuCatRamPtr+1	; and set pointer to this page
    175  0164		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    176  0166		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    177  0168
    178  0168		       a0 0d		      ldy	#13
    179  016a				   .LoopGfxL
    180  016a		       b1 90		      lda	(MenuCatRamPtr),y
    181  016c		       48		      pha
    182  016d		       88		      dey
    183  016e		       10 fa		      bpl	.LoopGfxL
    184  0170
    185  0170							; prepare graphics pointers for kernel
    186  0170		       a9 16		      lda	#>MenuCatGfxPage1
    187  0172		       85 93		      sta	MenuCatHmvPtrP+1
    188  0174		       85 95		      sta	MenuCatMslPtr+1
    189  0176		       a9 17		      lda	#>MenuCatGfxPage2
    190  0178		       85 91		      sta	MenuCatHmvPtrM+1
    191  017a
    192  017a		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    193  017c		       e0 05		      cpx	#5
    194  017e		       d0 03		      bne	.NotFrame5
    195  0180		       38		      sec
    196  0181		       e9 0e		      sbc	#14
    197  0183				   .NotFrame5
    198  0183		       18		      clc
    199  0184		       69 ad		      adc	#<MenuCatHmoveP
    200  0186		       85 92		      sta	MenuCatHmvPtrP
    201  0188		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    202  018a		       38		      sec
    203  018b		       e5 8e		      sbc	MenuCatFrame	; adjust to times 13
    204  018d		       e0 00		      cpx	#0
    205  018f		       f0 03		      beq	.Frame0
    206  0191		       38		      sec
    207  0192		       e9 0d		      sbc	#13
    208  0194				   .Frame0
    209  0194		       18		      clc
    210  0195		       69 6c		      adc	#<MenuCatHmoveM
    211  0197		       85 90		      sta	MenuCatHmvPtrM
    212  0199		       a0 f3		      ldy	#<MenuCatMslGfx
    213  019b		       e0 05		      cpx	#5
    214  019d		       d0 01		      bne	.Not5
    215  019f		       88		      dey
    216  01a0				   .Not5
    217  01a0		       84 94		      sty	MenuCatMslPtr
    218  01a2
      0  01a2					      TIMER_LOOP
      1  01a2					      SUBROUTINE
      2  01a2
      3  01a2				   .TimerLoop
      4  01a2		       ad 84 02 	      lda	INTIM
      5  01a5		       d0 fb		      bne	.TimerLoop
      6  01a7
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  01a7					      include	bank1/code/kernel.asm
      1  01a7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01a7							; Kernel
      3  01a7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01a7
      5  01a7		       a9 00		      lda	#0
      6  01a9		       85 02		      sta	WSYNC
      7  01ab		       85 01		      sta	VBLANK	; enable display
      8  01ad
      9  01ad		       a0 3f		      ldy	#63
     10  01af				   .Loop1
     11  01af		       88		      dey
     12  01b0		       85 02		      sta	WSYNC
     13  01b2		       d0 fb		      bne	.Loop1
     14  01b4
     15  01b4		       a5 8e		      lda	MenuCatFrame
     16  01b6		       c9 02		      cmp	#2
     17  01b8		       30 06		      bmi	.HiCat
     18  01ba		       85 02		      sta	WSYNC
     19  01bc		       85 02		      sta	WSYNC
     20  01be		       85 02		      sta	WSYNC
     21  01c0		       85 02	   .HiCat     sta	WSYNC
     22  01c2		       ea		      nop		; 02
     23  01c3
     24  01c3		       4c 00 12 	      jmp	.Align1
     25  0200		       00 00 00 00*.Align1    ALIGN	$100
     26  0200
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0200					      include	bank1/code/menucat1_4.asm
      1  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0200							; Menu Cat Kernel (Blocks 1-3)
      3  0200							;
      4  0200							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0200							;
      6  0200							; 70 bytes
      7  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0200
      9  0200							; 16 bytes
     10  0200		       85 02		      sta	WSYNC	;	2
     11  0202		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0204		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0207		       a0 0b		      ldy	#11	; 08	2
     14  0209		       88	   .LP	      dey		; 59	1
     15  020a		       c0 03		      cpy	#3	; 61	2
     16  020c		       d0 fb		      bne	.LP	; 63	2
      0  020e					      SLEEP	2	; 65	1
      1  020e				   .CYCLES    SET	2
      2  020e
      3  020e				  -	      IF	.CYCLES < 2
      4  020e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  020e				  -	      ERR
      6  020e					      ENDIF
      7  020e
      8  020e				  -	      IF	.CYCLES & 1
      9  020e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  020e				  -	      nop	0
     11  020e				  -	      ELSE
     12  020e				  -	      bit	VSYNC
     13  020e				  -	      ENDIF
     14  020e				  -.CYCLES    SET	.CYCLES - 3
     15  020e					      ENDIF
     16  020e
     17  020e					      REPEAT	.CYCLES / 2
     18  020e		       ea		      nop
     19  020f					      REPEND
     18  020f		       4c 1c 12 	      jmp	.Enter1_3	; 68	2
     19  0212
     20  0212				   .Loop
     21  0212
     22  0212		       85 09		      sta	COLUBK	; 56	2
     23  0214		       85 02		      sta	WSYNC	; 00	2
     24  0216
      0  0216					      SLEEP	4	; 04	2
      1  0216				   .CYCLES    SET	4
      2  0216
      3  0216				  -	      IF	.CYCLES < 2
      4  0216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0216				  -	      ERR
      6  0216					      ENDIF
      7  0216
      8  0216				  -	      IF	.CYCLES & 1
      9  0216				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0216				  -	      nop	0
     11  0216				  -	      ELSE
     12  0216				  -	      bit	VSYNC
     13  0216				  -	      ENDIF
     14  0216				  -.CYCLES    SET	.CYCLES - 3
     15  0216					      ENDIF
     16  0216
     17  0216					      REPEAT	.CYCLES / 2
     18  0216		       ea		      nop
     17  0216					      REPEND
     18  0217		       ea		      nop
     19  0218					      REPEND
     26  0218		       d0 0d		      bne	.Skip	; 07	2
     27  021a
     28  021a				   MenuCatKernel1_3
     29  021a
     30  021a							; 10 bytes
      0  021a					      SLEEP	3	; 68	2
      1  021a				   .CYCLES    SET	3
      2  021a
      3  021a				  -	      IF	.CYCLES < 2
      4  021a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  021a				  -	      ERR
      6  021a					      ENDIF
      7  021a
      8  021a					      IF	.CYCLES & 1
      9  021a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  021a		       04 00		      nop	0
     11  021c				  -	      ELSE
     12  021c				  -	      bit	VSYNC
     13  021c					      ENDIF
     14  021c				   .CYCLES    SET	.CYCLES - 3
     15  021c					      ENDIF
     16  021c
     17  021c				  -	      REPEAT	.CYCLES / 2
     18  021c				  -	      nop
     19  021c					      REPEND
     32  021c				   .Enter1_3
     33  021c		       84 1f		      sty	ENABL	; 71	2
     34  021e		       a2 03		      ldx	#3	; 73	2
     35  0220		       85 2a		      sta	HMOVE	; 00	2
     36  0222
     37  0222							; 4 bytes
     38  0222		       b9 31 16 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0225		       85 1b		      sta	GRP0	; 07	2
     40  0227
     41  0227				   .Skip
     42  0227
     43  0227							; 8 bytes
     44  0227		       b9 e9 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  022a		       85 09		      sta	COLUBK	; 14	2
     46  022c		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     47  022e		       85 08		      sta	COLUPF	; 22	2
     48  0230
     49  0230							; 8 bytes
     50  0230		       b9 2d 16 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0233		       85 1c		      sta	GRP1	; 29	2
     52  0235		       b9 00 16 	      lda	MenuCatTopPf,y	; 33	2
     53  0238		       85 0f		      sta	PF2	; 36	2
     54  023a
     55  023a							; 17 bytes
     56  023a		       a5 8c		      lda	CatTartColor	; 39	2
     57  023c		       85 09		      sta	COLUBK	; 42	2
     58  023e		       a5 ed		      lda	MenuBgColor	; 45	2
     59  0240		       85 08		      sta	COLUPF	; 48	2
     60  0242		       ca		      dex		; 50	1
     61  0243		       d0 cd		      bne	.Loop	; 53/52	2
     62  0245		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0247							; 54	2
     64  0247		       85 09		      sta	COLUBK	; 57	2
     65  0249		       86 04		      stx	NUSIZ0	; 60	2
     66  024b
     67  024b							; 5 bytes
     68  024b		       88		      dey		; 62	1
     69  024c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  024e
     71  024e
     72  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  024e							; Menu Cat Kernel (Block 4)
     74  024e							;
     75  024e							; This kernel draws block 4 of the cat in the menu display.
     76  024e							;
     77  024e							; ? bytes
     78  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  024e
     80  024e		       a2 03		      ldx	#3	; 66	2
     81  0250
     82  0250		       ad 31 16 	      lda	MenuCatTopGfxL	; 69	2
     83  0253		       85 1b		      sta	GRP0	; 72	2
     84  0255		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0258
      0  0258					      SLEEP	3	; 03	2
      1  0258				   .CYCLES    SET	3
      2  0258
      3  0258				  -	      IF	.CYCLES < 2
      4  0258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0258				  -	      ERR
      6  0258					      ENDIF
      7  0258
      8  0258					      IF	.CYCLES & 1
      9  0258					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0258		       04 00		      nop	0
     11  025a				  -	      ELSE
     12  025a				  -	      bit	VSYNC
     13  025a					      ENDIF
     14  025a				   .CYCLES    SET	.CYCLES - 3
     15  025a					      ENDIF
     16  025a
     17  025a				  -	      REPEAT	.CYCLES / 2
     18  025a				  -	      nop
     19  025a					      REPEND
     87  025a				   .Loop4
     88  025a		       a5 e9		      lda	RamBowColorsBk+16	; 06	2
     89  025c		       85 09		      sta	COLUBK	; 09	2
     90  025e		       b1 96		      lda	(BowColorsPfPtr),y	; 14	2
     91  0260		       85 08		      sta	COLUPF	; 17	2
     92  0262
     93  0262		       ad 2d 16 	      lda	MenuCatTopGfxR	; 20	2
     94  0265		       85 1c		      sta	GRP1	; 23	2
     95  0267
     96  0267		       86 20		      stx	HMP0	; 26	2
     97  0269		       86 24		      stx	HMBL	; 29	2
     98  026b
      0  026b					      SLEEP	6	; 36	4
      1  026b				   .CYCLES    SET	6
      2  026b
      3  026b				  -	      IF	.CYCLES < 2
      4  026b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  026b				  -	      ERR
      6  026b					      ENDIF
      7  026b
      8  026b				  -	      IF	.CYCLES & 1
      9  026b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  026b				  -	      nop	0
     11  026b				  -	      ELSE
     12  026b				  -	      bit	VSYNC
     13  026b				  -	      ENDIF
     14  026b				  -.CYCLES    SET	.CYCLES - 3
     15  026b					      ENDIF
     16  026b
     17  026b					      REPEAT	.CYCLES / 2
     18  026b		       ea		      nop
     17  026b					      REPEND
     18  026c		       ea		      nop
     17  026c					      REPEND
     18  026d		       ea		      nop
     19  026e					      REPEND
    100  026e
    101  026e		       a5 8c		      lda	CatTartColor	; 39	2
    102  0270		       85 09		      sta	COLUBK	; 42	2
    103  0272		       a5 ed		      lda	MenuBgColor	; 45	2
    104  0274		       85 08		      sta	COLUPF	; 48	2
    105  0276
    106  0276		       38		      sec		; 50	1
    107  0277		       ca		      dex		; 52	1
    108  0278
    109  0278		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  027b
    111  027b		       f0 04		      beq	.Exit4	; 59/58	2
    112  027d		       85 02		      sta	WSYNC	; 00	2
    113  027f		       d0 d9		      bne	.Loop4	; 03	2
    114  0281
    115  0281				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0281					      include	bank1/code/menucat5.asm
      1  0281							;
      2  0281
      3  0281		       a5 9b		      lda	MenuCatShift	; 62	2
      4  0283		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0285					      SKIP_WORD		; 68	1
      1  0285		       0c		      HEX	0C
      6  0286				   .ClearHmove
      7  0286		       85 2b		      sta	HMCLR	; 68	2
      8  0288
      9  0288		       a5 96		      lda	BowColorsPfPtr	; 71	2
     10  028a		       e9 0d		      sbc	#13	; 73	2
     11  028c		       85 96		      sta	BowColorsPfPtr	; 00	2
     12  028e
     13  028e		       85 2a		      sta	HMOVE	; 03	2
     14  0290		       85 96		      sta	BowColorsPfPtr	; 06	2
     15  0292		       a0 0c		      ldy	#12	; 08	2
     16  0294
     17  0294							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0294
     19  0294							; 10 bytes
     20  0294		       a5 e8		      lda	RamBowColorsBk+15	; 11	2
     21  0296		       85 09		      sta	COLUBK	; 14	2
     22  0298		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     23  029a		       85 08		      sta	COLUPF	; 22	2
     24  029c		       85 9a		      sta	RainbowColorPf	; 25	2
     25  029e
     26  029e							; 7 bytes
     27  029e		       a5 d7		      lda	RamMenuCatGfxR+15	; 28	2
     28  02a0		       85 1c		      sta	GRP1	; 31	2
     29  02a2		       4a		      lsr		; 33	1
     30  02a3		       85 1d		      sta	ENAM0	; 36	2
     31  02a5
     32  02a5							; 4 bytes
     33  02a5		       a5 8c		      lda	CatTartColor	; 39	2
     34  02a7		       85 09		      sta	COLUBK	; 42	2
     35  02a9
     36  02a9							; 5 bytes
     37  02a9		       a5 d6		      lda	RamMenuCatGfxR+14	; 45	2
     38  02ab		       85 98		      sta	RamMenuCatGfx	; 48	2
     39  02ad
     40  02ad							; 10 bytes
     41  02ad		       a5 ed		      lda	MenuBgColor	; 51	2
     42  02af		       85 08		      sta	COLUPF	; 54	2
     43  02b1		       85 09		      sta	COLUBK	; 57	2
     44  02b3		       85 2b		      sta	HMCLR	; 60	2
     45  02b5		       85 02		      sta	WSYNC	; 00	2
     46  02b7
     47  02b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  02b7
     49  02b7							; 8 bytes
     50  02b7		       a5 e8		      lda	RamBowColorsBk+15	; 03	2
     51  02b9		       85 09		      sta	COLUBK	; 06	2
     52  02bb		       a5 9a		      lda	RainbowColorPf	; 09	2
     53  02bd		       85 08		      sta	COLUPF	; 12	2
     54  02bf
     55  02bf							; 8 bytes
     56  02bf		       b1 90		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  02c1		       85 22		      sta	HMM0	; 20	2
     58  02c3		       0a		      asl		; 22	1
     59  02c4		       0a		      asl		; 24	1
     60  02c5		       0a		      asl		; 26	1
     61  02c6		       0a		      asl		; 28	1
     62  02c7		       85 23		      sta	HMM1	; 31
     63  02c9
     64  02c9							; 11 bytes
      0  02c9					      SLEEP	2	; 33	3
      1  02c9				   .CYCLES    SET	2
      2  02c9
      3  02c9				  -	      IF	.CYCLES < 2
      4  02c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02c9				  -	      ERR
      6  02c9					      ENDIF
      7  02c9
      8  02c9				  -	      IF	.CYCLES & 1
      9  02c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02c9				  -	      nop	0
     11  02c9				  -	      ELSE
     12  02c9				  -	      bit	VSYNC
     13  02c9				  -	      ENDIF
     14  02c9				  -.CYCLES    SET	.CYCLES - 3
     15  02c9					      ENDIF
     16  02c9
     17  02c9					      REPEAT	.CYCLES / 2
     18  02c9		       ea		      nop
     19  02ca					      REPEND
     66  02ca		       a5 8c		      lda	CatTartColor	; 36	2
     67  02cc		       85 09		      sta	COLUBK	; 39	2
     68  02ce
     69  02ce		       b1 94		      lda	(MenuCatMslPtr),y	; 44	2
     70  02d0		       85 99		      sta	RamMenuCatMissile	; 47	2
     71  02d2
     72  02d2							; 8 bytes
     73  02d2		       a5 ed		      lda	MenuBgColor	; 50	2
     74  02d4		       85 08		      sta	COLUPF	; 53	2
     75  02d6		       85 09		      sta	COLUBK	; 56	2
     76  02d8		       85 02		      sta	WSYNC	; 00	2
     77  02da
     78  02da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  02da
     80  02da							; 8 bytes
     81  02da		       a5 e8		      lda	RamBowColorsBk+15	; 03	2
     82  02dc		       85 09		      sta	COLUBK	; 06	2
     83  02de		       a5 9a		      lda	RainbowColorPf	; 09	2
     84  02e0		       85 08		      sta	COLUPF	; 12	2
     85  02e2
     86  02e2							; 11 bytes
      0  02e2					      SLEEP	20	; 32	10
      1  02e2				   .CYCLES    SET	20
      2  02e2
      3  02e2				  -	      IF	.CYCLES < 2
      4  02e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02e2				  -	      ERR
      6  02e2					      ENDIF
      7  02e2
      8  02e2				  -	      IF	.CYCLES & 1
      9  02e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02e2				  -	      nop	0
     11  02e2				  -	      ELSE
     12  02e2				  -	      bit	VSYNC
     13  02e2				  -	      ENDIF
     14  02e2				  -.CYCLES    SET	.CYCLES - 3
     15  02e2					      ENDIF
     16  02e2
     17  02e2					      REPEAT	.CYCLES / 2
     18  02e2		       ea		      nop
     17  02e2					      REPEND
     18  02e3		       ea		      nop
     17  02e3					      REPEND
     18  02e4		       ea		      nop
     17  02e4					      REPEND
     18  02e5		       ea		      nop
     17  02e5					      REPEND
     18  02e6		       ea		      nop
     17  02e6					      REPEND
     18  02e7		       ea		      nop
     17  02e7					      REPEND
     18  02e8		       ea		      nop
     17  02e8					      REPEND
     18  02e9		       ea		      nop
     17  02e9					      REPEND
     18  02ea		       ea		      nop
     17  02ea					      REPEND
     18  02eb		       ea		      nop
     19  02ec					      REPEND
     88  02ec		       88		      dey		; 34	1
     89  02ed
     90  02ed							; 6 bytes
     91  02ed		       a5 8c		      lda	CatTartColor	; 37	2
     92  02ef		       85 09		      sta	COLUBK	; 40	2
     93  02f1
     94  02f1							; 12 bytes
     95  02f1		       a2 ff		      ldx	#$FF	; 42	2
     96  02f3		       a5 ed		      lda	MenuBgColor	; 45	3
     97  02f5		       85 08		      sta	COLUPF	; 48	2
     98  02f7		       86 1f		      stx	ENABL	; 51	2
     99  02f9		       86 1e		      stx	ENAM1	; 54	2
    100  02fb		       85 09		      sta	COLUBK	; 57	2
    101  02fd		       4c 1a 13 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0300					      include	bank1/code/menucat6_17.asm
      1  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0300							; Menu Cat Kernel (Blocks 6-17)
      3  0300							;
      4  0300							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0300							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0300							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0300							;
      8  0300							; 179 bytes
      9  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0300
     11  0300					      ALIGN	$100
     12  0300
     13  0300				   MenuCatKernel6_17
     14  0300
     15  0300							; 24 bytes
     16  0300		       b9 ae 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0303		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0305		       a9 08		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0307		       a6 8c		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0309		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  030b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  030e		       b9 bd 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0311		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0313		       a5 ed		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0315		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0317		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  031a
     28  031a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  031a
     30  031a				   .Enter6_17		; enter sandman
     31  031a
     32  031a							; 14 bytes
     33  031a		       a5 98		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  031c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  031e		       a5 99		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0320		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0322		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0324		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0326		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0328
     41  0328							; 12 bytes
     42  0328		       b9 dc 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  032b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  032d		       85 9a		      sta	RainbowColorBk	; 14	2 - save for later
     45  032f		       b3 96		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0331		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0333		       9a		      txs		; 24	1 - save for later
     48  0334
     49  0334							; 26 bytes
     50  0334		       b9 ad 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0337		       85 0f		      sta	PF2	; 31	2
     52  0339		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     53  033b		       a6 8c		      ldx	CatTartColor	; 36	2
     54  033d		       85 09		      sta	COLUBK	; 39	2
     55  033f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0342		       b9 bc 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0345		       85 0f		      sta	PF2	; 50	2
     58  0347		       a5 ed		      lda	MenuBgColor	; 53	2
     59  0349		       85 08		      sta	COLUPF	; 56	2
     60  034b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  034e
     62  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  034e
     64  034e							; 10 bytes
     65  034e		       b1 90		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0350		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0352		       0a		      asl		; 70	1
     68  0353		       0a		      asl		; 72	1
     69  0354		       0a		      asl		; 74	1
     70  0355		       0a		      asl		; 00	1
     71  0356		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0358
     73  0358							; 7 bytes
     74  0358		       a5 9a		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  035a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  035c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  035d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  035f
     79  035f							; 5 bytes
     80  035f		       b1 92		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0361		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0363		       ea		      nop		; 24	1
     83  0364
     84  0364							; 26 bytes
     85  0364		       b9 ad 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0367		       85 0f		      sta	PF2	; 31	2
     87  0369		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     88  036b		       a6 8c		      ldx	CatTartColor	; 36	2
     89  036d		       85 09		      sta	COLUBK	; 39	2
     90  036f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0372		       b9 bc 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0375		       85 0f		      sta	PF2	; 50	2
     93  0377		       a5 ed		      lda	MenuBgColor	; 53	2
     94  0379		       85 08		      sta	COLUPF	; 56	2
     95  037b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  037e
     97  037e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  037e
     99  037e							; 14 bytes
    100  037e		       b9 9e 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0381		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0383		       b9 ca 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0386		       85 98		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0388		       b1 94		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  038a		       85 99		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  038c
    107  038c							; 7 bytes
    108  038c		       a5 9a		      lda	RainbowColorBk	; 09	2
    109  038e		       85 09		      sta	COLUBK	; 12	2
    110  0390		       ba		      tsx		; 14	1
    111  0391		       86 08		      stx	COLUPF	; 17	2
    112  0393
    113  0393							; 6 bytes
    114  0393		       88		      dey		; 19	1 - dec y for next kernel block
    115  0394		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0396		       4c 00 13 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0399
    118  0399				   .Exit
    119  0399
    120  0399							; 25 bytes
    121  0399		       4c 00 14 	      jmp	.Align6_17	; 25	2
    122  039c
    123  0400		       00 00 00 00*	      ALIGN	$100
    124  0400				   .Align6_17
    125  0400
    126  0400		       a5 ad		      lda	RamMenuCatPfL+3	; 28	2
    127  0402		       85 0f		      sta	PF2	; 31	2
    128  0404		       a9 08		      lda	#COL_CAT_FACE	; 33	2
    129  0406		       a6 8c		      ldx	CatTartColor	; 36	2
    130  0408		       85 09		      sta	COLUBK	; 39	2
    131  040a		       ea		      nop		; 41	1
    132  040b		       86 08		      stx	COLUPF	; 44	2
    133  040d		       a5 bc		      lda	RamMenuCatPfR+3	; 47	2
    134  040f		       85 0f		      sta	PF2	; 50	2
    135  0411		       a5 ed		      lda	MenuBgColor	; 53	2
    136  0413		       85 08		      sta	COLUPF	; 56	2
    137  0415		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0417					      include	bank1/code/menucat18.asm
      1  0417							; 59
      2  0417
      3  0417		       84 1d		      sty	ENAM0	; 62	2
      4  0419		       a5 98		      lda	RamMenuCatGfx	; 65	2
      5  041b		       85 1c		      sta	GRP1	; 68	2
      6  041d		       a9 60		      lda	#$60	; 70	2
      7  041f		       85 21		      sta	HMP1	; 73	2
      8  0421		       85 2a		      sta	HMOVE	; 00	2
      9  0423
     10  0423		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0425							; 02	2
     12  0425		       85 04		      sta	NUSIZ0	; 05	2
     13  0427
     14  0427		       a5 db		      lda	RamBowColorsBk+2	; 08	2
     15  0429		       85 09		      sta	COLUBK	; 11	2
     16  042b		       85 08		      sta	COLUPF	; 14	2
     17  042d
     18  042d		       a0 02		      ldy	#2	; 16	2
     19  042f		       ea		      nop		; 18	1
     20  0430		       a6 ed		      ldx	MenuBgColor	; 21	2
     21  0432		       9a		      txs		; 23	1
     22  0433
     23  0433				   .Loop18
     24  0433
     25  0433		       a5 ac		      lda	RamMenuCatPfL+2	; 26	2
     26  0435		       85 0f		      sta	PF2	; 29	2
     27  0437
     28  0437		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     29  0439		       a2 00		      ldx	#0	; 33	2
     30  043b		       86 1f		      stx	ENABL	; 36	2
     31  043d		       85 09		      sta	COLUBK	; 39	2
     32  043f		       86 08		      stx	COLUPF	; 42	2
     33  0441		       85 12		      sta	RESM0	; 45	2
     34  0443		       a5 bb		      lda	RamMenuCatPfR+2	; 48	2
     35  0445		       85 0f		      sta	PF2	; 51	2
     36  0447		       ba		      tsx		; 53	1
     37  0448		       86 08		      stx	COLUPF	; 56	2
     38  044a		       86 09		      stx	COLUBK	; 59	2
     39  044c		       88		      dey		; 61	1
     40  044d		       f0 16		      beq	.Exit18	; 64/63	2
     41  044f
      0  044f					      SLEEP	8	; 71	2
      1  044f				   .CYCLES    SET	8
      2  044f
      3  044f				  -	      IF	.CYCLES < 2
      4  044f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  044f				  -	      ERR
      6  044f					      ENDIF
      7  044f
      8  044f				  -	      IF	.CYCLES & 1
      9  044f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  044f				  -	      nop	0
     11  044f				  -	      ELSE
     12  044f				  -	      bit	VSYNC
     13  044f				  -	      ENDIF
     14  044f				  -.CYCLES    SET	.CYCLES - 3
     15  044f					      ENDIF
     16  044f
     17  044f					      REPEAT	.CYCLES / 2
     18  044f		       ea		      nop
     17  044f					      REPEND
     18  0450		       ea		      nop
     17  0450					      REPEND
     18  0451		       ea		      nop
     17  0451					      REPEND
     18  0452		       ea		      nop
     19  0453					      REPEND
     43  0453
     44  0453		       a5 db		      lda	RamBowColorsBk+2	; 74	2
     45  0455		       85 09		      sta	COLUBK	; 01	2
     46  0457		       85 08		      sta	COLUPF	; 04	2
     47  0459
     48  0459		       84 9a		      sty	RainbowColorBk	; 07
     49  045b		       a0 0d		      ldy	#13	; 09
     50  045d		       b1 92		      lda	(MenuCatHmvPtrP),y	; 14
     51  045f		       85 21		      sta	HMP1	; 17
     52  0461		       a4 9a		      ldy	RainbowColorBk	; 20
     53  0463
     54  0463		       d0 ce		      bne	.Loop18	; 23	2
     55  0465
     56  0465				   .Exit18		; 64
     57  0465
     58  0465		       85 02		      sta	WSYNC	; 00
     59  0467
     60  0467		       a5 db		      lda	RamBowColorsBk+2	; 03
     61  0469		       85 09		      sta	COLUBK	; 06
     62  046b		       85 08		      sta	COLUPF	; 09
     63  046d
     64  046d		       a5 96		      lda	BowColorsPfPtr	; 12
     65  046f		       38		      sec		; 14
     66  0470		       e9 03		      sbc	#3	; 16
     67  0472		       85 96		      sta	BowColorsPfPtr	; 19
      0  0474					      SLEEP	4	; 23
      1  0474				   .CYCLES    SET	4
      2  0474
      3  0474				  -	      IF	.CYCLES < 2
      4  0474				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0474				  -	      ERR
      6  0474					      ENDIF
      7  0474
      8  0474				  -	      IF	.CYCLES & 1
      9  0474				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0474				  -	      nop	0
     11  0474				  -	      ELSE
     12  0474				  -	      bit	VSYNC
     13  0474				  -	      ENDIF
     14  0474				  -.CYCLES    SET	.CYCLES - 3
     15  0474					      ENDIF
     16  0474
     17  0474					      REPEAT	.CYCLES / 2
     18  0474		       ea		      nop
     17  0474					      REPEND
     18  0475		       ea		      nop
     19  0476					      REPEND
     69  0476
     70  0476		       a5 ac		      lda	RamMenuCatPfL+2	; 26	2
     71  0478		       85 0f		      sta	PF2	; 29	2
     72  047a
     73  047a		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     74  047c		       a2 00		      ldx	#0	; 33	2
     75  047e		       86 1f		      stx	ENABL	; 36	2
     76  0480		       85 09		      sta	COLUBK	; 39	2
     77  0482		       86 08		      stx	COLUPF	; 42	2
     78  0484		       85 12		      sta	RESM0	; 45	2
     79  0486		       a5 bb		      lda	RamMenuCatPfR+2	; 48	2
     80  0488		       85 0f		      sta	PF2	; 51	2
     81  048a		       ba		      tsx		; 53	1
     82  048b		       86 08		      stx	COLUPF	; 56	2
     83  048d		       86 09		      stx	COLUBK	; 59	2
     84  048f
      0  048f					      SLEEP	5	; 64
      1  048f				   .CYCLES    SET	5
      2  048f
      3  048f				  -	      IF	.CYCLES < 2
      4  048f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  048f				  -	      ERR
      6  048f					      ENDIF
      7  048f
      8  048f					      IF	.CYCLES & 1
      9  048f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  048f		       04 00		      nop	0
     11  0491				  -	      ELSE
     12  0491				  -	      bit	VSYNC
     13  0491					      ENDIF
     14  0491				   .CYCLES    SET	.CYCLES - 3
     15  0491					      ENDIF
     16  0491
     17  0491					      REPEAT	.CYCLES / 2
     18  0491		       ea		      nop
     19  0492					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0492					      include	bank1/code/menucat19_20.asm
      1  0492							;
      2  0492
      3  0492		       a0 01		      ldy	#1	; 66	2
      4  0494
      5  0494				   MenuCatKernel19_20
      6  0494
      7  0494		       b9 9c 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0497		       85 1b		      sta	GRP0	; 73	2
      9  0499		       85 2a		      sta	HMOVE	; 00	2
     10  049b		       b9 c8 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  049e		       85 1c		      sta	GRP1	; 07	2
     12  04a0
     13  04a0		       b9 d9 00 	      lda	RamBowColorsBk,y	; 11	3
     14  04a3		       85 09		      sta	COLUBK	; 14	2
     15  04a5		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     16  04a7		       85 08		      sta	COLUPF	; 22	2
     17  04a9		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  04ac		       85 0f		      sta	PF2	; 29	2
      0  04ae					      SLEEP	2	; 31	1
      1  04ae				   .CYCLES    SET	2
      2  04ae
      3  04ae				  -	      IF	.CYCLES < 2
      4  04ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04ae				  -	      ERR
      6  04ae					      ENDIF
      7  04ae
      8  04ae				  -	      IF	.CYCLES & 1
      9  04ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04ae				  -	      nop	0
     11  04ae				  -	      ELSE
     12  04ae				  -	      bit	VSYNC
     13  04ae				  -	      ENDIF
     14  04ae				  -.CYCLES    SET	.CYCLES - 3
     15  04ae					      ENDIF
     16  04ae
     17  04ae					      REPEAT	.CYCLES / 2
     18  04ae		       ea		      nop
     19  04af					      REPEND
     20  04af
     21  04af		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     22  04b1		       a6 ed		      ldx	MenuBgColor	; 36	2
     23  04b3		       85 09		      sta	COLUBK	; 39	2
     24  04b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  04b8		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  04bb		       85 0f		      sta	PF2	; 50	2
     27  04bd
     28  04bd		       85 2b		      sta	HMCLR	; 53	2
      0  04bf					      SLEEP	2	; 55	1
      1  04bf				   .CYCLES    SET	2
      2  04bf
      3  04bf				  -	      IF	.CYCLES < 2
      4  04bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04bf				  -	      ERR
      6  04bf					      ENDIF
      7  04bf
      8  04bf				  -	      IF	.CYCLES & 1
      9  04bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04bf				  -	      nop	0
     11  04bf				  -	      ELSE
     12  04bf				  -	      bit	VSYNC
     13  04bf				  -	      ENDIF
     14  04bf				  -.CYCLES    SET	.CYCLES - 3
     15  04bf					      ENDIF
     16  04bf
     17  04bf					      REPEAT	.CYCLES / 2
     18  04bf		       ea		      nop
     19  04c0					      REPEND
     30  04c0
     31  04c0		       86 09		      stx	COLUBK	; 58	2
     32  04c2		       85 02		      sta	WSYNC	; 00	2
     33  04c4
     34  04c4		       b9 d9 00 	      lda	RamBowColorsBk,y	; 04	3
     35  04c7		       85 09		      sta	COLUBK	; 07	2
     36  04c9		       b1 96		      lda	(BowColorsPfPtr),y	; 12	2
     37  04cb		       85 08		      sta	COLUPF	; 15	2
     38  04cd		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  04d0		       85 0f		      sta	PF2	; 22	2
     40  04d2
     41  04d2		       a9 00		      lda	#$00	; 24	2
     42  04d4		       85 20		      sta	HMP0	; 27	2
     43  04d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  04d9
     45  04d9		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     46  04db		       a6 ed		      ldx	MenuBgColor	; 36	2
     47  04dd		       85 09		      sta	COLUBK	; 39	2
     48  04df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  04e2		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  04e5		       85 0f		      sta	PF2	; 50	2
     51  04e7
     52  04e7		       a9 20		      lda	#$20	; 52	2
     53  04e9		       85 22		      sta	HMM0	; 55	2
     54  04eb
     55  04eb		       86 09		      stx	COLUBK	; 58	2
     56  04ed		       85 02		      sta	WSYNC	; 00	2
     57  04ef
     58  04ef		       b9 d9 00 	      lda	RamBowColorsBk,y	; 04	3
     59  04f2		       85 09		      sta	COLUBK	; 07	2
     60  04f4		       b1 96		      lda	(BowColorsPfPtr),y	; 12	2
     61  04f6		       85 08		      sta	COLUPF	; 15	2
     62  04f8		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  04fb		       85 0f		      sta	PF2	; 22	2
     64  04fd
     65  04fd		       a9 e0		      lda	#$E0	; 24	2
     66  04ff		       85 23		      sta	HMM1	; 27	2
      0  0501					      SLEEP	4	; 31	5
      1  0501				   .CYCLES    SET	4
      2  0501
      3  0501				  -	      IF	.CYCLES < 2
      4  0501				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0501				  -	      ERR
      6  0501					      ENDIF
      7  0501
      8  0501				  -	      IF	.CYCLES & 1
      9  0501				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0501				  -	      nop	0
     11  0501				  -	      ELSE
     12  0501				  -	      bit	VSYNC
     13  0501				  -	      ENDIF
     14  0501				  -.CYCLES    SET	.CYCLES - 3
     15  0501					      ENDIF
     16  0501
     17  0501					      REPEAT	.CYCLES / 2
     18  0501		       ea		      nop
     17  0501					      REPEND
     18  0502		       ea		      nop
     19  0503					      REPEND
     68  0503
     69  0503		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     70  0505		       a6 ed		      ldx	MenuBgColor	; 36	2
     71  0507		       85 09		      sta	COLUBK	; 39	2
     72  0509		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  050c		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  050f		       85 0f		      sta	PF2	; 50	2
     75  0511
      0  0511					      SLEEP	5	; 55	3
      1  0511				   .CYCLES    SET	5
      2  0511
      3  0511				  -	      IF	.CYCLES < 2
      4  0511				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0511				  -	      ERR
      6  0511					      ENDIF
      7  0511
      8  0511					      IF	.CYCLES & 1
      9  0511					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0511		       04 00		      nop	0
     11  0513				  -	      ELSE
     12  0513				  -	      bit	VSYNC
     13  0513					      ENDIF
     14  0513				   .CYCLES    SET	.CYCLES - 3
     15  0513					      ENDIF
     16  0513
     17  0513					      REPEAT	.CYCLES / 2
     18  0513		       ea		      nop
     19  0514					      REPEND
     77  0514
     78  0514		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0517
     80  0517		       88		      dey		; 61	1
     81  0518		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  051a		       4c 94 14 	      jmp	MenuCatKernel19_20	; 66	2
     83  051d
     84  051d				   .Exit19_20
     85  051d
     86  051d		       a9 00		      lda	#0
     87  051f		       85 1b		      sta	GRP0
     88  0521		       85 1c		      sta	GRP1
     89  0523		       85 1d		      sta	ENAM0
     90  0525		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     32  0527
     33  0527		       a5 8e		      lda	MenuCatFrame
     34  0529		       c9 02		      cmp	#2
     35  052b		       10 06		      bpl	.LoCat
     36  052d		       85 02		      sta	WSYNC
     37  052f		       85 02		      sta	WSYNC
     38  0531		       85 02		      sta	WSYNC
     39  0533		       85 02	   .LoCat     sta	WSYNC
     40  0535
     41  0535		       a0 3e		      ldy	#62
     42  0537				   .Loop2
     43  0537		       88		      dey
     44  0538		       85 02		      sta	WSYNC
     45  053a		       d0 fb		      bne	.Loop2
     46  053c
     47  053c		       a9 02		      lda	#2
     48  053e		       85 01		      sta	VBLANK	; disable display
     49  0540
     50  0540		       4c 18 10 	      jmp	MenuOverScan
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  0543					      include	bank1/data/menucatgfx.asm
      1  0543							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0543							; Menu Cat Graphics
      3  0543							;
      4  0543							; Graphics for drawing the menu cat display
      5  0543							;
      6  0543							; Uses 1 page + 173 bytes of ROM
      7  0543							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0543
      9  0600		       00 00 00 00*	      ALIGN	$100
     10  0600
     11  0600				   MenuCatGfxPage1
     12  0600
     13  0600
     14  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0600							; Menu Cat Top Playfield Graphics
     16  0600							;
     17  0600							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0600							;
     19  0600							; 3 bytes of ROM
     20  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0600
     22  0600				   MenuCatTopPf
     23  0600
     24  0600		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0601		       07		      .byte.b	%00000111
     26  0602		       07		      .byte.b	%00000111
     27  0603							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0603
     29  0603							; 3 bytes used in page
     30  0603
     31  0603
     32  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0603							; Menu Cat Right Player Graphics
     34  0603							;
     35  0603							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0603							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0603							;
     38  0603							; 42 bytes of ROM (14 per frame)
     39  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0603
     41  0603				   MenuCatGfxR
     42  0603
     43  0603							; frames 1/5
     44  0603		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0604		       04		      .byte.b	%00000100
     46  0605		       f2		      .byte.b	%11110010
     47  0606		       91		      .byte.b	%10010001
     48  0607		       01		      .byte.b	%00000001
     49  0608		       59		      .byte.b	%01011001
     50  0609		       09		      .byte.b	%00001001
     51  060a		       01		      .byte.b	%00000001
     52  060b		       02		      .byte.b	%00000010
     53  060c		       c2		      .byte.b	%11000010
     54  060d		       22		      .byte.b	%00100010
     55  060e		       32		      .byte.b	%00110010
     56  060f		       2c		      .byte.b	%00101100
     57  0610		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0611
     59  0611							; frames 2/3/4
     60  0611		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0612		       04		      .byte.b	%00000100
     62  0613		       f2		      .byte.b	%11110010
     63  0614		       91		      .byte.b	%10010001
     64  0615		       01		      .byte.b	%00000001
     65  0616		       59		      .byte.b	%01011001
     66  0617		       09		      .byte.b	%00001001
     67  0618		       01		      .byte.b	%00000001
     68  0619		       02		      .byte.b	%00000010
     69  061a		       c2		      .byte.b	%11000010
     70  061b		       62		      .byte.b	%01100010
     71  061c		       52		      .byte.b	%01010010
     72  061d		       4c		      .byte.b	%01001100
     73  061e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  061f
     75  061f							; frame 6
     76  061f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0620		       f8		      .byte.b	%11111000
     78  0621		       04		      .byte.b	%00000100
     79  0622		       f2		      .byte.b	%11110010
     80  0623		       91		      .byte.b	%10010001
     81  0624		       01		      .byte.b	%00000001
     82  0625		       59		      .byte.b	%01011001
     83  0626		       09		      .byte.b	%00001001
     84  0627		       01		      .byte.b	%00000001
     85  0628		       02		      .byte.b	%00000010
     86  0629		       c2		      .byte.b	%11000010
     87  062a		       22		      .byte.b	%00100010
     88  062b		       32		      .byte.b	%00110010
     89  062c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  062d
     91  062d							; 45 bytes used in page
     92  062d
     93  062d
     94  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  062d							; Menu Cat Top Right Player Graphics
     96  062d							;
     97  062d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  062d							;
     99  062d							; 4 bytes of ROM
    100  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  062d
    102  062d				   MenuCatTopGfxR
    103  062d
    104  062d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  062e		       10		      .byte.b	%00010000
    106  062f		       10		      .byte.b	%00010000
    107  0630		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0631
    109  0631							; 49 bytes used in page
    110  0631
    111  0631
    112  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0631							; Menu Cat Top Left Player Graphics
    114  0631							;
    115  0631							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0631							;
    117  0631							; 3 bytes of ROM
    118  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0631
    120  0631				   MenuCatTopGfxL
    121  0631
    122  0631		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0632		       08		      .byte.b	%00001000
    124  0633		       20		      .byte.b	%00100000
    125  0634							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0634
    127  0634							; 52 bytes used in page
    128  0634
    129  0634
    130  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0634							; Menu Cat Left Playfield Graphics
    132  0634							;
    133  0634							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0634							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0634							;
    136  0634							; 84 bytes of ROM (14 per frame)
    137  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0634
    139  0634				   MenuCatPfL
    140  0634
    141  0634							; frame 1
    142  0634		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0635		       93		      .byte.b	%10010011
    144  0636		       f3		      .byte.b	%11110011
    145  0637		       bf		      .byte.b	%10111111
    146  0638		       bf		      .byte.b	%10111111
    147  0639		       3f		      .byte.b	%00111111
    148  063a		       3f		      .byte.b	%00111111
    149  063b		       3f		      .byte.b	%00111111
    150  063c		       3b		      .byte.b	%00111011
    151  063d		       39		      .byte.b	%00111001
    152  063e		       bd		      .byte.b	%10111101
    153  063f		       bc		      .byte.b	%10111100
    154  0640		       bf		      .byte.b	%10111111
    155  0641		       bf		      .byte.b	%10111111
    156  0642		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0643
    158  0643							; frame 2
    159  0643							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0643		       97		      .byte.b	%10010111
    161  0644		       f7		      .byte.b	%11110111
    162  0645		       bf		      .byte.b	%10111111
    163  0646		       bf		      .byte.b	%10111111
    164  0647		       bf		      .byte.b	%10111111
    165  0648		       bf		      .byte.b	%10111111
    166  0649		       bb		      .byte.b	%10111011
    167  064a		       b9		      .byte.b	%10111001
    168  064b		       bc		      .byte.b	%10111100
    169  064c		       bc		      .byte.b	%10111100
    170  064d		       bf		      .byte.b	%10111111
    171  064e		       bf		      .byte.b	%10111111
    172  064f		       bf		      .byte.b	%10111111
    173  0650		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0651
    175  0651							; frame 3
    176  0651							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0651		       a7		      .byte.b	%10100111
    178  0652		       f7		      .byte.b	%11110111
    179  0653		       bf		      .byte.b	%10111111
    180  0654		       bf		      .byte.b	%10111111
    181  0655		       bf		      .byte.b	%10111111
    182  0656		       bc		      .byte.b	%10111100
    183  0657		       b9		      .byte.b	%10111001
    184  0658		       bf		      .byte.b	%10111111
    185  0659		       bf		      .byte.b	%10111111
    186  065a		       bf		      .byte.b	%10111111
    187  065b		       bf		      .byte.b	%10111111
    188  065c		       bf		      .byte.b	%10111111
    189  065d		       bf		      .byte.b	%10111111
    190  065e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  065f
    192  065f							; frame 4
    193  065f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  065f		       97		      .byte.b	%10010111
    195  0660		       f7		      .byte.b	%11110111
    196  0661		       bf		      .byte.b	%10111111
    197  0662		       bf		      .byte.b	%10111111
    198  0663		       bc		      .byte.b	%10111100
    199  0664		       bc		      .byte.b	%10111100
    200  0665		       b9		      .byte.b	%10111001
    201  0666		       bb		      .byte.b	%10111011
    202  0667		       bf		      .byte.b	%10111111
    203  0668		       bf		      .byte.b	%10111111
    204  0669		       bf		      .byte.b	%10111111
    205  066a		       bf		      .byte.b	%10111111
    206  066b		       bf		      .byte.b	%10111111
    207  066c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  066d
    209  066d							; frame 5
    210  066d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  066d		       cb		      .byte.b	%11001011
    212  066e		       f3		      .byte.b	%11110011
    213  066f		       bf		      .byte.b	%10111111
    214  0670		       bf		      .byte.b	%10111111
    215  0671		       3f		      .byte.b	%00111111
    216  0672		       3f		      .byte.b	%00111111
    217  0673		       3f		      .byte.b	%00111111
    218  0674		       3b		      .byte.b	%00111011
    219  0675		       38		      .byte.b	%00111000
    220  0676		       bc		      .byte.b	%10111100
    221  0677		       bf		      .byte.b	%10111111
    222  0678		       bf		      .byte.b	%10111111
    223  0679		       bf		      .byte.b	%10111111
    224  067a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  067b
    226  067b							; frame 6
    227  067b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  067b		       cb		      .byte.b	%11001011
    229  067c		       f3		      .byte.b	%11110011
    230  067d		       bb		      .byte.b	%10111011
    231  067e		       bf		      .byte.b	%10111111
    232  067f		       bf		      .byte.b	%10111111
    233  0680		       3f		      .byte.b	%00111111
    234  0681		       3f		      .byte.b	%00111111
    235  0682		       3b		      .byte.b	%00111011
    236  0683		       39		      .byte.b	%00111001
    237  0684		       3c		      .byte.b	%00111100
    238  0685		       bc		      .byte.b	%10111100
    239  0686		       bf		      .byte.b	%10111111
    240  0687		       bf		      .byte.b	%10111111
    241  0688							;	.byte %10111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0688
    243  0688							; 136 bytes used in page
    244  0688
    245  0688
    246  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0688							; Menu Cat Right Playfield Graphics
    248  0688							;
    249  0688							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0688							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0688							;
    252  0688							; 37 bytes of ROM (12 per frame + 1)
    253  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0688
    255  0688				   MenuCatPfR
    256  0688
    257  0688							; frames 1/5
    258  0688		       bf		      .byte.b	%10111111	; PF2(R) gfx block 18
    259  0689		       81		      .byte.b	%10000001
    260  068a		       81		      .byte.b	%10000001
    261  068b		       80		      .byte.b	%10000000
    262  068c		       80		      .byte.b	%10000000
    263  068d		       80		      .byte.b	%10000000
    264  068e		       80		      .byte.b	%10000000
    265  068f		       80		      .byte.b	%10000000
    266  0690		       81		      .byte.b	%10000001
    267  0691		       99		      .byte.b	%10011001
    268  0692		       99		      .byte.b	%10011001
    269  0693		       bd		      .byte.b	%10111101
    270  0694							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0694
    272  0694							; frames 2/3/4
    273  0694		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0695		       c1		      .byte.b	%11000001
    275  0696		       80		      .byte.b	%10000000
    276  0697		       80		      .byte.b	%10000000
    277  0698		       80		      .byte.b	%10000000
    278  0699		       80		      .byte.b	%10000000
    279  069a		       80		      .byte.b	%10000000
    280  069b		       80		      .byte.b	%10000000
    281  069c		       80		      .byte.b	%10000000
    282  069d		       88		      .byte.b	%10001000
    283  069e		       9c		      .byte.b	%10011100
    284  069f		       9c		      .byte.b	%10011100
    285  06a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  06a0
    287  06a0							; frame 6
    288  06a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  06a1		       ff		      .byte.b	%11111111
    290  06a2		       81		      .byte.b	%10000001
    291  06a3		       81		      .byte.b	%10000001
    292  06a4		       80		      .byte.b	%10000000
    293  06a5		       80		      .byte.b	%10000000
    294  06a6		       80		      .byte.b	%10000000
    295  06a7		       80		      .byte.b	%10000000
    296  06a8		       80		      .byte.b	%10000000
    297  06a9		       81		      .byte.b	%10000001
    298  06aa		       99		      .byte.b	%10011001
    299  06ab		       99		      .byte.b	%10011001
    300  06ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  06ad							; 173 bytes used in page
    302  06ad
    303  06ad
    304  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  06ad							; Menu Cat Player Hmove Graphics
    306  06ad							;
    307  06ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  06ad							; The frame's graphics will be accessed through a pointer.
    309  06ad							;
    310  06ad							; 70 bytes of ROM (14 per frame)
    311  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  06ad
    313  06ad				   MenuCatHmoveP
    314  06ad
    315  06ad							; frame 1
    316  06ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  06ae		       a0		      .byte.b	$A0
    318  06af		       c0		      .byte.b	$C0
    319  06b0		       00		      .byte.b	$00
    320  06b1		       00		      .byte.b	$00
    321  06b2		       00		      .byte.b	$00
    322  06b3		       00		      .byte.b	$00
    323  06b4		       00		      .byte.b	$00
    324  06b5		       00		      .byte.b	$00
    325  06b6		       00		      .byte.b	$00
    326  06b7		       00		      .byte.b	$00
    327  06b8		       00		      .byte.b	$00
    328  06b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  06ba
    330  06ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  06bb
    332  06bb							; frame 2
    333  06bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  06bc		       a0		      .byte.b	$A0
    335  06bd		       a0		      .byte.b	$A0
    336  06be		       00		      .byte.b	$00
    337  06bf		       00		      .byte.b	$00
    338  06c0		       00		      .byte.b	$00
    339  06c1		       00		      .byte.b	$00
    340  06c2		       00		      .byte.b	$00
    341  06c3		       00		      .byte.b	$00
    342  06c4		       00		      .byte.b	$00
    343  06c5		       00		      .byte.b	$00
    344  06c6		       00		      .byte.b	$00
    345  06c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  06c8
    347  06c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  06c9
    349  06c9							; frame 3
    350  06c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  06ca		       80		      .byte.b	$80
    352  06cb		       a0		      .byte.b	$A0
    353  06cc		       00		      .byte.b	$00
    354  06cd		       00		      .byte.b	$00
    355  06ce		       00		      .byte.b	$00
    356  06cf		       00		      .byte.b	$00
    357  06d0		       00		      .byte.b	$00
    358  06d1		       00		      .byte.b	$00
    359  06d2		       00		      .byte.b	$00
    360  06d3		       00		      .byte.b	$00
    361  06d4		       00		      .byte.b	$00
    362  06d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  06d6
    364  06d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  06d7
    366  06d7							; frame 4
    367  06d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  06d8		       80		      .byte.b	$80
    369  06d9		       c0		      .byte.b	$C0
    370  06da		       00		      .byte.b	$00
    371  06db		       00		      .byte.b	$00
    372  06dc		       00		      .byte.b	$00
    373  06dd		       00		      .byte.b	$00
    374  06de		       00		      .byte.b	$00
    375  06df		       00		      .byte.b	$00
    376  06e0		       00		      .byte.b	$00
    377  06e1		       00		      .byte.b	$00
    378  06e2		       00		      .byte.b	$00
    379  06e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  06e4
    381  06e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  06e5
    383  06e5							; frames 5/6
    384  06e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  06e6		       c0		      .byte.b	$C0
    386  06e7		       c0		      .byte.b	$C0
    387  06e8		       00		      .byte.b	$00
    388  06e9		       00		      .byte.b	$00
    389  06ea		       00		      .byte.b	$00
    390  06eb		       00		      .byte.b	$00
    391  06ec		       00		      .byte.b	$00
    392  06ed		       00		      .byte.b	$00
    393  06ee		       00		      .byte.b	$00
    394  06ef		       00		      .byte.b	$00
    395  06f0		       00		      .byte.b	$00
    396  06f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  06f2
    398  06f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  06f3
    400  06f3							; 243 bytes used in page
    401  06f3
    402  06f3
    403  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  06f3							; Menu Cat Missile Graphics
    405  06f3							;
    406  06f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  06f3							; menu cat display.
    408  06f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  06f3							; Because of that, this table cannot be at the start of a page.
    410  06f3							;
    411  06f3							; 13 bytes of ROM
    412  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  06f3
    414  06f3				   MenuCatMslGfx
    415  06f3
    416  06f3							; frame 6
    417  06f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  06f4
    419  06f4							; frames 5/4/3/2/1
    420  06f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  06f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  06f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  06f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  06f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  06f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  06fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  06fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  06fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  06fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  06fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  06ff
    432  06ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0700
    434  0700							; all 256 bytes used in page
    435  0700
    436  0700
    437  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0700							; PAGE BOUNDARY
    439  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0700
    441  0700				   MenuCatGfxPage2
    442  0700
    443  0700
    444  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0700							; Menu Cat Left Player Graphics
    446  0700							;
    447  0700							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0700							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0700							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0700							;
    451  0700							; 84 bytes of ROM (14 per frame)
    452  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0700
    454  0700				   MenuCatGfxL
    455  0700
    456  0700							; frame 1
    457  0700		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0701		       9a		      .byte.b	%10011010
    459  0702		       8f		      .byte.b	%10001111
    460  0703		       70		      .byte.b	%01110000
    461  0704		       04		      .byte.b	%00000100
    462  0705		       01		      .byte.b	%00000001
    463  0706		       03		      .byte.b	%00000011
    464  0707		       0f		      .byte.b	%00001111
    465  0708		       19		      .byte.b	%00011001
    466  0709		       33		      .byte.b	%00110011
    467  070a		       67		      .byte.b	%01100111
    468  070b		       4d		      .byte.b	%01001101
    469  070c		       79		      .byte.b	%01111001
    470  070d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  070e
    472  070e							; frame 2
    473  070e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  070f		       94		      .byte.b	%10010100
    475  0710		       9f		      .byte.b	%10011111
    476  0711		       60		      .byte.b	%01100000
    477  0712		       08		      .byte.b	%00001000
    478  0713		       01		      .byte.b	%00000001
    479  0714		       07		      .byte.b	%00000111
    480  0715		       19		      .byte.b	%00011001
    481  0716		       21		      .byte.b	%00100001
    482  0717		       4f		      .byte.b	%01001111
    483  0718		       49		      .byte.b	%01001001
    484  0719		       31		      .byte.b	%00110001
    485  071a		       01		      .byte.b	%00000001
    486  071b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  071c
    488  071c							; frame 3
    489  071c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  071d		       94		      .byte.b	%10010100
    491  071e		       bf		      .byte.b	%10111111
    492  071f		       c0		      .byte.b	%11000000
    493  0720		       08		      .byte.b	%00001000
    494  0721		       3d		      .byte.b	%00111101
    495  0722		       47		      .byte.b	%01000111
    496  0723		       61		      .byte.b	%01100001
    497  0724		       1f		      .byte.b	%00011111
    498  0725		       03		      .byte.b	%00000011
    499  0726		       01		      .byte.b	%00000001
    500  0727		       01		      .byte.b	%00000001
    501  0728		       01		      .byte.b	%00000001
    502  0729		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  072a
    504  072a							; frame 4
    505  072a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  072b		       94		      .byte.b	%10010100
    507  072c		       9f		      .byte.b	%10011111
    508  072d		       60		      .byte.b	%01100000
    509  072e		       c4		      .byte.b	%11000100
    510  072f		       49		      .byte.b	%01001001
    511  0730		       4f		      .byte.b	%01001111
    512  0731		       21		      .byte.b	%00100001
    513  0732		       19		      .byte.b	%00011001
    514  0733		       07		      .byte.b	%00000111
    515  0734		       01		      .byte.b	%00000001
    516  0735		       01		      .byte.b	%00000001
    517  0736		       01		      .byte.b	%00000001
    518  0737		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0738
    520  0738							; frame 5
    521  0738		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0739		       94		      .byte.b	%10010100
    523  073a		       8f		      .byte.b	%10001111
    524  073b		       78		      .byte.b	%01111000
    525  073c		       0c		      .byte.b	%00001100
    526  073d		       01		      .byte.b	%00000001
    527  073e		       01		      .byte.b	%00000001
    528  073f		       07		      .byte.b	%00000111
    529  0740		       3d		      .byte.b	%00111101
    530  0741		       c3		      .byte.b	%11000011
    531  0742		       8f		      .byte.b	%10001111
    532  0743		       79		      .byte.b	%01111001
    533  0744		       01		      .byte.b	%00000001
    534  0745		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0746
    536  0746							; frame 6
    537  0746		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0747		       94		      .byte.b	%10010100
    539  0748		       8f		      .byte.b	%10001111
    540  0749		       58		      .byte.b	%01011000
    541  074a		       0c		      .byte.b	%00001100
    542  074b		       01		      .byte.b	%00000001
    543  074c		       01		      .byte.b	%00000001
    544  074d		       07		      .byte.b	%00000111
    545  074e		       19		      .byte.b	%00011001
    546  074f		       21		      .byte.b	%00100001
    547  0750		       4f		      .byte.b	%01001111
    548  0751		       49		      .byte.b	%01001001
    549  0752		       31		      .byte.b	%00110001
    550  0753		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0754
    552  0754							; 84 bytes used in page
    553  0754
    554  0754
    555  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0754							; Menu Cat Lower Right Player Graphics
    557  0754							;
    558  0754							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0754							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0754							;
    561  0754							; 12 bytes of ROM (2 per frame)
    562  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0754
    564  0754				   MenuCatLowGfxR
    565  0754
    566  0754							; frame 1
    567  0754		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0755		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0756
    570  0756							; frame 2
    571  0756		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0757		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0758
    574  0758							; frame 3
    575  0758		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0759		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  075a
    578  075a							; frame 4
    579  075a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  075b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  075c
    582  075c							; frame 5
    583  075c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  075d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  075e
    586  075e							; frame 6
    587  075e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  075f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0760
    590  0760							; 96 bytes used in page
    591  0760
    592  0760
    593  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0760							; Menu Cat Lower Right Playfield Graphics
    595  0760							;
    596  0760							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0760							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0760							;
    599  0760							; 12 bytes of ROM (2 per frame)
    600  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0760
    602  0760				   MenuCatLowPfGfxR
    603  0760
    604  0760							; frame 1
    605  0760		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0761		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0762
    608  0762							; frame 2
    609  0762		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0763		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0764
    612  0764							; frame 3
    613  0764		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0765		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0766
    616  0766							; frame 4
    617  0766		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0767		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0768
    620  0768							; frame 5
    621  0768		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0769		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  076a
    624  076a							; frame 6
    625  076a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  076b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  076c
    628  076c							; 108 bytes used in page
    629  076c
    630  076c
    631  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  076c							; Menu Cat Missile Hmove Graphics
    633  076c							;
    634  076c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  076c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  076c							; The frame's graphics will be accessed through a pointer.
    637  076c							;
    638  076c							; 65 bytes of ROM (13 per frame)
    639  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  076c
    641  076c				   MenuCatHmoveM
    642  076c
    643  076c							; frames 1/2
    644  076c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  076d		       0e		      .byte.b	$0E
    646  076e		       0e		      .byte.b	$0E
    647  076f		       e0		      .byte.b	$E0
    648  0770		       00		      .byte.b	$00
    649  0771		       20		      .byte.b	$20
    650  0772		       20		      .byte.b	$20
    651  0773		       02		      .byte.b	$02
    652  0774		       00		      .byte.b	$00
    653  0775		       e0		      .byte.b	$E0
    654  0776		       e0		      .byte.b	$E0
    655  0777		       c2		      .byte.b	$C2
    656  0778		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0779
    658  0779							; frame 3
    659  0779		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  077a		       0e		      .byte.b	$0E
    661  077b		       0e		      .byte.b	$0E
    662  077c		       e0		      .byte.b	$E0
    663  077d		       00		      .byte.b	$00
    664  077e		       20		      .byte.b	$20
    665  077f		       20		      .byte.b	$20
    666  0780		       02		      .byte.b	$02
    667  0781		       00		      .byte.b	$00
    668  0782		       e0		      .byte.b	$E0
    669  0783		       e0		      .byte.b	$E0
    670  0784		       c2		      .byte.b	$C2
    671  0785		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0786
    673  0786							; frame 4
    674  0786		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0787		       0e		      .byte.b	$0E
    676  0788		       0e		      .byte.b	$0E
    677  0789		       e0		      .byte.b	$E0
    678  078a		       00		      .byte.b	$00
    679  078b		       20		      .byte.b	$20
    680  078c		       20		      .byte.b	$20
    681  078d		       02		      .byte.b	$02
    682  078e		       00		      .byte.b	$00
    683  078f		       e0		      .byte.b	$E0
    684  0790		       e0		      .byte.b	$E0
    685  0791		       c2		      .byte.b	$C2
    686  0792		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0793
    688  0793							; frame 5
    689  0793		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0794		       0e		      .byte.b	$0E
    691  0795		       0e		      .byte.b	$0E
    692  0796		       e0		      .byte.b	$E0
    693  0797		       00		      .byte.b	$00
    694  0798		       20		      .byte.b	$20
    695  0799		       20		      .byte.b	$20
    696  079a		       02		      .byte.b	$02
    697  079b		       00		      .byte.b	$00
    698  079c		       e0		      .byte.b	$E0
    699  079d		       e0		      .byte.b	$E0
    700  079e		       c2		      .byte.b	$C2
    701  079f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  07a0
    703  07a0							; frame 6
    704  07a0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  07a1		       2e		      .byte.b	$2E
    706  07a2		       0e		      .byte.b	$0E
    707  07a3		       0e		      .byte.b	$0E
    708  07a4		       e0		      .byte.b	$E0
    709  07a5		       00		      .byte.b	$00
    710  07a6		       20		      .byte.b	$20
    711  07a7		       20		      .byte.b	$20
    712  07a8		       02		      .byte.b	$02
    713  07a9		       00		      .byte.b	$00
    714  07aa		       e0		      .byte.b	$E0
    715  07ab		       e0		      .byte.b	$E0
    716  07ac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  07ad
    718  07ad							; 173 bytes used in page
    719  07ad
    720  07ad
    721  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  07ad							; Offset Tables
    723  07ad							;
    724  07ad							; Tables of offsets to the correct data for frames that can share graphics.
    725  07ad							;
    726  07ad							; 12 bytes of ROM (6 bytes per table)
    727  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  07ad
    729  07ad				   MenuCatOffsetGfx
    730  07ad		       03		      .byte.b	<MenuCatGfxR+0
    731  07ae		       11		      .byte.b	<MenuCatGfxR+14
    732  07af		       11		      .byte.b	<MenuCatGfxR+14
    733  07b0		       11		      .byte.b	<MenuCatGfxR+14
    734  07b1		       03		      .byte.b	<MenuCatGfxR+0
    735  07b2		       1f		      .byte.b	<MenuCatGfxR+28
    736  07b3
    737  07b3				   MenuCatOffsetPf
    738  07b3		       88		      .byte.b	<MenuCatPfR+0
    739  07b4		       94		      .byte.b	<MenuCatPfR+12
    740  07b5		       94		      .byte.b	<MenuCatPfR+12
    741  07b6		       94		      .byte.b	<MenuCatPfR+12
    742  07b7		       88		      .byte.b	<MenuCatPfR+0
    743  07b8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
------- FILE bank1/data/colors.asm LEVEL 3 PASS 2
      0  07b9					      include	bank1/data/colors.asm
      1  07b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  07b9							;
      3  07b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  07b9
      5  07b9				   MenuColors
      6  07b9
      7  07b9							; NTSC
      8  07b9		       a2		      .byte.b	$A2	; menu bg color
      9  07ba		       5f		      .byte.b	$5F	; cat tart color
     10  07bb		       44		      .byte.b	$44	; rainbow color red
     11  07bc		       38		      .byte.b	$38	; rainbow color orange
     12  07bd		       1c		      .byte.b	$1C	; rainbow color yellow
     13  07be		       ca		      .byte.b	$CA	; rainbow color green
     14  07bf		       a8		      .byte.b	$A8	; rainbow color blue
     15  07c0		       76		      .byte.b	$76	; rainbow color purple
     16  07c1
     17  07c1							; PAL
     18  07c1		       92		      .byte.b	$92	; menu bg color
     19  07c2		       6f		      .byte.b	$6F	; cat tart color
     20  07c3		       64		      .byte.b	$64	; rainbow color red
     21  07c4		       48		      .byte.b	$48	; rainbow color orange
     22  07c5		       3c		      .byte.b	$3C	; rainbow color yellow
     23  07c6		       5a		      .byte.b	$5A	; rainbow color green
     24  07c7		       b8		      .byte.b	$B8	; rainbow color blue
     25  07c8		       c6		      .byte.b	$C6	; rainbow color purple
------- FILE bank1.asm
     13  07c9
      0  07c9					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
------- FILE main.asm
     20  1000							;	include bank2.asm
     21  1000							;	include bank3.asm
     22  1000							;	include bank4.asm
