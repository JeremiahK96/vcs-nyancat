------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 12-31-2017 Version 2.6
     12  2000 ????						;
     13  2000 ????						; Draw cat and food items on both cat rows
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates, RAM labels, and macros
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7  0000 ????
      8  0000 ????
      9 U00de ????				      SEG.U	VARS
     10 U0080					      ORG	$80
     11 U0080
     12 U0080
     13 U0080
     14 U0080				   RamStart
     15 U0080
     16 U0080		       00	   Frame      ds	1	; Current frame
     17 U0081
     18 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19 U0081							; Variables for the score
     20 U0081
     21 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     22 U0084							; BCD encoded 6-digit number and used to control the
     23 U0084							; 6-digit score display
     24 U0084
     25 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     26 U0086							; on the next frame (max of 9,999)
     27 U0086
     28 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     29 U0087
     30 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     31 U0087
     32 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     33 U0088							; BCD encoded 2-digit number and used to control the
     34 U0088							; level counter display
     35 U0088
     36 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     37 U0088							; Variables for the progress bar and health display
     38 U0088
     39 U0088		       00	   Progress   ds	1	; value for level progress, which can be
     40 U0089							; from 0 to 30 and will be used to draw progress bar
     41 U0089
     42 U0089		       00 00 00 00*ProgressBar ds	5	; array of 5 values to be written to the playfield
     43 U008e							; registers when drawing progress bar
     44 U008e
     45 U008e		       00	   PgBarColor ds	1	; color for full part of progress bar
     46 U008f
     47 U008f		       00	   Health     ds	1	; amount of health
     48 U0090							; 0=full 8=medium 16=low 24=empty
     49 U0090
     50 U0090							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51 U0090							; Pointers
     52 U0090
     53 U0090				   FoodGfxPtr1		; pointer for 1st food item's graphics
     54 U0090				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     55 U0090
     56 U0090		       00 00		      ds	2
     57 U0092
     58 U0092				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     59 U0092				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     60 U0092
     61 U0092		       00 00		      ds	2
     62 U0094
     63 U0094				   TartGfxPtr1		; pointer for the tart graphics
     64 U0094				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     65 U0094
     66 U0094		       00 00		      ds	2
     67 U0096
     68 U0096				   CatGfxPtr1		; pointer for the cat face/paws graphics
     69 U0096				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     70 U0096
     71 U0096		       00 00		      ds	2
     72 U0098
     73 U0098				   TartGfxPtr2		; pointer for the tart graphics
     74 U0098				   HthGfxLPtr		; pointer for left half of the health graphics
     75 U0098				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     76 U0098
     77 U0098		       00 00		      ds	2
     78 U009a
     79 U009a				   CatGfxPtr2		; pointer for the cat face/paws graphics
     80 U009a				   HthGfxRPtr		; pointer for right half of the health graphics
     81 U009a				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     82 U009a
     83 U009a		       00 00		      ds	2
     84 U009c
     85 U009c				   ThrobPtr		; pointer for loading the throb colors
     86 U009c				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     87 U009c
     88 U009c		       00 00		      ds	2
     89 U009e
     90 U009e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     91 U009e							; Variables used when drawing the cat
     92 U009e
     93 U009e		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     94 U009f		       00	   CatPosition ds	1	; data describing the cat's position
     95 U00a0							; bits 7-5 store the cat's row, from 1-7
     96 U00a0							; bits 4-0 store the number of scanlines to skip after
     97 U00a0							; top of the cat's row before drawing the cat, from 0-18
     98 U00a0
     99 U00a0				   Rainbow		; PF0 value for the rainbow graphics
    100 U00a0				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
    101 U00a0		       00		      ds	1
    102 U00a1
    103 U00a1				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
    104 U00a1				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
    105 U00a1		       00		      ds	1
    106 U00a2
    107 U00a2		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
    108 U00a3
    109 U00a3		       00	   CatTartColor ds	1	; color of the cat's tart body
    110 U00a4
    111 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    112 U00a4							; Variables used for the food items
    113 U00a4
    114 U00a4		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    115 U00ab		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
    116 U00b2							; the left items, last 7 bytes are for the right items.
    117 U00b2							; Hi nybble holds the value (0-15) of the item to draw.
    118 U00b2							; Lo nybble holds the value of next frame's item.
    119 U00b2							; All nybbles are swapped at the start of each frame.
    120 U00b2
    121 U00b2		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
    122 U00b9
    123 U00b9		       00 00 00    CatRowHmove ds	3	; array of 3 values to store to HMP1 before strobing
    124 U00bc							; HMOVE to position food items in 2nd cat row
    125 U00bc		       00	   CatRow2FoodL ds	1
    126 U00bd		       00	   CatRow2FoodR ds	1
    127 U00be		       00	   CatRow2Color1 ds	1
    128 U00bf		       00	   CatRow2Color2 ds	1
    129 U00c0
    130 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131 U00c0							; Variables for the throbbing lines' colors
    132 U00c0
    133 U00c0		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    134 U00c3							; throbbing lines. The first color is darkest,
    135 U00c3							; the last is brightest.
    136 U00c3
    137 U00c3		       00	   CatThrobPF ds	1
    138 U00c4
    139 U00c4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    140 U00c4							; Temporary variables which cannot be shared with stack space
    141 U00c4
    142 U00c4		       00	   TempLoop   ds	1
    143 U00c5		       00	   Temp1      ds	1
    144 U00c6		       00	   Temp2      ds	1
    145 U00c7
    146 U00c7							; 53 of 79 non-temporary RAM bytes used (22 left)
    147 U00c7							; last 49 bytes of RAM are used for stack space in the scoreboard display
    148 U00c7
    149 U00c7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    150 U00c7							; Temporary variables which can be shared with stack space
    151 U00c7
    152 U00c7		       00	   Temp       ds	1
    153 U00c8
    154 U00c8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    155 U00c8							; Other variables which can be shared with stack space
    156 U00c8
    157 U00c8		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    158 U00c9
    159 U00c9		       00	   FoodColor1 ds	1	; color of the 1st food item
    160 U00ca		       00	   FoodColor2 ds	1	; color of the 2nd food item
    161 U00cb
    162 U00cb							; 7 of 15 available temporary RAM bytes used (8 left)
    163 U00cb							; last 34 bytes of RAM are used to hold the rainbow color graphics
    164 U00cb
    165 U00de					      ORG	$100 - 34
    166 U00de				   RamBowColors
------- FILE main.asm
------- FILE headers/Macros.h LEVEL 2 PASS 2
      0 U00de					      include	headers/Macros.h
      1 U00de					      MAC	throb_rainbow_bk
      2 U00de
      3 U00de					      SUBROUTINE
      4 U00de
      5 U00de				   .X	      SET	{1}
      6 U00de
      7 U00de					      lda	RamBowColors+.X	; 3
      8 U00de					      bne	.Rainbow	; 5/6
      9 U00de
     10 U00de					      stx	COLUBK	; 8
     11 U00de					      beq	.End	; 11
     12 U00de
     13 U00de				   .Rainbow
     14 U00de					      sta	COLUBK	; 9
     15 U00de					      nop		; 11
     16 U00de
     17 U00de				   .End
     18 U00de
     19 U00de					      ENDM
     20 U00de
     21 U00de
     22 U00de
     23 U00de					      MAC	throb_rainbow_pf
     24 U00de
     25 U00de					      SUBROUTINE
     26 U00de
     27 U00de				   .X	      SET	{1}
     28 U00de
     29 U00de					      lda	RamBowColors+.X	; 3
     30 U00de					      bne	.Rainbow	; 5/6
     31 U00de
     32 U00de					      stx	COLUPF	; 8
     33 U00de					      beq	.End	; 11
     34 U00de
     35 U00de				   .Rainbow
     36 U00de					      sta	COLUPF	; 9
     37 U00de					      nop		; 11
     38 U00de
     39 U00de				   .End
     40 U00de
     41 U00de					      ENDM
     42 U00de
     43 U00de
     44 U00de
     45 U00de					      MAC	skip_word
     46 U00de
     47 U00de					      HEX	0C
     48 U00de
     49 U00de					      ENDM
------- FILE main.asm
     35 U00de
     36 U00de							; Ensure that the code is placed in the proper place in the binary
     37 U00de
     38  2000 ????				      SEG	CODE
     39  1000					      ORG	$1000	; 4K ROM
     40  1000
     41  1000
     42  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43  1000							; Full System Clear
     44  1000							;
     45  1000							; Clear all system registers and RAM at startup
     46  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  1000
     48  1000				   SystemClear
     49  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     51  100b
     52  100b
     53  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  100b							; Game Logic
     55  100b							;
     56  100b							; Do the overscan, vertical sync, and vertical blanking,
     57  100b							; along with any game logic
     58  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 c7		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 c7		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 c7		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 c7		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 c7		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 c7		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 89		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8a		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8b		      sta	ProgressBar+2	; 34
     30  1069		       85 8c		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 8d		      sta	ProgressBar+4	; 42
     33  106f
     34  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35  106f							; Prepare for throbbing lines - 43 cycles
     36  106f
     37  106f		       a5 80		      lda	Frame	; 45 - get the current frame number
     38  1071		       29 1c		      and	#%00011100	; 47 - change animation frame every 4 game frames
     39  1073		       4a		      lsr		; 49
     40  1074		       4a		      lsr		; 51 - shift to get a value from 0-7
     41  1075		       85 c7		      sta	Temp	; 54
     42  1077		       0a		      asl		; 56 - carry flag will always be clear after this
     43  1078		       65 c7		      adc	Temp	; 59 - multiply by 3
     44  107a		       a8		      tay		; 61
     45  107b
     46  107b		       85 12		      sta	RESM0	; 64 - set position of left side of level counter digit
     47  107d
     48  107d		       a5 86		      lda	ScoreColor	; 67
     49  107f		       29 f0		      and	#$F0	; 69
     50  1081		       85 c7		      sta	Temp	; 72
     51  1083
     52  1083		       b9 a0 1c 	      lda	ThrobGfx+0,y	; 00
     53  1086		       0a		      asl		; 02
     54  1087		       90 01		      bcc	.Color0
     55  1089		       0c		      HEX	0C	; 08
     56  108a				   .Color0
     57  108a		       65 c7		      adc	Temp	; 08
     58  108c		       85 c0		      sta	ThrobColor+0	; 11
     59  108e
     60  108e		       b9 a1 1c 	      lda	ThrobGfx+1,y	; 15
     61  1091		       0a		      asl		; 17
     62  1092		       90 01		      bcc	.Color1
     63  1094		       0c		      HEX	0C	; 23
     64  1095				   .Color1
     65  1095		       65 c7		      adc	Temp	; 23
     66  1097		       85 c1		      sta	ThrobColor+1	; 26
     67  1099
     68  1099		       b9 a2 1c 	      lda	ThrobGfx+2,y	; 30
     69  109c		       0a		      asl		; 32
     70  109d		       90 01		      bcc	.Color2
     71  109f		       0c		      HEX	0C	; 38
     72  10a0				   .Color2
     73  10a0		       65 c7		      adc	Temp	; 38
     74  10a2		       85 c2		      sta	ThrobColor+2	; 41
     75  10a4
     76  10a4							; sleep19
     77  10a4		       20 24 19 	      jsr	Sleep12
      0  10a7					      SLEEP	7	; 60
      1  10a7				   .CYCLES    SET	7
      2  10a7
      3  10a7				  -	      IF	.CYCLES < 2
      4  10a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10a7				  -	      ERR
      6  10a7					      ENDIF
      7  10a7
      8  10a7					      IF	.CYCLES & 1
      9  10a7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10a7		       04 00		      nop	0
     11  10a9				  -	      ELSE
     12  10a9				  -	      bit	VSYNC
     13  10a9					      ENDIF
     14  10a9				   .CYCLES    SET	.CYCLES - 3
     15  10a9					      ENDIF
     16  10a9
     17  10a9					      REPEAT	.CYCLES / 2
     18  10a9		       ea		      nop
     17  10a9					      REPEND
     18  10aa		       ea		      nop
     19  10ab					      REPEND
     79  10ab
     80  10ab		       85 14		      sta	RESBL	; 63 - set position of leading "1" in level counter
     81  10ad		       85 13		      sta	RESM1	; 66 - set position of right side of level counter digit
     82  10af
     83  10af		       85 02		      sta	WSYNC
     84  10b1		       85 2a		      sta	HMOVE
     85  10b3
     86  10b3
     87  10b3
     88  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  10b3							; Load Scoreboard
     90  10b3							;
     91  10b3							; Get graphics data for the scoreboard and push it onto the stack
     92  10b3							;
     93  10b3							; Takes 535 cycles to complete (7 full scanlines + 3 cycles)
     94  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  10b3
     96  10b3					      SUBROUTINE
     97  10b3
     98  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10b3							; Prepare pointer for level digit graphics - 21 cycles
    100  10b3
    101  10b3		       a2 1c		      ldx	#>LevelGfx	; 2
    102  10b5		       86 91		      stx	LvlLoadPtr+1	; 3 - set MSB of level digit graphics pointer
    103  10b7
    104  10b7		       a5 87		      lda	BCDLevel	; 3
    105  10b9
    106  10b9		       29 0f		      and	#$0F	; 2
    107  10bb
    108  10bb		       0a		      asl		; 2
    109  10bc		       0a		      asl		; 2
    110  10bd		       0a		      asl		; 2
    111  10be
    112  10be		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
    113  10c0		       85 90		      sta	LvlLoadPtr	; 3 - set LSB of level digit graphics pointer
    114  10c2
    115  10c2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  10c2							; Prepare one pointer MSB and multiple LSBs for score digit graphics - 86 cycles
    117  10c2
    118  10c2		       86 93		      stx	ScrLoadPtr0+1	; 3 - set MSB of score digit graphics pointer2
    119  10c4		       86 95		      stx	ScrLoadPtr1+1	; 3
    120  10c6		       86 97		      stx	ScrLoadPtr2+1	; 3
    121  10c8		       86 99		      stx	ScrLoadPtr3+1	; 3
    122  10ca		       86 9b		      stx	ScrLoadPtr4+1	; 3
    123  10cc		       86 9d		      stx	ScrLoadPtr5+1	; 3
    124  10ce
    125  10ce		       a7 81		      lax	BCDScore+0	; 3
    126  10d0		       29 f0		      and	#$F0	; 2
    127  10d2		       4a		      lsr		; 2
    128  10d3		       85 92		      sta	ScrLoadPtr0	; 3 - set LSB for digit 0
    129  10d5		       8a		      txa		; 2
    130  10d6		       29 0f		      and	#$0F	; 2
    131  10d8		       0a		      asl		; 2
    132  10d9		       0a		      asl		; 2
    133  10da		       0a		      asl		; 2
    134  10db		       85 94		      sta	ScrLoadPtr1	; 3 - set LSB for digit 1
    135  10dd
    136  10dd		       a7 82		      lax	BCDScore+1	; 3
    137  10df		       29 f0		      and	#$F0	; 2
    138  10e1		       4a		      lsr		; 2
    139  10e2		       85 96		      sta	ScrLoadPtr2	; 3 - set LSB for digit 2
    140  10e4		       8a		      txa		; 2
    141  10e5		       29 0f		      and	#$0F	; 2
    142  10e7		       0a		      asl		; 2
    143  10e8		       0a		      asl		; 2
    144  10e9		       0a		      asl		; 2
    145  10ea		       85 98		      sta	ScrLoadPtr3	; 2 - set LSB for digit 3
    146  10ec
    147  10ec		       a7 83		      lax	BCDScore+2	; 3
    148  10ee		       29 f0		      and	#$F0	; 2
    149  10f0		       4a		      lsr		; 2
    150  10f1		       85 9a		      sta	ScrLoadPtr4	; 3 - set LSB for digit 4
    151  10f3		       8a		      txa		; 2
    152  10f4		       29 0f		      and	#$0F	; 2
    153  10f6		       0a		      asl		; 2
    154  10f7		       0a		      asl		; 2
    155  10f8		       0a		      asl		; 2
    156  10f9		       85 9c		      sta	ScrLoadPtr5	; 3 - set LSB for digit 5
    157  10fb
    158  10fb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  10fb							; Load the stack with the graphics for the scoreboard - 428 cycles
    160  10fb
    161  10fb		       a0 06		      ldy	#6	; 2
    162  10fd
    163  10fd				   .LoadScoreboard
    164  10fd
    165  10fd		       b1 90		      lda	(LvlLoadPtr),y	; 5
    166  10ff		       48		      pha		; 3
    167  1100
    168  1100		       b1 9c		      lda	(ScrLoadPtr5),y	; 5
    169  1102		       48		      pha		; 3
    170  1103
    171  1103		       b1 9a		      lda	(ScrLoadPtr4),y	; 5
    172  1105		       48		      pha		; 3
    173  1106
    174  1106		       b1 98		      lda	(ScrLoadPtr3),y	; 5
    175  1108		       48		      pha		; 3
    176  1109
    177  1109		       b1 96		      lda	(ScrLoadPtr2),y	; 5
    178  110b		       48		      pha		; 3
    179  110c
    180  110c		       b1 94		      lda	(ScrLoadPtr1),y	; 5
    181  110e		       48		      pha		; 3
    182  110f
    183  110f		       b1 92		      lda	(ScrLoadPtr0),y	; 5
    184  1111		       48		      pha		; 3
    185  1112
    186  1112		       88		      dey		; 2
    187  1113		       10 e8		      bpl	.LoadScoreboard	; 2/3
    188  1115
    189  1115
    190  1115
    191  1115							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1115							; Load RAM for progress bar display (28-53 cycles)
    193  1115
    194  1115		       a5 88		      lda	Progress	; 3 - get amount of progress
    195  1117
    196  1117							; The level progress bar uses the following playfield bits:
    197  1117							; (note that PF0 and PF2 are NOT reversed in this diagram)
    198  1117							;
    199  1117							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    200  1117							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    201  1117							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    202  1117							;
    203  1117							; When the progress bar is empty, every bit labeled "X" above should be
    204  1117							; set (1), and when it is full, every "X" bit should be cleared (0).
    205  1117							; The bits labeled "o" must ALWAYS be cleared.
    206  1117							;
    207  1117							; The leftmost playfield value (the 1st PF0) will be calculated first,
    208  1117							; and then each playfield value to the right until the 2nd PF1
    209  1117							; will be calculated.
    210  1117
    211  1117		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    212  1119
    213  1119		       38		      sec		; 2
    214  111a		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    215  111c		       30 1e		      bmi	.Underflow1	; 2/3
    216  111e		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    217  1120
    218  1120		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    219  1122		       30 23		      bmi	.Underflow2	; 2/3
    220  1124		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    221  1126
    222  1126		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    223  1128		       30 28		      bmi	.Underflow3	; 2/3
    224  112a		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    225  112c
    226  112c		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    227  112e		       30 2d		      bmi	.Underflow4	; 2/3
    228  1130		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    229  1132
    230  1132		       aa		      tax		; 2
    231  1133		       bd 0e 1d 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    232  1136		       0a		      asl		; 2
    233  1137		       85 8d		      sta	ProgressBar+4	; 3
    234  1139		       4c 65 11 	      jmp	.Finish	; 3
    235  113c
    236  113c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    237  113c				   .Underflow1		; for 1st PF0
    238  113c
    239  113c		       69 03		      adc	#3	; 3 - add back the 3
    240  113e		       aa		      tax		; 2
    241  113f		       bd 1b 1d 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    242  1142		       85 89		      sta	ProgressBar	; 3
    243  1144		       4c 65 11 	      jmp	.Finish	; 3
    244  1147
    245  1147							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    246  1147				   .Underflow2		; for 1st PF1
    247  1147
    248  1147		       69 08		      adc	#8	; 3 - add back the 8
    249  1149		       aa		      tax		; 2
    250  114a		       bd 0d 1d 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    251  114d		       85 8a		      sta	ProgressBar+1	; 3
    252  114f		       4c 65 11 	      jmp	.Finish	; 3
    253  1152
    254  1152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    255  1152				   .Underflow3		; for PF2
    256  1152
    257  1152		       69 08		      adc	#8	; 3 - add back the 8
    258  1154		       aa		      tax		; 2
    259  1155		       bd 16 1d 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    260  1158		       85 8b		      sta	ProgressBar+2	; 3
    261  115a		       4c 65 11 	      jmp	.Finish	; 3
    262  115d
    263  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    264  115d				   .Underflow4		; for 2nd PF0
    265  115d
    266  115d		       69 04		      adc	#4	; 3 - add back the 4
    267  115f		       aa		      tax		; 2
    268  1160		       bd 1a 1d 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    269  1163		       85 8c		      sta	ProgressBar+3	; 3
    270  1165
    271  1165							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1165				   .Finish
    273  1165
    274  1165		       85 2b		      sta	HMCLR
    275  1167
    276  1167
    277  1167
    278  1167		       a9 10		      lda	#$10
    279  1169		       85 a4		      sta	FoodItemL+0
    280  116b		       a9 70		      lda	#$70
    281  116d		       85 ab		      sta	FoodItemR+0
    282  116f		       a9 20		      lda	#$20
    283  1171		       85 a5		      sta	FoodItemL+1
    284  1173		       a9 80		      lda	#$80
    285  1175		       85 ac		      sta	FoodItemR+1
    286  1177		       a9 30		      lda	#$30
    287  1179		       85 a6		      sta	FoodItemL+2
    288  117b		       a9 90		      lda	#$90
    289  117d		       85 ad		      sta	FoodItemR+2
    290  117f		       a9 40		      lda	#$40
    291  1181		       85 a7		      sta	FoodItemL+3
    292  1183		       a9 a0		      lda	#$A0
    293  1185		       85 ae		      sta	FoodItemR+3
    294  1187		       a9 50		      lda	#$50
    295  1189		       85 a8		      sta	FoodItemL+4
    296  118b		       a9 b0		      lda	#$B0
    297  118d		       85 af		      sta	FoodItemR+4
    298  118f		       a9 60		      lda	#$60
    299  1191		       85 a9		      sta	FoodItemL+5
    300  1193		       a9 c0		      lda	#$C0
    301  1195		       85 b0		      sta	FoodItemR+5
    302  1197		       a9 d0		      lda	#$D0
    303  1199		       85 aa		      sta	FoodItemL+6
    304  119b		       a9 e0		      lda	#$E0
    305  119d		       85 b1		      sta	FoodItemR+6
    306  119f
    307  119f		       c6 b2		      dec	FoodPosX
    308  11a1		       10 04		      bpl	.NoReset
    309  11a3		       a9 58		      lda	#88
    310  11a5		       85 b2		      sta	FoodPosX
    311  11a7				   .NoReset
    312  11a7		       a5 b2		      lda	FoodPosX
    313  11a9		       85 b5		      sta	FoodPosX+3
    314  11ab
    315  11ab		       a5 b2		      lda	FoodPosX
    316  11ad		       38		      sec
    317  11ae
    318  11ae		       e9 29		      sbc	#41
    319  11b0		       b0 02		      bcs	.Rock1
    320  11b2		       69 59		      adc	#89
    321  11b4				   .Rock1
    322  11b4		       85 b3		      sta	FoodPosX+1
    323  11b6
    324  11b6		       e9 11		      sbc	#17
    325  11b8		       b0 02		      bcs	.Rock2
    326  11ba		       69 59		      adc	#89
    327  11bc				   .Rock2
    328  11bc		       85 b4		      sta	FoodPosX+2
    329  11be
    330  11be		       e9 1d		      sbc	#29
    331  11c0		       b0 02		      bcs	.Rock4
    332  11c2		       69 59		      adc	#89
    333  11c4				   .Rock4
    334  11c4		       85 b6		      sta	FoodPosX+4
    335  11c6
    336  11c6		       4a		      lsr
    337  11c7		       85 b7		      sta	FoodPosX+5
    338  11c9
    339  11c9		       e9 39		      sbc	#57
    340  11cb		       b0 02		      bcs	.Rock6
    341  11cd		       69 59		      adc	#89
    342  11cf				   .Rock6
    343  11cf		       85 b8		      sta	FoodPosX+6
    344  11d1
    345  11d1
    346  11d1
    347  11d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    348  11d1							; Caclulate cat's position data
    349  11d1
    350  11d1		       a5 80		      lda	Frame
    351  11d3		       4a		      lsr
    352  11d4		       29 3f		      and	#63
    353  11d6		       18		      clc
    354  11d7		       69 13		      adc	#19
    355  11d9		       85 9e		      sta	CatPosY
    356  11db
    357  11db					      SUBROUTINE
    358  11db
    359  11db		       a5 9e		      lda	CatPosY
    360  11dd
    361  11dd		       a2 00		      ldx	#0
    362  11df		       38		      sec
    363  11e0				   .DivideLoop
    364  11e0		       e8		      inx
    365  11e1		       e9 13		      sbc	#19
    366  11e3		       b0 fb		      bcs	.DivideLoop
    367  11e5
    368  11e5		       69 13		      adc	#19
    369  11e7		       85 9f		      sta	CatPosition
    370  11e9
    371  11e9		       8a		      txa
    372  11ea		       0a		      asl
    373  11eb		       0a		      asl
    374  11ec		       0a		      asl
    375  11ed		       0a		      asl
    376  11ee		       0a		      asl
    377  11ef		       65 9f		      adc	CatPosition
    378  11f1		       85 9f		      sta	CatPosition
    379  11f3
    380  11f3		       ca		      dex
    381  11f4		       86 a2		      stx	PreCatRows
    382  11f6
    383  11f6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    384  11f6							; Calculate Hmove offsets for 2nd cat row's food items
    385  11f6
    386  11f6		       a9 05		      lda	#5
    387  11f8		       38		      sec
    388  11f9		       e5 a2		      sbc	PreCatRows
    389  11fb		       a8		      tay
    390  11fc
    391  11fc		       b9 a4 00 	      lda	FoodItemL,y
    392  11ff		       29 f0		      and	#$F0
    393  1201		       85 bc		      sta	CatRow2FoodL
    394  1203		       aa		      tax
    395  1204		       bd 0f 1e 	      lda	FoodGfx+15,x
    396  1207		       85 be		      sta	CatRow2Color1
    397  1209
    398  1209		       b9 ab 00 	      lda	FoodItemR,y
    399  120c		       29 f0		      and	#$F0
    400  120e		       85 bd		      sta	CatRow2FoodR
    401  1210		       aa		      tax
    402  1211		       bd 0f 1e 	      lda	FoodGfx+15,x
    403  1214		       85 bf		      sta	CatRow2Color2
    404  1216
    405  1216		       b9 b2 00 	      lda	FoodPosX,y
    406  1219		       e9 2c		      sbc	#44
    407  121b		       f0 04		      beq	.Prepare
    408  121d		       90 02		      bcc	.Prepare
    409  121f		       e9 2d		      sbc	#45
    410  1221
    411  1221				   .Prepare
    412  1221		       38		      sec
    413  1222		       e9 01		      sbc	#1
    414  1224
    415  1224		       a2 70		      ldx	#$70
    416  1226		       a0 02		      ldy	#2
    417  1228
    418  1228				   .OffsetLoop
    419  1228		       18		      clc
    420  1229		       69 0f		      adc	#15
    421  122b		       f0 02		      beq	.CalcOffset
    422  122d		       30 0d		      bmi	.MaxOffset
    423  122f
    424  122f				   .CalcOffset
    425  122f		       49 07		      eor	#7
    426  1231		       0a		      asl
    427  1232		       0a		      asl
    428  1233		       0a		      asl
    429  1234		       0a		      asl
    430  1235
    431  1235		       99 b9 00 	      sta	CatRowHmove,y
    432  1238		       a9 00		      lda	#0
    433  123a		       f0 02		      beq	.NextOffset
    434  123c
    435  123c				   .MaxOffset
    436  123c		       96 b9		      stx	CatRowHmove,y
    437  123e
    438  123e				   .NextOffset
    439  123e		       88		      dey
    440  123f		       10 e7		      bpl	.OffsetLoop
    441  1241
    442  1241
    443  1241
    444  1241
    445  1241
    446  1241					      SUBROUTINE
    447  1241
    448  1241
    449  1241
    450  1241
    451  1241
    452  1241
    453  1241		       a9 7a		      lda	#COL_SCORE	; 2
    454  1243		       85 86		      sta	ScoreColor	; 3
    455  1245
    456  1245		       a5 86		      lda	ScoreColor	; 3
    457  1247		       85 06		      sta	COLUP0	; 3 - set color registers
    458  1249		       85 07		      sta	COLUP1	; 3
    459  124b		       85 08		      sta	COLUPF	; 3
    460  124d		       85 09		      sta	COLUBK	; 3
    461  124f
    462  124f		       a5 80		      lda	Frame
    463  1251		       29 0f		      and	#%00001111
    464  1253		       f0 04		      beq	.IncScore
    465  1255		       a9 00		      lda	#0
    466  1257		       f0 02		      beq	.IncSkip
    467  1259				   .IncScore
    468  1259		       a9 89		      lda	#$89
    469  125b				   .IncSkip
    470  125b		       85 85		      sta	BCDScoreAdd+1
    471  125d
    472  125d		       a9 19		      lda	#$19
    473  125f		       85 87		      sta	BCDLevel
    474  1261
    475  1261
    476  1261
    477  1261
    478  1261							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    479  1261							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    480  1261							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1261
    482  1261		       a9 1e		      lda	#>FoodGfx
    483  1263		       85 91		      sta	FoodGfxPtr1+1
    484  1265		       85 93		      sta	FoodGfxPtr2+1
    485  1267
    486  1267		       a9 1f		      lda	#>CatTartGfx
    487  1269		       85 95		      sta	TartGfxPtr1+1
    488  126b		       85 99		      sta	TartGfxPtr2+1
    489  126d
    490  126d		       a9 1f		      lda	#>CatFaceGfx
    491  126f		       85 97		      sta	CatGfxPtr1+1
    492  1271		       85 9b		      sta	CatGfxPtr2+1
    493  1273
    494  1273		       a5 9f		      lda	CatPosition
    495  1275		       29 1f		      and	#%00011111
    496  1277		       aa		      tax
    497  1278
    498  1278		       18		      clc
    499  1279
    500  1279		       69 06		      adc	#<CatTartGfx
    501  127b		       85 98		      sta	TartGfxPtr2
    502  127d		       69 13		      adc	#19
    503  127f		       85 94		      sta	TartGfxPtr1
    504  1281
    505  1281		       8a		      txa
    506  1282		       69 27		      adc	#<CatFaceGfx
    507  1284		       85 9a		      sta	CatGfxPtr2
    508  1286		       69 13		      adc	#19
    509  1288		       85 96		      sta	CatGfxPtr1
    510  128a
    511  128a		       a9 56		      lda	#$56
    512  128c		       85 8e		      sta	PgBarColor
    513  128e
    514  128e		       a9 4a		      lda	#COL_CAT_TART
    515  1290		       85 a3		      sta	CatTartColor
    516  1292
    517  1292		       a5 80		      lda	Frame
    518  1294		       29 08		      and	#%00001000
    519  1296		       4a		      lsr
    520  1297		       4a		      lsr
    521  1298		       4a		      lsr
    522  1299		       a8		      tay
    523  129a		       b9 1e 1d 	      lda	RainbowGfx,y
    524  129d		       85 a0		      sta	Rainbow
    525  129f
    526  129f
    527  129f
    528  129f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  129f							; Prepare for Main Gameplay Kernel
    530  129f							;
    531  129f							; Figure out how many rows to draw before and after the two cat rows
    532  129f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    533  129f
    534  129f
    535  129f
    536  129f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    537  129f							; Finish Vertical Blanking
    538  129f							;
    539  129f							; Loop until the end of vertical blanking
    540  129f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    541  129f
    542  129f		       4c 00 13 	      jmp	VblankTimerLoop
    543  12a2
    544  1300		       00 00 00 00*	      ALIGN	$100
    545  1300
    546  1300				   VblankTimerLoop
    547  1300		       ad 84 02 	      lda	INTIM
    548  1303		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     63  1305
     64  1305
     65  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66  1305							; Kernel
     67  1305							;
     68  1305							; Draw the screen
     69  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     70  1305
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1305					      include	code/Kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       a9 00		      lda	#0
      6  1307		       85 02		      sta	WSYNC
      7  1309		       85 01		      sta	VBLANK	; enable display
      8  130b
      9  130b							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  130b					      include	code/ScoreboardKernel.asm
      1  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  130b							; Scoreboard Display
      3  130b							;
      4  130b							; Draw the 6-digit score and level counter.
      5  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  130b
      7  130b					      SUBROUTINE
      8  130b
      9  130b		       85 09		      sta	COLUBK	; 06 - A = 0
     10  130d		       85 06		      sta	COLUP0	; 09 - set both colors to black
     11  130f
     12  130f		       a9 ff		      lda	#$FF	; 11
     13  1311		       85 0d		      sta	PF0	; 14
     14  1313		       85 1b		      sta	GRP0	; 17 - player 0 (black) will cover up...
     15  1315
     16  1315		       a9 a0		      lda	#$A0	; 19 - ...part of PF1, causing bit 7 of CXP0FB to be set
     17  1317		       85 0e		      sta	PF1	; 22 - (player 0 is drawn over PF1 to hide it)
     18  1319
     19  1319		       a4 86		      ldy	ScoreColor	; 25 - pre-load value to store to GRP0,
     20  131b		       a2 13		      ldx	#%00010011	; 27 - and value to store to NUSIZx, CTRLPF, and VDELxx
     21  131d
     22  131d		       a9 80		      lda	#$80	; 29
     23  131f		       85 0e		      sta	PF1	; 33 - fix PF1 register only AFTER collision
     24  1321
     25  1321		       86 04		      stx	NUSIZ0	; 35 - X = THREE_CLOSE | BALL_SIZE_2
     26  1323		       86 05		      stx	NUSIZ1	; 38
     27  1325		       86 25		      stx	VDELP0	; 41 - enable vertical delay for player 0...
     28  1327		       86 26		      stx	VDELP1	; 44 - ...and player 1
     29  1329		       86 0a		      stx	CTRLPF	; 47 - X = PF_REFLECT | PF_SCORE_MODE | MSL_SIZE_2
     30  132b							;	PF_SCORE_MODE isn't needed, but it saves a read
     31  132b		       84 06		      sty	COLUP0	; 50 - fix COLUP0 register
     32  132d
     33  132d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  132d							; Pre-load some graphics before the scoreboard kernel loop
     35  132d
     36  132d		       68		      pla		; 54 - pull gfx for digit0
     37  132e		       85 1b		      sta	GRP0	; 57 - digit0 -> [GRP0]
     38  1330
     39  1330							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1330							; Only draw leading 1 in level counter if the level is 10 or more
     41  1330
     42  1330		       a5 87		      lda	BCDLevel	; 60 - the value of bit 4...
     43  1332		       4a		      lsr		; 62
     44  1333		       4a		      lsr		; 64
     45  1334		       4a		      lsr		; 66 - ...gets shifted three times...
     46  1335		       85 1f		      sta	ENABL	; 69 - ...to be used to enable or disable the ball
     47  1337
     48  1337		       10 1e		      bpl	.ScoreEntrance	; 72
     49  1339
     50  1339							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1339				   .ScoreDigitLoop
     52  1339
     53  1339							; A contains gfx for digit3
     54  1339		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     55  133b
     56  133b							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     57  133b
     58  133b		       68		      pla		; 18 - pull gfx for digit3...
     59  133c		       a8		      tay		; 20 - ...and store in Y
     60  133d		       68		      pla		; 24 - pull gfx data for digit4...
     61  133e		       aa		      tax		; 26 - ...and store in X
     62  133f		       68		      pla		; 30 - pull gfx data for digit5 to A
     63  1340
     64  1340		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     65  1342		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     66  1344		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     67  1346		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     68  1348
     69  1348		       68		      pla		; 46 - pull gfx data for level counter
     70  1349		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     71  134b		       2a		      rol		; 51
     72  134c		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     73  134e		       6a		      ror		; 56
     74  134f		       4a		      lsr		; 58
     75  1350		       4a		      lsr		; 60
     76  1351		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     77  1353
     78  1353		       68		      pla		; 67 - pull gfx for digit0
     79  1354		       8d 1b 00 	      sta.w	GRP0	; 71 - digit0 -> [GRP0]
     80  1357				   .ScoreEntrance
     81  1357		       68		      pla		; 74 - pull gfx for digit1
     82  1358		       85 1c		      sta	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
     83  135a							;	(use an extra cycle for timing reasons)
     84  135a
     85  135a		       68		      pla		; 06 - pull gfx for digit2
     86  135b
     87  135b							; On the final iteration of the loop, the stack will have wrapped
     88  135b							; and pulled from location $02 at this point.
     89  135b							; This happens to be the collision register CXP0FB.
     90  135b							; Bit-7 will always be set in this register,
     91  135b							; and bit-7 is always clear in the score graphics,
     92  135b							; so checking bit-7 of the data pulled is all that you need
     93  135b							; to determine when to terminate the loop.
     94  135b
     95  135b		       aa		      tax		; 08 - set flags according to pulled data
     96  135c
     97  135c		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
     98  135e
     99  135e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    100  135e
    101  135e		       a9 00		      lda	#0
    102  1360		       85 1b		      sta	GRP0
    103  1362		       85 1c		      sta	GRP1
    104  1364		       85 26		      sta	VDELP1
    105  1366		       85 25		      sta	VDELP0
    106  1368		       85 1f		      sta	ENABL
    107  136a		       85 1d		      sta	ENAM0
    108  136c		       85 1e		      sta	ENAM1
    109  136e
    110  136e		       85 02		      sta	WSYNC
    111  1370		       85 02		      sta	WSYNC
    112  1372		       85 02		      sta	WSYNC
    113  1374		       85 02		      sta	WSYNC
    114  1376
    115  1376		       a5 86		      lda	ScoreColor
    116  1378		       8d 09 00 	      sta.w	COLUBK
    117  137b		       4c 00 14 	      jmp	.Align1
    118  137e
    119  1400		       00 00 00 00*	      ALIGN	$100
    120  1400
    121  1400				   .Align1
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1400					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1400							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1400							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1400
      4  1400				   PreKernel
      5  1400
      6  1400		       a9 00		      lda	#0	; 12
      7  1402		       85 1d		      sta	ENAM0	; 15 - disable missiles
      8  1404		       85 1e		      sta	ENAM1	; 18
      9  1406		       85 1b		      sta	GRP0	; 21 - disable player graphics
     10  1408		       85 1c		      sta	GRP1	; 24
     11  140a		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
     12  140c		       85 26		      sta	VDELP1	; 30
     13  140e		       85 1f		      sta	ENABL	; 33 - disable ball
     14  1410		       a2 06		      ldx	#6	; 35
     15  1412		       86 c8		      stx	CurrentRow	; 38
     16  1414
     17  1414
     18  1414							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  1414							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
     20  1414
     21  1414
     22  1414		       a2 ff		      ldx	#$FF
     23  1416		       9a		      txs
     24  1417
     25  1417		       a0 04		      ldy	#4
     26  1419				   .ClearRainbow
     27  1419		       48		      pha
     28  141a		       48		      pha
     29  141b		       48		      pha
     30  141c		       48		      pha
     31  141d		       48		      pha
     32  141e		       48		      pha
     33  141f		       48		      pha
     34  1420		       48		      pha
     35  1421
     36  1421		       88		      dey
     37  1422		       d0 f5		      bne	.ClearRainbow
     38  1424
     39  1424		       48		      pha
     40  1425		       48		      pha
     41  1426
     42  1426							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43  1426							; Load rainbow colors into RAM - 65 cycles
     44  1426
     45  1426		       a9 12		      lda	#18
     46  1428		       e5 9f		      sbc	CatPosition	; carry is assumed to be set
     47  142a		       29 1f		      and	#%00011111
     48  142c		       18		      clc
     49  142d		       69 ec		      adc	#RamBowColors+14
     50  142f		       aa		      tax
     51  1430		       9a		      txs
     52  1431
     53  1431		       ad 05 1f 	      lda	RainbowColors+5
     54  1434		       48		      pha
     55  1435		       48		      pha
     56  1436		       ad 04 1f 	      lda	RainbowColors+4
     57  1439		       48		      pha
     58  143a		       48		      pha
     59  143b		       ad 03 1f 	      lda	RainbowColors+3
     60  143e		       48		      pha
     61  143f		       48		      pha
     62  1440		       ad 02 1f 	      lda	RainbowColors+2
     63  1443		       48		      pha
     64  1444		       48		      pha
     65  1445		       ad 01 1f 	      lda	RainbowColors+1
     66  1448		       48		      pha
     67  1449		       48		      pha
     68  144a		       ad 00 1f 	      lda	RainbowColors+0
     69  144d		       48		      pha
     70  144e		       48		      pha
     71  144f
     72  144f		       85 02		      sta	WSYNC
     73  1451
     74  1451		       a5 f1		      lda	RamBowColors+19
     75  1453		       d0 02		      bne	.SetCatThrobPF
     76  1455		       a5 c0		      lda	ThrobColor+0
     77  1457				   .SetCatThrobPF
     78  1457		       85 c3		      sta	CatThrobPF
     79  1459
     80  1459		       85 02		      sta	WSYNC
      0  145b					      SLEEP	4
      1  145b				   .CYCLES    SET	4
      2  145b
      3  145b				  -	      IF	.CYCLES < 2
      4  145b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  145b				  -	      ERR
      6  145b					      ENDIF
      7  145b
      8  145b				  -	      IF	.CYCLES & 1
      9  145b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  145b				  -	      nop	0
     11  145b				  -	      ELSE
     12  145b				  -	      bit	VSYNC
     13  145b				  -	      ENDIF
     14  145b				  -.CYCLES    SET	.CYCLES - 3
     15  145b					      ENDIF
     16  145b
     17  145b					      REPEAT	.CYCLES / 2
     18  145b		       ea		      nop
     17  145b					      REPEND
     18  145c		       ea		      nop
     19  145d					      REPEND
     82  145d
     83  145d
     84  145d
     85  145d							; Player 0 is already aligned for drawing the cat's face.
     86  145d
     87  145d							; Align player 1 to draw the current frame's food items for the top row.
     88  145d
     89  145d							; food item can be placed anywhere from 0-88
     90  145d							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     91  145d
     92  145d		       a5 b8		      lda	FoodPosX+6	; 07 - get the food's position for the top row
     93  145f
     94  145f		       38		      sec		; 09
     95  1460				   .DivideLoop
     96  1460		       e9 0f		      sbc	#15	; 11
     97  1462		       b0 fc		      bcs	.DivideLoop	; 13
     98  1464
     99  1464		       49 07		      eor	#7	; 15
    100  1466		       69 01		      adc	#1	; 17
    101  1468		       0a		      asl		; 19
    102  1469		       0a		      asl		; 21
    103  146a		       0a		      asl		; 23
    104  146b
    105  146b		       85 11		      sta	RESP1	; 26
    106  146d
    107  146d
    108  146d
    109  146d		       0a		      asl		; 53
    110  146e		       85 21		      sta	HMP1	; 56
    111  1470
    112  1470		       a9 00		      lda	#ONE_COPY	; 58
    113  1472		       85 04		      sta	NUSIZ0	; 61
    114  1474		       a9 04		      lda	#TWO_WIDE	; 63
    115  1476		       85 05		      sta	NUSIZ1	; 66
    116  1478
    117  1478		       a9 80		      lda	#$80	; 68
    118  147a		       85 20		      sta	HMP0	; 71
    119  147c
    120  147c		       85 02		      sta	WSYNC
    121  147e
    122  147e		       a5 c1		      lda	ThrobColor+1	; 03
    123  1480		       85 09		      sta	COLUBK	; 06
    124  1482		       85 08		      sta	COLUPF	; 09
    125  1484
    126  1484
    127  1484
    128  1484
    129  1484		       a9 01		      lda	#PF_REFLECT	; 11
    130  1486		       85 0a		      sta	CTRLPF	; 14
    131  1488
    132  1488		       a5 a0		      lda	Rainbow	; 17
    133  148a		       85 0d		      sta	PF0	; 20
    134  148c
    135  148c		       a9 09		      lda	#COL_CAT_FACE	; 22
    136  148e		       85 06		      sta	COLUP0	; 25
    137  1490
    138  1490		       a5 aa		      lda	FoodItemL+6	; 28
    139  1492		       29 f0		      and	#$F0	; 30
    140  1494		       85 90		      sta	FoodGfxPtr1	; 33
    141  1496		       aa		      tax		; 35
    142  1497		       bd 0f 1e 	      lda	FoodGfx+15,x	; 39
    143  149a		       85 c9		      sta	FoodColor1	; 42
    144  149c
    145  149c		       a5 b1		      lda	FoodItemR+6	; 45
    146  149e		       29 f0		      and	#$F0	; 47
    147  14a0		       85 92		      sta	FoodGfxPtr2	; 50
    148  14a2		       aa		      tax		; 52
    149  14a3		       bd 0f 1e 	      lda	FoodGfx+15,x	; 56
    150  14a6		       85 ca		      sta	FoodColor2	; 59
    151  14a8
    152  14a8		       a5 b8		      lda	FoodPosX+6	; 62
    153  14aa		       85 c7		      sta	Temp	; 65
    154  14ac
    155  14ac		       a2 dd		      ldx	#GAMEPLAY_STACK	; 67
    156  14ae		       9a		      txs		; 69
    157  14af
    158  14af		       8d 2a 00 	      sta.w	HMOVE	; 73
    159  14b2
    160  14b2							; If any part of the cat needs to be drawn in the top row,
    161  14b2							; skip straight to CatRows.
    162  14b2
    163  14b2
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  14b2					      include	code/Gameplay Kernel/HiRows.asm
      1  14b2							; Draw all the rows above the cat's two rows
      2  14b2
      3  14b2				   HiRows     SUBROUTINE
      4  14b2
      5  14b2		       85 02		      sta	WSYNC
      6  14b4
      7  14b4		       a5 c0		      lda	ThrobColor+0
      8  14b6		       85 09		      sta	COLUBK
      9  14b8		       85 08		      sta	COLUPF
     10  14ba
     11  14ba
     12  14ba							; First, output a single-color line to draw the bottom of a "throb" line.
     13  14ba							; This will probably be a good time to prepare the pointers for the
     14  14ba							; food items' graphics, as well as loading the colors for the food items.
     15  14ba
     16  14ba							; After that, output 14 lines to draw a single row with food items,
     17  14ba							; but without drawing the cat. The food graphics will be updated every line,
     18  14ba							; but there will probably not be enough time to also update the food colors
     19  14ba							; every line throughout the kernel.
     20  14ba
     21  14ba		       20 00 19 	      jsr	DrawFoodRow
     22  14bd
     23  14bd		       c6 c8		      dec	CurrentRow	; 73
     24  14bf
     25  14bf		       85 02		      sta	WSYNC
     26  14c1
     27  14c1							; Lastly, output four single-color lines to draw most of a "throb" line,
     28  14c1							; while setting the position of player 1 to draw the next set of food items.
     29  14c1
     30  14c1
     31  14c1		       a5 c0		      lda	ThrobColor+0
     32  14c3		       85 09		      sta	COLUBK
     33  14c5		       85 08		      sta	COLUPF
     34  14c7		       a9 00		      lda	#0
     35  14c9		       85 1b		      sta	GRP0
     36  14cb		       85 1c		      sta	GRP1
     37  14cd		       85 02		      sta	WSYNC
     38  14cf
     39  14cf		       a5 c1		      lda	ThrobColor+1	; 03
     40  14d1		       85 09		      sta	COLUBK	; 06
     41  14d3		       85 08		      sta	COLUPF	; 09
     42  14d5
     43  14d5		       a4 c8		      ldy	CurrentRow	; 12 - get the row we are drawing
     44  14d7		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     45  14da
     46  14da		       38		      sec		; 18
     47  14db				   .DivideLoop
     48  14db		       e9 0f		      sbc	#15	; 20
     49  14dd		       b0 fc		      bcs	.DivideLoop	; 22
     50  14df
     51  14df		       8d 11 00 	      sta.w	RESP1	; 26
     52  14e2
     53  14e2		       49 07		      eor	#7
     54  14e4		       69 01		      adc	#1
     55  14e6		       0a		      asl
     56  14e7		       0a		      asl
     57  14e8		       0a		      asl
     58  14e9		       0a		      asl
     59  14ea		       85 21		      sta	HMP1
     60  14ec
     61  14ec		       85 02		      sta	WSYNC
     62  14ee
     63  14ee		       a5 c2		      lda	ThrobColor+2	; 03
     64  14f0		       85 09		      sta	COLUBK	; 06
     65  14f2		       85 08		      sta	COLUPF	; 09
     66  14f4
     67  14f4		       20 24 19 	      jsr	Sleep12
     68  14f7		       20 24 19 	      jsr	Sleep12
     69  14fa		       20 24 19 	      jsr	Sleep12
     70  14fd		       20 24 19 	      jsr	Sleep12
     71  1500		       20 24 19 	      jsr	Sleep12	; 69
     72  1503
     73  1503		       8d 2a 00 	      sta.w	HMOVE	; 73
     74  1506
     75  1506		       85 02		      sta	WSYNC
     76  1508
     77  1508		       a5 c1		      lda	ThrobColor+1	; 03
     78  150a		       85 09		      sta	COLUBK	; 06
     79  150c		       85 08		      sta	COLUPF	; 09
     80  150e
     81  150e		       b9 a4 00 	      lda	FoodItemL,y	; 13
     82  1511		       29 f0		      and	#$F0	; 15
     83  1513		       85 90		      sta	FoodGfxPtr1	; 18
     84  1515		       aa		      tax		; 20
     85  1516		       bd 0f 1e 	      lda	FoodGfx+15,x	; 24
     86  1519		       85 c9		      sta	FoodColor1	; 27
     87  151b
     88  151b		       b9 ab 00 	      lda	FoodItemR,y	; 31
     89  151e		       29 f0		      and	#$F0	; 33
     90  1520		       85 92		      sta	FoodGfxPtr2	; 36
     91  1522		       aa		      tax		; 38
     92  1523		       bd 0f 1e 	      lda	FoodGfx+15,x	; 42
     93  1526		       85 ca		      sta	FoodColor2	; 45
     94  1528
     95  1528		       b9 b2 00 	      lda	FoodPosX,y	; 49
     96  152b		       85 c7		      sta	Temp	; 52
     97  152d
     98  152d		       c6 a2		      dec	PreCatRows
     99  152f		       d0 81		      bne	HiRows
    100  1531
    101  1531							; If this is not the last row before drawing the cat's rows,
    102  1531							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  1531					      include	code/Gameplay Kernel/CatRows.asm
      1  1531							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1531							; Cat Row Kernel
      3  1531							;
      4  1531							; This is the subroutine that is used to draw the two gameplay kernel rows
      5  1531							; containing the cat. It does not draw the throbbing line between the two rows,
      6  1531							; it only draws a single, 14-scanline row with the cat and food items.
      7  1531							; This subroutine is called twice in the kernel, once for each of the two rows
      8  1531							; containing the cat.
      9  1531							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1531
     11  1531				   CatRows    SUBROUTINE
     12  1531
     13  1531		       85 02		      sta	WSYNC
     14  1533
     15  1533							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     16  1533							; If the cat is at the very top of the row, draw the top of the pop-tart.
     17  1533
     18  1533		       a5 c0		      lda	ThrobColor+0	; 03
     19  1535		       85 09		      sta	COLUBK	; 06
     20  1537		       85 08		      sta	COLUPF	; 09
     21  1539
     22  1539		       a6 ca		      ldx	FoodColor2	; 12
     23  153b		       9a		      txs		; 14
     24  153c
      0  153c					      SLEEP	27	; 41
      1  153c				   .CYCLES    SET	27
      2  153c
      3  153c				  -	      IF	.CYCLES < 2
      4  153c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  153c				  -	      ERR
      6  153c					      ENDIF
      7  153c
      8  153c					      IF	.CYCLES & 1
      9  153c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  153c		       04 00		      nop	0
     11  153e				  -	      ELSE
     12  153e				  -	      bit	VSYNC
     13  153e					      ENDIF
     14  153e				   .CYCLES    SET	.CYCLES - 3
     15  153e					      ENDIF
     16  153e
     17  153e					      REPEAT	.CYCLES / 2
     18  153e		       ea		      nop
     17  153e					      REPEND
     18  153f		       ea		      nop
     17  153f					      REPEND
     18  1540		       ea		      nop
     17  1540					      REPEND
     18  1541		       ea		      nop
     17  1541					      REPEND
     18  1542		       ea		      nop
     17  1542					      REPEND
     18  1543		       ea		      nop
     17  1543					      REPEND
     18  1544		       ea		      nop
     17  1544					      REPEND
     18  1545		       ea		      nop
     17  1545					      REPEND
     18  1546		       ea		      nop
     17  1546					      REPEND
     18  1547		       ea		      nop
     17  1547					      REPEND
     18  1548		       ea		      nop
     17  1548					      REPEND
     18  1549		       ea		      nop
     19  154a					      REPEND
     26  154a
     27  154a					      SUBROUTINE
     28  154a
     29  154a		       4c 00 16 	      jmp	.Align2	; 44
     30  154d
     31  1600		       00 00 00 00*	      ALIGN	$100
     32  1600
     33  1600				   .Align2
     34  1600		       a4 c8		      ldy	CurrentRow	; 47
     35  1602		       b9 b2 00 	      lda	FoodPosX,y	; 51
     36  1605		       c9 30		      cmp	#48	; 53
     37  1607
     38  1607		       a2 00		      ldx	#0	; 55
     39  1609		       a0 0d		      ldy	#13	; 57
     40  160b
     41  160b							; Then output the 14 lines to draw a single row. This will include drawing
     42  160b							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     43  160b							; All graphics will be updated every line.
     44  160b
     45  160b		       b0 0b		      bcs	.RightEntrance	; 60/59
     46  160d		       90 42		      bcc	.LeftEntrance	; 62
     47  160f
     48  160f							; 14 bytes into the page
     49  160f
     50  160f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  160f							; Kernel used when food items are closer to the right edge of the screen
     52  160f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  160f
     54  160f				   .RightLoop
     55  160f
     56  160f							; 8 cycles
     57  160f		       b1 96		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     58  1611		       85 1b		      sta	GRP0	; 52
     59  1613
     60  1613							; 9 cycles
     61  1613		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     62  1615		       ba		      tsx		; 57 - load 2nd food item's color
     63  1616		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     64  1618
     65  1618				   .RightEntrance		; enter loop here
     66  1618
     67  1618							; 2 cycles
     68  1618		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     69  161a
     70  161a							; 8 cycles
     71  161a		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     72  161c		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     73  161e
     74  161e							; 8 cycles
     75  161e		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     76  1620		       85 1c		      sta	GRP1	; 02
     77  1622
     78  1622							; 7 cycles
     79  1622		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     80  1625		       85 09		      sta	COLUBK	; 09
     81  1627
     82  1627							; 7 cycles
     83  1627		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     84  162a		       85 08		      sta	COLUPF	; 16
     85  162c
     86  162c							; 6 cycles
     87  162c		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
     88  162e		       85 07		      sta	COLUP1	; 22
     89  1630
     90  1630							; 8 cycles
     91  1630		       a5 a3		      lda	CatTartColor	; 25
     92  1632		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     93  1634		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     94  1636		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     95  1638
     96  1638							; 5 cycles
     97  1638		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     98  163a
     99  163a							; 2 cycles
    100  163a		       88		      dey		; 41
    101  163b		       10 d2		      bpl	.RightLoop	; 44/43
    102  163d
    103  163d		       a0 12		      ldy	#18	; 45
    104  163f		       b1 98		      lda	(TartGfxPtr2),y	; 50
    105  1641
      0  1641					      SLEEP	2	; 52
      1  1641				   .CYCLES    SET	2
      2  1641
      3  1641				  -	      IF	.CYCLES < 2
      4  1641				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1641				  -	      ERR
      6  1641					      ENDIF
      7  1641
      8  1641				  -	      IF	.CYCLES & 1
      9  1641				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1641				  -	      nop	0
     11  1641				  -	      ELSE
     12  1641				  -	      bit	VSYNC
     13  1641				  -	      ENDIF
     14  1641				  -.CYCLES    SET	.CYCLES - 3
     15  1641					      ENDIF
     16  1641
     17  1641					      REPEAT	.CYCLES / 2
     18  1641		       ea		      nop
     19  1642					      REPEND
    107  1642
    108  1642		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    109  1644		       ba		      tsx		; 57 - load 2nd food item's color
    110  1645		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    111  1647
    112  1647		       b0 38		      bcs	.End	; 63
    113  1649
    114  1649							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115  1649							; Kernel used when food items are closer to the left edge of the screen
    116  1649							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1649
    118  1649				   .LeftLoop
    119  1649
    120  1649							; 8 cycles
    121  1649		       b1 96		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    122  164b		       85 1b		      sta	GRP0	; 57
    123  164d
    124  164d							; 5 cycles
    125  164d		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    126  164f		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    127  1651
    128  1651				   .LeftEntrance		; enter loop here
    129  1651
    130  1651							; 8 cycles
    131  1651		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    132  1653		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    133  1655
    134  1655							; 8 cycles
    135  1655		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    136  1657		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    137  1659
    138  1659							; 7 cycles
    139  1659		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    140  165c		       85 09		      sta	COLUBK	; 09
    141  165e
    142  165e							; 7 cycles
    143  165e		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    144  1661		       85 08		      sta	COLUPF	; 16
    145  1663
    146  1663							; 6 cycles
    147  1663		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    148  1665		       85 07		      sta	COLUP1	; 22
    149  1667
    150  1667							; 8 cycles
    151  1667		       a5 a3		      lda	CatTartColor	; 25
    152  1669		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    153  166b		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    154  166d
    155  166d							; 13 cycles
    156  166d		       b1 92		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    157  166f		       ba		      tsx		; 38 - load 2nd food item's color
    158  1670		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    159  1672		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    160  1674
    161  1674							; 5 cycles
    162  1674		       88		      dey		; 46
    163  1675		       10 d2		      bpl	.LeftLoop	; 49/48
    164  1677
    165  1677		       a2 00		      ldx	#0	; 50
    166  1679		       86 08		      stx	COLUPF	; 53
    167  167b
    168  167b		       a0 12		      ldy	#18	; 55
    169  167d		       b1 98		      lda	(TartGfxPtr2),y	; 60
    170  167f
    171  167f		       86 1c		      stx	GRP1	; 63
    172  1681
    173  1681				   .End
    174  1681
    175  1681
    176  1681
    177  1681							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    178  1681							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    179  1681							; cat with the rainbow. In order to align player 1 for the next row's
    180  1681							; food items, it will be neccesary to have three versions of this kernel,
    181  1681							; one for each of the three 60-color-clock spaced positions to reset.
    182  1681							; HMOVE will be written to on the first four scanlines. With a maximum
    183  1681							; movement of 15 color-clocks per scanline, this will allow a movement of
    184  1681							; up to 60 color clocks. With three versions of the kernel, it should be
    185  1681							; possible to put player 1 anywhere on the screen.
    186  1681							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187  1681
    188  1681
    189  1681
    190  1681							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191  1681							; Draw throb line #1
    192  1681
    193  1681		       85 0e		      sta	PF1	; 66
    194  1683
    195  1683		       b1 9a		      lda	(CatGfxPtr2),y	; 71
    196  1685		       85 1b		      sta	GRP0	; 74
    197  1687
    198  1687		       a6 c0		      ldx	ThrobColor+0	; 01
    199  1689
      0  1689					      THROB_RAINBOW_BK	18	; 12
      1  1689
      2  1689					      SUBROUTINE
      3  1689
      4  1689				   .X	      SET	18
      5  1689
      6  1689		       a5 f0		      lda	RamBowColors+.X
      7  168b		       d0 04		      bne	.Rainbow
      8  168d
      9  168d		       86 09		      stx	COLUBK
     10  168f		       f0 03		      beq	.End
     11  1691
     12  1691				   .Rainbow
     13  1691		       85 09		      sta	COLUBK
     14  1693		       ea		      nop
     15  1694
     16  1694				   .End
     17  1694
    201  1694
    202  1694		       a5 c3		      lda	CatThrobPF	; 15
    203  1696		       85 08		      sta	COLUPF	; 18
    204  1698		       8e 07 00 	      stx.w	COLUP1	; 22
    205  169b
    206  169b		       a5 a3		      lda	CatTartColor	; 25
    207  169d		       85 08		      sta	COLUPF	; 28
    208  169f		       86 09		      stx	COLUBK	; 31
    209  16a1
    210  16a1		       88		      dey		; 33
    211  16a2		       85 11		      sta	RESP1	; 36
    212  16a4		       86 08		      stx	COLUPF	; 39
    213  16a6
    214  16a6		       b1 9a		      lda	(CatGfxPtr2),y	; 44
    215  16a8		       85 1b		      sta	GRP0	; 47
    216  16aa
    217  16aa		       b1 98		      lda	(TartGfxPtr2),y	; 52
    218  16ac		       85 0e		      sta	PF1	; 55
    219  16ae
    220  16ae		       c6 c8		      dec	CurrentRow	; 60
    221  16b0		       a2 00		      ldx	#0	; 62
    222  16b2		       86 1c		      stx	GRP1	; 65
    223  16b4
    224  16b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    225  16b4							; Draw throb line #2
    226  16b4
    227  16b4		       a5 bb		      lda	CatRowHmove+2	; 68
    228  16b6		       85 21		      sta	HMP1	; 71
      0  16b8					      SLEEP	2	; 73
      1  16b8				   .CYCLES    SET	2
      2  16b8
      3  16b8				  -	      IF	.CYCLES < 2
      4  16b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16b8				  -	      ERR
      6  16b8					      ENDIF
      7  16b8
      8  16b8				  -	      IF	.CYCLES & 1
      9  16b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16b8				  -	      nop	0
     11  16b8				  -	      ELSE
     12  16b8				  -	      bit	VSYNC
     13  16b8				  -	      ENDIF
     14  16b8				  -.CYCLES    SET	.CYCLES - 3
     15  16b8					      ENDIF
     16  16b8
     17  16b8					      REPEAT	.CYCLES / 2
     18  16b8		       ea		      nop
     19  16b9					      REPEND
    230  16b9
    231  16b9		       a6 c1		      ldx	ThrobColor+1	; 00
      0  16bb					      THROB_RAINBOW_BK	17	; 11
      1  16bb
      2  16bb					      SUBROUTINE
      3  16bb
      4  16bb				   .X	      SET	17
      5  16bb
      6  16bb		       a5 ef		      lda	RamBowColors+.X
      7  16bd		       d0 04		      bne	.Rainbow
      8  16bf
      9  16bf		       86 09		      stx	COLUBK
     10  16c1		       f0 03		      beq	.End
     11  16c3
     12  16c3				   .Rainbow
     13  16c3		       85 09		      sta	COLUBK
     14  16c5		       ea		      nop
     15  16c6
     16  16c6				   .End
     17  16c6
      0  16c6					      THROB_RAINBOW_PF	18	; 22
      1  16c6
      2  16c6					      SUBROUTINE
      3  16c6
      4  16c6				   .X	      SET	18
      5  16c6
      6  16c6		       a5 f0		      lda	RamBowColors+.X
      7  16c8		       d0 04		      bne	.Rainbow
      8  16ca
      9  16ca		       86 08		      stx	COLUPF
     10  16cc		       f0 03		      beq	.End
     11  16ce
     12  16ce				   .Rainbow
     13  16ce		       85 08		      sta	COLUPF
     14  16d0		       ea		      nop
     15  16d1
     16  16d1				   .End
     17  16d1
    234  16d1
    235  16d1		       a5 a3		      lda	CatTartColor	; 25
    236  16d3		       85 08		      sta	COLUPF	; 28
    237  16d5		       86 09		      stx	COLUBK	; 31
    238  16d7		       86 08		      stx	COLUPF	; 34
    239  16d9
    240  16d9		       88		      dey		; 36
    241  16da
    242  16da		       a6 c8		      ldx	CurrentRow	; 39
    243  16dc		       b5 b2		      lda	FoodPosX,x	; 43
    244  16de		       c9 2d		      cmp	#45	; 45
    245  16e0		       10 01		      bpl	.RightSide	; 48/47
      0  16e2					      SKIP_WORD		; 51
      1  16e2
      2  16e2		       0c		      HEX	0C
      3  16e3
    247  16e3				   .RightSide
    248  16e3		       85 11		      sta	RESP1	; 51
    249  16e5
    250  16e5		       b1 9a		      lda	(CatGfxPtr2),y	; 56
    251  16e7		       85 1b		      sta	GRP0	; 59
    252  16e9
    253  16e9		       b1 98		      lda	(TartGfxPtr2),y	; 64
    254  16eb		       85 0e		      sta	PF1	; 67
      0  16ed					      SLEEP	3	; 70
      1  16ed				   .CYCLES    SET	3
      2  16ed
      3  16ed				  -	      IF	.CYCLES < 2
      4  16ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16ed				  -	      ERR
      6  16ed					      ENDIF
      7  16ed
      8  16ed					      IF	.CYCLES & 1
      9  16ed					      IFNCONST	NO_ILLEGAL_OPCODES
     10  16ed		       04 00		      nop	0
     11  16ef				  -	      ELSE
     12  16ef				  -	      bit	VSYNC
     13  16ef					      ENDIF
     14  16ef				   .CYCLES    SET	.CYCLES - 3
     15  16ef					      ENDIF
     16  16ef
     17  16ef				  -	      REPEAT	.CYCLES / 2
     18  16ef				  -	      nop
     19  16ef					      REPEND
    256  16ef		       85 2a		      sta	HMOVE	; 73
    257  16f1
    258  16f1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    259  16f1							; Draw throb line #3
    260  16f1
    261  16f1		       a6 c2		      ldx	ThrobColor+2	; 00
      0  16f3					      THROB_RAINBOW_BK	16	; 11
      1  16f3
      2  16f3					      SUBROUTINE
      3  16f3
      4  16f3				   .X	      SET	16
      5  16f3
      6  16f3		       a5 ee		      lda	RamBowColors+.X
      7  16f5		       d0 04		      bne	.Rainbow
      8  16f7
      9  16f7		       86 09		      stx	COLUBK
     10  16f9		       f0 03		      beq	.End
     11  16fb
     12  16fb				   .Rainbow
     13  16fb		       85 09		      sta	COLUBK
     14  16fd		       ea		      nop
     15  16fe
     16  16fe				   .End
     17  16fe
      0  16fe					      THROB_RAINBOW_PF	17	; 22
      1  16fe
      2  16fe					      SUBROUTINE
      3  16fe
      4  16fe				   .X	      SET	17
      5  16fe
      6  16fe		       a5 ef		      lda	RamBowColors+.X
      7  1700		       d0 04		      bne	.Rainbow
      8  1702
      9  1702		       86 08		      stx	COLUPF
     10  1704		       f0 03		      beq	.End
     11  1706
     12  1706				   .Rainbow
     13  1706		       85 08		      sta	COLUPF
     14  1708		       ea		      nop
     15  1709
     16  1709				   .End
     17  1709
    264  1709
    265  1709		       a5 a3		      lda	CatTartColor	; 25
    266  170b		       85 08		      sta	COLUPF	; 28
    267  170d		       86 09		      stx	COLUBK	; 31
    268  170f		       86 08		      stx	COLUPF	; 34
    269  1711
    270  1711		       88		      dey		; 36
    271  1712
    272  1712		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    273  1714		       85 1b		      sta	GRP0	; 44
    274  1716
    275  1716		       b1 98		      lda	(TartGfxPtr2),y	; 49
    276  1718		       85 0e		      sta	PF1	; 52
    277  171a
    278  171a		       a5 bc		      lda	CatRow2FoodL	; 55
    279  171c		       85 90		      sta	FoodGfxPtr1	; 58
    280  171e		       a5 bd		      lda	CatRow2FoodR	; 61
    281  1720		       85 92		      sta	FoodGfxPtr2	; 64
    282  1722
    283  1722		       a5 ba		      lda	CatRowHmove+1	; 67
    284  1724		       85 21		      sta	HMP1	; 70
    285  1726
    286  1726		       85 2a		      sta	HMOVE	; 73
    287  1728
    288  1728							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    289  1728							; Draw throb line #4
    290  1728
    291  1728		       a6 c1		      ldx	ThrobColor+1	; 00
      0  172a					      THROB_RAINBOW_BK	15	; 11
      1  172a
      2  172a					      SUBROUTINE
      3  172a
      4  172a				   .X	      SET	15
      5  172a
      6  172a		       a5 ed		      lda	RamBowColors+.X
      7  172c		       d0 04		      bne	.Rainbow
      8  172e
      9  172e		       86 09		      stx	COLUBK
     10  1730		       f0 03		      beq	.End
     11  1732
     12  1732				   .Rainbow
     13  1732		       85 09		      sta	COLUBK
     14  1734		       ea		      nop
     15  1735
     16  1735				   .End
     17  1735
      0  1735					      THROB_RAINBOW_PF	16	; 22
      1  1735
      2  1735					      SUBROUTINE
      3  1735
      4  1735				   .X	      SET	16
      5  1735
      6  1735		       a5 ee		      lda	RamBowColors+.X
      7  1737		       d0 04		      bne	.Rainbow
      8  1739
      9  1739		       86 08		      stx	COLUPF
     10  173b		       f0 03		      beq	.End
     11  173d
     12  173d				   .Rainbow
     13  173d		       85 08		      sta	COLUPF
     14  173f		       ea		      nop
     15  1740
     16  1740				   .End
     17  1740
    294  1740
    295  1740		       a5 a3		      lda	CatTartColor	; 25
    296  1742		       85 08		      sta	COLUPF	; 28
    297  1744		       86 09		      stx	COLUBK	; 31
    298  1746		       86 08		      stx	COLUPF	; 34
    299  1748
    300  1748		       88		      dey		; 36
    301  1749
    302  1749		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    303  174b		       85 1b		      sta	GRP0	; 44
    304  174d
    305  174d		       b1 98		      lda	(TartGfxPtr2),y	; 49
    306  174f		       85 0e		      sta	PF1	; 52
    307  1751
    308  1751		       a5 be		      lda	CatRow2Color1	; 55
    309  1753		       85 c9		      sta	FoodColor1	; 58
    310  1755		       ae bf 00 	      ldx.w	CatRow2Color2	; 55
    311  1758		       9a		      txs		; 58
    312  1759
    313  1759		       a5 b9		      lda	CatRowHmove+0	; 67
    314  175b		       85 21		      sta	HMP1	; 70
    315  175d
    316  175d		       85 2a		      sta	HMOVE	; 73
    317  175f
    318  175f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    319  175f							; Draw throb line #5
    320  175f
    321  175f					      SUBROUTINE
    322  175f
    323  175f		       a6 c0		      ldx	ThrobColor+0	; 00
      0  1761					      THROB_RAINBOW_BK	14	; 11
      1  1761
      2  1761					      SUBROUTINE
      3  1761
      4  1761				   .X	      SET	14
      5  1761
      6  1761		       a5 ec		      lda	RamBowColors+.X
      7  1763		       d0 04		      bne	.Rainbow
      8  1765
      9  1765		       86 09		      stx	COLUBK
     10  1767		       f0 03		      beq	.End
     11  1769
     12  1769				   .Rainbow
     13  1769		       85 09		      sta	COLUBK
     14  176b		       ea		      nop
     15  176c
     16  176c				   .End
     17  176c
      0  176c					      THROB_RAINBOW_PF	15	; 22
      1  176c
      2  176c					      SUBROUTINE
      3  176c
      4  176c				   .X	      SET	15
      5  176c
      6  176c		       a5 ed		      lda	RamBowColors+.X
      7  176e		       d0 04		      bne	.Rainbow
      8  1770
      9  1770		       86 08		      stx	COLUPF
     10  1772		       f0 03		      beq	.End
     11  1774
     12  1774				   .Rainbow
     13  1774		       85 08		      sta	COLUPF
     14  1776		       ea		      nop
     15  1777
     16  1777				   .End
     17  1777
    326  1777
    327  1777		       a5 a3		      lda	CatTartColor	; 25
    328  1779		       85 08		      sta	COLUPF	; 28
    329  177b		       86 09		      stx	COLUBK	; 31
    330  177d		       86 08		      stx	COLUPF	; 34
    331  177f
    332  177f		       88		      dey		; 36
    333  1780
    334  1780		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    335  1782		       85 1b		      sta	GRP0	; 44
    336  1784
    337  1784		       a6 c8		      ldx	CurrentRow	; 47
    338  1786		       b5 b2		      lda	FoodPosX,x	; 51
    339  1788		       c9 30		      cmp	#48	; 53
    340  178a
    341  178a		       a2 00		      ldx	#0	; 55
    342  178c		       ea		      nop		; 57
    343  178d
    344  178d							; Then output the 14 lines to draw a single row. This will include drawing
    345  178d							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    346  178d							; All graphics will be updated every line.
    347  178d
    348  178d		       b0 0b		      bcs	.RightEntrance	; 60/59
    349  178f		       90 42		      bcc	.LeftEntrance	; 62
    350  1791
    351  1791							; 14 bytes into the page
    352  1791
    353  1791							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    354  1791							; Kernel used when food items are closer to the right edge of the screen
    355  1791							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  1791
    357  1791				   .RightLoop
    358  1791
    359  1791							; 8 cycles
    360  1791		       b1 9a		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    361  1793		       85 1b		      sta	GRP0	; 52
    362  1795
    363  1795							; 9 cycles
    364  1795		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    365  1797		       ba		      tsx		; 57 - load 2nd food item's color
    366  1798		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    367  179a
    368  179a				   .RightEntrance		; enter loop here
    369  179a
    370  179a							; 2 cycles
    371  179a		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    372  179c
    373  179c							; 8 cycles
    374  179c		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    375  179e		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    376  17a0
    377  17a0							; 8 cycles
    378  17a0		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    379  17a2		       85 1c		      sta	GRP1	; 02
    380  17a4
    381  17a4							; 7 cycles
    382  17a4		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    383  17a7		       85 09		      sta	COLUBK	; 09
    384  17a9
    385  17a9							; 7 cycles
    386  17a9		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    387  17ac		       85 08		      sta	COLUPF	; 16
    388  17ae
    389  17ae							; 6 cycles
    390  17ae		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    391  17b0		       85 07		      sta	COLUP1	; 22
    392  17b2
    393  17b2							; 8 cycles
    394  17b2		       a5 a3		      lda	CatTartColor	; 25
    395  17b4		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    396  17b6		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    397  17b8		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    398  17ba
    399  17ba							; 5 cycles
    400  17ba		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    401  17bc
    402  17bc							; 2 cycles
    403  17bc		       88		      dey		; 41
    404  17bd		       10 d2		      bpl	.RightLoop	; 44/43
    405  17bf
    406  17bf		       a0 12		      ldy	#18	; 45
    407  17c1		       b1 98		      lda	(TartGfxPtr2),y	; 50
    408  17c3
      0  17c3					      SLEEP	2	; 52
      1  17c3				   .CYCLES    SET	2
      2  17c3
      3  17c3				  -	      IF	.CYCLES < 2
      4  17c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  17c3				  -	      ERR
      6  17c3					      ENDIF
      7  17c3
      8  17c3				  -	      IF	.CYCLES & 1
      9  17c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  17c3				  -	      nop	0
     11  17c3				  -	      ELSE
     12  17c3				  -	      bit	VSYNC
     13  17c3				  -	      ENDIF
     14  17c3				  -.CYCLES    SET	.CYCLES - 3
     15  17c3					      ENDIF
     16  17c3
     17  17c3					      REPEAT	.CYCLES / 2
     18  17c3		       ea		      nop
     19  17c4					      REPEND
    410  17c4
    411  17c4		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    412  17c6		       ba		      tsx		; 57 - load 2nd food item's color
    413  17c7		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    414  17c9
    415  17c9		       b0 38		      bcs	.End	; 63
    416  17cb
    417  17cb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  17cb							; Kernel used when food items are closer to the left edge of the screen
    419  17cb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    420  17cb
    421  17cb				   .LeftLoop
    422  17cb
    423  17cb							; 8 cycles
    424  17cb		       b1 9a		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    425  17cd		       85 1b		      sta	GRP0	; 57
    426  17cf
    427  17cf							; 5 cycles
    428  17cf		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    429  17d1		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    430  17d3
    431  17d3				   .LeftEntrance		; enter loop here
    432  17d3
    433  17d3							; 8 cycles
    434  17d3		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    435  17d5		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    436  17d7
    437  17d7							; 8 cycles
    438  17d7		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    439  17d9		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    440  17db
    441  17db							; 7 cycles
    442  17db		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    443  17de		       85 09		      sta	COLUBK	; 09
    444  17e0
    445  17e0							; 7 cycles
    446  17e0		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    447  17e3		       85 08		      sta	COLUPF	; 16
    448  17e5
    449  17e5							; 6 cycles
    450  17e5		       a5 c9		      lda	FoodColor1	; 19 - set 1st food item's color
    451  17e7		       85 07		      sta	COLUP1	; 22
    452  17e9
    453  17e9							; 8 cycles
    454  17e9		       a5 a3		      lda	CatTartColor	; 25
    455  17eb		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    456  17ed		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    457  17ef
    458  17ef							; 13 cycles
    459  17ef		       b1 92		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    460  17f1		       ba		      tsx		; 38 - load 2nd food item's color
    461  17f2		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    462  17f4		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    463  17f6
    464  17f6							; 5 cycles
    465  17f6		       88		      dey		; 46
    466  17f7		       10 d2		      bpl	.LeftLoop	; 49/48
    467  17f9
    468  17f9		       a2 00		      ldx	#0	; 50
    469  17fb		       86 08		      stx	COLUPF	; 53
    470  17fd
    471  17fd		       a0 12		      ldy	#18	; 55
    472  17ff		       b1 98		      lda	(TartGfxPtr2),y	; 60
    473  1801
    474  1801		       86 1c		      stx	GRP1	; 63
    475  1803
    476  1803							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    477  1803
    478  1803				   .End
    479  1803
    480  1803		       a2 dd		      ldx	#GAMEPLAY_STACK	; 65
    481  1805		       9a		      txs		; 67
    482  1806
    483  1806		       a2 00		      ldx	#0
    484  1808
    485  1808							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    486  1808							; Use this time to prepare the next row's food item pointers (unless this is
    487  1808							; the last row). If this is the last row, skip over LoRows.
    488  1808
    489  1808		       85 02		      sta	WSYNC
    490  180a		       a5 c0		      lda	ThrobColor+0
    491  180c		       85 09		      sta	COLUBK
    492  180e		       85 08		      sta	COLUPF
    493  1810		       86 1c		      stx	GRP1
    494  1812
    495  1812		       c6 c8		      dec	CurrentRow
    496  1814		       86 1b		      stx	GRP0
    497  1816
    498  1816							; If the cat is at the very bottom of the screen, don't disable the
    499  1816							; missile/player graphics until after they are drawn, so they don't get
    500  1816							; clipped at the bottom of the screen. An easy way to do this would be to
    501  1816							; simply disable them after they would have been drawn, whether they are
    502  1816							; already disabled or not.
    503  1816
    504  1816		       4c 25 19 	      jmp	LoRows
    505  1819
    506  1819
    507  1900		       00 00 00 00*	      ALIGN	$100
    508  1900
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1900					      include	subroutines/DrawFoodRow.asm
      1  1900				   DrawFoodRow
      2  1900							; 69
      3  1900		       a0 0d		      ldy	#13	; 71
      4  1902
      5  1902				   .FoodLoop
      6  1902		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1904		       85 02		      sta	WSYNC	; 00
      8  1906
      9  1906				   .EnterHere
     10  1906		       85 09		      sta	COLUBK	; 03
     11  1908		       85 08		      sta	COLUPF	; 06
     12  190a
     13  190a		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     14  190c		       85 1c		      sta	GRP1	; 14
     15  190e		       a5 c9		      lda	FoodColor1	; 17
     16  1910		       85 07		      sta	COLUP1	; 20
     17  1912
     18  1912		       a5 c7		      lda	Temp	; 23
     19  1914
     20  1914		       38		      sec		; 25
     21  1915				   .WaitLoop
     22  1915		       e9 17		      sbc	#23	; 27
     23  1917		       b0 fc		      bcs	.WaitLoop	; 29
     24  1919
     25  1919		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     26  191b		       a6 ca		      ldx	FoodColor2	; 52
     27  191d		       85 1c		      sta	GRP1	; 55
     28  191f		       86 07		      stx	COLUP1	; 58
     29  1921
     30  1921		       88		      dey		; 60
     31  1922		       10 de		      bpl	.FoodLoop	; 62
     32  1924
     33  1924				   Sleep12
     34  1924		       60		      rts		; 68
------- FILE code/Gameplay Kernel/CatRows.asm
    510  1925
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1925					      include	code/Gameplay Kernel/LoRows.asm
      1  1925							; Draw all the rows below the cat's two rows.
      2  1925
      3  1925				   LoRows     SUBROUTINE
      4  1925
      5  1925		       85 02		      sta	WSYNC
      6  1927
      7  1927							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      8  1927							; player 1 for the next row's food items.
      9  1927
     10  1927		       a5 c1		      lda	ThrobColor+1	; 03
     11  1929		       85 09		      sta	COLUBK	; 06
     12  192b		       85 08		      sta	COLUPF	; 09
     13  192d
     14  192d		       a4 c8		      ldy	CurrentRow	; 12 - get the row we are drawing
     15  192f		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     16  1932
     17  1932		       38		      sec		; 18
     18  1933				   .DivideLoop
     19  1933		       e9 0f		      sbc	#15	; 20
     20  1935		       b0 fc		      bcs	.DivideLoop	; 22
     21  1937
     22  1937		       8d 11 00 	      sta.w	RESP1	; 26
     23  193a
     24  193a		       49 07		      eor	#7
     25  193c
     26  193c		       69 01		      adc	#1
     27  193e		       0a		      asl
     28  193f		       0a		      asl
     29  1940		       0a		      asl
     30  1941		       0a		      asl
     31  1942		       85 21		      sta	HMP1
     32  1944
     33  1944		       85 02		      sta	WSYNC
     34  1946
     35  1946		       a5 c2		      lda	ThrobColor+2	; 03
     36  1948		       85 09		      sta	COLUBK	; 06
     37  194a		       85 08		      sta	COLUPF	; 09
     38  194c
     39  194c		       20 24 19 	      jsr	Sleep12
     40  194f		       20 24 19 	      jsr	Sleep12
     41  1952		       20 24 19 	      jsr	Sleep12
     42  1955		       20 24 19 	      jsr	Sleep12
     43  1958		       20 24 19 	      jsr	Sleep12	; 69
     44  195b
     45  195b		       8d 2a 00 	      sta.w	HMOVE	; 73
     46  195e
     47  195e		       85 02		      sta	WSYNC
     48  1960
     49  1960		       a5 c1		      lda	ThrobColor+1
     50  1962		       85 09		      sta	COLUBK
     51  1964		       85 08		      sta	COLUPF
     52  1966		       85 02		      sta	WSYNC
     53  1968
     54  1968		       a5 c0		      lda	ThrobColor+0
     55  196a		       85 09		      sta	COLUBK
     56  196c		       85 08		      sta	COLUPF
     57  196e
     58  196e		       a4 c8		      ldy	CurrentRow	; 11
     59  1970
     60  1970		       b9 a4 00 	      lda	FoodItemL,y	; 15
     61  1973		       29 f0		      and	#$F0	; 17
     62  1975		       85 90		      sta	FoodGfxPtr1	; 20
     63  1977		       aa		      tax		; 22
     64  1978		       bd 0f 1e 	      lda	FoodGfx+15,x	; 26
     65  197b		       85 c9		      sta	FoodColor1	; 29
     66  197d
     67  197d		       b9 ab 00 	      lda	FoodItemR,y	; 33
     68  1980		       29 f0		      and	#$F0	; 36
     69  1982		       85 92		      sta	FoodGfxPtr2	; 38
     70  1984		       aa		      tax		; 40
     71  1985		       bd 0f 1e 	      lda	FoodGfx+15,x	; 44
     72  1988		       85 ca		      sta	FoodColor2	; 47
     73  198a
     74  198a		       b9 b2 00 	      lda	FoodPosX,y	; 51
     75  198d		       85 c7		      sta	Temp	; 54
     76  198f
     77  198f
     78  198f
     79  198f							; Output 14 lines to draw a row, exactly the same as in HiRows.
     80  198f							; It may be possible to code this as a subroutine to save ROM space.
     81  198f
     82  198f		       20 00 19 	      jsr	DrawFoodRow
     83  1992
     84  1992		       85 02		      sta	WSYNC
     85  1994
     86  1994							; Lastly, output a single line for the next "throb" line.
     87  1994							; Use this time to prepare the next row's food item pointers (unless this is
     88  1994							; the last row). If this is not the last row, loop to LoRows for the next row.
     89  1994
     90  1994		       a5 c0		      lda	ThrobColor+0
     91  1996		       85 09		      sta	COLUBK
     92  1998		       85 08		      sta	COLUPF
     93  199a		       a9 00		      lda	#0
     94  199c		       85 1b		      sta	GRP0
     95  199e		       85 1c		      sta	GRP1
     96  19a0
     97  19a0		       c6 c8		      dec	CurrentRow
     98  19a2		       10 81		      bpl	LoRows
     99  19a4
    100  19a4		       a2 ff		      ldx	#$FF
    101  19a6		       9a		      txs
    102  19a7
    103  19a7		       85 02		      sta	WSYNC
      0  19a9					      SLEEP	2
      1  19a9				   .CYCLES    SET	2
      2  19a9
      3  19a9				  -	      IF	.CYCLES < 2
      4  19a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  19a9				  -	      ERR
      6  19a9					      ENDIF
      7  19a9
      8  19a9				  -	      IF	.CYCLES & 1
      9  19a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  19a9				  -	      nop	0
     11  19a9				  -	      ELSE
     12  19a9				  -	      bit	VSYNC
     13  19a9				  -	      ENDIF
     14  19a9				  -.CYCLES    SET	.CYCLES - 3
     15  19a9					      ENDIF
     16  19a9
     17  19a9					      REPEAT	.CYCLES / 2
     18  19a9		       ea		      nop
     19  19aa					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  19aa					      include	code/ProgressHealthKernel.asm
      1  19aa		       a5 c1		      lda	ThrobColor+1
      2  19ac		       85 09		      sta	COLUBK
      3  19ae		       a9 00		      lda	#0
      4  19b0		       85 0d		      sta	PF0
      5  19b2		       85 0a		      sta	CTRLPF
      6  19b4		       a9 09		      lda	#COL_CAT_FACE
      7  19b6		       85 08		      sta	COLUPF
      8  19b8
      0  19b8					      SLEEP	32	; 53
      1  19b8				   .CYCLES    SET	32
      2  19b8
      3  19b8				  -	      IF	.CYCLES < 2
      4  19b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  19b8				  -	      ERR
      6  19b8					      ENDIF
      7  19b8
      8  19b8				  -	      IF	.CYCLES & 1
      9  19b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  19b8				  -	      nop	0
     11  19b8				  -	      ELSE
     12  19b8				  -	      bit	VSYNC
     13  19b8				  -	      ENDIF
     14  19b8				  -.CYCLES    SET	.CYCLES - 3
     15  19b8					      ENDIF
     16  19b8
     17  19b8					      REPEAT	.CYCLES / 2
     18  19b8		       ea		      nop
     17  19b8					      REPEND
     18  19b9		       ea		      nop
     17  19b9					      REPEND
     18  19ba		       ea		      nop
     17  19ba					      REPEND
     18  19bb		       ea		      nop
     17  19bb					      REPEND
     18  19bc		       ea		      nop
     17  19bc					      REPEND
     18  19bd		       ea		      nop
     17  19bd					      REPEND
     18  19be		       ea		      nop
     17  19be					      REPEND
     18  19bf		       ea		      nop
     17  19bf					      REPEND
     18  19c0		       ea		      nop
     17  19c0					      REPEND
     18  19c1		       ea		      nop
     17  19c1					      REPEND
     18  19c2		       ea		      nop
     17  19c2					      REPEND
     18  19c3		       ea		      nop
     17  19c3					      REPEND
     18  19c4		       ea		      nop
     17  19c4					      REPEND
     18  19c5		       ea		      nop
     17  19c5					      REPEND
     18  19c6		       ea		      nop
     17  19c6					      REPEND
     18  19c7		       ea		      nop
     19  19c8					      REPEND
     10  19c8
     11  19c8		       a9 20		      lda	#$20	; 55
     12  19ca		       85 20		      sta	HMP0	; 58
     13  19cc		       a9 b0		      lda	#$B0	; 60
     14  19ce		       85 21		      sta	HMP1	; 63
     15  19d0
     16  19d0		       85 10		      sta	RESP0	; 66
     17  19d2		       85 11		      sta	RESP1	; 69
     18  19d4
     19  19d4		       a9 00		      lda	#$00	; 71
     20  19d6
     21  19d6		       85 2a		      sta	HMOVE	; 74
     22  19d8
     23  19d8		       85 06		      sta	COLUP0
     24  19da		       85 07		      sta	COLUP1
     25  19dc
     26  19dc		       a5 86		      lda	ScoreColor
     27  19de		       85 09		      sta	COLUBK
     28  19e0
     29  19e0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  19e2		       85 04		      sta	NUSIZ0
     31  19e4		       85 05		      sta	NUSIZ1
     32  19e6
     33  19e6		       a9 08		      lda	#REFP_TRUE
     34  19e8		       85 0c		      sta	REFP1
     35  19ea
     36  19ea					      SUBROUTINE
     37  19ea
     38  19ea		       a0 04		      ldy	#4
     39  19ec		       85 02		      sta	WSYNC
     40  19ee
     41  19ee							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  19ee				   .HealthTop		; draw top of health
     43  19ee
     44  19ee		       a2 03		      ldx	#3
     45  19f0
     46  19f0				   .Loop
     47  19f0		       85 02		      sta	WSYNC
     48  19f2
     49  19f2		       b9 b8 1c 	      lda	HealthTopGfx,y	; 04
     50  19f5		       85 1b		      sta	GRP0	; 07
     51  19f7		       85 1c		      sta	GRP1	; 10
     52  19f9		       a9 00		      lda	#$00	; 12
     53  19fb		       85 0f		      sta	PF2	; 15
     54  19fd
     55  19fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     56  19fd							; Set the pointers for health graphics - 26 cycles
     57  19fd
     58  19fd		       18		      clc		; 17
     59  19fe
     60  19fe		       a9 1c		      lda	#>HealthLeftGfx	; 19
     61  1a00		       85 99		      sta	HthGfxLPtr+1	; 22
     62  1a02		       85 9b		      sta	HthGfxRPtr+1	; 25
     63  1a04
     64  1a04		       a9 bd		      lda	#<HealthLeftGfx	; 27
     65  1a06		       65 8f		      adc	Health	; 30
     66  1a08		       85 98		      sta	HthGfxLPtr	; 33
     67  1a0a
     68  1a0a		       a9 dd		      lda	#<HealthRightGfx	; 35
     69  1a0c		       65 8f		      adc	Health	; 38
     70  1a0e		       85 9a		      sta	HthGfxRPtr	; 41
     71  1a10
     72  1a10
     73  1a10
     74  1a10		       b9 08 1d 	      lda	HealthBgGfx+8,y	; 45
     75  1a13		       85 0f		      sta	PF2	; 48
     76  1a15
     77  1a15		       ca		      dex		; 50
     78  1a16		       d0 d8		      bne	.Loop	; 52
     79  1a18
     80  1a18		       88		      dey		; 54
     81  1a19		       10 d3		      bpl	.HealthTop	; 56
     82  1a1b
     83  1a1b
     84  1a1b					      SUBROUTINE
     85  1a1b
     86  1a1b
     87  1a1b		       a0 03		      ldy	#3	; 58
     88  1a1d		       a2 03		      ldx	#3	; 60
     89  1a1f		       86 c7		      stx	Temp	; 63
     90  1a21
     91  1a21		       4c 00 1b 	      jmp	.HealthMiddle	; 66
     92  1a24
     93  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
     94  1b00
     95  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  1b00				   .HealthMiddle		; draw middle of health, with progress bar
     97  1b00
     98  1b00		       85 02		      sta	WSYNC
     99  1b02				   .Loop
    100  1b02		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    101  1b04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    102  1b06
    103  1b06		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    104  1b08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    105  1b0a
    106  1b0a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    107  1b0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    108  1b0e
    109  1b0e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
    110  1b10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    111  1b12
    112  1b12		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    113  1b14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    114  1b16
    115  1b16		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    116  1b18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    117  1b1a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    118  1b1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    119  1b1e
    120  1b1e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    121  1b20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    122  1b22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    123  1b24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    124  1b26
    125  1b26		       a5 86		      lda	ScoreColor	; 60 - get the color for the background
    126  1b28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    127  1b2b
    128  1b2b		       ca		      dex		; 66
    129  1b2c		       d0 d2		      bne	.HealthMiddle	; 68
    130  1b2e
    131  1b2e		       a6 c7		      ldx	Temp	; 71
    132  1b30
    133  1b30		       88		      dey		; 73
    134  1b31		       10 cf		      bpl	.Loop	; 76 / 00
    135  1b33
    136  1b33
    137  1b33
    138  1b33
    139  1b33
    140  1b33
    141  1b33
    142  1b33
    143  1b33
    144  1b33					      SUBROUTINE
    145  1b33
    146  1b33
    147  1b33		       a9 00		      lda	#0
    148  1b35		       85 0d		      sta	PF0
    149  1b37		       85 0e		      sta	PF1
    150  1b39
    151  1b39		       a0 07		      ldy	#7
    152  1b3b
    153  1b3b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    154  1b3b				   .HealthBottom		; draw bottom of health
    155  1b3b
    156  1b3b		       a2 03		      ldx	#3
    157  1b3d				   .Loop
    158  1b3d		       b1 98		      lda	(HthGfxLPtr),y
    159  1b3f		       85 1b		      sta	GRP0
    160  1b41		       b1 9a		      lda	(HthGfxRPtr),y
    161  1b43		       85 1c		      sta	GRP1
    162  1b45		       a9 00		      lda	#$00
    163  1b47		       85 0f		      sta	PF2
    164  1b49
      0  1b49					      SLEEP	14
      1  1b49				   .CYCLES    SET	14
      2  1b49
      3  1b49				  -	      IF	.CYCLES < 2
      4  1b49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b49				  -	      ERR
      6  1b49					      ENDIF
      7  1b49
      8  1b49				  -	      IF	.CYCLES & 1
      9  1b49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b49				  -	      nop	0
     11  1b49				  -	      ELSE
     12  1b49				  -	      bit	VSYNC
     13  1b49				  -	      ENDIF
     14  1b49				  -.CYCLES    SET	.CYCLES - 3
     15  1b49					      ENDIF
     16  1b49
     17  1b49					      REPEAT	.CYCLES / 2
     18  1b49		       ea		      nop
     17  1b49					      REPEND
     18  1b4a		       ea		      nop
     17  1b4a					      REPEND
     18  1b4b		       ea		      nop
     17  1b4b					      REPEND
     18  1b4c		       ea		      nop
     17  1b4c					      REPEND
     18  1b4d		       ea		      nop
     17  1b4d					      REPEND
     18  1b4e		       ea		      nop
     17  1b4e					      REPEND
     18  1b4f		       ea		      nop
     19  1b50					      REPEND
    166  1b50
    167  1b50		       b9 fc 1c 	      lda	HealthBgGfx-4,y
    168  1b53		       85 0f		      sta	PF2
    169  1b55		       85 02		      sta	WSYNC
    170  1b57
    171  1b57		       ca		      dex
    172  1b58		       d0 e3		      bne	.Loop
    173  1b5a
    174  1b5a		       88		      dey
    175  1b5b		       c0 03		      cpy	#3
    176  1b5d		       d0 dc		      bne	.HealthBottom
    177  1b5f
    178  1b5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  1b5f
    180  1b5f		       a9 00		      lda	#$00
    181  1b61		       85 1b		      sta	GRP0
    182  1b63		       85 1c		      sta	GRP1
    183  1b65		       85 0b		      sta	REFP0
    184  1b67		       85 0c		      sta	REFP1
    185  1b69		       85 0f		      sta	PF2
    186  1b6b
    187  1b6b		       85 02		      sta	WSYNC
    188  1b6d
------- FILE code/Kernel.asm
     13  1b6d
     14  1b6d		       a9 02		      lda	#2
     15  1b6f		       85 01		      sta	VBLANK	; disable display
     16  1b71
     17  1b71		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     72  1b74
     73  1b74		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     74  1b75
     75  1b75
     76  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  1b75							; Data Tables
     78  1b75							;
     79  1b75							; Include data tables
     80  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     81  1b75
     82  1b75							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1b75					      include	data/Graphics.asm
      1  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1b75							; Graphics Tables
      3  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1b75
      5  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1c00
      7  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1c00							; Digit graphics for the scoreboard
      9  1c00							;
     10  1c00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1c00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1c00							; to normal when it is pulled from the stack.
     13  1c00							;
     14  1c00							; Table takes up $50 (80) bytes of ROM
     15  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1c00
     17  1c00				   ScoreGfx
     18  1c00
     19  1c00		       1c		      .byte.b	%00011100	; digit 0
     20  1c01		       26		      .byte.b	%00100110
     21  1c02		       63		      .byte.b	%01100011
     22  1c03		       63		      .byte.b	%01100011
     23  1c04		       63		      .byte.b	%01100011
     24  1c05		       32		      .byte.b	%00110010
     25  1c06		       1c		      .byte.b	%00011100
     26  1c07		       00		      .byte.b	%00000000
     27  1c08
     28  1c08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1c08
     30  1c08		       18		      .byte.b	%00011000	; digit 1
     31  1c09		       38		      .byte.b	%00111000
     32  1c0a		       18		      .byte.b	%00011000
     33  1c0b		       18		      .byte.b	%00011000
     34  1c0c		       18		      .byte.b	%00011000
     35  1c0d		       18		      .byte.b	%00011000
     36  1c0e		       7e		      .byte.b	%01111110
     37  1c0f		       00		      .byte.b	%00000000
     38  1c10
     39  1c10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1c10
     41  1c10		       3e		      .byte.b	%00111110	; digit 2
     42  1c11		       63		      .byte.b	%01100011
     43  1c12		       07		      .byte.b	%00000111
     44  1c13		       1e		      .byte.b	%00011110
     45  1c14		       3c		      .byte.b	%00111100
     46  1c15		       70		      .byte.b	%01110000
     47  1c16		       7f		      .byte.b	%01111111
     48  1c17		       00		      .byte.b	%00000000
     49  1c18
     50  1c18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1c18
     52  1c18		       7f		      .byte.b	%01111111	; digit 3
     53  1c19		       06		      .byte.b	%00000110
     54  1c1a		       0c		      .byte.b	%00001100
     55  1c1b		       1e		      .byte.b	%00011110
     56  1c1c		       03		      .byte.b	%00000011
     57  1c1d		       63		      .byte.b	%01100011
     58  1c1e		       3e		      .byte.b	%00111110
     59  1c1f		       00		      .byte.b	%00000000
     60  1c20
     61  1c20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1c20
     63  1c20		       0e		      .byte.b	%00001110	; digit 4
     64  1c21		       1e		      .byte.b	%00011110
     65  1c22		       36		      .byte.b	%00110110
     66  1c23		       66		      .byte.b	%01100110
     67  1c24		       7f		      .byte.b	%01111111
     68  1c25		       06		      .byte.b	%00000110
     69  1c26		       06		      .byte.b	%00000110
     70  1c27		       00		      .byte.b	%00000000
     71  1c28
     72  1c28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1c28
     74  1c28		       7e		      .byte.b	%01111110	; digit 5
     75  1c29		       60		      .byte.b	%01100000
     76  1c2a		       7e		      .byte.b	%01111110
     77  1c2b		       03		      .byte.b	%00000011
     78  1c2c		       03		      .byte.b	%00000011
     79  1c2d		       63		      .byte.b	%01100011
     80  1c2e		       3e		      .byte.b	%00111110
     81  1c2f		       00		      .byte.b	%00000000
     82  1c30
     83  1c30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1c30
     85  1c30		       1e		      .byte.b	%00011110	; digit 6
     86  1c31		       30		      .byte.b	%00110000
     87  1c32		       60		      .byte.b	%01100000
     88  1c33		       7e		      .byte.b	%01111110
     89  1c34		       63		      .byte.b	%01100011
     90  1c35		       63		      .byte.b	%01100011
     91  1c36		       3e		      .byte.b	%00111110
     92  1c37		       00		      .byte.b	%00000000
     93  1c38
     94  1c38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1c38
     96  1c38		       7f		      .byte.b	%01111111	; digit 7
     97  1c39		       03		      .byte.b	%00000011
     98  1c3a		       06		      .byte.b	%00000110
     99  1c3b		       0c		      .byte.b	%00001100
    100  1c3c		       18		      .byte.b	%00011000
    101  1c3d		       18		      .byte.b	%00011000
    102  1c3e		       18		      .byte.b	%00011000
    103  1c3f		       00		      .byte.b	%00000000
    104  1c40
    105  1c40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1c40
    107  1c40		       3c		      .byte.b	%00111100	; digit 8
    108  1c41		       62		      .byte.b	%01100010
    109  1c42		       72		      .byte.b	%01110010
    110  1c43		       3c		      .byte.b	%00111100
    111  1c44		       43		      .byte.b	%01000011
    112  1c45		       43		      .byte.b	%01000011
    113  1c46		       3e		      .byte.b	%00111110
    114  1c47		       00		      .byte.b	%00000000
    115  1c48
    116  1c48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1c48
    118  1c48		       3e		      .byte.b	%00111110	; digit 9
    119  1c49		       63		      .byte.b	%01100011
    120  1c4a		       63		      .byte.b	%01100011
    121  1c4b		       3f		      .byte.b	%00111111
    122  1c4c		       03		      .byte.b	%00000011
    123  1c4d		       06		      .byte.b	%00000110
    124  1c4e		       3c		      .byte.b	%00111100
    125  1c4f		       00		      .byte.b	%00000000
    126  1c50
    127  1c50
    128  1c50
    129  1c50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  1c50							; NUSIZx and ENAMx data for level counter graphics
    131  1c50							;
    132  1c50							; This table enables or disables each missile and adjusts the left missile's
    133  1c50							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  1c50							; left digit. (The right digit is drawn with the ball.)
    135  1c50							; Bit-1 is used to enable or disable the left missile,
    136  1c50							; and bit-0 is used to enable or disable the right missile.
    137  1c50							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  1c50							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  1c50							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  1c50							; correct for the score display.
    141  1c50							;
    142  1c50							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  1c50							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  1c50							; to normal when it is pulled from the stack.
    145  1c50							;
    146  1c50							; Table takes up $50 (80) bytes of ROM
    147  1c50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1c50
    149  1c50				   LevelGfx
    150  1c50
    151  1c50							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  1c50							; ^^^^^^^^^
    153  1c50		       8f		      .byte.b	%10001111	; digit 0
    154  1c51		       4f		      .byte.b	%01001111
    155  1c52		       4f		      .byte.b	%01001111
    156  1c53		       4f		      .byte.b	%01001111
    157  1c54		       4f		      .byte.b	%01001111
    158  1c55		       4f		      .byte.b	%01001111
    159  1c56		       8f		      .byte.b	%10001111
    160  1c57		       00		      .byte.b	%00000000
    161  1c58
    162  1c58							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  1c58
    164  1c58							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  1c58							; ^^^^^^^^^
    166  1c58		       8d		      .byte.b	%10001101	; digit 1
    167  1c59		       4d		      .byte.b	%01001101
    168  1c5a		       4d		      .byte.b	%01001101
    169  1c5b		       8d		      .byte.b	%10001101
    170  1c5c		       4d		      .byte.b	%01001101
    171  1c5d		       4d		      .byte.b	%01001101
    172  1c5e		       8d		      .byte.b	%10001101
    173  1c5f		       00		      .byte.b	%00000000
    174  1c60
    175  1c60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  1c60
    177  1c60							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  1c60							; ^^^^^^^^^
    179  1c60		       8f		      .byte.b	%10001111	; digit 2
    180  1c61		       4d		      .byte.b	%01001101
    181  1c62		       4d		      .byte.b	%01001101
    182  1c63		       8f		      .byte.b	%10001111
    183  1c64		       4e		      .byte.b	%01001110
    184  1c65		       4e		      .byte.b	%01001110
    185  1c66		       8f		      .byte.b	%10001111
    186  1c67		       00		      .byte.b	%00000000
    187  1c68
    188  1c68							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  1c68
    190  1c68							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  1c68							; ^^^^^^^^^
    192  1c68		       8f		      .byte.b	%10001111	; digit 3
    193  1c69		       4d		      .byte.b	%01001101
    194  1c6a		       4d		      .byte.b	%01001101
    195  1c6b		       8f		      .byte.b	%10001111
    196  1c6c		       4d		      .byte.b	%01001101
    197  1c6d		       4d		      .byte.b	%01001101
    198  1c6e		       8f		      .byte.b	%10001111
    199  1c6f		       00		      .byte.b	%00000000
    200  1c70
    201  1c70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  1c70
    203  1c70							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  1c70							; ^^^^^^^^^
    205  1c70		       4f		      .byte.b	%01001111	; digit 4
    206  1c71		       4f		      .byte.b	%01001111
    207  1c72		       4f		      .byte.b	%01001111
    208  1c73		       8f		      .byte.b	%10001111
    209  1c74		       4d		      .byte.b	%01001101
    210  1c75		       4d		      .byte.b	%01001101
    211  1c76		       4d		      .byte.b	%01001101
    212  1c77		       00		      .byte.b	%00000000
    213  1c78
    214  1c78							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  1c78
    216  1c78							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  1c78							; ^^^^^^^^^
    218  1c78		       8f		      .byte.b	%10001111	; digit 5
    219  1c79		       4e		      .byte.b	%01001110
    220  1c7a		       4e		      .byte.b	%01001110
    221  1c7b		       8f		      .byte.b	%10001111
    222  1c7c		       4d		      .byte.b	%01001101
    223  1c7d		       4d		      .byte.b	%01001101
    224  1c7e		       8f		      .byte.b	%10001111
    225  1c7f		       00		      .byte.b	%00000000
    226  1c80
    227  1c80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  1c80
    229  1c80							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  1c80							; ^^^^^^^^^
    231  1c80		       8f		      .byte.b	%10001111	; digit 6
    232  1c81		       4e		      .byte.b	%01001110
    233  1c82		       4e		      .byte.b	%01001110
    234  1c83		       8f		      .byte.b	%10001111
    235  1c84		       4f		      .byte.b	%01001111
    236  1c85		       4f		      .byte.b	%01001111
    237  1c86		       8f		      .byte.b	%10001111
    238  1c87		       00		      .byte.b	%00000000
    239  1c88
    240  1c88							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1c88
    242  1c88							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  1c88							; ^^^^^^^^^
    244  1c88		       8f		      .byte.b	%10001111	; digit 7
    245  1c89		       4d		      .byte.b	%01001101
    246  1c8a		       4d		      .byte.b	%01001101
    247  1c8b		       8d		      .byte.b	%10001101
    248  1c8c		       4d		      .byte.b	%01001101
    249  1c8d		       4d		      .byte.b	%01001101
    250  1c8e		       8d		      .byte.b	%10001101
    251  1c8f		       00		      .byte.b	%00000000
    252  1c90
    253  1c90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  1c90
    255  1c90							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  1c90							; ^^^^^^^^^
    257  1c90		       8f		      .byte.b	%10001111	; digit 8
    258  1c91		       4f		      .byte.b	%01001111
    259  1c92		       4f		      .byte.b	%01001111
    260  1c93		       8f		      .byte.b	%10001111
    261  1c94		       4f		      .byte.b	%01001111
    262  1c95		       4f		      .byte.b	%01001111
    263  1c96		       8f		      .byte.b	%10001111
    264  1c97		       00		      .byte.b	%00000000
    265  1c98
    266  1c98							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1c98
    268  1c98							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  1c98							; ^^^^^^^^^
    270  1c98		       8f		      .byte.b	%10001111	; digit 9
    271  1c99		       4f		      .byte.b	%01001111
    272  1c9a		       4f		      .byte.b	%01001111
    273  1c9b		       8f		      .byte.b	%10001111
    274  1c9c		       4d		      .byte.b	%01001101
    275  1c9d		       4d		      .byte.b	%01001101
    276  1c9e		       8f		      .byte.b	%10001111
    277  1c9f		       00		      .byte.b	%00000000
    278  1ca0
    279  1ca0
    280  1ca0
    281  1ca0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  1ca0							; Throbbing Line Graphics
    283  1ca0							;
    284  1ca0							; Graphics tables for the throbbing lines
    285  1ca0							;
    286  1ca0							; Table takes up $18 (24) bytes of ROM
    287  1ca0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  1ca0
    289  1ca0				   ThrobGfx
    290  1ca0
    291  1ca0		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    292  1ca1		       81		      .byte.b	LUM_2 + MODE_GREY
    293  1ca2		       02		      .byte.b	LUM_4 + MODE_COLOR
    294  1ca3
    295  1ca3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  1ca3
    297  1ca3		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    298  1ca4		       02		      .byte.b	LUM_4 + MODE_COLOR
    299  1ca5		       03		      .byte.b	LUM_6 + MODE_COLOR
    300  1ca6
    301  1ca6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  1ca6
    303  1ca6		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    304  1ca7		       03		      .byte.b	LUM_6 + MODE_COLOR
    305  1ca8		       04		      .byte.b	LUM_8 + MODE_COLOR
    306  1ca9
    307  1ca9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  1ca9
    309  1ca9		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    310  1caa		       04		      .byte.b	LUM_8 + MODE_COLOR
    311  1cab		       06		      .byte.b	LUM_C + MODE_COLOR
    312  1cac
    313  1cac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  1cac
    315  1cac		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    316  1cad		       05		      .byte.b	LUM_A + MODE_COLOR
    317  1cae		       07		      .byte.b	LUM_E + MODE_COLOR
    318  1caf
    319  1caf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  1caf
    321  1caf		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    322  1cb0		       04		      .byte.b	LUM_8 + MODE_COLOR
    323  1cb1		       06		      .byte.b	LUM_C + MODE_COLOR
    324  1cb2
    325  1cb2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  1cb2
    327  1cb2		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    328  1cb3		       03		      .byte.b	LUM_6 + MODE_COLOR
    329  1cb4		       05		      .byte.b	LUM_A + MODE_COLOR
    330  1cb5
    331  1cb5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  1cb5
    333  1cb5		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    334  1cb6		       02		      .byte.b	LUM_4 + MODE_COLOR
    335  1cb7		       03		      .byte.b	LUM_6 + MODE_COLOR
    336  1cb8
    337  1cb8
    338  1cb8
    339  1cb8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  1cb8							; Health Graphics
    341  1cb8							;
    342  1cb8							; All of these tables are upside-down, and they are supposed to be used with the
    343  1cb8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  1cb8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  1cb8							; the graphics for the lower right are flipped.
    346  1cb8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  1cb8							; are set up in a confusing way. They are upside-down, but they are split
    348  1cb8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  1cb8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  1cb8							; LOWER 4 lines of graphics (also upside-down).
    351  1cb8							; The last table (HealthBgGfx) is for the grey background of the
    352  1cb8							; health graphics drawn with the playfield.
    353  1cb8							;
    354  1cb8							; Table takes up $45 (69) bytes of ROM
    355  1cb8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  1cb8
    357  1cb8				   HealthTopGfx
    358  1cb8
    359  1cb8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  1cb9		       43		      .byte.b	%01000011
    361  1cba		       44		      .byte.b	%01000100
    362  1cbb		       48		      .byte.b	%01001000
    363  1cbc		       30		      .byte.b	%00110000
    364  1cbd
    365  1cbd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  1cbd				   HealthLeftGfx
    367  1cbd
    368  1cbd		       80		      .byte.b	%10000000	; left health full (upper)
    369  1cbe		       8c		      .byte.b	%10001100
    370  1cbf		       84		      .byte.b	%10000100
    371  1cc0		       80		      .byte.b	%10000000
    372  1cc1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  1cc2		       20		      .byte.b	%00100000
    374  1cc3		       47		      .byte.b	%01000111
    375  1cc4		       84		      .byte.b	%10000100
    376  1cc5
    377  1cc5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  1cc5
    379  1cc5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  1cc6		       8c		      .byte.b	%10001100
    381  1cc7		       84		      .byte.b	%10000100
    382  1cc8		       80		      .byte.b	%10000000
    383  1cc9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  1cca		       20		      .byte.b	%00100000
    385  1ccb		       47		      .byte.b	%01000111
    386  1ccc		       80		      .byte.b	%10000000
    387  1ccd
    388  1ccd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  1ccd
    390  1ccd		       80		      .byte.b	%10000000	; left health low (upper)
    391  1cce		       8c		      .byte.b	%10001100
    392  1ccf		       84		      .byte.b	%10000100
    393  1cd0		       80		      .byte.b	%10000000
    394  1cd1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  1cd2		       20		      .byte.b	%00100000
    396  1cd3		       44		      .byte.b	%01000100
    397  1cd4		       87		      .byte.b	%10000111
    398  1cd5
    399  1cd5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  1cd5
    401  1cd5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  1cd6		       9c		      .byte.b	%10011100
    403  1cd7		       80		      .byte.b	%10000000
    404  1cd8		       80		      .byte.b	%10000000
    405  1cd9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  1cda		       20		      .byte.b	%00100000
    407  1cdb		       46		      .byte.b	%01000110
    408  1cdc		       81		      .byte.b	%10000001
    409  1cdd
    410  1cdd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  1cdd				   HealthRightGfx
    412  1cdd
    413  1cdd		       80		      .byte.b	%10000000	; right health full (upper)
    414  1cde		       9a		      .byte.b	%10011010
    415  1cdf		       90		      .byte.b	%10010000
    416  1ce0		       80		      .byte.b	%10000000
    417  1ce1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  1ce2		       20		      .byte.b	%00100000
    419  1ce3		       4f		      .byte.b	%01001111
    420  1ce4		       89		      .byte.b	%10001001
    421  1ce5
    422  1ce5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  1ce5
    424  1ce5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  1ce6		       9a		      .byte.b	%10011010
    426  1ce7		       90		      .byte.b	%10010000
    427  1ce8		       80		      .byte.b	%10000000
    428  1ce9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  1cea		       20		      .byte.b	%00100000
    430  1ceb		       4f		      .byte.b	%01001111
    431  1cec		       80		      .byte.b	%10000000
    432  1ced
    433  1ced							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  1ced
    435  1ced		       80		      .byte.b	%10000000	; right health low (upper)
    436  1cee		       9a		      .byte.b	%10011010
    437  1cef		       88		      .byte.b	%10001000
    438  1cf0		       80		      .byte.b	%10000000
    439  1cf1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  1cf2		       20		      .byte.b	%00100000
    441  1cf3		       48		      .byte.b	%01001000
    442  1cf4		       8f		      .byte.b	%10001111
    443  1cf5
    444  1cf5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  1cf5
    446  1cf5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  1cf6		       ba		      .byte.b	%10111010
    448  1cf7		       80		      .byte.b	%10000000
    449  1cf8		       80		      .byte.b	%10000000
    450  1cf9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  1cfa		       20		      .byte.b	%00100000
    452  1cfb		       4c		      .byte.b	%01001100
    453  1cfc		       83		      .byte.b	%10000011
    454  1cfd
    455  1cfd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  1cfd
    457  1cfd							; 3 bytes left in this page
    458  1cfd
    459  1d00		       00 00 00 	      ALIGN	$100	; align to page
    460  1d00
    461  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  1d00				   HealthBgGfx
    463  1d00							; 13 bytes
    464  1d00
    465  1d00		       00		      .byte.b	%00000000
    466  1d01		       3e		      .byte.b	%00111110
    467  1d02		       7f		      .byte.b	%01111111
    468  1d03		       7f		      .byte.b	%01111111
    469  1d04		       7f		      .byte.b	%01111111
    470  1d05		       7f		      .byte.b	%01111111
    471  1d06		       7f		      .byte.b	%01111111
    472  1d07		       7f		      .byte.b	%01111111
    473  1d08		       7f		      .byte.b	%01111111
    474  1d09		       7f		      .byte.b	%01111111
    475  1d0a		       63		      .byte.b	%01100011
    476  1d0b		       63		      .byte.b	%01100011
    477  1d0c		       00		      .byte.b	%00000000
    478  1d0d
    479  1d0d
    480  1d0d
    481  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  1d0d							; Progress Bar Graphics
    483  1d0d							;
    484  1d0d							;
    485  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  1d0d
    487  1d0d				   PgBarGfx
    488  1d0d							; 9 bytes
    489  1d0d
    490  1d0d		       ff		      .byte.b	%11111111	; 1st PF1
    491  1d0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  1d0f		       3f		      .byte.b	%00111111
    493  1d10		       1f		      .byte.b	%00011111
    494  1d11		       0f		      .byte.b	%00001111
    495  1d12		       07		      .byte.b	%00000111
    496  1d13		       03		      .byte.b	%00000011
    497  1d14		       01		      .byte.b	%00000001
    498  1d15		       00		      .byte.b	%00000000
    499  1d16
    500  1d16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  1d16				   PgBarGfxR
    502  1d16							; 8 bytes
    503  1d16
    504  1d16		       ff		      .byte.b	%11111111	; PF2
    505  1d17		       fe		      .byte.b	%11111110
    506  1d18		       fc		      .byte.b	%11111100
    507  1d19		       f8		      .byte.b	%11111000
    508  1d1a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  1d1b		       e0		      .byte.b	%11100000	; 1st PF0
    510  1d1c		       c0		      .byte.b	%11000000
    511  1d1d		       80		      .byte.b	%10000000
    512  1d1e
    513  1d1e
    514  1d1e
    515  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    516  1d1e							; Cat Rainbow Graphics
    517  1d1e							;
    518  1d1e							;
    519  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    520  1d1e
    521  1d1e				   RainbowGfx
    522  1d1e							; 4 bytes
    523  1d1e
    524  1d1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    525  1d1f
    526  1d1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    527  1d20
    528  1d20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    529  1d21
    530  1d21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    531  1d22
    532  1e00		       00 00 00 00*	      ALIGN	$100
    533  1e00
    534  1e00				   FoodGfx
    535  1e00
    536  1e00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    537  1e00							; 0 - blank
    538  1e00
    539  1e00		       01		      .byte.b	%00000001
    540  1e01		       80		      .byte.b	%10000000
    541  1e02		       01		      .byte.b	%00000001
    542  1e03		       80		      .byte.b	%10000000
    543  1e04		       01		      .byte.b	%00000001
    544  1e05		       80		      .byte.b	%10000000
    545  1e06		       01		      .byte.b	%00000001
    546  1e07		       80		      .byte.b	%10000000
    547  1e08		       01		      .byte.b	%00000001
    548  1e09		       80		      .byte.b	%10000000
    549  1e0a		       01		      .byte.b	%00000001
    550  1e0b		       80		      .byte.b	%10000000
    551  1e0c		       01		      .byte.b	%00000001
    552  1e0d		       80		      .byte.b	%10000000
    553  1e0e
    554  1e0e		       00		      .byte.b	0
    555  1e0f		       00		      .byte.b	$00
    556  1e10
    557  1e10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    558  1e10							; 1 - apple
    559  1e10
    560  1e10		       34		      .byte.b	%00110100
    561  1e11		       7e		      .byte.b	%01111110
    562  1e12		       7e		      .byte.b	%01111110
    563  1e13		       ff		      .byte.b	%11111111
    564  1e14		       ff		      .byte.b	%11111111
    565  1e15		       ff		      .byte.b	%11111111
    566  1e16		       ff		      .byte.b	%11111111
    567  1e17		       ff		      .byte.b	%11111111
    568  1e18		       ff		      .byte.b	%11111111
    569  1e19		       7f		      .byte.b	%01111111
    570  1e1a		       6a		      .byte.b	%01101010
    571  1e1b		       08		      .byte.b	%00001000
    572  1e1c		       0c		      .byte.b	%00001100
    573  1e1d		       04		      .byte.b	%00000100
    574  1e1e
    575  1e1e		       00		      .byte.b	0
    576  1e1f		       46		      .byte.b	$46
    577  1e20
    578  1e20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    579  1e20							; 2 - peach
    580  1e20
    581  1e20		       3c		      .byte.b	%00111100
    582  1e21		       6e		      .byte.b	%01101110
    583  1e22		       6e		      .byte.b	%01101110
    584  1e23		       df		      .byte.b	%11011111
    585  1e24		       df		      .byte.b	%11011111
    586  1e25		       bf		      .byte.b	%10111111
    587  1e26		       bf		      .byte.b	%10111111
    588  1e27		       bf		      .byte.b	%10111111
    589  1e28		       de		      .byte.b	%11011110
    590  1e29		       5e		      .byte.b	%01011110
    591  1e2a		       6c		      .byte.b	%01101100
    592  1e2b		       18		      .byte.b	%00011000
    593  1e2c		       10		      .byte.b	%00010000
    594  1e2d		       30		      .byte.b	%00110000
    595  1e2e
    596  1e2e		       00		      .byte.b	0
    597  1e2f		       3a		      .byte.b	$3A
    598  1e30
    599  1e30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    600  1e30							; 3 - banana
    601  1e30
    602  1e30		       38		      .byte.b	%00111000
    603  1e31		       7c		      .byte.b	%01111100
    604  1e32		       fe		      .byte.b	%11111110
    605  1e33		       fe		      .byte.b	%11111110
    606  1e34		       ff		      .byte.b	%11111111
    607  1e35		       ff		      .byte.b	%11111111
    608  1e36		       8f		      .byte.b	%10001111
    609  1e37		       07		      .byte.b	%00000111
    610  1e38		       07		      .byte.b	%00000111
    611  1e39		       03		      .byte.b	%00000011
    612  1e3a		       03		      .byte.b	%00000011
    613  1e3b		       02		      .byte.b	%00000010
    614  1e3c		       06		      .byte.b	%00000110
    615  1e3d		       06		      .byte.b	%00000110
    616  1e3e
    617  1e3e		       00		      .byte.b	0
    618  1e3f		       1e		      .byte.b	$1E
    619  1e40
    620  1e40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    621  1e40							; 4 - pear
    622  1e40
    623  1e40		       38		      .byte.b	%00111000
    624  1e41		       7c		      .byte.b	%01111100
    625  1e42		       fe		      .byte.b	%11111110
    626  1e43		       fe		      .byte.b	%11111110
    627  1e44		       fe		      .byte.b	%11111110
    628  1e45		       fe		      .byte.b	%11111110
    629  1e46		       7c		      .byte.b	%01111100
    630  1e47		       7c		      .byte.b	%01111100
    631  1e48		       38		      .byte.b	%00111000
    632  1e49		       38		      .byte.b	%00111000
    633  1e4a		       30		      .byte.b	%00110000
    634  1e4b		       10		      .byte.b	%00010000
    635  1e4c		       18		      .byte.b	%00011000
    636  1e4d		       08		      .byte.b	%00001000
    637  1e4e
    638  1e4e		       00		      .byte.b	0
    639  1e4f		       cc		      .byte.b	$CC
    640  1e50
    641  1e50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    642  1e50							; 5 - plum
    643  1e50
    644  1e50		       38		      .byte.b	%00111000
    645  1e51		       6c		      .byte.b	%01101100
    646  1e52		       6e		      .byte.b	%01101110
    647  1e53		       de		      .byte.b	%11011110
    648  1e54		       df		      .byte.b	%11011111
    649  1e55		       bf		      .byte.b	%10111111
    650  1e56		       bf		      .byte.b	%10111111
    651  1e57		       bf		      .byte.b	%10111111
    652  1e58		       de		      .byte.b	%11011110
    653  1e59		       de		      .byte.b	%11011110
    654  1e5a		       5e		      .byte.b	%01011110
    655  1e5b		       3c		      .byte.b	%00111100
    656  1e5c		       20		      .byte.b	%00100000
    657  1e5d		       60		      .byte.b	%01100000
    658  1e5e
    659  1e5e		       00		      .byte.b	0
    660  1e5f		       88		      .byte.b	$88
    661  1e60
    662  1e60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    663  1e60							; 6 - grapes
    664  1e60
    665  1e60		       18		      .byte.b	%00011000
    666  1e61		       08		      .byte.b	%00001000
    667  1e62		       36		      .byte.b	%00110110
    668  1e63		       12		      .byte.b	%00010010
    669  1e64		       6c		      .byte.b	%01101100
    670  1e65		       24		      .byte.b	%00100100
    671  1e66		       db		      .byte.b	%11011011
    672  1e67		       49		      .byte.b	%01001001
    673  1e68		       36		      .byte.b	%00110110
    674  1e69		       12		      .byte.b	%00010010
    675  1e6a		       6c		      .byte.b	%01101100
    676  1e6b		       34		      .byte.b	%00110100
    677  1e6c		       10		      .byte.b	%00010000
    678  1e6d		       18		      .byte.b	%00011000
    679  1e6e
    680  1e6e		       00		      .byte.b	0
    681  1e6f		       64		      .byte.b	$64
    682  1e70
    683  1e70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    684  1e70							; 7 - broccoli
    685  1e70
    686  1e70		       18		      .byte.b	%00011000
    687  1e71		       18		      .byte.b	%00011000
    688  1e72		       1c		      .byte.b	%00011100
    689  1e73		       3e		      .byte.b	%00111110
    690  1e74		       2a		      .byte.b	%00101010
    691  1e75		       12		      .byte.b	%00010010
    692  1e76		       2a		      .byte.b	%00101010
    693  1e77		       54		      .byte.b	%01010100
    694  1e78		       aa		      .byte.b	%10101010
    695  1e79		       55		      .byte.b	%01010101
    696  1e7a		       aa		      .byte.b	%10101010
    697  1e7b		       55		      .byte.b	%01010101
    698  1e7c		       2a		      .byte.b	%00101010
    699  1e7d		       04		      .byte.b	%00000100
    700  1e7e
    701  1e7e		       00		      .byte.b	0
    702  1e7f		       c7		      .byte.b	$C7
    703  1e80
    704  1e80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    705  1e80							; 8 - cabbage
    706  1e80
    707  1e80		       18		      .byte.b	%00011000
    708  1e81		       76		      .byte.b	%01110110
    709  1e82		       76		      .byte.b	%01110110
    710  1e83		       7a		      .byte.b	%01111010
    711  1e84		       f9		      .byte.b	%11111001
    712  1e85		       fb		      .byte.b	%11111011
    713  1e86		       ed		      .byte.b	%11101101
    714  1e87		       db		      .byte.b	%11011011
    715  1e88		       fb		      .byte.b	%11111011
    716  1e89		       e9		      .byte.b	%11101001
    717  1e8a		       56		      .byte.b	%01010110
    718  1e8b		       76		      .byte.b	%01110110
    719  1e8c		       6e		      .byte.b	%01101110
    720  1e8d		       18		      .byte.b	%00011000
    721  1e8e
    722  1e8e		       00		      .byte.b	0
    723  1e8f		       da		      .byte.b	$DA
    724  1e90
    725  1e90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    726  1e90							; 9 - celery
    727  1e90
    728  1e90		       c0		      .byte.b	%11000000
    729  1e91		       e0		      .byte.b	%11100000
    730  1e92		       70		      .byte.b	%01110000
    731  1e93		       30		      .byte.b	%00110000
    732  1e94		       18		      .byte.b	%00011000
    733  1e95		       18		      .byte.b	%00011000
    734  1e96		       0c		      .byte.b	%00001100
    735  1e97		       0c		      .byte.b	%00001100
    736  1e98		       0e		      .byte.b	%00001110
    737  1e99		       06		      .byte.b	%00000110
    738  1e9a		       0d		      .byte.b	%00001101
    739  1e9b		       0b		      .byte.b	%00001011
    740  1e9c		       0d		      .byte.b	%00001101
    741  1e9d		       06		      .byte.b	%00000110
    742  1e9e
    743  1e9e		       00		      .byte.b	0
    744  1e9f		       d6		      .byte.b	$D6
    745  1ea0
    746  1ea0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    747  1ea0							; A - green pepper
    748  1ea0
    749  1ea0		       6c		      .byte.b	%01101100
    750  1ea1		       6c		      .byte.b	%01101100
    751  1ea2		       fe		      .byte.b	%11111110
    752  1ea3		       fe		      .byte.b	%11111110
    753  1ea4		       f6		      .byte.b	%11110110
    754  1ea5		       f6		      .byte.b	%11110110
    755  1ea6		       f6		      .byte.b	%11110110
    756  1ea7		       f6		      .byte.b	%11110110
    757  1ea8		       f6		      .byte.b	%11110110
    758  1ea9		       ec		      .byte.b	%11101100
    759  1eaa		       7c		      .byte.b	%01111100
    760  1eab		       10		      .byte.b	%00010000
    761  1eac		       18		      .byte.b	%00011000
    762  1ead		       08		      .byte.b	%00001000
    763  1eae
    764  1eae		       00		      .byte.b	0
    765  1eaf		       c8		      .byte.b	$C8
    766  1eb0
    767  1eb0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    768  1eb0							; B - pumpkin
    769  1eb0
    770  1eb0		       3c		      .byte.b	%00111100
    771  1eb1		       56		      .byte.b	%01010110
    772  1eb2		       b7		      .byte.b	%10110111
    773  1eb3		       ad		      .byte.b	%10101101
    774  1eb4		       ad		      .byte.b	%10101101
    775  1eb5		       ad		      .byte.b	%10101101
    776  1eb6		       ad		      .byte.b	%10101101
    777  1eb7		       ad		      .byte.b	%10101101
    778  1eb8		       b7		      .byte.b	%10110111
    779  1eb9		       56		      .byte.b	%01010110
    780  1eba		       3c		      .byte.b	%00111100
    781  1ebb		       18		      .byte.b	%00011000
    782  1ebc		       0c		      .byte.b	%00001100
    783  1ebd		       0c		      .byte.b	%00001100
    784  1ebe
    785  1ebe		       00		      .byte.b	0
    786  1ebf		       2a		      .byte.b	$2A
    787  1ec0
    788  1ec0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    789  1ec0							; C - mushroom
    790  1ec0
    791  1ec0		       18		      .byte.b	%00011000
    792  1ec1		       3c		      .byte.b	%00111100
    793  1ec2		       24		      .byte.b	%00100100
    794  1ec3		       24		      .byte.b	%00100100
    795  1ec4		       24		      .byte.b	%00100100
    796  1ec5		       66		      .byte.b	%01100110
    797  1ec6		       a5		      .byte.b	%10100101
    798  1ec7		       99		      .byte.b	%10011001
    799  1ec8		       e7		      .byte.b	%11100111
    800  1ec9		       ff		      .byte.b	%11111111
    801  1eca		       5a		      .byte.b	%01011010
    802  1ecb		       76		      .byte.b	%01110110
    803  1ecc		       3c		      .byte.b	%00111100
    804  1ecd		       18		      .byte.b	%00011000
    805  1ece
    806  1ece		       00		      .byte.b	0
    807  1ecf		       08		      .byte.b	$08
    808  1ed0
    809  1ed0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    810  1ed0							; D - key
    811  1ed0
    812  1ed0		       10		      .byte.b	%00010000
    813  1ed1		       1e		      .byte.b	%00011110
    814  1ed2		       1e		      .byte.b	%00011110
    815  1ed3		       18		      .byte.b	%00011000
    816  1ed4		       1e		      .byte.b	%00011110
    817  1ed5		       1e		      .byte.b	%00011110
    818  1ed6		       10		      .byte.b	%00010000
    819  1ed7		       10		      .byte.b	%00010000
    820  1ed8		       10		      .byte.b	%00010000
    821  1ed9		       10		      .byte.b	%00010000
    822  1eda		       38		      .byte.b	%00111000
    823  1edb		       6c		      .byte.b	%01101100
    824  1edc		       6c		      .byte.b	%01101100
    825  1edd		       38		      .byte.b	%00111000
    826  1ede
    827  1ede		       00		      .byte.b	0
    828  1edf		       2c		      .byte.b	$2C
    829  1ee0
    830  1ee0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    831  1ee0							; E - ring
    832  1ee0
    833  1ee0		       00		      .byte.b	%00000000
    834  1ee1		       18		      .byte.b	%00011000
    835  1ee2		       3c		      .byte.b	%00111100
    836  1ee3		       66		      .byte.b	%01100110
    837  1ee4		       42		      .byte.b	%01000010
    838  1ee5		       42		      .byte.b	%01000010
    839  1ee6		       42		      .byte.b	%01000010
    840  1ee7		       66		      .byte.b	%01100110
    841  1ee8		       3c		      .byte.b	%00111100
    842  1ee9		       18		      .byte.b	%00011000
    843  1eea		       18		      .byte.b	%00011000
    844  1eeb		       2c		      .byte.b	%00101100
    845  1eec		       18		      .byte.b	%00011000
    846  1eed		       00		      .byte.b	%00000000
    847  1eee
    848  1eee		       00		      .byte.b	0
    849  1eef		       2c		      .byte.b	$2C
    850  1ef0
    851  1ef0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    852  1ef0							; F - heart
    853  1ef0
    854  1ef0		       00		      .byte.b	%00000000
    855  1ef1		       18		      .byte.b	%00011000
    856  1ef2		       18		      .byte.b	%00011000
    857  1ef3		       3c		      .byte.b	%00111100
    858  1ef4		       3c		      .byte.b	%00111100
    859  1ef5		       7e		      .byte.b	%01111110
    860  1ef6		       7e		      .byte.b	%01111110
    861  1ef7		       ff		      .byte.b	%11111111
    862  1ef8		       ff		      .byte.b	%11111111
    863  1ef9		       ff		      .byte.b	%11111111
    864  1efa		       e7		      .byte.b	%11100111
    865  1efb		       e7		      .byte.b	%11100111
    866  1efc		       42		      .byte.b	%01000010
    867  1efd		       00		      .byte.b	%00000000
    868  1efe
    869  1efe		       00		      .byte.b	0
    870  1eff		       4a		      .byte.b	$4A
    871  1f00
    872  1f00				   RainbowColors
    873  1f00
    874  1f00		       64		      .byte.b	$64
    875  1f01		       88		      .byte.b	$88
    876  1f02		       c8		      .byte.b	$C8
    877  1f03		       1e		      .byte.b	$1E
    878  1f04		       28		      .byte.b	$28
    879  1f05		       44		      .byte.b	$44
    880  1f06
    881  1f06				   CatTartGfx
    882  1f06
    883  1f06		       00 00 00 00*	      ds	19, $00
    884  1f19
    885  1f19		       00		      .byte.b	%00000000
    886  1f1a		       00		      .byte.b	%00000000
    887  1f1b		       e0		      .byte.b	%11100000
    888  1f1c		       c0		      .byte.b	%11000000
    889  1f1d		       c0		      .byte.b	%11000000
    890  1f1e		       c0		      .byte.b	%11000000
    891  1f1f		       c0		      .byte.b	%11000000
    892  1f20		       c0		      .byte.b	%11000000
    893  1f21		       c0		      .byte.b	%11000000
    894  1f22		       e0		      .byte.b	%11100000
    895  1f23		       e0		      .byte.b	%11100000
    896  1f24		       e0		      .byte.b	%11100000
    897  1f25		       e0		      .byte.b	%11100000
    898  1f26		       e0		      .byte.b	%11100000
    899  1f27
    900  1f27				   CatFaceGfx
    901  1f27
    902  1f27		       00 00 00 00*	      ds	19, $00
    903  1f3a
    904  1f3a		       36		      .byte.b	%00110110
    905  1f3b		       36		      .byte.b	%00110110
    906  1f3c		       00		      .byte.b	%00000000
    907  1f3d		       7e		      .byte.b	%01111110
    908  1f3e		       c1		      .byte.b	%11000001
    909  1f3f		       d5		      .byte.b	%11010101
    910  1f40		       ff		      .byte.b	%11111111
    911  1f41		       d5		      .byte.b	%11010101
    912  1f42		       dd		      .byte.b	%11011101
    913  1f43		       ff		      .byte.b	%11111111
    914  1f44		       66		      .byte.b	%01100110
    915  1f45		       66		      .byte.b	%01100110
    916  1f46		       42		      .byte.b	%01000010
    917  1f47		       00		      .byte.b	%00000000
    918  1f48
    919  1f48		       00 00 00 00*	      ds	19, $00
------- FILE main.asm
     84  1f5b
     85  1f5b		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     86  1f5c
     87  1f5c
     88  1f5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  1f5c							; End of ROM
     90  1f5c							;
     91  1f5c							; Define the end of the cartridge
     92  1f5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     93  1f5c
     94  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     95  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     96  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     97  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
