------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 04-20-2018 Version 3.0
     12  2000 ????						;
     13  2000 ????						; Add joystick controls
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialize
     20  2000 ????						;
     21  2000 ????						; Include headers, set address of binary, and initialize game
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????
     26  2000 ????				      PROCESSOR	6502
     27  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     30  0000 ????
     31  0000 ????						; Include TIA/program equates, RAM labels, and macros
     32  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;	lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;	sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copy spacing values
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size values
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00de ????				      SEG.U	VARS
      6 U0080					      ORG	$80
      7 U0080
      8 U0080				   RamStart
      9 U0080
     10 U0080		       00	   Frame      ds	1	; Current frame mod 256
     11 U0081
     12 U0081
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score and level counter - 6 bytes
     16 U0081
     17 U0081				   BCDScore		; 3-byte array for score value which will be stored as a
     18 U0081		       00 00 00 	      ds	3	; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084				   BCDScoreAdd		; 2-byte array for the value to be added to the score
     22 U0084		       00 00		      ds	2	; on the next frame (max of 9,999)
     23 U0086
     24 U0086				   BCDLevel		; value for the current level which will be stored as a
     25 U0086		       00		      ds	1	; BCD encoded 2-digit number and used to control the
     26 U0087							; level counter display
     27 U0087
     28 U0087
     29 U0087
     30 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     31 U0087							; Variable game colors - 3 bytes
     32 U0087
     33 U0087		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     34 U0088		       00	   PgBarColor ds	1	; color for full part of progress bar
     35 U0089		       00	   CatTartColor ds	1	; color of the cat's tart body
     36 U008a
     37 U008a
     38 U008a
     39 U008a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40 U008a							; Variables for the progress bar and health display - 7 bytes
     41 U008a
     42 U008a				   Progress		; value for level progress, which can be
     43 U008a		       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     44 U008b
     45 U008b				   Health		; amount of health
     46 U008b		       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     47 U008c
     48 U008c				   ProgressBar		; array of 5 values to be written to the playfield
     49 U008c		       00 00 00 00*	      ds	5	; registers when drawing progress bar
     50 U0091
     51 U0091
     52 U0091
     53 U0091							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54 U0091							; Pointers - 14 bytes
     55 U0091
     56 U0091				   FoodGfxPtr1		; pointer for 1st food item's graphics
     57 U0091				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     58 U0091		       00 00		      ds	2
     59 U0093
     60 U0093				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     61 U0093				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     62 U0093		       00 00		      ds	2
     63 U0095
     64 U0095				   TartGfxPtr1		; pointer for the tart graphics
     65 U0095				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     66 U0095		       00 00		      ds	2
     67 U0097
     68 U0097				   CatGfxPtr1		; pointer for the cat face/paws graphics
     69 U0097				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     70 U0097		       00 00		      ds	2
     71 U0099
     72 U0099				   TartGfxPtr2		; pointer for the tart graphics
     73 U0099				   HthGfxLPtr		; pointer for left half of the health graphics
     74 U0099				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     75 U0099		       00 00		      ds	2
     76 U009b
     77 U009b				   CatGfxPtr2		; pointer for the cat face/paws graphics
     78 U009b				   HthGfxRPtr		; pointer for right half of the health graphics
     79 U009b				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     80 U009b		       00 00		      ds	2
     81 U009d
     82 U009d				   ThrobPtr		; pointer for loading the throb colors
     83 U009d				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     84 U009d		       00 00		      ds	2
     85 U009f
     86 U009f
     87 U009f
     88 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89 U009f							; Variables used when drawing the cat - 6 bytes
     90 U009f
     91 U009f		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     92 U00a0
     93 U00a0				   CatPosition		; data describing the cat's position
     94 U00a0		       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     95 U00a1							; bits 4-0 store the number of scanlines to skip after
     96 U00a1							; top of the cat's row before drawing the cat, from 0-18
     97 U00a1
     98 U00a1		       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
     99 U00a2
    100 U00a2				   Rainbow		; PF0 value for the rainbow graphics
    101 U00a2				   JoyCenter		; least significant bit, true if joystick has been returned to center
    102 U00a2		       00		      ds	1
    103 U00a3
    104 U00a3				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
    105 U00a3		       00		      ds	1
    106 U00a4
    107 U00a4				   PreCatRows		; number of rows to draw before the two "cat" rows
    108 U00a4		       00		      ds	1
    109 U00a5
    110 U00a5
    111 U00a5
    112 U00a5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113 U00a5							; Variables used for the food items - 21 bytes
    114 U00a5
    115 U00a5				   FoodItemL		; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    116 U00a5		       00 00 00 00*	      ds	7	; will be drawn on each frame. The first 7 bytes are for
    117 U00ac				   FoodItemR		; the left items, last 7 bytes are for the right items.
    118 U00ac		       00 00 00 00*	      ds	7	; Hi nybble holds the value (0-15) of the item to draw.
    119 U00b3							; Lo nybble holds the value of next frame's item.
    120 U00b3							; All nybbles are swapped at the start of each frame.
    121 U00b3
    122 U00b3				   FoodPosX		; (range 0-88)
    123 U00b3		       00 00 00 00*	      ds	7
    124 U00ba
    125 U00ba
    126 U00ba
    127 U00ba							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    128 U00ba							; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    129 U00ba
    130 U00ba
    131 U00ba				   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    132 U00ba		       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    133 U00bd
    134 U00bd				   CatRow2FoodL 		;
    135 U00bd		       00		      ds	1	;
    136 U00be				   CatRow2FoodR 		;
    137 U00be		       00		      ds	1	;
    138 U00bf
    139 U00bf				   CatRow2Color1		;
    140 U00bf		       00		      ds	1	;
    141 U00c0				   CatRow2Color2		;
    142 U00c0		       00		      ds	1	;
    143 U00c1
    144 U00c1
    145 U00c1
    146 U00c1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    147 U00c1							; Variables for the throbbing lines' colors - 4 bytes
    148 U00c1
    149 U00c1		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    150 U00c4							; throbbing lines. The first color is darkest,
    151 U00c4							; the last is brightest.
    152 U00c4
    153 U00c4		       00	   CatThrobPF ds	1
    154 U00c5
    155 U00c5
    156 U00c5
    157 U00c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    158 U00c5							; Temporary variables - 2 bytes
    159 U00c5
    160 U00c5		       00	   Temp       ds	1
    161 U00c6		       00	   TempLoop   ds	1
    162 U00c7
    163 U00c7
    164 U00c7
    165 U00c7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    166 U00c7							; 71 of 79 non-temporary RAM bytes used (8 left)
    167 U00c7							; last 49 bytes of RAM are used for stack space in the scoreboard display
    168 U00c7
    169 U00c7
    170 U00c7
    171 U00c7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U00c7							; Variables which can be shared with the stack - 3 bytes
    173 U00c7
    174 U00c7		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    175 U00c8
    176 U00c8		       00	   FoodColor1 ds	1	; color of the 1st food item
    177 U00c9		       00	   FoodColor2 ds	1	; color of the 2nd food item
    178 U00ca
    179 U00ca							; 7 of 15 available temporary RAM bytes used (8 left)
    180 U00ca							; last 34 bytes of RAM are used to hold the rainbow color graphics
    181 U00ca
    182 U00de					      ORG	$100 - 34
    183 U00de				   RamBowColors
------- FILE main.asm
------- FILE headers/Macros.h LEVEL 2 PASS 2
      0 U00de					      include	headers/Macros.h
      1 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00de							; This macro looks at the background's rainbow color for this scanline,
      3 U00de							; and if it is black, the throb color is instead used.
      4 U00de							; The throb color must be pre-loaded into the X register.
      5 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6 U00de
      7 U00de					      MAC	throb_rainbow_bk
      8 U00de					      SUBROUTINE
      9 U00de				   .X	      SET	{1}
     10 U00de
     11 U00de					      lda	RamBowColors+.X	; 3
     12 U00de					      bne	.Rainbow	; 5/6
     13 U00de
     14 U00de					      stx	COLUBK	; 8
     15 U00de					      beq	.End	; 11
     16 U00de
     17 U00de				   .Rainbow
     18 U00de					      sta	COLUBK	; 9
     19 U00de					      nop		; 11
     20 U00de
     21 U00de				   .End
     22 U00de					      ENDM
     23 U00de
     24 U00de
     25 U00de
     26 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U00de							; This macro looks at the playfield's rainbow color for this scanline,
     28 U00de							; and if it is black, the throb color is instead used.
     29 U00de							; The throb color must be pre-loaded into the X register.
     30 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     31 U00de
     32 U00de					      MAC	throb_rainbow_pf
     33 U00de					      SUBROUTINE
     34 U00de				   .X	      SET	{1}
     35 U00de
     36 U00de					      lda	RamBowColors+.X	; 3
     37 U00de					      bne	.Rainbow	; 5/6
     38 U00de
     39 U00de					      stx	COLUPF	; 8
     40 U00de					      beq	.End	; 11
     41 U00de
     42 U00de				   .Rainbow
     43 U00de					      sta	COLUPF	; 9
     44 U00de					      nop		; 11
     45 U00de
     46 U00de				   .End
     47 U00de					      ENDM
     48 U00de
     49 U00de
     50 U00de
     51 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52 U00de							; This macro simply gives a name to opcode $0C, which is a 4-cycle nop,
     53 U00de							; skipping the next two bytes of ROM.
     54 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55 U00de
     56 U00de					      MAC	skip_word
     57 U00de
     58 U00de					      HEX	0C
     59 U00de
     60 U00de					      ENDM
------- FILE main.asm
     36 U00de
     37 U00de							; Ensure that the code is placed in the proper place in the binary
     38 U00de
     39  2000 ????				      SEG	CODE
     40  1000					      ORG	$1000	; 4K ROM (for now)
     41  1000
     42  1000							; Clear all system RAM/registers and do any neccesary initialization
     43  1000
------- FILE code/Initialize.asm LEVEL 2 PASS 2
      0  1000					      include	code/Initialize.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Full System Clear
      3  1000							;
      4  1000							; Clear all system registers and RAM at startup
      5  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1000
      7  1000				   SystemClear
      8  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     10  100b
     11  100b
     12  100b
     13  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14  100b							; Set the food items (temporary demo code)
     15  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  100b
     17  100b		       a9 10		      lda	#$10
     18  100d		       85 a5		      sta	FoodItemL+0
     19  100f		       a9 70		      lda	#$70
     20  1011		       85 ac		      sta	FoodItemR+0
     21  1013
     22  1013		       a9 20		      lda	#$20
     23  1015		       85 a6		      sta	FoodItemL+1
     24  1017		       a9 80		      lda	#$80
     25  1019		       85 ad		      sta	FoodItemR+1
     26  101b
     27  101b		       a9 30		      lda	#$30
     28  101d		       85 a7		      sta	FoodItemL+2
     29  101f		       a9 90		      lda	#$90
     30  1021		       85 ae		      sta	FoodItemR+2
     31  1023
     32  1023		       a9 40		      lda	#$40
     33  1025		       85 a8		      sta	FoodItemL+3
     34  1027		       a9 a0		      lda	#$A0
     35  1029		       85 af		      sta	FoodItemR+3
     36  102b
     37  102b		       a9 50		      lda	#$50
     38  102d		       85 a9		      sta	FoodItemL+4
     39  102f		       a9 b0		      lda	#$B0
     40  1031		       85 b0		      sta	FoodItemR+4
     41  1033
     42  1033		       a9 60		      lda	#$60
     43  1035		       85 aa		      sta	FoodItemL+5
     44  1037		       a9 c0		      lda	#$C0
     45  1039		       85 b1		      sta	FoodItemR+5
     46  103b
     47  103b		       a9 d0		      lda	#$D0
     48  103d		       85 ab		      sta	FoodItemL+6
     49  103f		       a9 e0		      lda	#$E0
     50  1041		       85 b2		      sta	FoodItemR+6
------- FILE main.asm
     45  1043
     46  1043
     47  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  1043							; Game Logic
     49  1043							;
     50  1043							; Do the overscan, vertical sync, and vertical blanking,
     51  1043							; along with any game logic
     52  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  1043
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  1043					      include	code/Game Logic/Overscan.asm
      1  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1043							; Overscan
      3  1043							;
      4  1043							; Start the overscan timer and do game logic
      5  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1043
      7  1043				   Overscan
      8  1043
      9  1043		       e6 80		      inc	Frame	; increment the frame number
     10  1045
     11  1045		       a9 23		      lda	#OVERSCAN_TIMER
     12  1047		       85 02		      sta	WSYNC
     13  1049		       8d 96 02 	      sta	TIM64T	; 3
     14  104c
     15  104c
     16  104c
     17  104c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  104c							; Update Score
     19  104c							;
     20  104c							; Add to the score
     21  104c							;
     22  104c							; Takes 45 cycles to complete
     23  104c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  104c
     25  104c		       a5 85		      lda	BCDScoreAdd+1
     26  104e		       a6 84		      ldx	BCDScoreAdd
     27  1050
     28  1050		       f8		      sed
     29  1051
     30  1051		       18		      clc
     31  1052		       85 c5		      sta	Temp
     32  1054		       a5 83		      lda	BCDScore+2
     33  1056		       65 c5		      adc	Temp
     34  1058		       85 83		      sta	BCDScore+2
     35  105a		       86 c5		      stx	Temp
     36  105c		       a5 82		      lda	BCDScore+1
     37  105e		       65 c5		      adc	Temp
     38  1060		       85 82		      sta	BCDScore+1
     39  1062		       a9 00		      lda	#$00
     40  1064		       85 c5		      sta	Temp
     41  1066		       a5 81		      lda	BCDScore+0
     42  1068		       65 c5		      adc	Temp
     43  106a		       85 81		      sta	BCDScore+0
     44  106c
     45  106c		       d8		      cld
     46  106d
     47  106d
     48  106d
     49  106d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  106d							; Proccess Joysticks
     51  106d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  106d
     53  106d		       a9 00		      lda	#0
     54  106f		       8d 81 02 	      sta	SWACNT	; set all I/O pins to input for joystick reading
     55  1072
     56  1072		       ad 80 02 	      lda	SWCHA	; get joystick position for this frame ONLY ONCE
     57  1075		       85 c5		      sta	Temp	; save joystick position for consistency
     58  1077
     59  1077		       29 30		      and	#$30	; check left stick's up/down bit states
     60  1079		       c9 30		      cmp	#$30	; to see if they are both HI (joystick centered)
     61  107b		       d0 06		      bne	.NotCenter	; if not, skip ahead
     62  107d		       a5 a2		      lda	JoyCenter	; otherwise set rightmost bit of JoyCenter
     63  107f		       09 01		      ora	#1	; (to signify that the joystick HAS been re-centered
     64  1081		       85 a2		      sta	JoyCenter	; before the cat's next movement)
     65  1083
     66  1083				   .NotCenter
     67  1083		       a5 0c		      lda	INPT4	; if the left fire button is pressed,
     68  1085		       10 06		      bpl	.CheckPos	; skip the check for a previously centered joystick
     69  1087		       a5 a2		      lda	JoyCenter	; otherwise, check if the joystick has been centered
     70  1089		       29 01		      and	#1
     71  108b		       f0 2a		      beq	.Skip	; if it hasn't, don't make a movement
     72  108d
     73  108d				   .CheckPos
     74  108d		       a5 a0		      lda	CatPosition	; get cat's position
     75  108f		       29 1f		      and	#$1F	; check right 5 bits only
     76  1091		       f0 04		      beq	.ReadJoy	; if zero, we are centered on a row (read joystick)
     77  1093		       c9 13		      cmp	#19	; or if 19, we are centered on the bottom row
     78  1095		       d0 20		      bne	.Skip	; if not centered, skip reading joystick
     79  1097
     80  1097				   .ReadJoy
     81  1097
     82  1097		       a5 c5		      lda	Temp
     83  1099
     84  1099		       0a		      asl		; ignore joystick right
     85  109a		       0a		      asl		; ignore joystick left
     86  109b		       0a		      asl		; check joystick down
     87  109c		       b0 09		      bcs	.NoDown
     88  109e
     89  109e							; Now that we know the player is pressing the joystick down, we need to
     90  109e							; decide if the cat should be moved down a row.
     91  109e
     92  109e		       a6 a1		      ldx	CatRow
     93  10a0		       e0 06		      cpx	#6
     94  10a2		       f0 13		      beq	.Skip	; If already at the bottom row, don't move down
     95  10a4
     96  10a4		       e8		      inx
     97  10a5		       d0 08		      bne	.ChangeRow
     98  10a7
     99  10a7				   .NoDown
    100  10a7		       0a		      asl		; check joystick up
    101  10a8		       b0 0d		      bcs	.Skip
    102  10aa
    103  10aa		       a6 a1		      ldx	CatRow
    104  10ac		       f0 09		      beq	.Skip	; If already at the top row, don't move up
    105  10ae
    106  10ae		       ca		      dex
    107  10af				   .ChangeRow
    108  10af		       86 a1		      stx	CatRow
    109  10b1
    110  10b1		       a5 a2		      lda	JoyCenter
    111  10b3		       29 fe		      and	#$FE
    112  10b5		       85 a2		      sta	JoyCenter	; clear rightmost bit in JoyCenter
    113  10b7
    114  10b7
    115  10b7
    116  10b7				   .Skip
    117  10b7
    118  10b7
    119  10b7
    120  10b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121  10b7							; Caclulate cat's position data
    122  10b7
    123  10b7					      SUBROUTINE
    124  10b7
    125  10b7		       a5 a1		      lda	CatRow
    126  10b9		       29 07		      and	#$07
    127  10bb		       aa		      tax
    128  10bc		       bd 5b 1f 	      lda	RowPosition,x
    129  10bf
    130  10bf		       c5 9f		      cmp	CatPosY
    131  10c1		       f0 17		      beq	.NoMove
    132  10c3		       30 08		      bmi	.MoveUp
    133  10c5
    134  10c5				   .MoveDown
    135  10c5		       38		      sec
    136  10c6		       e5 9f		      sbc	CatPosY
    137  10c8		       4a		      lsr
    138  10c9		       65 9f		      adc	CatPosY
    139  10cb		       d0 0b		      bne	.UpdatePos
    140  10cd
    141  10cd				   .MoveUp
    142  10cd		       a5 9f		      lda	CatPosY
    143  10cf		       38		      sec
    144  10d0		       fd 5b 1f 	      sbc	RowPosition,x
    145  10d3		       4a		      lsr
    146  10d4		       18		      clc
    147  10d5		       7d 5b 1f 	      adc	RowPosition,x
    148  10d8
    149  10d8				   .UpdatePos
    150  10d8		       85 9f		      sta	CatPosY
    151  10da
    152  10da				   .NoMove
    153  10da
    154  10da		       a2 00		      ldx	#0
    155  10dc				   .DivideLoop
    156  10dc		       38		      sec
    157  10dd		       e8		      inx
    158  10de		       e9 13		      sbc	#19
    159  10e0		       90 07		      bcc	.AddBack
    160  10e2
    161  10e2		       e0 05		      cpx	#5
    162  10e4		       d0 f6		      bne	.DivideLoop
    163  10e6		       e8		      inx
    164  10e7		       d0 02		      bne	.SetCatPos
    165  10e9
    166  10e9				   .AddBack
    167  10e9		       69 13		      adc	#19
    168  10eb
    169  10eb				   .SetCatPos
    170  10eb		       85 a0		      sta	CatPosition
    171  10ed
    172  10ed		       8a		      txa
    173  10ee		       0a		      asl
    174  10ef		       0a		      asl
    175  10f0		       0a		      asl
    176  10f1		       0a		      asl
    177  10f2		       0a		      asl
    178  10f3		       65 a0		      adc	CatPosition
    179  10f5		       85 a0		      sta	CatPosition
    180  10f7
    181  10f7		       ca		      dex
    182  10f8		       86 a4		      stx	PreCatRows
    183  10fa
    184  10fa
    185  10fa
    186  10fa							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187  10fa							; Finish Overscan
    188  10fa							;
    189  10fa							; Loop until the end of overscan
    190  10fa							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191  10fa
    192  10fa				   OverscanTimerLoop
    193  10fa		       ad 84 02 	      lda	INTIM
    194  10fd		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  10ff					      include	code/Game Logic/VerticalSync.asm
      1  10ff							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10ff							; Vertical Sync
      3  10ff							;
      4  10ff							; Do the vertical sync and start the vertical blanking timer
      5  10ff							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  10ff
      7  10ff		       a9 02		      lda	#2
      8  1101		       85 02		      sta	WSYNC
      9  1103		       85 00		      sta	VSYNC	; enable VSYNC
     10  1105
     11  1105		       85 02		      sta	WSYNC
     12  1107		       a9 2d		      lda	#VBLANK_TIMER
     13  1109		       85 02		      sta	WSYNC
     14  110b		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  110e
     16  110e		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  1110		       85 2c		      sta	CXCLR	; clear collision latches
     18  1112
     19  1112		       a9 00		      lda	#0
     20  1114		       85 02		      sta	WSYNC
     21  1116		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1118					      include	code/Game Logic/VerticalBlank.asm
      1  1118							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1118							; Vertical Blank
      3  1118							;
      4  1118							; Do the vertical blanking and game logic
      5  1118							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1118
      7  1118		       85 2b		      sta	HMCLR
      8  111a		       85 02		      sta	WSYNC
      9  111c
     10  111c		       a9 ff		      lda	#$FF	; 02
     11  111e		       85 23		      sta	HMM1	; 05
     12  1120		       85 8d		      sta	ProgressBar+1	; 08 - reset progress bar byte 1 to %11111111
     13  1122
     14  1122		       a2 10		      ldx	#$10	; 10
     15  1124		       86 21		      stx	HMP1	; 13
     16  1126
     17  1126		       a2 80		      ldx	#$80	; 15
     18  1128		       86 22		      stx	HMM0	; 18
     19  112a
     20  112a		       a2 e0		      ldx	#$E0	; 20
     21  112c		       85 13		      sta	RESM1	; 23
     22  112e		       86 8c		      stx	ProgressBar+0	; 26 - reset progress bar byte 0 to %11100000
     23  1130
     24  1130		       85 14		      sta	RESBL	; 29
     25  1132
     26  1132		       85 8e		      sta	ProgressBar+2	; 32 - reset progress bar byte 2 to %11111111
     27  1134		       85 8f		      sta	ProgressBar+3	; 35 - reset progress bar byte 3 to %11111111
     28  1136
     29  1136		       a9 fe		      lda	#$FE	; 37
     30  1138		       85 90		      sta	ProgressBar+4	; 40 - reset byte 4 for the progress bar
     31  113a
     32  113a		       20 24 19 	      jsr	Sleep12	; 52
     33  113d
     34  113d		       85 10		      sta	RESP0	; 55
     35  113f		       85 11		      sta	RESP1	; 58
     36  1141
      0  1141					      SLEEP	9	; 67
      1  1141				   .CYCLES    SET	9
      2  1141
      3  1141				  -	      IF	.CYCLES < 2
      4  1141				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1141				  -	      ERR
      6  1141					      ENDIF
      7  1141
      8  1141					      IF	.CYCLES & 1
      9  1141					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1141		       04 00		      nop	0
     11  1143				  -	      ELSE
     12  1143				  -	      bit	VSYNC
     13  1143					      ENDIF
     14  1143				   .CYCLES    SET	.CYCLES - 3
     15  1143					      ENDIF
     16  1143
     17  1143					      REPEAT	.CYCLES / 2
     18  1143		       ea		      nop
     17  1143					      REPEND
     18  1144		       ea		      nop
     17  1144					      REPEND
     18  1145		       ea		      nop
     19  1146					      REPEND
     38  1146
     39  1146		       85 12		      sta	RESM0	; 70
     40  1148
     41  1148		       85 02		      sta	WSYNC
     42  114a		       85 2a		      sta	HMOVE
     43  114c
     44  114c
     45  114c
     46  114c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  114c							; Prepare HMOVE offsets for all scoreboard objects, and
     48  114c							; reset the progress bar's RAM values to empty. (39 cycles)
     49  114c
     50  114c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  114c							; Prepare for throbbing lines - 43 cycles
     52  114c
     53  114c		       a5 80		      lda	Frame	; get the current frame number
     54  114e		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     55  1150		       4a		      lsr
     56  1151		       4a		      lsr		; shift to get a value from 0-7
     57  1152		       85 c5		      sta	Temp
     58  1154		       0a		      asl		; carry flag will always be clear after this
     59  1155		       65 c5		      adc	Temp	; multiply by 3
     60  1157		       a8		      tay
     61  1158
     62  1158		       a5 87		      lda	ScoreColor
     63  115a		       29 f0		      and	#$F0
     64  115c		       85 c5		      sta	Temp
     65  115e
     66  115e		       b9 57 1c 	      lda	ThrobGfx+0,y
     67  1161		       0a		      asl
     68  1162		       90 01		      bcc	.Color0
      0  1164					      SKIP_WORD
      1  1164
      2  1164		       0c		      HEX	0C
      3  1165
     70  1165				   .Color0
     71  1165		       65 c5		      adc	Temp
     72  1167		       85 c1		      sta	ThrobColor+0
     73  1169
     74  1169		       b9 58 1c 	      lda	ThrobGfx+1,y
     75  116c		       0a		      asl
     76  116d		       90 01		      bcc	.Color1
      0  116f					      SKIP_WORD
      1  116f
      2  116f		       0c		      HEX	0C
      3  1170
     78  1170				   .Color1
     79  1170		       65 c5		      adc	Temp
     80  1172		       85 c2		      sta	ThrobColor+1
     81  1174
     82  1174		       b9 59 1c 	      lda	ThrobGfx+2,y
     83  1177		       0a		      asl
     84  1178		       90 01		      bcc	.Color2
      0  117a					      SKIP_WORD
      1  117a
      2  117a		       0c		      HEX	0C
      3  117b
     86  117b				   .Color2
     87  117b		       65 c5		      adc	Temp
     88  117d		       85 c3		      sta	ThrobColor+2
     89  117f
     90  117f
     91  117f
     92  117f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     93  117f							; Load Scoreboard
     94  117f							;
     95  117f							; Get graphics data for the scoreboard and push it onto the stack
     96  117f							;
     97  117f							; Takes 534 cycles to complete (7 full scanlines + 2 cycles)
     98  117f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  117f
    100  117f					      SUBROUTINE
    101  117f
    102  117f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103  117f							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
    104  117f
    105  117f		       a9 1c		      lda	#>ScoreGfx
    106  1181		       85 92		      sta	LvlLoadPtr+1
    107  1183		       85 94		      sta	ScrLoadPtr0+1
    108  1185		       85 96		      sta	ScrLoadPtr1+1
    109  1187		       85 98		      sta	ScrLoadPtr2+1
    110  1189		       85 9a		      sta	ScrLoadPtr3+1
    111  118b		       85 9c		      sta	ScrLoadPtr4+1
    112  118d		       85 9e		      sta	ScrLoadPtr5+1
    113  118f
    114  118f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115  118f							; Prepare pointer for level digit graphics - 14 cycles
    116  118f
    117  118f		       a5 86		      lda	BCDLevel
    118  1191		       29 0f		      and	#$0F
    119  1193		       0a		      asl
    120  1194		       0a		      asl
    121  1195		       0a		      asl
    122  1196		       85 91		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
    123  1198
    124  1198							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    125  1198							; Prepare pointers for score digit graphics - 69 cycles
    126  1198
    127  1198		       a7 81		      lax	BCDScore+0
    128  119a		       29 f0		      and	#$F0
    129  119c		       4a		      lsr
    130  119d		       85 93		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
    131  119f
    132  119f		       8a		      txa
    133  11a0		       29 0f		      and	#$0F
    134  11a2		       0a		      asl
    135  11a3		       0a		      asl
    136  11a4		       0a		      asl
    137  11a5		       85 95		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    138  11a7
    139  11a7		       a7 82		      lax	BCDScore+1
    140  11a9		       29 f0		      and	#$F0
    141  11ab		       4a		      lsr
    142  11ac		       85 97		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    143  11ae
    144  11ae		       8a		      txa
    145  11af		       29 0f		      and	#$0F
    146  11b1		       0a		      asl
    147  11b2		       0a		      asl
    148  11b3		       0a		      asl
    149  11b4		       85 99		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    150  11b6
    151  11b6		       a7 83		      lax	BCDScore+2
    152  11b8		       29 f0		      and	#$F0
    153  11ba		       4a		      lsr
    154  11bb		       85 9b		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    155  11bd
    156  11bd		       8a		      txa
    157  11be		       29 0f		      and	#$0F
    158  11c0		       0a		      asl
    159  11c1		       0a		      asl
    160  11c2		       0a		      asl
    161  11c3		       85 9d		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    162  11c5
    163  11c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    164  11c5							; Load the stack with the graphics for the scoreboard - 428 cycles
    165  11c5
    166  11c5		       a0 06		      ldy	#6
    167  11c7
    168  11c7				   .LoadScoreboard
    169  11c7
    170  11c7		       b1 9d		      lda	(ScrLoadPtr5),y
    171  11c9		       48		      pha
    172  11ca		       b1 9b		      lda	(ScrLoadPtr4),y
    173  11cc		       48		      pha
    174  11cd		       b1 99		      lda	(ScrLoadPtr3),y
    175  11cf		       48		      pha
    176  11d0		       b1 97		      lda	(ScrLoadPtr2),y
    177  11d2		       48		      pha
    178  11d3		       b1 95		      lda	(ScrLoadPtr1),y
    179  11d5		       48		      pha
    180  11d6		       b1 93		      lda	(ScrLoadPtr0),y
    181  11d8		       48		      pha
    182  11d9		       b1 91		      lda	(LvlLoadPtr),y
    183  11db		       48		      pha
    184  11dc
    185  11dc		       88		      dey
    186  11dd		       10 e8		      bpl	.LoadScoreboard
    187  11df
    188  11df
    189  11df
    190  11df							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191  11df							; Load RAM for progress bar display (28-53 cycles)
    192  11df
    193  11df		       a5 8a		      lda	Progress	; 3 - get amount of progress
    194  11e1
    195  11e1							; The level progress bar uses the following playfield bits:
    196  11e1							; (note that PF0 and PF2 are NOT reversed in this diagram)
    197  11e1							;
    198  11e1							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    199  11e1							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    200  11e1							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    201  11e1							;
    202  11e1							; When the progress bar is empty, every bit labeled "X" above should be
    203  11e1							; set (1), and when it is full, every "X" bit should be cleared (0).
    204  11e1							; The bits labeled "o" must ALWAYS be cleared.
    205  11e1							;
    206  11e1							; The leftmost playfield value (the 1st PF0) will be calculated first,
    207  11e1							; and then each playfield value to the right until the 2nd PF1
    208  11e1							; will be calculated.
    209  11e1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    210  11e1		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    211  11e3
    212  11e3		       38		      sec		; 2
    213  11e4		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    214  11e6		       30 1e		      bmi	.Underflow1	; 2/3
    215  11e8		       84 8c		      sty	ProgressBar	; 3 - this playfield byte is full
    216  11ea
    217  11ea		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    218  11ec		       30 23		      bmi	.Underflow2	; 2/3
    219  11ee		       84 8d		      sty	ProgressBar+1	; 3 - this playfield byte is full
    220  11f0
    221  11f0		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    222  11f2		       30 28		      bmi	.Underflow3	; 2/3
    223  11f4		       84 8e		      sty	ProgressBar+2	; 3 - this playfield byte is full
    224  11f6
    225  11f6		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    226  11f8		       30 2d		      bmi	.Underflow4	; 2/3
    227  11fa		       84 8f		      sty	ProgressBar+3	; 3 - this playfield byte is full
    228  11fc
    229  11fc		       aa		      tax		; 2
    230  11fd		       bd 0e 1d 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    231  1200		       0a		      asl		; 2
    232  1201		       85 90		      sta	ProgressBar+4	; 3
    233  1203		       4c 2f 12 	      jmp	.Finish	; 3
    234  1206
    235  1206							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    236  1206				   .Underflow1		; for 1st PF0
    237  1206
    238  1206		       69 03		      adc	#3	; 3 - add back the 3
    239  1208		       aa		      tax		; 2
    240  1209		       bd 1b 1d 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    241  120c		       85 8c		      sta	ProgressBar	; 3
    242  120e		       4c 2f 12 	      jmp	.Finish	; 3
    243  1211
    244  1211							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    245  1211				   .Underflow2		; for 1st PF1
    246  1211
    247  1211		       69 08		      adc	#8	; 3 - add back the 8
    248  1213		       aa		      tax		; 2
    249  1214		       bd 0d 1d 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    250  1217		       85 8d		      sta	ProgressBar+1	; 3
    251  1219		       4c 2f 12 	      jmp	.Finish	; 3
    252  121c
    253  121c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  121c				   .Underflow3		; for PF2
    255  121c
    256  121c		       69 08		      adc	#8	; 3 - add back the 8
    257  121e		       aa		      tax		; 2
    258  121f		       bd 16 1d 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    259  1222		       85 8e		      sta	ProgressBar+2	; 3
    260  1224		       4c 2f 12 	      jmp	.Finish	; 3
    261  1227
    262  1227							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    263  1227				   .Underflow4		; for 2nd PF0
    264  1227
    265  1227		       69 04		      adc	#4	; 3 - add back the 4
    266  1229		       aa		      tax		; 2
    267  122a		       bd 1a 1d 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    268  122d		       85 8f		      sta	ProgressBar+3	; 3
    269  122f
    270  122f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  122f				   .Finish
    272  122f
    273  122f		       85 2b		      sta	HMCLR
    274  1231
    275  1231		       a6 b3		      ldx	FoodPosX
    276  1233		       ca		      dex
    277  1234		       10 02		      bpl	.NoReset0
    278  1236		       a2 58		      ldx	#88
    279  1238				   .NoReset0
    280  1238		       86 b3		      stx	FoodPosX+0
    281  123a
    282  123a		       8a		      txa
    283  123b		       38		      sec
    284  123c
    285  123c		       e9 12		      sbc	#18
    286  123e		       b0 02		      bcs	.NoReset1
    287  1240		       69 59		      adc	#89
    288  1242				   .NoReset1
    289  1242		       85 b4		      sta	FoodPosX+1
    290  1244
    291  1244		       e9 34		      sbc	#52
    292  1246		       b0 02		      bcs	.NoReset2
    293  1248		       69 59		      adc	#89
    294  124a				   .NoReset2
    295  124a		       85 b5		      sta	FoodPosX+2
    296  124c
    297  124c		       e9 1b		      sbc	#27
    298  124e		       b0 02		      bcs	.NoReset3
    299  1250		       69 59		      adc	#89
    300  1252				   .NoReset3
    301  1252		       85 b6		      sta	FoodPosX+3
    302  1254
    303  1254		       e9 3f		      sbc	#63
    304  1256		       b0 02		      bcs	.NoReset4
    305  1258		       69 59		      adc	#89
    306  125a				   .NoReset4
    307  125a		       85 b7		      sta	FoodPosX+4
    308  125c
    309  125c		       e9 29		      sbc	#41
    310  125e		       b0 02		      bcs	.NoReset5
    311  1260		       69 59		      adc	#89
    312  1262				   .NoReset5
    313  1262		       85 b8		      sta	FoodPosX+5
    314  1264
    315  1264		       e9 11		      sbc	#17
    316  1266		       b0 02		      bcs	.NoReset6
    317  1268		       69 59		      adc	#89
    318  126a				   .NoReset6
    319  126a		       85 b9		      sta	FoodPosX+6
    320  126c
    321  126c
    322  126c
    323  126c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    324  126c							; Calculate Hmove offsets for 2nd cat row's food items
    325  126c
    326  126c		       a9 05		      lda	#5
    327  126e		       38		      sec
    328  126f		       e5 a4		      sbc	PreCatRows
    329  1271		       a8		      tay
    330  1272
    331  1272		       b9 a5 00 	      lda	FoodItemL,y
    332  1275		       29 f0		      and	#$F0
    333  1277		       85 bd		      sta	CatRow2FoodL
    334  1279		       aa		      tax
    335  127a		       bd 0f 1e 	      lda	FoodGfx+15,x
    336  127d		       85 bf		      sta	CatRow2Color1
    337  127f
    338  127f		       b9 ac 00 	      lda	FoodItemR,y
    339  1282		       29 f0		      and	#$F0
    340  1284		       85 be		      sta	CatRow2FoodR
    341  1286		       aa		      tax
    342  1287		       bd 0f 1e 	      lda	FoodGfx+15,x
    343  128a		       85 c0		      sta	CatRow2Color2
    344  128c
    345  128c		       b9 b3 00 	      lda	FoodPosX,y
    346  128f		       e9 2c		      sbc	#44
    347  1291		       f0 04		      beq	.Prepare
    348  1293		       90 02		      bcc	.Prepare
    349  1295		       e9 2d		      sbc	#45
    350  1297
    351  1297				   .Prepare
    352  1297		       38		      sec
    353  1298		       e9 01		      sbc	#1
    354  129a
    355  129a		       a2 70		      ldx	#$70
    356  129c		       a0 02		      ldy	#2
    357  129e
    358  129e				   .OffsetLoop
    359  129e		       18		      clc
    360  129f		       69 0f		      adc	#15
    361  12a1		       f0 02		      beq	.CalcOffset
    362  12a3		       30 0d		      bmi	.MaxOffset
    363  12a5
    364  12a5				   .CalcOffset
    365  12a5		       49 07		      eor	#7
    366  12a7		       0a		      asl
    367  12a8		       0a		      asl
    368  12a9		       0a		      asl
    369  12aa		       0a		      asl
    370  12ab
    371  12ab		       99 ba 00 	      sta	CatRowHmove,y
    372  12ae		       a9 00		      lda	#0
    373  12b0		       f0 02		      beq	.NextOffset
    374  12b2
    375  12b2				   .MaxOffset
    376  12b2		       96 ba		      stx	CatRowHmove,y
    377  12b4
    378  12b4				   .NextOffset
    379  12b4		       88		      dey
    380  12b5		       10 e7		      bpl	.OffsetLoop
    381  12b7
    382  12b7
    383  12b7
    384  12b7
    385  12b7
    386  12b7					      SUBROUTINE
    387  12b7
    388  12b7
    389  12b7
    390  12b7
    391  12b7
    392  12b7
    393  12b7		       a9 7a		      lda	#COL_SCORE	; 2
    394  12b9		       85 87		      sta	ScoreColor	; 3
    395  12bb
    396  12bb		       a5 87		      lda	ScoreColor	; 3
    397  12bd		       85 06		      sta	COLUP0	; 3 - set color registers
    398  12bf		       85 07		      sta	COLUP1	; 3
    399  12c1		       85 08		      sta	COLUPF	; 3
    400  12c3		       85 09		      sta	COLUBK	; 3
    401  12c5
    402  12c5		       a5 80		      lda	Frame
    403  12c7		       29 0f		      and	#%00001111
    404  12c9		       f0 04		      beq	.IncScore
    405  12cb		       a9 00		      lda	#0
    406  12cd		       f0 02		      beq	.IncSkip
    407  12cf				   .IncScore
    408  12cf		       a9 89		      lda	#$89
    409  12d1				   .IncSkip
    410  12d1		       85 85		      sta	BCDScoreAdd+1
    411  12d3
    412  12d3		       a9 19		      lda	#$19
    413  12d5		       85 86		      sta	BCDLevel
    414  12d7
    415  12d7
    416  12d7
    417  12d7
    418  12d7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    419  12d7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    420  12d7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    421  12d7
    422  12d7		       a9 1e		      lda	#>FoodGfx
    423  12d9		       85 92		      sta	FoodGfxPtr1+1
    424  12db		       85 94		      sta	FoodGfxPtr2+1
    425  12dd
    426  12dd		       a9 1f		      lda	#>CatTartGfx
    427  12df		       85 96		      sta	TartGfxPtr1+1
    428  12e1		       85 9a		      sta	TartGfxPtr2+1
    429  12e3
    430  12e3		       a9 1f		      lda	#>CatFaceGfx
    431  12e5		       85 98		      sta	CatGfxPtr1+1
    432  12e7		       85 9c		      sta	CatGfxPtr2+1
    433  12e9
    434  12e9		       a5 a0		      lda	CatPosition
    435  12eb		       29 1f		      and	#%00011111
    436  12ed		       aa		      tax
    437  12ee
    438  12ee		       18		      clc
    439  12ef
    440  12ef		       69 06		      adc	#<CatTartGfx
    441  12f1		       85 99		      sta	TartGfxPtr2
    442  12f3		       69 13		      adc	#19
    443  12f5		       85 95		      sta	TartGfxPtr1
    444  12f7
    445  12f7		       8a		      txa
    446  12f8		       69 28		      adc	#<CatFaceGfx
    447  12fa		       85 9b		      sta	CatGfxPtr2
    448  12fc		       69 13		      adc	#19
    449  12fe		       85 97		      sta	CatGfxPtr1
    450  1300
    451  1300		       a9 56		      lda	#$56
    452  1302		       85 88		      sta	PgBarColor
    453  1304
    454  1304		       a9 4a		      lda	#COL_CAT_TART
    455  1306		       85 89		      sta	CatTartColor
    456  1308
    457  1308		       a5 80		      lda	Frame
    458  130a		       29 08		      and	#%00001000
    459  130c		       4a		      lsr
    460  130d		       4a		      lsr
    461  130e		       4a		      lsr
    462  130f		       a8		      tay
    463  1310		       a5 a2		      lda	Rainbow
    464  1312		       29 0f		      and	#$0F
    465  1314		       59 1e 1d 	      eor	RainbowGfx,y
    466  1317		       85 a2		      sta	Rainbow
    467  1319
    468  1319
    469  1319
    470  1319							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    471  1319							; Prepare for Main Gameplay Kernel
    472  1319							;
    473  1319							; Figure out how many rows to draw before and after the two cat rows
    474  1319							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    475  1319
    476  1319
    477  1319
    478  1319							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    479  1319							; Finish Vertical Blanking
    480  1319							;
    481  1319							; Loop until the end of vertical blanking
    482  1319							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    483  1319
    484  1319		       4c 00 14 	      jmp	VblankTimerLoop
    485  131c
    486  1400		       00 00 00 00*	      ALIGN	$100
    487  1400
    488  1400				   VblankTimerLoop
    489  1400		       ad 84 02 	      lda	INTIM
    490  1403		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     57  1405
     58  1405
     59  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     60  1405							; Kernel
     61  1405							;
     62  1405							; Draw the screen
     63  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     64  1405
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1405					      include	code/Kernel.asm
      1  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1405							; Kernel
      3  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1405
      5  1405		       a9 00		      lda	#0
      6  1407		       85 02		      sta	WSYNC
      7  1409		       85 01		      sta	VBLANK	; enable display
      8  140b
      9  140b							; Include kernel routines
     10  140b
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  140b					      include	code/ScoreboardKernel.asm
      1  140b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  140b							; Scoreboard Display
      3  140b							;
      4  140b							; Draw the 6-digit score and level counter.
      5  140b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  140b
      7  140b					      SUBROUTINE
      8  140b
      9  140b		       a9 13		      lda	#$13
     10  140d		       85 04		      sta	NUSIZ0
     11  140f
     12  140f		       a9 20		      lda	#%00100000
     13  1411		       85 0d		      sta	PF0
     14  1413
     15  1413		       a9 35		      lda	#%00110101
     16  1415		       85 0a		      sta	CTRLPF
     17  1417
     18  1417		       a5 86		      lda	BCDLevel
     19  1419		       4a		      lsr
     20  141a		       4a		      lsr
     21  141b		       4a		      lsr
     22  141c		       85 1e		      sta	ENAM1
     23  141e		       85 1d		      sta	ENAM0
     24  1420
     25  1420		       a9 00		      lda	#0
     26  1422		       85 06		      sta	COLUP0
     27  1424		       85 07		      sta	COLUP1
     28  1426		       85 1b		      sta	GRP0
     29  1428
     30  1428		       a9 ff		      lda	#$FF
     31  142a		       85 1d		      sta	ENAM0
     32  142c		       85 1f		      sta	ENABL
     33  142e		       85 25		      sta	VDELP0
     34  1430		       85 26		      sta	VDELP1
     35  1432
     36  1432		       a9 08		      lda	#8
     37  1434		       8d 96 02 	      sta	TIM64T
     38  1437		       a0 05		      ldy	#5
     39  1439
     40  1439		       85 02		      sta	WSYNC
     41  143b
     42  143b				   ScoreboardLoop
     43  143b
     44  143b		       b9 50 1c 	      lda	LevelGfx,y	; 04
     45  143e		       8d 05 00 	      sta.w	NUSIZ1	; 08
     46  1441
     47  1441		       68		      pla		; 12
     48  1442		       85 1c		      sta	GRP1	; 15
     49  1444		       68		      pla		; 19
     50  1445		       85 1b		      sta	GRP0	; 22
     51  1447
     52  1447		       68		      pla		; 26
     53  1448		       85 1c		      sta	GRP1	; 29
     54  144a		       68		      pla		; 33
     55  144b		       85 1b		      sta	GRP0	; 36
     56  144d
     57  144d		       a9 03		      lda	#3	; 38
     58  144f		       85 05		      sta	NUSIZ1	; 41
     59  1451
     60  1451		       68		      pla		; 45
     61  1452		       aa		      tax		; 47
     62  1453		       68		      pla		; 51
     63  1454		       a8		      tay		; 53
     64  1455		       68		      pla		; 57
     65  1456
     66  1456		       86 1c		      stx	GRP1	; 60
     67  1458		       84 1b		      sty	GRP0	; 63
     68  145a		       85 1c		      sta	GRP1	; 66
     69  145c		       85 1b		      sta	GRP0	; 69
     70  145e
     71  145e		       ac 84 02 	      ldy	INTIM	; 73
     72  1461		       10 d8		      bpl	ScoreboardLoop	; 00/75
     73  1463
     74  1463
     75  1463		       a9 00		      lda	#0	; 01
     76  1465		       85 1b		      sta	GRP0	; 04
     77  1467		       85 1c		      sta	GRP1	; 07
     78  1469		       85 26		      sta	VDELP1	; 10
     79  146b		       85 25		      sta	VDELP0	; 13
     80  146d		       85 1f		      sta	ENABL	; 16
     81  146f		       85 1d		      sta	ENAM0	; 19
     82  1471		       85 1e		      sta	ENAM1	; 22
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1473					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1473							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1473							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1473							; CPU is at cycle 33
      4  1473
      5  1473							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1473							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1473
      8  1473		       a2 ff		      ldx	#$FF
      9  1475		       9a		      txs
     10  1476
     11  1476		       a0 11		      ldy	#17
     12  1478
     13  1478				   .ClearRainbow
     14  1478
     15  1478		       48		      pha
     16  1479		       48		      pha
     17  147a
     18  147a		       88		      dey
     19  147b		       d0 fb		      bne	.ClearRainbow
     20  147d
     21  147d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  147d							; Load rainbow colors into RAM - 65 cycles
     23  147d
     24  147d		       a9 14		      lda	#20
     25  147f		       e5 a0		      sbc	CatPosition	; carry is assumed to be set
     26  1481		       29 1f		      and	#%00011111
     27  1483		       18		      clc
     28  1484		       69 eb		      adc	#RamBowColors+13
     29  1486		       aa		      tax
     30  1487		       9a		      txs
     31  1488
     32  1488		       a0 05		      ldy	#5
     33  148a
     34  148a				   .LoadRainbow
     35  148a		       b9 00 1f 	      lda	RainbowColors,y
     36  148d		       48		      pha
     37  148e		       48		      pha
     38  148f
     39  148f		       88		      dey
     40  1490		       10 f8		      bpl	.LoadRainbow
     41  1492
     42  1492
     43  1492
     44  1492		       a9 00		      lda	#ONE_COPY
     45  1494		       85 04		      sta	NUSIZ0
     46  1496		       a9 04		      lda	#TWO_WIDE
     47  1498		       85 05		      sta	NUSIZ1
     48  149a
     49  149a		       a9 06		      lda	#6
     50  149c		       85 c7		      sta	CurrentRow
     51  149e
     52  149e		       85 02		      sta	WSYNC
     53  14a0
     54  14a0		       a5 87		      lda	ScoreColor
     55  14a2		       85 09		      sta	COLUBK
     56  14a4
     57  14a4		       a2 dd		      ldx	#GAMEPLAY_STACK
     58  14a6		       9a		      txs
     59  14a7
     60  14a7		       20 50 15 	      jsr	SetFoodPosition
     61  14aa
     62  14aa		       85 02		      sta	WSYNC
     63  14ac
     64  14ac		       4c 00 15 	      jmp	.Align1
     65  14af
     66  1500		       00 00 00 00*	      ALIGN	$100
     67  1500
     68  1500				   .Align1
     69  1500
     70  1500				   PreKernel
     71  1500
     72  1500		       85 02		      sta	WSYNC
     73  1502
     74  1502		       a5 f1		      lda	RamBowColors+19
     75  1504		       d0 02		      bne	.SetCatThrobPF
     76  1506		       a5 c1		      lda	ThrobColor+0
     77  1508				   .SetCatThrobPF
     78  1508		       85 c4		      sta	CatThrobPF
     79  150a
     80  150a		       85 02		      sta	WSYNC
     81  150c
      0  150c					      SLEEP	2
      1  150c				   .CYCLES    SET	2
      2  150c
      3  150c				  -	      IF	.CYCLES < 2
      4  150c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  150c				  -	      ERR
      6  150c					      ENDIF
      7  150c
      8  150c				  -	      IF	.CYCLES & 1
      9  150c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  150c				  -	      nop	0
     11  150c				  -	      ELSE
     12  150c				  -	      bit	VSYNC
     13  150c				  -	      ENDIF
     14  150c				  -.CYCLES    SET	.CYCLES - 3
     15  150c					      ENDIF
     16  150c
     17  150c					      REPEAT	.CYCLES / 2
     18  150c		       ea		      nop
     19  150d					      REPEND
     83  150d
     84  150d		       a9 90		      lda	#$90	; 04
     85  150f		       85 20		      sta	HMP0	; 07
     86  1511
     87  1511		       a9 01		      lda	#PF_REFLECT	; 09
     88  1513		       85 0a		      sta	CTRLPF	; 12
     89  1515
     90  1515		       a5 a2		      lda	Rainbow	; 15
     91  1517		       85 0d		      sta	PF0	; 18
     92  1519
     93  1519		       a9 09		      lda	#COL_CAT_FACE	; 20
     94  151b		       85 06		      sta	COLUP0	; 23
     95  151d
     96  151d		       a5 ab		      lda	FoodItemL+6	; 26
     97  151f		       85 10		      sta	RESP0	; 29
     98  1521		       29 f0		      and	#$F0	; 31
     99  1523		       85 91		      sta	FoodGfxPtr1	; 34
    100  1525		       aa		      tax		; 36
    101  1526		       bd 0f 1e 	      lda	FoodGfx+15,x	; 40
    102  1529		       85 c8		      sta	FoodColor1	; 43
    103  152b
    104  152b		       a5 b2		      lda	FoodItemR+6	; 46
    105  152d		       29 f0		      and	#$F0	; 48
    106  152f		       85 93		      sta	FoodGfxPtr2	; 51
    107  1531		       aa		      tax		; 53
    108  1532		       bd 0f 1e 	      lda	FoodGfx+15,x	; 57
    109  1535		       85 c9		      sta	FoodColor2	; 60
    110  1537
    111  1537		       a5 b9		      lda	FoodPosX+6	; 63
    112  1539		       85 c5		      sta	Temp	; 66
    113  153b
      0  153b					      SLEEP	4	; 70
      1  153b				   .CYCLES    SET	4
      2  153b
      3  153b				  -	      IF	.CYCLES < 2
      4  153b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  153b				  -	      ERR
      6  153b					      ENDIF
      7  153b
      8  153b				  -	      IF	.CYCLES & 1
      9  153b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  153b				  -	      nop	0
     11  153b				  -	      ELSE
     12  153b				  -	      bit	VSYNC
     13  153b				  -	      ENDIF
     14  153b				  -.CYCLES    SET	.CYCLES - 3
     15  153b					      ENDIF
     16  153b
     17  153b					      REPEAT	.CYCLES / 2
     18  153b		       ea		      nop
     17  153b					      REPEND
     18  153c		       ea		      nop
     19  153d					      REPEND
    115  153d
    116  153d		       85 2a		      sta	HMOVE	; 73
    117  153f
    118  153f		       a5 c2		      lda	ThrobColor+1	; 03
    119  1541		       85 09		      sta	COLUBK	; 06
    120  1543		       85 08		      sta	COLUPF	; 09
    121  1545
    122  1545		       a9 80		      lda	#$80	; 11
    123  1547		       85 20		      sta	HMP0	; 14
    124  1549
    125  1549		       a5 a4		      lda	PreCatRows
    126  154b		       d0 22		      bne	HiRows
    127  154d		       4c d4 15 	      jmp	CatRows
    128  1550
    129  1550							; If any part of the cat needs to be drawn in the top row,
    130  1550							; skip straight to CatRows.
    131  1550
    132  1550
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  1550					      include	code/Gameplay Kernel/HiRows.asm
      1  1550							; Draw all the rows above the cat's two rows
      2  1550
------- FILE subroutines/SetFoodPosition.asm LEVEL 5 PASS 2
      0  1550					      include	subroutines/SetFoodPosition.asm
      1  1550				   SetFoodPosition
      2  1550
      3  1550		       85 02		      sta	WSYNC	; 00
      4  1552
      5  1552		       85 09		      sta	COLUBK	; 03
      6  1554		       85 08		      sta	COLUPF	; 06
      7  1556
      0  1556					      SLEEP	4	; 10
      1  1556				   .CYCLES    SET	4
      2  1556
      3  1556				  -	      IF	.CYCLES < 2
      4  1556				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1556				  -	      ERR
      6  1556					      ENDIF
      7  1556
      8  1556				  -	      IF	.CYCLES & 1
      9  1556				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1556				  -	      nop	0
     11  1556				  -	      ELSE
     12  1556				  -	      bit	VSYNC
     13  1556				  -	      ENDIF
     14  1556				  -.CYCLES    SET	.CYCLES - 3
     15  1556					      ENDIF
     16  1556
     17  1556					      REPEAT	.CYCLES / 2
     18  1556		       ea		      nop
     17  1556					      REPEND
     18  1557		       ea		      nop
     19  1558					      REPEND
      9  1558
     10  1558		       a4 c7		      ldy	CurrentRow	; 13
     11  155a		       b9 b3 00 	      lda	FoodPosX,y	; 17
     12  155d
     13  155d		       38		      sec		; 19
     14  155e				   .DivideLoop
     15  155e		       e9 0f		      sbc	#15	; 21
     16  1560		       b0 fc		      bcs	.DivideLoop	; 23
     17  1562
     18  1562		       85 11		      sta	RESP1	; 26
     19  1564
     20  1564		       49 07		      eor	#7
     21  1566		       69 01		      adc	#1
     22  1568		       0a		      asl
     23  1569		       0a		      asl
     24  156a		       0a		      asl
     25  156b		       0a		      asl
     26  156c		       85 21		      sta	HMP1	; 41/66
     27  156e
     28  156e		       60		      rts		; 47/72
------- FILE code/Gameplay Kernel/HiRows.asm
      4  156f
      5  156f				   HiRows
      6  156f					      SUBROUTINE
      7  156f
      8  156f		       85 02		      sta	WSYNC
      9  1571
     10  1571		       a5 c1		      lda	ThrobColor+0
     11  1573		       85 09		      sta	COLUBK
     12  1575		       85 08		      sta	COLUPF
     13  1577
     14  1577
     15  1577							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1577							; This will probably be a good time to prepare the pointers for the
     17  1577							; food items' graphics, as well as loading the colors for the food items.
     18  1577
     19  1577							; After that, output 14 lines to draw a single row with food items,
     20  1577							; but without drawing the cat. The food graphics will be updated every line,
     21  1577							; but there will probably not be enough time to also update the food colors
     22  1577							; every line throughout the kernel.
     23  1577
     24  1577		       20 00 19 	      jsr	DrawFoodRow
     25  157a
     26  157a		       c6 c7		      dec	CurrentRow	; 73
     27  157c
     28  157c		       85 02		      sta	WSYNC
     29  157e
     30  157e							; Lastly, output four single-color lines to draw most of a "throb" line,
     31  157e							; while setting the position of player 1 to draw the next set of food items.
     32  157e
     33  157e
     34  157e		       a5 c1		      lda	ThrobColor+0
     35  1580		       85 09		      sta	COLUBK
     36  1582		       85 08		      sta	COLUPF
     37  1584		       a9 00		      lda	#0
     38  1586		       85 1b		      sta	GRP0
     39  1588		       85 1c		      sta	GRP1
     40  158a
     41  158a		       a5 c2		      lda	ThrobColor+1
     42  158c
     43  158c		       20 50 15 	      jsr	SetFoodPosition
     44  158f
     45  158f		       85 02		      sta	WSYNC
     46  1591
     47  1591		       a5 c3		      lda	ThrobColor+2	; 03
     48  1593		       85 09		      sta	COLUBK	; 06
     49  1595		       85 08		      sta	COLUPF	; 09
     50  1597
     51  1597		       20 24 19 	      jsr	Sleep12
     52  159a		       20 24 19 	      jsr	Sleep12
     53  159d		       20 24 19 	      jsr	Sleep12
     54  15a0		       20 24 19 	      jsr	Sleep12
     55  15a3		       20 24 19 	      jsr	Sleep12	; 69
     56  15a6
     57  15a6		       8d 2a 00 	      sta.w	HMOVE	; 73
     58  15a9
     59  15a9		       85 02		      sta	WSYNC
     60  15ab
     61  15ab		       a5 c2		      lda	ThrobColor+1	; 03
     62  15ad		       85 09		      sta	COLUBK	; 06
     63  15af		       85 08		      sta	COLUPF	; 09
     64  15b1
     65  15b1		       b9 a5 00 	      lda	FoodItemL,y	; 13
     66  15b4		       29 f0		      and	#$F0	; 15
     67  15b6		       85 91		      sta	FoodGfxPtr1	; 18
     68  15b8		       aa		      tax		; 20
     69  15b9		       bd 0f 1e 	      lda	FoodGfx+15,x	; 24
     70  15bc		       85 c8		      sta	FoodColor1	; 27
     71  15be
     72  15be		       b9 ac 00 	      lda	FoodItemR,y	; 31
     73  15c1		       29 f0		      and	#$F0	; 33
     74  15c3		       85 93		      sta	FoodGfxPtr2	; 36
     75  15c5		       aa		      tax		; 38
     76  15c6		       bd 0f 1e 	      lda	FoodGfx+15,x	; 42
     77  15c9		       85 c9		      sta	FoodColor2	; 45
     78  15cb
     79  15cb		       b9 b3 00 	      lda	FoodPosX,y	; 49
     80  15ce		       85 c5		      sta	Temp	; 52
     81  15d0
     82  15d0		       c6 a4		      dec	PreCatRows
     83  15d2		       d0 9b		      bne	HiRows
     84  15d4
     85  15d4							; If this is not the last row before drawing the cat's rows,
     86  15d4							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  15d4					      include	code/Gameplay Kernel/CatRows.asm
      1  15d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  15d4							; Cat Row Kernel
      3  15d4							;
      4  15d4							; This is the kernel that is used to draw the two rows containing the cat.
      5  15d4							; It also draw the throbbing line between the cat's rows.
      6  15d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  15d4
      8  15d4				   CatRows
      9  15d4
     10  15d4					      SUBROUTINE
     11  15d4
     12  15d4		       85 02		      sta	WSYNC
     13  15d6
     14  15d6							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     15  15d6
     16  15d6		       a6 c1		      ldx	ThrobColor+0	; 03
     17  15d8		       86 09		      stx	COLUBK	; 06
     18  15da		       86 08		      stx	COLUPF	; 09
     19  15dc
     20  15dc		       a0 0d		      ldy	#13	; 11
     21  15de		       b1 95		      lda	(TartGfxPtr1),y	; 16
     22  15e0		       85 0e		      sta	PF1	; 19
     23  15e2
      0  15e2					      SLEEP	3	; 22
      1  15e2				   .CYCLES    SET	3
      2  15e2
      3  15e2				  -	      IF	.CYCLES < 2
      4  15e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15e2				  -	      ERR
      6  15e2					      ENDIF
      7  15e2
      8  15e2					      IF	.CYCLES & 1
      9  15e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15e2		       04 00		      nop	0
     11  15e4				  -	      ELSE
     12  15e4				  -	      bit	VSYNC
     13  15e4					      ENDIF
     14  15e4				   .CYCLES    SET	.CYCLES - 3
     15  15e4					      ENDIF
     16  15e4
     17  15e4				  -	      REPEAT	.CYCLES / 2
     18  15e4				  -	      nop
     19  15e4					      REPEND
     25  15e4		       a5 89		      lda	CatTartColor	; 25
     26  15e6		       85 08		      sta	COLUPF	; 28
      0  15e8					      SLEEP	2	; 30
      1  15e8				   .CYCLES    SET	2
      2  15e8
      3  15e8				  -	      IF	.CYCLES < 2
      4  15e8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15e8				  -	      ERR
      6  15e8					      ENDIF
      7  15e8
      8  15e8				  -	      IF	.CYCLES & 1
      9  15e8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15e8				  -	      nop	0
     11  15e8				  -	      ELSE
     12  15e8				  -	      bit	VSYNC
     13  15e8				  -	      ENDIF
     14  15e8				  -.CYCLES    SET	.CYCLES - 3
     15  15e8					      ENDIF
     16  15e8
     17  15e8					      REPEAT	.CYCLES / 2
     18  15e8		       ea		      nop
     19  15e9					      REPEND
     28  15e9		       86 08		      stx	COLUPF	; 33
     29  15eb
     30  15eb					      SUBROUTINE
     31  15eb
     32  15eb		       a6 c7		      ldx	CurrentRow	; 36
     33  15ed		       b5 b3		      lda	FoodPosX,x	; 40
     34  15ef
     35  15ef		       4c 00 16 	      jmp	.Align2	; 43
     36  1600		       00 00 00 00*	      ALIGN	$100
     37  1600				   .Align2
     38  1600
      0  1600					      SLEEP	5	; 48
      1  1600				   .CYCLES    SET	5
      2  1600
      3  1600				  -	      IF	.CYCLES < 2
      4  1600				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1600				  -	      ERR
      6  1600					      ENDIF
      7  1600
      8  1600					      IF	.CYCLES & 1
      9  1600					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1600		       04 00		      nop	0
     11  1602				  -	      ELSE
     12  1602				  -	      bit	VSYNC
     13  1602					      ENDIF
     14  1602				   .CYCLES    SET	.CYCLES - 3
     15  1602					      ENDIF
     16  1602
     17  1602					      REPEAT	.CYCLES / 2
     18  1602		       ea		      nop
     19  1603					      REPEND
     40  1603
     41  1603		       a6 c9		      ldx	FoodColor2	; 51
     42  1605		       9a		      txs		; 53
     43  1606
     44  1606		       c9 30		      cmp	#48	; 55
     45  1608
     46  1608		       a2 00		      ldx	#0	; 57
     47  160a
     48  160a							; Then output the 14 lines to draw a single row. This will include drawing
     49  160a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     50  160a							; All graphics will be updated every line.
     51  160a
     52  160a		       b0 0b		      bcs	.RightEntrance	; 60/59
     53  160c		       90 42		      bcc	.LeftEntrance	; 62
     54  160e
     55  160e							; 14 bytes into the page
     56  160e
     57  160e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  160e							; Kernel used when food items are closer to the right edge of the screen
     59  160e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     60  160e
     61  160e				   .RightLoop
     62  160e
     63  160e							; 8 cycles
     64  160e		       b1 97		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     65  1610		       85 1b		      sta	GRP0	; 52
     66  1612
     67  1612							; 9 cycles
     68  1612		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     69  1614		       ba		      tsx		; 57 - load 2nd food item's color
     70  1615		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     71  1617
     72  1617				   .RightEntrance		; enter loop here
     73  1617
     74  1617							; 2 cycles
     75  1617		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     76  1619
     77  1619							; 8 cycles
     78  1619		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     79  161b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     80  161d
     81  161d							; 8 cycles
     82  161d		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     83  161f		       85 1c		      sta	GRP1	; 02
     84  1621
     85  1621							; 7 cycles
     86  1621		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     87  1624		       85 09		      sta	COLUBK	; 09
     88  1626
     89  1626							; 7 cycles
     90  1626		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     91  1629		       85 08		      sta	COLUPF	; 16
     92  162b
     93  162b							; 6 cycles
     94  162b		       a5 c8		      lda	FoodColor1	; 19 - set 1st food item's color
     95  162d		       85 07		      sta	COLUP1	; 22
     96  162f
     97  162f							; 8 cycles
     98  162f		       a5 89		      lda	CatTartColor	; 25
     99  1631		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    100  1633		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    101  1635		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    102  1637
    103  1637							; 5 cycles
    104  1637		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    105  1639
    106  1639							; 2 cycles
    107  1639		       88		      dey		; 41
    108  163a		       10 d2		      bpl	.RightLoop	; 44/43
    109  163c
    110  163c		       a0 12		      ldy	#18	; 45
    111  163e		       b1 99		      lda	(TartGfxPtr2),y	; 50
    112  1640
      0  1640					      SLEEP	2	; 52
      1  1640				   .CYCLES    SET	2
      2  1640
      3  1640				  -	      IF	.CYCLES < 2
      4  1640				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1640				  -	      ERR
      6  1640					      ENDIF
      7  1640
      8  1640				  -	      IF	.CYCLES & 1
      9  1640				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1640				  -	      nop	0
     11  1640				  -	      ELSE
     12  1640				  -	      bit	VSYNC
     13  1640				  -	      ENDIF
     14  1640				  -.CYCLES    SET	.CYCLES - 3
     15  1640					      ENDIF
     16  1640
     17  1640					      REPEAT	.CYCLES / 2
     18  1640		       ea		      nop
     19  1641					      REPEND
    114  1641
    115  1641		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    116  1643		       ba		      tsx		; 57 - load 2nd food item's color
    117  1644		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    118  1646
    119  1646		       b0 38		      bcs	.End	; 63
    120  1648
    121  1648							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122  1648							; Kernel used when food items are closer to the left edge of the screen
    123  1648							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    124  1648
    125  1648				   .LeftLoop
    126  1648
    127  1648							; 8 cycles
    128  1648		       b1 97		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    129  164a		       85 1b		      sta	GRP0	; 57
    130  164c
    131  164c							; 5 cycles
    132  164c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    133  164e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    134  1650
    135  1650				   .LeftEntrance		; enter loop here
    136  1650
    137  1650							; 8 cycles
    138  1650		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    139  1652		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    140  1654
    141  1654							; 8 cycles
    142  1654		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    143  1656		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    144  1658
    145  1658							; 7 cycles
    146  1658		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    147  165b		       85 09		      sta	COLUBK	; 09
    148  165d
    149  165d							; 7 cycles
    150  165d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    151  1660		       85 08		      sta	COLUPF	; 16
    152  1662
    153  1662							; 6 cycles
    154  1662		       a5 c8		      lda	FoodColor1	; 19 - set 1st food item's color
    155  1664		       85 07		      sta	COLUP1	; 22
    156  1666
    157  1666							; 8 cycles
    158  1666		       a5 89		      lda	CatTartColor	; 25
    159  1668		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    160  166a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    161  166c
    162  166c							; 13 cycles
    163  166c		       b1 93		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    164  166e		       ba		      tsx		; 38 - load 2nd food item's color
    165  166f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    166  1671		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    167  1673
    168  1673							; 5 cycles
    169  1673		       88		      dey		; 46
    170  1674		       10 d2		      bpl	.LeftLoop	; 49/48
    171  1676
    172  1676		       a2 00		      ldx	#0	; 50
    173  1678		       86 08		      stx	COLUPF	; 53
    174  167a
    175  167a		       a0 12		      ldy	#18	; 55
    176  167c		       b1 99		      lda	(TartGfxPtr2),y	; 60
    177  167e
    178  167e		       86 1c		      stx	GRP1	; 63
    179  1680
    180  1680				   .End
    181  1680
    182  1680
    183  1680
    184  1680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    185  1680							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    186  1680							; cat with the rainbow. In order to align player 1 for the next row's
    187  1680							; food items, it will be neccesary to have three versions of this kernel,
    188  1680							; one for each of the three 60-color-clock spaced positions to reset.
    189  1680							; HMOVE will be written to on the first four scanlines. With a maximum
    190  1680							; movement of 15 color-clocks per scanline, this will allow a movement of
    191  1680							; up to 60 color clocks. With three versions of the kernel, it should be
    192  1680							; possible to put player 1 anywhere on the screen.
    193  1680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    194  1680
    195  1680
    196  1680
    197  1680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    198  1680							; Draw throb line #1
    199  1680
    200  1680		       85 0e		      sta	PF1	; 66
    201  1682
    202  1682		       b1 9b		      lda	(CatGfxPtr2),y	; 71
    203  1684		       85 1b		      sta	GRP0	; 74
    204  1686
    205  1686		       a6 c1		      ldx	ThrobColor+0	; 01
    206  1688
      0  1688					      THROB_RAINBOW_BK	18	; 12
      1  1688					      SUBROUTINE
      2  1688				   .X	      SET	18
      3  1688
      4  1688		       a5 f0		      lda	RamBowColors+.X
      5  168a		       d0 04		      bne	.Rainbow
      6  168c
      7  168c		       86 09		      stx	COLUBK
      8  168e		       f0 03		      beq	.End
      9  1690
     10  1690				   .Rainbow
     11  1690		       85 09		      sta	COLUBK
     12  1692		       ea		      nop
     13  1693
     14  1693				   .End
    208  1693
    209  1693		       a5 c4		      lda	CatThrobPF	; 15
    210  1695		       85 08		      sta	COLUPF	; 18
    211  1697		       8e 07 00 	      stx.w	COLUP1	; 22
    212  169a
    213  169a		       a5 89		      lda	CatTartColor	; 25
    214  169c		       85 08		      sta	COLUPF	; 28
    215  169e		       86 09		      stx	COLUBK	; 31
    216  16a0
    217  16a0		       88		      dey		; 33
    218  16a1		       85 11		      sta	RESP1	; 36
    219  16a3		       86 08		      stx	COLUPF	; 39
    220  16a5
    221  16a5		       b1 9b		      lda	(CatGfxPtr2),y	; 44
    222  16a7		       85 1b		      sta	GRP0	; 47
    223  16a9
    224  16a9		       b1 99		      lda	(TartGfxPtr2),y	; 52
    225  16ab		       85 0e		      sta	PF1	; 55
    226  16ad
    227  16ad		       c6 c7		      dec	CurrentRow	; 60
    228  16af		       a2 00		      ldx	#0	; 62
    229  16b1		       86 1c		      stx	GRP1	; 65
    230  16b3
    231  16b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    232  16b3							; Draw throb line #2
    233  16b3
    234  16b3		       a5 bc		      lda	CatRowHmove+2	; 68
    235  16b5		       85 21		      sta	HMP1	; 71
      0  16b7					      SLEEP	2	; 73
      1  16b7				   .CYCLES    SET	2
      2  16b7
      3  16b7				  -	      IF	.CYCLES < 2
      4  16b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16b7				  -	      ERR
      6  16b7					      ENDIF
      7  16b7
      8  16b7				  -	      IF	.CYCLES & 1
      9  16b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16b7				  -	      nop	0
     11  16b7				  -	      ELSE
     12  16b7				  -	      bit	VSYNC
     13  16b7				  -	      ENDIF
     14  16b7				  -.CYCLES    SET	.CYCLES - 3
     15  16b7					      ENDIF
     16  16b7
     17  16b7					      REPEAT	.CYCLES / 2
     18  16b7		       ea		      nop
     19  16b8					      REPEND
    237  16b8
    238  16b8		       a6 c2		      ldx	ThrobColor+1	; 00
      0  16ba					      THROB_RAINBOW_BK	17	; 11
      1  16ba					      SUBROUTINE
      2  16ba				   .X	      SET	17
      3  16ba
      4  16ba		       a5 ef		      lda	RamBowColors+.X
      5  16bc		       d0 04		      bne	.Rainbow
      6  16be
      7  16be		       86 09		      stx	COLUBK
      8  16c0		       f0 03		      beq	.End
      9  16c2
     10  16c2				   .Rainbow
     11  16c2		       85 09		      sta	COLUBK
     12  16c4		       ea		      nop
     13  16c5
     14  16c5				   .End
      0  16c5					      THROB_RAINBOW_PF	18	; 22
      1  16c5					      SUBROUTINE
      2  16c5				   .X	      SET	18
      3  16c5
      4  16c5		       a5 f0		      lda	RamBowColors+.X
      5  16c7		       d0 04		      bne	.Rainbow
      6  16c9
      7  16c9		       86 08		      stx	COLUPF
      8  16cb		       f0 03		      beq	.End
      9  16cd
     10  16cd				   .Rainbow
     11  16cd		       85 08		      sta	COLUPF
     12  16cf		       ea		      nop
     13  16d0
     14  16d0				   .End
    241  16d0
    242  16d0		       a5 89		      lda	CatTartColor	; 25
    243  16d2		       85 08		      sta	COLUPF	; 28
    244  16d4		       86 09		      stx	COLUBK	; 31
    245  16d6		       86 08		      stx	COLUPF	; 34
    246  16d8
    247  16d8		       88		      dey		; 36
    248  16d9
    249  16d9		       a6 c7		      ldx	CurrentRow	; 39
    250  16db		       b5 b3		      lda	FoodPosX,x	; 43
    251  16dd		       c9 2d		      cmp	#45	; 45
    252  16df		       10 01		      bpl	.RightSide	; 48/47
      0  16e1					      SKIP_WORD		; 51
      1  16e1
      2  16e1		       0c		      HEX	0C
      3  16e2
    254  16e2				   .RightSide
    255  16e2		       85 11		      sta	RESP1	; 51
    256  16e4
    257  16e4		       b1 9b		      lda	(CatGfxPtr2),y	; 56
    258  16e6		       85 1b		      sta	GRP0	; 59
    259  16e8
    260  16e8		       b1 99		      lda	(TartGfxPtr2),y	; 64
    261  16ea		       85 0e		      sta	PF1	; 67
      0  16ec					      SLEEP	3	; 70
      1  16ec				   .CYCLES    SET	3
      2  16ec
      3  16ec				  -	      IF	.CYCLES < 2
      4  16ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16ec				  -	      ERR
      6  16ec					      ENDIF
      7  16ec
      8  16ec					      IF	.CYCLES & 1
      9  16ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  16ec		       04 00		      nop	0
     11  16ee				  -	      ELSE
     12  16ee				  -	      bit	VSYNC
     13  16ee					      ENDIF
     14  16ee				   .CYCLES    SET	.CYCLES - 3
     15  16ee					      ENDIF
     16  16ee
     17  16ee				  -	      REPEAT	.CYCLES / 2
     18  16ee				  -	      nop
     19  16ee					      REPEND
    263  16ee		       85 2a		      sta	HMOVE	; 73
    264  16f0
    265  16f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    266  16f0							; Draw throb line #3
    267  16f0
    268  16f0		       a6 c3		      ldx	ThrobColor+2	; 00
      0  16f2					      THROB_RAINBOW_BK	16	; 11
      1  16f2					      SUBROUTINE
      2  16f2				   .X	      SET	16
      3  16f2
      4  16f2		       a5 ee		      lda	RamBowColors+.X
      5  16f4		       d0 04		      bne	.Rainbow
      6  16f6
      7  16f6		       86 09		      stx	COLUBK
      8  16f8		       f0 03		      beq	.End
      9  16fa
     10  16fa				   .Rainbow
     11  16fa		       85 09		      sta	COLUBK
     12  16fc		       ea		      nop
     13  16fd
     14  16fd				   .End
      0  16fd					      THROB_RAINBOW_PF	17	; 22
      1  16fd					      SUBROUTINE
      2  16fd				   .X	      SET	17
      3  16fd
      4  16fd		       a5 ef		      lda	RamBowColors+.X
      5  16ff		       d0 04		      bne	.Rainbow
      6  1701
      7  1701		       86 08		      stx	COLUPF
      8  1703		       f0 03		      beq	.End
      9  1705
     10  1705				   .Rainbow
     11  1705		       85 08		      sta	COLUPF
     12  1707		       ea		      nop
     13  1708
     14  1708				   .End
    271  1708
    272  1708		       a5 89		      lda	CatTartColor	; 25
    273  170a		       85 08		      sta	COLUPF	; 28
    274  170c		       86 09		      stx	COLUBK	; 31
    275  170e		       86 08		      stx	COLUPF	; 34
    276  1710
    277  1710		       88		      dey		; 36
    278  1711
    279  1711		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    280  1713		       85 1b		      sta	GRP0	; 44
    281  1715
    282  1715		       b1 99		      lda	(TartGfxPtr2),y	; 49
    283  1717		       85 0e		      sta	PF1	; 52
    284  1719
    285  1719		       a5 bd		      lda	CatRow2FoodL	; 55
    286  171b		       85 91		      sta	FoodGfxPtr1	; 58
    287  171d		       a5 be		      lda	CatRow2FoodR	; 61
    288  171f		       85 93		      sta	FoodGfxPtr2	; 64
    289  1721
    290  1721		       a5 bb		      lda	CatRowHmove+1	; 67
    291  1723		       85 21		      sta	HMP1	; 70
    292  1725
    293  1725		       85 2a		      sta	HMOVE	; 73
    294  1727
    295  1727							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  1727							; Draw throb line #4
    297  1727
    298  1727		       a6 c2		      ldx	ThrobColor+1	; 00
      0  1729					      THROB_RAINBOW_BK	15	; 11
      1  1729					      SUBROUTINE
      2  1729				   .X	      SET	15
      3  1729
      4  1729		       a5 ed		      lda	RamBowColors+.X
      5  172b		       d0 04		      bne	.Rainbow
      6  172d
      7  172d		       86 09		      stx	COLUBK
      8  172f		       f0 03		      beq	.End
      9  1731
     10  1731				   .Rainbow
     11  1731		       85 09		      sta	COLUBK
     12  1733		       ea		      nop
     13  1734
     14  1734				   .End
      0  1734					      THROB_RAINBOW_PF	16	; 22
      1  1734					      SUBROUTINE
      2  1734				   .X	      SET	16
      3  1734
      4  1734		       a5 ee		      lda	RamBowColors+.X
      5  1736		       d0 04		      bne	.Rainbow
      6  1738
      7  1738		       86 08		      stx	COLUPF
      8  173a		       f0 03		      beq	.End
      9  173c
     10  173c				   .Rainbow
     11  173c		       85 08		      sta	COLUPF
     12  173e		       ea		      nop
     13  173f
     14  173f				   .End
    301  173f
    302  173f		       a5 89		      lda	CatTartColor	; 25
    303  1741		       85 08		      sta	COLUPF	; 28
    304  1743		       86 09		      stx	COLUBK	; 31
    305  1745		       86 08		      stx	COLUPF	; 34
    306  1747
    307  1747		       88		      dey		; 36
    308  1748
    309  1748		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    310  174a		       85 1b		      sta	GRP0	; 44
    311  174c
    312  174c		       b1 99		      lda	(TartGfxPtr2),y	; 49
    313  174e		       85 0e		      sta	PF1	; 52
    314  1750
    315  1750		       a5 bf		      lda	CatRow2Color1	; 55
    316  1752		       85 c8		      sta	FoodColor1	; 58
    317  1754		       ae c0 00 	      ldx.w	CatRow2Color2	; 55
    318  1757		       9a		      txs		; 58
    319  1758
    320  1758		       a5 ba		      lda	CatRowHmove+0	; 67
    321  175a		       85 21		      sta	HMP1	; 70
    322  175c
    323  175c		       85 2a		      sta	HMOVE	; 73
    324  175e
    325  175e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  175e							; Draw throb line #5
    327  175e
    328  175e					      SUBROUTINE
    329  175e
    330  175e		       a6 c1		      ldx	ThrobColor+0	; 00
      0  1760					      THROB_RAINBOW_BK	14	; 11
      1  1760					      SUBROUTINE
      2  1760				   .X	      SET	14
      3  1760
      4  1760		       a5 ec		      lda	RamBowColors+.X
      5  1762		       d0 04		      bne	.Rainbow
      6  1764
      7  1764		       86 09		      stx	COLUBK
      8  1766		       f0 03		      beq	.End
      9  1768
     10  1768				   .Rainbow
     11  1768		       85 09		      sta	COLUBK
     12  176a		       ea		      nop
     13  176b
     14  176b				   .End
      0  176b					      THROB_RAINBOW_PF	15	; 22
      1  176b					      SUBROUTINE
      2  176b				   .X	      SET	15
      3  176b
      4  176b		       a5 ed		      lda	RamBowColors+.X
      5  176d		       d0 04		      bne	.Rainbow
      6  176f
      7  176f		       86 08		      stx	COLUPF
      8  1771		       f0 03		      beq	.End
      9  1773
     10  1773				   .Rainbow
     11  1773		       85 08		      sta	COLUPF
     12  1775		       ea		      nop
     13  1776
     14  1776				   .End
    333  1776
    334  1776		       a5 89		      lda	CatTartColor	; 25
    335  1778		       85 08		      sta	COLUPF	; 28
    336  177a		       86 09		      stx	COLUBK	; 31
    337  177c		       86 08		      stx	COLUPF	; 34
    338  177e
    339  177e		       88		      dey		; 36
    340  177f
    341  177f		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    342  1781		       85 1b		      sta	GRP0	; 44
    343  1783
    344  1783		       a6 c7		      ldx	CurrentRow	; 47
    345  1785		       b5 b3		      lda	FoodPosX,x	; 51
    346  1787		       c9 30		      cmp	#48	; 53
    347  1789
    348  1789		       a2 00		      ldx	#0	; 55
    349  178b		       ea		      nop		; 57
    350  178c
    351  178c							; Then output the 14 lines to draw a single row. This will include drawing
    352  178c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    353  178c							; All graphics will be updated every line.
    354  178c
    355  178c		       b0 0b		      bcs	.RightEntrance	; 60/59
    356  178e		       90 42		      bcc	.LeftEntrance	; 62
    357  1790
    358  1790							; 14 bytes into the page
    359  1790
    360  1790							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1790							; Kernel used when food items are closer to the right edge of the screen
    362  1790							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    363  1790
    364  1790				   .RightLoop
    365  1790
    366  1790							; 8 cycles
    367  1790		       b1 9b		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    368  1792		       85 1b		      sta	GRP0	; 52
    369  1794
    370  1794							; 9 cycles
    371  1794		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    372  1796		       ba		      tsx		; 57 - load 2nd food item's color
    373  1797		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    374  1799
    375  1799				   .RightEntrance		; enter loop here
    376  1799
    377  1799							; 2 cycles
    378  1799		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    379  179b
    380  179b							; 8 cycles
    381  179b		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    382  179d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    383  179f
    384  179f							; 8 cycles
    385  179f		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    386  17a1		       85 1c		      sta	GRP1	; 02
    387  17a3
    388  17a3							; 7 cycles
    389  17a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    390  17a6		       85 09		      sta	COLUBK	; 09
    391  17a8
    392  17a8							; 7 cycles
    393  17a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    394  17ab		       85 08		      sta	COLUPF	; 16
    395  17ad
    396  17ad							; 6 cycles
    397  17ad		       a5 c8		      lda	FoodColor1	; 19 - set 1st food item's color
    398  17af		       85 07		      sta	COLUP1	; 22
    399  17b1
    400  17b1							; 8 cycles
    401  17b1		       a5 89		      lda	CatTartColor	; 25
    402  17b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    403  17b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    404  17b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    405  17b9
    406  17b9							; 5 cycles
    407  17b9		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    408  17bb
    409  17bb							; 2 cycles
    410  17bb		       88		      dey		; 41
    411  17bc		       10 d2		      bpl	.RightLoop	; 44/43
    412  17be
    413  17be		       a0 12		      ldy	#18	; 45
    414  17c0		       b1 99		      lda	(TartGfxPtr2),y	; 50
    415  17c2
      0  17c2					      SLEEP	2	; 52
      1  17c2				   .CYCLES    SET	2
      2  17c2
      3  17c2				  -	      IF	.CYCLES < 2
      4  17c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  17c2				  -	      ERR
      6  17c2					      ENDIF
      7  17c2
      8  17c2				  -	      IF	.CYCLES & 1
      9  17c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  17c2				  -	      nop	0
     11  17c2				  -	      ELSE
     12  17c2				  -	      bit	VSYNC
     13  17c2				  -	      ENDIF
     14  17c2				  -.CYCLES    SET	.CYCLES - 3
     15  17c2					      ENDIF
     16  17c2
     17  17c2					      REPEAT	.CYCLES / 2
     18  17c2		       ea		      nop
     19  17c3					      REPEND
    417  17c3
    418  17c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    419  17c5		       ba		      tsx		; 57 - load 2nd food item's color
    420  17c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    421  17c8
    422  17c8		       b0 36		      bcs	.End	; 63
    423  17ca
    424  17ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    425  17ca							; Kernel used when food items are closer to the left edge of the screen
    426  17ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    427  17ca
    428  17ca				   .LeftLoop
    429  17ca
    430  17ca							; 8 cycles
    431  17ca		       b1 9b		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    432  17cc		       85 1b		      sta	GRP0	; 57
    433  17ce
    434  17ce							; 5 cycles
    435  17ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    436  17d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    437  17d2
    438  17d2				   .LeftEntrance		; enter loop here
    439  17d2
    440  17d2							; 8 cycles
    441  17d2		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    442  17d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    443  17d6
    444  17d6							; 8 cycles
    445  17d6		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    446  17d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    447  17da
    448  17da							; 7 cycles
    449  17da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    450  17dd		       85 09		      sta	COLUBK	; 09
    451  17df
    452  17df							; 7 cycles
    453  17df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    454  17e2		       85 08		      sta	COLUPF	; 16
    455  17e4
    456  17e4							; 6 cycles
    457  17e4		       a5 c8		      lda	FoodColor1	; 19 - set 1st food item's color
    458  17e6		       85 07		      sta	COLUP1	; 22
    459  17e8
    460  17e8							; 8 cycles
    461  17e8		       a5 89		      lda	CatTartColor	; 25
    462  17ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    463  17ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    464  17ee
    465  17ee							; 13 cycles
    466  17ee		       b1 93		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    467  17f0		       ba		      tsx		; 38 - load 2nd food item's color
    468  17f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    469  17f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    470  17f5
    471  17f5							; 5 cycles
    472  17f5		       88		      dey		; 46
    473  17f6		       10 d2		      bpl	.LeftLoop	; 49/48
    474  17f8
    475  17f8		       a2 00		      ldx	#0	; 50
    476  17fa		       86 08		      stx	COLUPF	; 53
    477  17fc
    478  17fc		       a0 12		      ldy	#18	; 55
    479  17fe		       b1 99		      lda	(TartGfxPtr2),y	; 60
    480  1800
    481  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  1800
    483  1800				   .End
    484  1800
    485  1800		       a2 ff		      ldx	#$FF	; 65
    486  1802		       9a		      txs		; 67
    487  1803
    488  1803		       a2 00		      ldx	#0
    489  1805
    490  1805							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    491  1805							; Use this time to prepare the next row's food item pointers (unless this is
    492  1805							; the last row). If this is the last row, skip over LoRows.
    493  1805
    494  1805		       85 02		      sta	WSYNC
    495  1807		       a5 c1		      lda	ThrobColor+0
    496  1809		       85 09		      sta	COLUBK
    497  180b		       85 08		      sta	COLUPF
    498  180d		       86 1c		      stx	GRP1
      0  180f					      SLEEP	18
      1  180f				   .CYCLES    SET	18
      2  180f
      3  180f				  -	      IF	.CYCLES < 2
      4  180f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  180f				  -	      ERR
      6  180f					      ENDIF
      7  180f
      8  180f				  -	      IF	.CYCLES & 1
      9  180f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  180f				  -	      nop	0
     11  180f				  -	      ELSE
     12  180f				  -	      bit	VSYNC
     13  180f				  -	      ENDIF
     14  180f				  -.CYCLES    SET	.CYCLES - 3
     15  180f					      ENDIF
     16  180f
     17  180f					      REPEAT	.CYCLES / 2
     18  180f		       ea		      nop
     17  180f					      REPEND
     18  1810		       ea		      nop
     17  1810					      REPEND
     18  1811		       ea		      nop
     17  1811					      REPEND
     18  1812		       ea		      nop
     17  1812					      REPEND
     18  1813		       ea		      nop
     17  1813					      REPEND
     18  1814		       ea		      nop
     17  1814					      REPEND
     18  1815		       ea		      nop
     17  1815					      REPEND
     18  1816		       ea		      nop
     17  1816					      REPEND
     18  1817		       ea		      nop
     19  1818					      REPEND
    500  1818		       86 1b		      stx	GRP0
    501  181a
    502  181a		       c6 c7		      dec	CurrentRow
    503  181c		       30 03		      bmi	.GpEnd
    504  181e
    505  181e							; If the cat is at the very bottom of the screen, don't disable the
    506  181e							; missile/player graphics until after they are drawn, so they don't get
    507  181e							; clipped at the bottom of the screen. An easy way to do this would be to
    508  181e							; simply disable them after they would have been drawn, whether they are
    509  181e							; already disabled or not.
    510  181e
    511  181e		       4c 25 19 	      jmp	LoRows
    512  1821
    513  1821				   .GpEnd
    514  1821		       4c 8d 19 	      jmp	GameplayEnd
    515  1824
    516  1900		       00 00 00 00*	      ALIGN	$100
    517  1900
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1900					      include	subroutines/DrawFoodRow.asm
      1  1900				   DrawFoodRow
      2  1900							; 69
      3  1900		       a0 0d		      ldy	#13	; 71
      4  1902
      5  1902				   .FoodLoop
      6  1902		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1904		       85 02		      sta	WSYNC	; 00
      8  1906
      9  1906				   .EnterHere
     10  1906		       85 09		      sta	COLUBK	; 03
     11  1908		       85 08		      sta	COLUPF	; 06
     12  190a
     13  190a		       b1 91		      lda	(FoodGfxPtr1),y	; 11
     14  190c		       85 1c		      sta	GRP1	; 14
     15  190e		       a5 c8		      lda	FoodColor1	; 17
     16  1910		       85 07		      sta	COLUP1	; 20
     17  1912
     18  1912		       a5 c5		      lda	Temp	; 23
     19  1914
     20  1914		       38		      sec		; 25
     21  1915				   .WaitLoop
     22  1915		       e9 17		      sbc	#23	; 27
     23  1917		       b0 fc		      bcs	.WaitLoop	; 29
     24  1919
     25  1919		       b1 93		      lda	(FoodGfxPtr2),y	; 49
     26  191b		       a6 c9		      ldx	FoodColor2	; 52
     27  191d		       85 1c		      sta	GRP1	; 55
     28  191f		       86 07		      stx	COLUP1	; 58
     29  1921
     30  1921		       88		      dey		; 60
     31  1922		       10 de		      bpl	.FoodLoop	; 62
     32  1924
     33  1924				   Sleep12
     34  1924		       60		      rts		; 68
------- FILE code/Gameplay Kernel/CatRows.asm
    519  1925
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1925					      include	code/Gameplay Kernel/LoRows.asm
      1  1925							; Draw all the rows below the cat's two rows.
      2  1925
      3  1925				   LoRows
      4  1925					      SUBROUTINE
      5  1925
      6  1925							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      7  1925							; player 1 for the next row's food items.
      8  1925
      9  1925		       a5 c2		      lda	ThrobColor+1
     10  1927
     11  1927		       20 50 15 	      jsr	SetFoodPosition
     12  192a
     13  192a		       85 02		      sta	WSYNC
     14  192c
     15  192c		       a5 c3		      lda	ThrobColor+2	; 03
     16  192e		       85 09		      sta	COLUBK	; 06
     17  1930		       85 08		      sta	COLUPF	; 09
     18  1932
     19  1932		       20 24 19 	      jsr	Sleep12
     20  1935		       20 24 19 	      jsr	Sleep12
     21  1938		       20 24 19 	      jsr	Sleep12
     22  193b		       20 24 19 	      jsr	Sleep12
     23  193e		       20 24 19 	      jsr	Sleep12	; 69
     24  1941
     25  1941		       8d 2a 00 	      sta.w	HMOVE	; 73
     26  1944
     27  1944		       85 02		      sta	WSYNC
     28  1946
     29  1946		       a5 c2		      lda	ThrobColor+1
     30  1948		       85 09		      sta	COLUBK
     31  194a		       85 08		      sta	COLUPF
     32  194c		       85 02		      sta	WSYNC
     33  194e
     34  194e		       a5 c1		      lda	ThrobColor+0	; 3
     35  1950		       85 09		      sta	COLUBK	; 6
     36  1952		       85 08		      sta	COLUPF	; 9
     37  1954
     38  1954		       a4 c7		      ldy	CurrentRow	; 12
     39  1956
     40  1956		       b9 a5 00 	      lda	FoodItemL,y	; 16
     41  1959		       29 f0		      and	#$F0	; 18
     42  195b		       85 91		      sta	FoodGfxPtr1	; 21
     43  195d		       aa		      tax		; 23
     44  195e		       bd 0f 1e 	      lda	FoodGfx+15,x	; 27
     45  1961		       85 c8		      sta	FoodColor1	; 30
     46  1963
     47  1963		       b9 ac 00 	      lda	FoodItemR,y	; 34
     48  1966		       29 f0		      and	#$F0	; 37
     49  1968		       85 93		      sta	FoodGfxPtr2	; 39
     50  196a		       aa		      tax		; 41
     51  196b		       bd 0f 1e 	      lda	FoodGfx+15,x	; 45
     52  196e		       85 c9		      sta	FoodColor2	; 48
     53  1970
     54  1970		       b9 b3 00 	      lda	FoodPosX,y	; 52
     55  1973		       85 c5		      sta	Temp	; 55
     56  1975
     57  1975
     58  1975
     59  1975							; Output 14 lines to draw a row, exactly the same as in HiRows.
     60  1975							; It may be possible to code this as a subroutine to save ROM space.
     61  1975
     62  1975		       20 00 19 	      jsr	DrawFoodRow	; 61
     63  1978
     64  1978		       85 02		      sta	WSYNC
     65  197a
     66  197a							; Lastly, output a single line for the next "throb" line.
     67  197a							; Use this time to prepare the next row's food item pointers (unless this is
     68  197a							; the last row). If this is not the last row, loop to LoRows for the next row.
     69  197a
     70  197a		       a5 c1		      lda	ThrobColor+0
     71  197c		       85 09		      sta	COLUBK
     72  197e		       85 08		      sta	COLUPF
     73  1980		       a9 00		      lda	#0
     74  1982		       85 1b		      sta	GRP0
     75  1984		       85 1c		      sta	GRP1
     76  1986
     77  1986		       c6 c7		      dec	CurrentRow
     78  1988		       10 9b		      bpl	LoRows
     79  198a
     80  198a		       a2 ff		      ldx	#$FF
     81  198c		       9a		      txs
     82  198d
     83  198d				   GameplayEnd
     84  198d		       85 02		      sta	WSYNC
      0  198f					      SLEEP	2
      1  198f				   .CYCLES    SET	2
      2  198f
      3  198f				  -	      IF	.CYCLES < 2
      4  198f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  198f				  -	      ERR
      6  198f					      ENDIF
      7  198f
      8  198f				  -	      IF	.CYCLES & 1
      9  198f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  198f				  -	      nop	0
     11  198f				  -	      ELSE
     12  198f				  -	      bit	VSYNC
     13  198f				  -	      ENDIF
     14  198f				  -.CYCLES    SET	.CYCLES - 3
     15  198f					      ENDIF
     16  198f
     17  198f					      REPEAT	.CYCLES / 2
     18  198f		       ea		      nop
     19  1990					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  1990					      include	code/ProgressHealthKernel.asm
      1  1990		       a5 c2		      lda	ThrobColor+1
      2  1992		       85 09		      sta	COLUBK
      3  1994		       a9 00		      lda	#0
      4  1996		       85 0d		      sta	PF0
      5  1998		       85 0a		      sta	CTRLPF
      6  199a		       a9 09		      lda	#COL_CAT_FACE
      7  199c		       85 08		      sta	COLUPF
      8  199e
      9  199e		       20 24 19 	      jsr	Sleep12
     10  19a1		       20 24 19 	      jsr	Sleep12
      0  19a4					      SLEEP	8	; 53
      1  19a4				   .CYCLES    SET	8
      2  19a4
      3  19a4				  -	      IF	.CYCLES < 2
      4  19a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  19a4				  -	      ERR
      6  19a4					      ENDIF
      7  19a4
      8  19a4				  -	      IF	.CYCLES & 1
      9  19a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  19a4				  -	      nop	0
     11  19a4				  -	      ELSE
     12  19a4				  -	      bit	VSYNC
     13  19a4				  -	      ENDIF
     14  19a4				  -.CYCLES    SET	.CYCLES - 3
     15  19a4					      ENDIF
     16  19a4
     17  19a4					      REPEAT	.CYCLES / 2
     18  19a4		       ea		      nop
     17  19a4					      REPEND
     18  19a5		       ea		      nop
     17  19a5					      REPEND
     18  19a6		       ea		      nop
     17  19a6					      REPEND
     18  19a7		       ea		      nop
     19  19a8					      REPEND
     12  19a8
     13  19a8		       a9 20		      lda	#$20	; 55
     14  19aa		       85 20		      sta	HMP0	; 58
     15  19ac		       a9 b0		      lda	#$B0	; 60
     16  19ae		       85 21		      sta	HMP1	; 63
     17  19b0
     18  19b0		       85 10		      sta	RESP0	; 66
     19  19b2		       85 11		      sta	RESP1	; 69
     20  19b4
     21  19b4		       a9 00		      lda	#$00	; 71
     22  19b6
     23  19b6		       85 2a		      sta	HMOVE	; 74
     24  19b8
     25  19b8		       85 06		      sta	COLUP0
     26  19ba		       85 07		      sta	COLUP1
     27  19bc
     28  19bc		       a5 87		      lda	ScoreColor
     29  19be		       85 09		      sta	COLUBK
     30  19c0
     31  19c0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     32  19c2		       85 04		      sta	NUSIZ0
     33  19c4		       85 05		      sta	NUSIZ1
     34  19c6
     35  19c6		       a9 08		      lda	#REFP_TRUE
     36  19c8		       85 0c		      sta	REFP1
     37  19ca
     38  19ca					      SUBROUTINE
     39  19ca
     40  19ca		       a0 04		      ldy	#4
     41  19cc		       85 02		      sta	WSYNC
     42  19ce
     43  19ce							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  19ce				   .HealthTop		; draw top of health
     45  19ce
     46  19ce		       a2 03		      ldx	#3
     47  19d0
     48  19d0				   .Loop
     49  19d0		       85 02		      sta	WSYNC
     50  19d2
     51  19d2		       b9 6f 1c 	      lda	HealthTopGfx,y	; 04
     52  19d5		       85 1b		      sta	GRP0	; 07
     53  19d7		       85 1c		      sta	GRP1	; 10
     54  19d9		       a9 00		      lda	#$00	; 12
     55  19db		       85 0f		      sta	PF2	; 15
     56  19dd
     57  19dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  19dd							; Set the pointers for health graphics - 26 cycles
     59  19dd
     60  19dd		       18		      clc		; 17
     61  19de
     62  19de		       a9 1c		      lda	#>HealthLeftGfx	; 19
     63  19e0		       85 9a		      sta	HthGfxLPtr+1	; 22
     64  19e2		       85 9c		      sta	HthGfxRPtr+1	; 25
     65  19e4
     66  19e4		       a9 74		      lda	#<HealthLeftGfx	; 27
     67  19e6		       65 8b		      adc	Health	; 30
     68  19e8		       85 99		      sta	HthGfxLPtr	; 33
     69  19ea
     70  19ea		       a9 94		      lda	#<HealthRightGfx	; 35
     71  19ec		       65 8b		      adc	Health	; 38
     72  19ee		       85 9b		      sta	HthGfxRPtr	; 41
     73  19f0
     74  19f0
     75  19f0
     76  19f0		       b9 08 1d 	      lda	HealthBgGfx+8,y	; 45
     77  19f3		       85 0f		      sta	PF2	; 48
     78  19f5
     79  19f5		       ca		      dex		; 50
     80  19f6		       d0 d8		      bne	.Loop	; 52
     81  19f8
     82  19f8		       88		      dey		; 54
     83  19f9		       10 d3		      bpl	.HealthTop	; 56
     84  19fb
     85  19fb
     86  19fb					      SUBROUTINE
     87  19fb
     88  19fb
     89  19fb		       a0 03		      ldy	#3	; 58
     90  19fd		       a2 03		      ldx	#3	; 60
     91  19ff		       86 c5		      stx	Temp	; 63
     92  1a01
     93  1a01		       4c 00 1b 	      jmp	.HealthMiddle	; 66
     94  1a04
     95  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
     96  1b00
     97  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  1b00				   .HealthMiddle		; draw middle of health, with progress bar
     99  1b00
    100  1b00		       85 02		      sta	WSYNC
    101  1b02				   .Loop
    102  1b02		       a5 8c		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    103  1b04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    104  1b06
    105  1b06		       a5 8d		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    106  1b08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    107  1b0a
    108  1b0a		       a5 8e		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    109  1b0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    110  1b0e
    111  1b0e		       a5 88		      lda	PgBarColor	; 21 - get the progress bar color
    112  1b10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    113  1b12
    114  1b12		       a5 8f		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    115  1b14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    116  1b16
    117  1b16		       b1 99		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    118  1b18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    119  1b1a		       b1 9b		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    120  1b1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    121  1b1e
    122  1b1e		       a5 90		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    123  1b20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    124  1b22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    125  1b24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    126  1b26
    127  1b26		       a5 87		      lda	ScoreColor	; 60 - get the color for the background
    128  1b28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    129  1b2b
    130  1b2b		       ca		      dex		; 66
    131  1b2c		       d0 d2		      bne	.HealthMiddle	; 68
    132  1b2e
    133  1b2e		       a6 c5		      ldx	Temp	; 71
    134  1b30
    135  1b30		       88		      dey		; 73
    136  1b31		       10 cf		      bpl	.Loop	; 76 / 00
    137  1b33
    138  1b33
    139  1b33
    140  1b33					      SUBROUTINE
    141  1b33
    142  1b33
    143  1b33		       a9 00		      lda	#0
    144  1b35		       85 0d		      sta	PF0
    145  1b37		       85 0e		      sta	PF1
    146  1b39
    147  1b39		       a0 07		      ldy	#7
    148  1b3b
    149  1b3b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    150  1b3b				   .HealthBottom		; draw bottom of health
    151  1b3b
    152  1b3b		       a2 03		      ldx	#3
    153  1b3d				   .Loop
    154  1b3d		       b1 99		      lda	(HthGfxLPtr),y
    155  1b3f		       85 1b		      sta	GRP0
    156  1b41		       b1 9b		      lda	(HthGfxRPtr),y
    157  1b43		       85 1c		      sta	GRP1
    158  1b45		       a9 00		      lda	#$00
    159  1b47		       85 0f		      sta	PF2
    160  1b49
      0  1b49					      SLEEP	14
      1  1b49				   .CYCLES    SET	14
      2  1b49
      3  1b49				  -	      IF	.CYCLES < 2
      4  1b49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b49				  -	      ERR
      6  1b49					      ENDIF
      7  1b49
      8  1b49				  -	      IF	.CYCLES & 1
      9  1b49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b49				  -	      nop	0
     11  1b49				  -	      ELSE
     12  1b49				  -	      bit	VSYNC
     13  1b49				  -	      ENDIF
     14  1b49				  -.CYCLES    SET	.CYCLES - 3
     15  1b49					      ENDIF
     16  1b49
     17  1b49					      REPEAT	.CYCLES / 2
     18  1b49		       ea		      nop
     17  1b49					      REPEND
     18  1b4a		       ea		      nop
     17  1b4a					      REPEND
     18  1b4b		       ea		      nop
     17  1b4b					      REPEND
     18  1b4c		       ea		      nop
     17  1b4c					      REPEND
     18  1b4d		       ea		      nop
     17  1b4d					      REPEND
     18  1b4e		       ea		      nop
     17  1b4e					      REPEND
     18  1b4f		       ea		      nop
     19  1b50					      REPEND
    162  1b50
    163  1b50		       b9 fc 1c 	      lda	HealthBgGfx-4,y
    164  1b53		       85 0f		      sta	PF2
    165  1b55		       85 02		      sta	WSYNC
    166  1b57
    167  1b57		       ca		      dex
    168  1b58		       d0 e3		      bne	.Loop
    169  1b5a
    170  1b5a		       88		      dey
    171  1b5b		       c0 03		      cpy	#3
    172  1b5d		       d0 dc		      bne	.HealthBottom
    173  1b5f
    174  1b5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    175  1b5f
    176  1b5f		       a9 00		      lda	#$00
    177  1b61		       85 1b		      sta	GRP0
    178  1b63		       85 1c		      sta	GRP1
    179  1b65		       85 0b		      sta	REFP0
    180  1b67		       85 0c		      sta	REFP1
    181  1b69		       85 0f		      sta	PF2
    182  1b6b
    183  1b6b		       85 02		      sta	WSYNC
------- FILE code/Kernel.asm
     14  1b6d
     15  1b6d		       a9 02		      lda	#2
     16  1b6f		       85 01		      sta	VBLANK	; disable display
     17  1b71
     18  1b71		       4c 43 10 	      jmp	Overscan
------- FILE main.asm
     66  1b74
     67  1b74		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     68  1b75
     69  1b75
     70  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     71  1b75							; Data Tables
     72  1b75							;
     73  1b75							; Include data tables
     74  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  1b75
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1b75					      include	data/Graphics.asm
      1  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1b75							; Graphics Tables
      3  1b75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1b75
      5  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1c00
      7  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1c00							; Digit graphics for the scoreboard
      9  1c00							;
     10  1c00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1c00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1c00							; to normal when it is pulled from the stack.
     13  1c00							;
     14  1c00							; Table takes up $50 (80) bytes of ROM
     15  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1c00
     17  1c00				   ScoreGfx
     18  1c00
     19  1c00		       1c		      .byte.b	%00011100	; digit 0
     20  1c01		       26		      .byte.b	%00100110
     21  1c02		       63		      .byte.b	%01100011
     22  1c03		       63		      .byte.b	%01100011
     23  1c04		       63		      .byte.b	%01100011
     24  1c05		       32		      .byte.b	%00110010
     25  1c06		       1c		      .byte.b	%00011100
     26  1c07		       00		      .byte.b	%00000000
     27  1c08
     28  1c08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1c08
     30  1c08		       18		      .byte.b	%00011000	; digit 1
     31  1c09		       78		      .byte.b	%01111000
     32  1c0a		       18		      .byte.b	%00011000
     33  1c0b		       18		      .byte.b	%00011000
     34  1c0c		       18		      .byte.b	%00011000
     35  1c0d		       18		      .byte.b	%00011000
     36  1c0e		       7e		      .byte.b	%01111110
     37  1c0f		       00		      .byte.b	%00000000
     38  1c10
     39  1c10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1c10
     41  1c10		       3e		      .byte.b	%00111110	; digit 2
     42  1c11		       63		      .byte.b	%01100011
     43  1c12		       07		      .byte.b	%00000111
     44  1c13		       1e		      .byte.b	%00011110
     45  1c14		       3c		      .byte.b	%00111100
     46  1c15		       70		      .byte.b	%01110000
     47  1c16		       7f		      .byte.b	%01111111
     48  1c17		       00		      .byte.b	%00000000
     49  1c18
     50  1c18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1c18
     52  1c18		       7f		      .byte.b	%01111111	; digit 3
     53  1c19		       06		      .byte.b	%00000110
     54  1c1a		       0c		      .byte.b	%00001100
     55  1c1b		       1e		      .byte.b	%00011110
     56  1c1c		       03		      .byte.b	%00000011
     57  1c1d		       63		      .byte.b	%01100011
     58  1c1e		       3e		      .byte.b	%00111110
     59  1c1f		       00		      .byte.b	%00000000
     60  1c20
     61  1c20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1c20
     63  1c20		       0e		      .byte.b	%00001110	; digit 4
     64  1c21		       1e		      .byte.b	%00011110
     65  1c22		       36		      .byte.b	%00110110
     66  1c23		       66		      .byte.b	%01100110
     67  1c24		       7f		      .byte.b	%01111111
     68  1c25		       06		      .byte.b	%00000110
     69  1c26		       06		      .byte.b	%00000110
     70  1c27		       00		      .byte.b	%00000000
     71  1c28
     72  1c28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1c28
     74  1c28		       7e		      .byte.b	%01111110	; digit 5
     75  1c29		       60		      .byte.b	%01100000
     76  1c2a		       7e		      .byte.b	%01111110
     77  1c2b		       03		      .byte.b	%00000011
     78  1c2c		       03		      .byte.b	%00000011
     79  1c2d		       63		      .byte.b	%01100011
     80  1c2e		       3e		      .byte.b	%00111110
     81  1c2f		       00		      .byte.b	%00000000
     82  1c30
     83  1c30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1c30
     85  1c30		       1e		      .byte.b	%00011110	; digit 6
     86  1c31		       30		      .byte.b	%00110000
     87  1c32		       60		      .byte.b	%01100000
     88  1c33		       7e		      .byte.b	%01111110
     89  1c34		       63		      .byte.b	%01100011
     90  1c35		       63		      .byte.b	%01100011
     91  1c36		       3e		      .byte.b	%00111110
     92  1c37		       00		      .byte.b	%00000000
     93  1c38
     94  1c38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1c38
     96  1c38		       7f		      .byte.b	%01111111	; digit 7
     97  1c39		       03		      .byte.b	%00000011
     98  1c3a		       06		      .byte.b	%00000110
     99  1c3b		       0c		      .byte.b	%00001100
    100  1c3c		       18		      .byte.b	%00011000
    101  1c3d		       18		      .byte.b	%00011000
    102  1c3e		       18		      .byte.b	%00011000
    103  1c3f		       00		      .byte.b	%00000000
    104  1c40
    105  1c40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1c40
    107  1c40		       3c		      .byte.b	%00111100	; digit 8
    108  1c41		       62		      .byte.b	%01100010
    109  1c42		       72		      .byte.b	%01110010
    110  1c43		       3c		      .byte.b	%00111100
    111  1c44		       43		      .byte.b	%01000011
    112  1c45		       43		      .byte.b	%01000011
    113  1c46		       3e		      .byte.b	%00111110
    114  1c47		       00		      .byte.b	%00000000
    115  1c48
    116  1c48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1c48
    118  1c48		       3e		      .byte.b	%00111110	; digit 9
    119  1c49		       63		      .byte.b	%01100011
    120  1c4a		       63		      .byte.b	%01100011
    121  1c4b		       3f		      .byte.b	%00111111
    122  1c4c		       03		      .byte.b	%00000011
    123  1c4d		       06		      .byte.b	%00000110
    124  1c4e		       3c		      .byte.b	%00111100
    125  1c4f		       00		      .byte.b	%00000000
    126  1c50
    127  1c50
    128  1c50
    129  1c50				   LevelGfx
    130  1c50
    131  1c50		       34		      .byte.b	$34
    132  1c51		       04		      .byte.b	$04
    133  1c52		       04		      .byte.b	$04
    134  1c53		       04		      .byte.b	$04
    135  1c54		       04		      .byte.b	$04
    136  1c55		       04		      .byte.b	$04
    137  1c56		       24		      .byte.b	$24
    138  1c57
    139  1c57
    140  1c57
    141  1c57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1c57							; Throbbing Line Graphics
    143  1c57							;
    144  1c57							; Graphics tables for the throbbing lines
    145  1c57							;
    146  1c57							; Table takes up $18 (24) bytes of ROM
    147  1c57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1c57
    149  1c57				   ThrobGfx
    150  1c57
    151  1c57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1c58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1c59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1c5a
    155  1c5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1c5a
    157  1c5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1c5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1c5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1c5d
    161  1c5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1c5d
    163  1c5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1c5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1c5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1c60
    167  1c60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1c60
    169  1c60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1c61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1c62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1c63
    173  1c63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1c63
    175  1c63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1c64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1c65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1c66
    179  1c66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1c66
    181  1c66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1c67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1c68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1c69
    185  1c69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1c69
    187  1c69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1c6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1c6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1c6c
    191  1c6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1c6c
    193  1c6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1c6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1c6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1c6f
    197  1c6f
    198  1c6f
    199  1c6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1c6f							; Health Graphics
    201  1c6f							;
    202  1c6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1c6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1c6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1c6f							; the graphics for the lower right are flipped.
    206  1c6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1c6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1c6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1c6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1c6f							; LOWER 4 lines of graphics (also upside-down).
    211  1c6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1c6f							; health graphics drawn with the playfield.
    213  1c6f							;
    214  1c6f							; Table takes up $45 (69) bytes of ROM
    215  1c6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1c6f
    217  1c6f				   HealthTopGfx
    218  1c6f
    219  1c6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1c70		       43		      .byte.b	%01000011
    221  1c71		       44		      .byte.b	%01000100
    222  1c72		       48		      .byte.b	%01001000
    223  1c73		       30		      .byte.b	%00110000
    224  1c74
    225  1c74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1c74				   HealthLeftGfx
    227  1c74
    228  1c74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1c75		       8c		      .byte.b	%10001100
    230  1c76		       84		      .byte.b	%10000100
    231  1c77		       80		      .byte.b	%10000000
    232  1c78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1c79		       20		      .byte.b	%00100000
    234  1c7a		       47		      .byte.b	%01000111
    235  1c7b		       84		      .byte.b	%10000100
    236  1c7c
    237  1c7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1c7c
    239  1c7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1c7d		       8c		      .byte.b	%10001100
    241  1c7e		       84		      .byte.b	%10000100
    242  1c7f		       80		      .byte.b	%10000000
    243  1c80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1c81		       20		      .byte.b	%00100000
    245  1c82		       47		      .byte.b	%01000111
    246  1c83		       80		      .byte.b	%10000000
    247  1c84
    248  1c84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1c84
    250  1c84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1c85		       8c		      .byte.b	%10001100
    252  1c86		       84		      .byte.b	%10000100
    253  1c87		       80		      .byte.b	%10000000
    254  1c88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1c89		       20		      .byte.b	%00100000
    256  1c8a		       44		      .byte.b	%01000100
    257  1c8b		       87		      .byte.b	%10000111
    258  1c8c
    259  1c8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1c8c
    261  1c8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1c8d		       9c		      .byte.b	%10011100
    263  1c8e		       80		      .byte.b	%10000000
    264  1c8f		       80		      .byte.b	%10000000
    265  1c90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1c91		       20		      .byte.b	%00100000
    267  1c92		       46		      .byte.b	%01000110
    268  1c93		       81		      .byte.b	%10000001
    269  1c94
    270  1c94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1c94				   HealthRightGfx
    272  1c94
    273  1c94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1c95		       9a		      .byte.b	%10011010
    275  1c96		       90		      .byte.b	%10010000
    276  1c97		       80		      .byte.b	%10000000
    277  1c98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1c99		       20		      .byte.b	%00100000
    279  1c9a		       4f		      .byte.b	%01001111
    280  1c9b		       89		      .byte.b	%10001001
    281  1c9c
    282  1c9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1c9c
    284  1c9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1c9d		       9a		      .byte.b	%10011010
    286  1c9e		       90		      .byte.b	%10010000
    287  1c9f		       80		      .byte.b	%10000000
    288  1ca0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ca1		       20		      .byte.b	%00100000
    290  1ca2		       4f		      .byte.b	%01001111
    291  1ca3		       80		      .byte.b	%10000000
    292  1ca4
    293  1ca4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ca4
    295  1ca4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ca5		       9a		      .byte.b	%10011010
    297  1ca6		       88		      .byte.b	%10001000
    298  1ca7		       80		      .byte.b	%10000000
    299  1ca8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ca9		       20		      .byte.b	%00100000
    301  1caa		       48		      .byte.b	%01001000
    302  1cab		       8f		      .byte.b	%10001111
    303  1cac
    304  1cac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1cac
    306  1cac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1cad		       ba		      .byte.b	%10111010
    308  1cae		       80		      .byte.b	%10000000
    309  1caf		       80		      .byte.b	%10000000
    310  1cb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1cb1		       20		      .byte.b	%00100000
    312  1cb2		       4c		      .byte.b	%01001100
    313  1cb3		       83		      .byte.b	%10000011
    314  1cb4
    315  1cb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1cb4
    317  1cb4							; 3 bytes left in this page
    318  1cb4
    319  1d00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1d00
    321  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1d00				   HealthBgGfx
    323  1d00							; 13 bytes
    324  1d00
    325  1d00		       00		      .byte.b	%00000000
    326  1d01		       3e		      .byte.b	%00111110
    327  1d02		       7f		      .byte.b	%01111111
    328  1d03		       7f		      .byte.b	%01111111
    329  1d04		       7f		      .byte.b	%01111111
    330  1d05		       7f		      .byte.b	%01111111
    331  1d06		       7f		      .byte.b	%01111111
    332  1d07		       7f		      .byte.b	%01111111
    333  1d08		       7f		      .byte.b	%01111111
    334  1d09		       7f		      .byte.b	%01111111
    335  1d0a		       63		      .byte.b	%01100011
    336  1d0b		       63		      .byte.b	%01100011
    337  1d0c		       00		      .byte.b	%00000000
    338  1d0d
    339  1d0d
    340  1d0d
    341  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1d0d							; Progress Bar Graphics
    343  1d0d							;
    344  1d0d							;
    345  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1d0d
    347  1d0d				   PgBarGfx
    348  1d0d							; 9 bytes
    349  1d0d
    350  1d0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1d0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1d0f		       3f		      .byte.b	%00111111
    353  1d10		       1f		      .byte.b	%00011111
    354  1d11		       0f		      .byte.b	%00001111
    355  1d12		       07		      .byte.b	%00000111
    356  1d13		       03		      .byte.b	%00000011
    357  1d14		       01		      .byte.b	%00000001
    358  1d15		       00		      .byte.b	%00000000
    359  1d16
    360  1d16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1d16				   PgBarGfxR
    362  1d16							; 8 bytes
    363  1d16
    364  1d16		       ff		      .byte.b	%11111111	; PF2
    365  1d17		       fe		      .byte.b	%11111110
    366  1d18		       fc		      .byte.b	%11111100
    367  1d19		       f8		      .byte.b	%11111000
    368  1d1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1d1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1d1c		       c0		      .byte.b	%11000000
    371  1d1d		       80		      .byte.b	%10000000
    372  1d1e
    373  1d1e
    374  1d1e
    375  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1d1e							; Cat Rainbow Graphics
    377  1d1e							;
    378  1d1e							;
    379  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1d1e
    381  1d1e				   RainbowGfx
    382  1d1e							; 4 bytes
    383  1d1e
    384  1d1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1d1f
    386  1d1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1d20
    388  1d20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1d21
    390  1d21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1d22
    392  1e00		       00 00 00 00*	      ALIGN	$100
    393  1e00
    394  1e00				   FoodGfx
    395  1e00
    396  1e00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1e00							; 0 - blank
    398  1e00
    399  1e00		       01		      .byte.b	%00000001
    400  1e01		       80		      .byte.b	%10000000
    401  1e02		       01		      .byte.b	%00000001
    402  1e03		       80		      .byte.b	%10000000
    403  1e04		       01		      .byte.b	%00000001
    404  1e05		       80		      .byte.b	%10000000
    405  1e06		       01		      .byte.b	%00000001
    406  1e07		       80		      .byte.b	%10000000
    407  1e08		       01		      .byte.b	%00000001
    408  1e09		       80		      .byte.b	%10000000
    409  1e0a		       01		      .byte.b	%00000001
    410  1e0b		       80		      .byte.b	%10000000
    411  1e0c		       01		      .byte.b	%00000001
    412  1e0d		       80		      .byte.b	%10000000
    413  1e0e
    414  1e0e		       00		      .byte.b	0
    415  1e0f		       00		      .byte.b	$00
    416  1e10
    417  1e10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1e10							; 1 - apple
    419  1e10
    420  1e10		       34		      .byte.b	%00110100
    421  1e11		       7e		      .byte.b	%01111110
    422  1e12		       7e		      .byte.b	%01111110
    423  1e13		       ff		      .byte.b	%11111111
    424  1e14		       ff		      .byte.b	%11111111
    425  1e15		       ff		      .byte.b	%11111111
    426  1e16		       ff		      .byte.b	%11111111
    427  1e17		       ff		      .byte.b	%11111111
    428  1e18		       ff		      .byte.b	%11111111
    429  1e19		       7f		      .byte.b	%01111111
    430  1e1a		       6a		      .byte.b	%01101010
    431  1e1b		       08		      .byte.b	%00001000
    432  1e1c		       0c		      .byte.b	%00001100
    433  1e1d		       04		      .byte.b	%00000100
    434  1e1e
    435  1e1e		       00		      .byte.b	0
    436  1e1f		       46		      .byte.b	$46
    437  1e20
    438  1e20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1e20							; 2 - peach
    440  1e20
    441  1e20		       3c		      .byte.b	%00111100
    442  1e21		       6e		      .byte.b	%01101110
    443  1e22		       6e		      .byte.b	%01101110
    444  1e23		       df		      .byte.b	%11011111
    445  1e24		       df		      .byte.b	%11011111
    446  1e25		       bf		      .byte.b	%10111111
    447  1e26		       bf		      .byte.b	%10111111
    448  1e27		       bf		      .byte.b	%10111111
    449  1e28		       de		      .byte.b	%11011110
    450  1e29		       5e		      .byte.b	%01011110
    451  1e2a		       6c		      .byte.b	%01101100
    452  1e2b		       18		      .byte.b	%00011000
    453  1e2c		       10		      .byte.b	%00010000
    454  1e2d		       30		      .byte.b	%00110000
    455  1e2e
    456  1e2e		       00		      .byte.b	0
    457  1e2f		       3a		      .byte.b	$3A
    458  1e30
    459  1e30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1e30							; 3 - banana
    461  1e30
    462  1e30		       38		      .byte.b	%00111000
    463  1e31		       7c		      .byte.b	%01111100
    464  1e32		       fe		      .byte.b	%11111110
    465  1e33		       fe		      .byte.b	%11111110
    466  1e34		       ff		      .byte.b	%11111111
    467  1e35		       ff		      .byte.b	%11111111
    468  1e36		       8f		      .byte.b	%10001111
    469  1e37		       07		      .byte.b	%00000111
    470  1e38		       07		      .byte.b	%00000111
    471  1e39		       03		      .byte.b	%00000011
    472  1e3a		       03		      .byte.b	%00000011
    473  1e3b		       02		      .byte.b	%00000010
    474  1e3c		       06		      .byte.b	%00000110
    475  1e3d		       06		      .byte.b	%00000110
    476  1e3e
    477  1e3e		       00		      .byte.b	0
    478  1e3f		       1e		      .byte.b	$1E
    479  1e40
    480  1e40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1e40							; 4 - pear
    482  1e40
    483  1e40		       38		      .byte.b	%00111000
    484  1e41		       7c		      .byte.b	%01111100
    485  1e42		       fe		      .byte.b	%11111110
    486  1e43		       fe		      .byte.b	%11111110
    487  1e44		       fe		      .byte.b	%11111110
    488  1e45		       fe		      .byte.b	%11111110
    489  1e46		       7c		      .byte.b	%01111100
    490  1e47		       7c		      .byte.b	%01111100
    491  1e48		       38		      .byte.b	%00111000
    492  1e49		       38		      .byte.b	%00111000
    493  1e4a		       30		      .byte.b	%00110000
    494  1e4b		       10		      .byte.b	%00010000
    495  1e4c		       18		      .byte.b	%00011000
    496  1e4d		       08		      .byte.b	%00001000
    497  1e4e
    498  1e4e		       00		      .byte.b	0
    499  1e4f		       cc		      .byte.b	$CC
    500  1e50
    501  1e50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1e50							; 5 - plum
    503  1e50
    504  1e50		       38		      .byte.b	%00111000
    505  1e51		       6c		      .byte.b	%01101100
    506  1e52		       6e		      .byte.b	%01101110
    507  1e53		       de		      .byte.b	%11011110
    508  1e54		       df		      .byte.b	%11011111
    509  1e55		       bf		      .byte.b	%10111111
    510  1e56		       bf		      .byte.b	%10111111
    511  1e57		       bf		      .byte.b	%10111111
    512  1e58		       de		      .byte.b	%11011110
    513  1e59		       de		      .byte.b	%11011110
    514  1e5a		       5e		      .byte.b	%01011110
    515  1e5b		       3c		      .byte.b	%00111100
    516  1e5c		       20		      .byte.b	%00100000
    517  1e5d		       60		      .byte.b	%01100000
    518  1e5e
    519  1e5e		       00		      .byte.b	0
    520  1e5f		       88		      .byte.b	$88
    521  1e60
    522  1e60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1e60							; 6 - grapes
    524  1e60
    525  1e60		       18		      .byte.b	%00011000
    526  1e61		       08		      .byte.b	%00001000
    527  1e62		       36		      .byte.b	%00110110
    528  1e63		       12		      .byte.b	%00010010
    529  1e64		       6c		      .byte.b	%01101100
    530  1e65		       24		      .byte.b	%00100100
    531  1e66		       db		      .byte.b	%11011011
    532  1e67		       49		      .byte.b	%01001001
    533  1e68		       36		      .byte.b	%00110110
    534  1e69		       12		      .byte.b	%00010010
    535  1e6a		       6c		      .byte.b	%01101100
    536  1e6b		       34		      .byte.b	%00110100
    537  1e6c		       10		      .byte.b	%00010000
    538  1e6d		       18		      .byte.b	%00011000
    539  1e6e
    540  1e6e		       00		      .byte.b	0
    541  1e6f		       64		      .byte.b	$64
    542  1e70
    543  1e70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1e70							; 7 - broccoli
    545  1e70
    546  1e70		       18		      .byte.b	%00011000
    547  1e71		       18		      .byte.b	%00011000
    548  1e72		       1c		      .byte.b	%00011100
    549  1e73		       3e		      .byte.b	%00111110
    550  1e74		       2a		      .byte.b	%00101010
    551  1e75		       12		      .byte.b	%00010010
    552  1e76		       2a		      .byte.b	%00101010
    553  1e77		       54		      .byte.b	%01010100
    554  1e78		       aa		      .byte.b	%10101010
    555  1e79		       55		      .byte.b	%01010101
    556  1e7a		       aa		      .byte.b	%10101010
    557  1e7b		       55		      .byte.b	%01010101
    558  1e7c		       2a		      .byte.b	%00101010
    559  1e7d		       04		      .byte.b	%00000100
    560  1e7e
    561  1e7e		       00		      .byte.b	0
    562  1e7f		       c7		      .byte.b	$C7
    563  1e80
    564  1e80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1e80							; 8 - cabbage
    566  1e80
    567  1e80		       18		      .byte.b	%00011000
    568  1e81		       76		      .byte.b	%01110110
    569  1e82		       76		      .byte.b	%01110110
    570  1e83		       7a		      .byte.b	%01111010
    571  1e84		       f9		      .byte.b	%11111001
    572  1e85		       fb		      .byte.b	%11111011
    573  1e86		       ed		      .byte.b	%11101101
    574  1e87		       db		      .byte.b	%11011011
    575  1e88		       fb		      .byte.b	%11111011
    576  1e89		       e9		      .byte.b	%11101001
    577  1e8a		       56		      .byte.b	%01010110
    578  1e8b		       76		      .byte.b	%01110110
    579  1e8c		       6e		      .byte.b	%01101110
    580  1e8d		       18		      .byte.b	%00011000
    581  1e8e
    582  1e8e		       00		      .byte.b	0
    583  1e8f		       da		      .byte.b	$DA
    584  1e90
    585  1e90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1e90							; 9 - celery
    587  1e90
    588  1e90		       c0		      .byte.b	%11000000
    589  1e91		       e0		      .byte.b	%11100000
    590  1e92		       70		      .byte.b	%01110000
    591  1e93		       30		      .byte.b	%00110000
    592  1e94		       18		      .byte.b	%00011000
    593  1e95		       18		      .byte.b	%00011000
    594  1e96		       0c		      .byte.b	%00001100
    595  1e97		       0c		      .byte.b	%00001100
    596  1e98		       0e		      .byte.b	%00001110
    597  1e99		       06		      .byte.b	%00000110
    598  1e9a		       0d		      .byte.b	%00001101
    599  1e9b		       0b		      .byte.b	%00001011
    600  1e9c		       0d		      .byte.b	%00001101
    601  1e9d		       06		      .byte.b	%00000110
    602  1e9e
    603  1e9e		       00		      .byte.b	0
    604  1e9f		       d6		      .byte.b	$D6
    605  1ea0
    606  1ea0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1ea0							; A - green pepper
    608  1ea0
    609  1ea0		       6c		      .byte.b	%01101100
    610  1ea1		       6c		      .byte.b	%01101100
    611  1ea2		       fe		      .byte.b	%11111110
    612  1ea3		       fe		      .byte.b	%11111110
    613  1ea4		       f6		      .byte.b	%11110110
    614  1ea5		       f6		      .byte.b	%11110110
    615  1ea6		       f6		      .byte.b	%11110110
    616  1ea7		       f6		      .byte.b	%11110110
    617  1ea8		       f6		      .byte.b	%11110110
    618  1ea9		       ec		      .byte.b	%11101100
    619  1eaa		       7c		      .byte.b	%01111100
    620  1eab		       10		      .byte.b	%00010000
    621  1eac		       18		      .byte.b	%00011000
    622  1ead		       08		      .byte.b	%00001000
    623  1eae
    624  1eae		       00		      .byte.b	0
    625  1eaf		       c8		      .byte.b	$C8
    626  1eb0
    627  1eb0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1eb0							; B - pumpkin
    629  1eb0
    630  1eb0		       3c		      .byte.b	%00111100
    631  1eb1		       56		      .byte.b	%01010110
    632  1eb2		       b7		      .byte.b	%10110111
    633  1eb3		       ad		      .byte.b	%10101101
    634  1eb4		       ad		      .byte.b	%10101101
    635  1eb5		       ad		      .byte.b	%10101101
    636  1eb6		       ad		      .byte.b	%10101101
    637  1eb7		       ad		      .byte.b	%10101101
    638  1eb8		       b7		      .byte.b	%10110111
    639  1eb9		       56		      .byte.b	%01010110
    640  1eba		       3c		      .byte.b	%00111100
    641  1ebb		       18		      .byte.b	%00011000
    642  1ebc		       0c		      .byte.b	%00001100
    643  1ebd		       0c		      .byte.b	%00001100
    644  1ebe
    645  1ebe		       00		      .byte.b	0
    646  1ebf		       2a		      .byte.b	$2A
    647  1ec0
    648  1ec0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1ec0							; C - mushroom
    650  1ec0
    651  1ec0		       18		      .byte.b	%00011000
    652  1ec1		       3c		      .byte.b	%00111100
    653  1ec2		       24		      .byte.b	%00100100
    654  1ec3		       24		      .byte.b	%00100100
    655  1ec4		       24		      .byte.b	%00100100
    656  1ec5		       66		      .byte.b	%01100110
    657  1ec6		       a5		      .byte.b	%10100101
    658  1ec7		       99		      .byte.b	%10011001
    659  1ec8		       e7		      .byte.b	%11100111
    660  1ec9		       ff		      .byte.b	%11111111
    661  1eca		       5a		      .byte.b	%01011010
    662  1ecb		       76		      .byte.b	%01110110
    663  1ecc		       3c		      .byte.b	%00111100
    664  1ecd		       18		      .byte.b	%00011000
    665  1ece
    666  1ece		       00		      .byte.b	0
    667  1ecf		       08		      .byte.b	$08
    668  1ed0
    669  1ed0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1ed0							; D - key
    671  1ed0
    672  1ed0		       10		      .byte.b	%00010000
    673  1ed1		       1e		      .byte.b	%00011110
    674  1ed2		       1e		      .byte.b	%00011110
    675  1ed3		       18		      .byte.b	%00011000
    676  1ed4		       1e		      .byte.b	%00011110
    677  1ed5		       1e		      .byte.b	%00011110
    678  1ed6		       10		      .byte.b	%00010000
    679  1ed7		       10		      .byte.b	%00010000
    680  1ed8		       10		      .byte.b	%00010000
    681  1ed9		       10		      .byte.b	%00010000
    682  1eda		       38		      .byte.b	%00111000
    683  1edb		       6c		      .byte.b	%01101100
    684  1edc		       6c		      .byte.b	%01101100
    685  1edd		       38		      .byte.b	%00111000
    686  1ede
    687  1ede		       00		      .byte.b	0
    688  1edf		       2c		      .byte.b	$2C
    689  1ee0
    690  1ee0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1ee0							; E - ring
    692  1ee0
    693  1ee0		       00		      .byte.b	%00000000
    694  1ee1		       18		      .byte.b	%00011000
    695  1ee2		       3c		      .byte.b	%00111100
    696  1ee3		       66		      .byte.b	%01100110
    697  1ee4		       42		      .byte.b	%01000010
    698  1ee5		       42		      .byte.b	%01000010
    699  1ee6		       42		      .byte.b	%01000010
    700  1ee7		       66		      .byte.b	%01100110
    701  1ee8		       3c		      .byte.b	%00111100
    702  1ee9		       18		      .byte.b	%00011000
    703  1eea		       18		      .byte.b	%00011000
    704  1eeb		       2c		      .byte.b	%00101100
    705  1eec		       18		      .byte.b	%00011000
    706  1eed		       00		      .byte.b	%00000000
    707  1eee
    708  1eee		       00		      .byte.b	0
    709  1eef		       2c		      .byte.b	$2C
    710  1ef0
    711  1ef0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1ef0							; F - heart
    713  1ef0
    714  1ef0		       00		      .byte.b	%00000000
    715  1ef1		       18		      .byte.b	%00011000
    716  1ef2		       18		      .byte.b	%00011000
    717  1ef3		       3c		      .byte.b	%00111100
    718  1ef4		       3c		      .byte.b	%00111100
    719  1ef5		       7e		      .byte.b	%01111110
    720  1ef6		       7e		      .byte.b	%01111110
    721  1ef7		       ff		      .byte.b	%11111111
    722  1ef8		       ff		      .byte.b	%11111111
    723  1ef9		       ff		      .byte.b	%11111111
    724  1efa		       e7		      .byte.b	%11100111
    725  1efb		       e7		      .byte.b	%11100111
    726  1efc		       42		      .byte.b	%01000010
    727  1efd		       00		      .byte.b	%00000000
    728  1efe
    729  1efe		       00		      .byte.b	0
    730  1eff		       4a		      .byte.b	$4A
    731  1f00
    732  1f00				   RainbowColors
    733  1f00
    734  1f00		       64		      .byte.b	$64
    735  1f01		       88		      .byte.b	$88
    736  1f02		       c8		      .byte.b	$C8
    737  1f03		       1e		      .byte.b	$1E
    738  1f04		       28		      .byte.b	$28
    739  1f05		       44		      .byte.b	$44
    740  1f06
    741  1f06				   CatTartGfx
    742  1f06
    743  1f06		       00 00 00 00*	      ds	18, $00
    744  1f18
    745  1f18		       00		      .byte.b	%00000000
    746  1f19		       00		      .byte.b	%00000000
    747  1f1a		       e0		      .byte.b	%11100000
    748  1f1b		       c0		      .byte.b	%11000000
    749  1f1c		       c0		      .byte.b	%11000000
    750  1f1d		       c0		      .byte.b	%11000000
    751  1f1e		       c0		      .byte.b	%11000000
    752  1f1f		       c0		      .byte.b	%11000000
    753  1f20		       c0		      .byte.b	%11000000
    754  1f21		       e0		      .byte.b	%11100000
    755  1f22		       e0		      .byte.b	%11100000
    756  1f23		       e0		      .byte.b	%11100000
    757  1f24		       e0		      .byte.b	%11100000
    758  1f25		       e0		      .byte.b	%11100000
    759  1f26		       e0		      .byte.b	%11100000
    760  1f27		       e0		      .byte.b	%11100000
    761  1f28
    762  1f28				   CatFaceGfx
    763  1f28
    764  1f28		       00 00 00 00*	      ds	18, $00
    765  1f3a
    766  1f3a		       36		      .byte.b	%00110110
    767  1f3b		       36		      .byte.b	%00110110
    768  1f3c		       00		      .byte.b	%00000000
    769  1f3d		       7e		      .byte.b	%01111110
    770  1f3e		       c1		      .byte.b	%11000001
    771  1f3f		       d5		      .byte.b	%11010101
    772  1f40		       ff		      .byte.b	%11111111
    773  1f41		       d5		      .byte.b	%11010101
    774  1f42		       dd		      .byte.b	%11011101
    775  1f43		       ff		      .byte.b	%11111111
    776  1f44		       66		      .byte.b	%01100110
    777  1f45		       66		      .byte.b	%01100110
    778  1f46		       42		      .byte.b	%01000010
    779  1f47		       00		      .byte.b	%00000000
    780  1f48
    781  1f48		       00 00 00 00*	      ds	19, $00
    782  1f5b
    783  1f5b
    784  1f5b
    785  1f5b				   RowPosition
    786  1f5b		       00		      .byte.b	0
    787  1f5c		       13		      .byte.b	19
    788  1f5d		       26		      .byte.b	38
    789  1f5e		       39		      .byte.b	57
    790  1f5f		       4c		      .byte.b	76
    791  1f60		       5f		      .byte.b	95
    792  1f61		       72		      .byte.b	114
------- FILE main.asm
     77  1f62
     78  1f62		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     79  1f63
     80  1f63
     81  1f63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  1f63							; End of ROM
     83  1f63							;
     84  1f63							; Define the end of the cartridge
     85  1f63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  1f63
     87  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     88  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     89  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     90  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
