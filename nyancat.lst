------- FILE main.asm LEVEL 1 PASS 2
      1  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  4000 ????						; Project - Nyan Cat Game
      3  4000 ????						; by Jeremiah Knol
      4  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  4000 ????						; 10-25-2018 Version 4.2
      6  4000 ????						;
      7  4000 ????						; More code cleanup
      8  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  4000 ????
     10  4000 ????				      PROCESSOR	6502
     11  4000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  4000 ????				      include	headers/vcs.h
      1  4000 ????						; VCS.H
      2  4000 ????						; Version 1.05, 13/November/2003
      3  4000 ????
      4  4000 ????	       00 69	   VERSION_VCS =	105
      5  4000 ????
      6  4000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  4000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  4000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  4000 ????						;
     10  4000 ????						; This file defines hardware registers and memory mapping for the
     11  4000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  4000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  4000 ????						; available at at http://www.atari2600.org/dasm
     14  4000 ????						;
     15  4000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  4000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  4000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  4000 ????						; with your views.  Please contribute, if you think you can improve this
     19  4000 ????						; file!
     20  4000 ????						;
     21  4000 ????						; Latest Revisions...
     22  4000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  4000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  4000 ????						;			    This will allow conditional code to verify VCS.H being
     25  4000 ????						;			    used for code assembly.
     26  4000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  4000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  4000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  4000 ????						;			 readability issue, and binary compatibility with disassembled
     30  4000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  4000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  4000 ????						;			 which was broken by the use of segments in this file, as
     33  4000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  4000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  4000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  4000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  4000 ????						;						   it is safe to leave it undefined, and the base address will
     38  4000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  4000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  4000 ????						;			  - register definitions are now generated through assignment
     41  4000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  4000 ????						;			    address architecture.
     43  4000 ????						; 1.0	22/MAR/2003		Initial release
     44  4000 ????
     45  4000 ????
     46  4000 ????						;-------------------------------------------------------------------------------
     47  4000 ????
     48  4000 ????						; TIA_BASE_ADDRESS
     49  4000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  4000 ????						; Normally 0, the base address should (externally, before including this file)
     51  4000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  4000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  4000 ????						; < $40 as a bankswitch.
     54  4000 ????
     55  4000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  4000 ????			  -TIA_BASE_ADDRESS =	0
     57  4000 ????				      ENDIF
     58  4000 ????
     59  4000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  4000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  4000 ????						; *OR* by declaring the label before including this file, eg:
     62  4000 ????						; TIA_BASE_ADDRESS = $40
     63  4000 ????						;   include "vcs.h"
     64  4000 ????
     65  4000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  4000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  4000 ????						; for the mirrored ROM hardware registers.
     68  4000 ????
     69  4000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  4000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  4000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  4000 ????
     73  4000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  4000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  4000 ????				      ENDIF
     76  4000 ????
     77  4000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  4000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  4000 ????				      ENDIF
     80  4000 ????
     81  4000 ????						;-------------------------------------------------------------------------------
     82  4000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????	       00 28	   VBLANK_LINES_NTSC equ	40
     48  0000 ????	       00 1e	   OSCAN_LINES_NTSC equ	30
     49  0000 ????	       00 2b	   VBLANK_NTSC equ	[[VBLANK_LINES_NTSC - 3] * 76 - 7] / 64
     50  0000 ????	       00 24	   OSCAN_NTSC equ	[[OSCAN_LINES_NTSC] * 76 + 26] / 64
     51  0000 ????
     52  0000 ????	       00 42	   VBLANK_LINES_PAL equ	66
     53  0000 ????	       00 36	   OSCAN_LINES_PAL equ	54
     54  0000 ????	       00 4a	   VBLANK_PAL equ	[[VBLANK_LINES_PAL - 3] * 76 - 7] / 64
     55  0000 ????	       00 40	   OSCAN_PAL  equ	[[OSCAN_LINES_PAL] * 76 + 26] / 64
     56  0000 ????
     57  0000 ????						; colors
     58  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     59  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     60  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     61  0000 ????	       00 08	   COL_CAT_FACE equ	$08
     62  0000 ????	       00 5f	   COL_CAT_TART equ	$5F
     63  0000 ????
     64  0000 ????						; luminosity values for throb line data
     65  0000 ????	       00 00	   LUM_0      equ	$0>>1
     66  0000 ????	       00 01	   LUM_2      equ	$2>>1
     67  0000 ????	       00 02	   LUM_4      equ	$4>>1
     68  0000 ????	       00 03	   LUM_6      equ	$6>>1
     69  0000 ????	       00 04	   LUM_8      equ	$8>>1
     70  0000 ????	       00 05	   LUM_A      equ	$A>>1
     71  0000 ????	       00 06	   LUM_C      equ	$C>>1
     72  0000 ????	       00 07	   LUM_E      equ	$E>>1
     73  0000 ????
     74  0000 ????						; color modes for throb line data
     75  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     76  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     77  0000 ????
     78  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     79  0000 ????
     80  0000 ????						; bankswitching hotspots
     81  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     82  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     83  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     84  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00a9 ????				      SEG.U	VARS
      6 U00a9 ????				      RORG	$80
      7 U00a9 ????
      8 U00a9 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9 U00a9 ????						; Global Variables
     10 U00a9 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U00a9 ????						; These variables are used globally and cannot be shared or otherwise corrupted
     12 U00a9 ????						;
     13 U00a9 ????						; Uses 14 bytes of RAM
     14 U00a9 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U00a9 ????
     16 U00a9 ????			   RamGlobal
     17 U00a9 ????
     18 U00a9 ????						; Game housekeeping - 2 bytes
     19 U00a9 ????	       00	   Frame      ds	1	; current frame mod 256
     20 U00aa ????			   Variation		; game variation options
     21 U00aa ????	       00		      ds	1
     22 U00ab ????						; ideas for variations :
     23 U00ab ????
     24 U00ab ????						; players - 1 bit
     25 U00ab ????						;	0 = 1 player, use player 2's score RAM to keep track
     26 U00ab ????						;	of the highest score
     27 U00ab ????						;	1 = 2 players, keep track of both scores, erasing any
     28 U00ab ????						;	high score previously saved (might not need to erase
     29 U00ab ????						;	high score based on free RAM)
     30 U00ab ????
     31 U00ab ????						; randomness - 1 bit
     32 U00ab ????						;	0 = leave Rand16 as-is at start of game and use player
     33 U00ab ????						;	input to further randomize numbers
     34 U00ab ????						;	1 = reset Rand16 at start of game and don't use
     35 U00ab ????						;	player input to affect randomization
     36 U00ab ????						;	(same exact game every time)
     37 U00ab ????
     38 U00ab ????						; multi-speed rows - 1 bit
     39 U00ab ????						;	0 = force all rows to be the same speed
     40 U00ab ????						;	1 = allow levels to randomize row speeds
     41 U00ab ????
     42 U00ab ????						; 5 bits still available
     43 U00ab ????
     44 U00ab ????						; Scores and current level - 7 bytes
     45 U00ab ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     46 U00ab ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     47 U00b1 ????						; last 3 for player 2.
     48 U00b1 ????			   BCDLevel		; value for the current level which will be stored as a
     49 U00b1 ????	       00		      ds	1	; BCD encoded 2-digit number and used to control the
     50 U00b2 ????						; level counter display
     51 U00b2 ????
     52 U00b2 ????						; Random Numbers - 2 bytes
     53 U00b2 ????	       00 00	   Rand16     ds	2	; 16-bit random number
     54 U00b4 ????
     55 U00b4 ????						; Cat colors - 2 bytes
     56 U00b4 ????			   CatTartColor 		; color for current player's cat in the kernels
     57 U00b4 ????	       00		      ds	1
     58 U00b5 ????			   OtherTartColor		; color for the other player's cat
     59 U00b5 ????	       00		      ds	1
     60 U00b6 ????
     61 U00b6 ????
     62 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63 U00b6 ????						; Local Variables
     64 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65 U00b6 ????						; These variables are only used locally, and are redefined for each area of code
     66 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67 U00b6 ????
     68 U00b6 ????			   RamLocal
     69 U00b6 ????
     70 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     71 U00b6 ????						; Menu Variables
     72 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73 U00b6 ????						; These variables are only needed in the main menu routine.
     74 U00b6 ????						;
     75 U00b6 ????						; Uses 96 bytes of RAM
     76 U00b6 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77 U00b6 ????
     78 U00b6 ????						; Frame counters - 2 bytes
     79 U00b6 ????			   MenuCatFrame 		; animation frame for menu cat
     80 U00b6 ????	       00		      ds	1
     81 U00b7 ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     82 U00b7 ????	       00		      ds	1
     83 U00b8 ????
     84 U00b8 ????						; Pointers - 8 bytes
     85 U00b8 ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     86 U00b8 ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     87 U00b8 ????	       00 00		      ds	2
     88 U00ba ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     89 U00ba ????	       00 00		      ds	2
     90 U00bc ????			   MenuCatMslPtr		; pointer used to access missile graphics
     91 U00bc ????	       00 00		      ds	2
     92 U00be ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     93 U00be ????	       00 00		      ds	2
     94 U00c0 ????
     95 U00c0 ????						; Pre-load variables for within kernel - 4 bytes
     96 U00c0 ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     97 U00c0 ????	       00		      ds	1
     98 U00c1 ????			   RamMenuCatMissile		; missile graphics in menu cat
     99 U00c1 ????	       00		      ds	1
    100 U00c2 ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
    101 U00c2 ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
    102 U00c2 ????	       00		      ds	1
    103 U00c3 ????			   MenuCatShift
    104 U00c3 ????	       00		      ds	1
    105 U00c4 ????
    106 U00c4 ????						; Data blocks - 82 bytes
    107 U00c4 ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
    108 U00c4 ????	       00 00 00 00*	      ds	14
    109 U00d2 ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
    110 U00d2 ????	       00 00 00 00*	      ds	15
    111 U00e1 ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
    112 U00e1 ????	       00 00 00 00*	      ds	15
    113 U00f0 ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
    114 U00f0 ????	       00 00 00 00*	      ds	16
    115 U0100 ????	       00		      ds	1	; extra byte needed for next data block
    116 U0101 ????			   RamBowColorsBk		; rainbow colors
    117 U0101 ????	       00 00 00 00*	      ds	20
    118 U0115 ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
    119 U0115 ????	       00		      ds	1
    120 U0116 ????
    121 U0116 ????						; 18 bytes free
    122 U0116 ????
    123 U0116 ????
    124 U0116 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    125 U0116 ????						; Gameplay variables
    126 U0116 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    127 U0116 ????						; These variables are only needed in the gameplay routine
    128 U0116 ????						;
    129 U0116 ????						; Uses 61 bytes of RAM
    130 U0116 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131 U0116 ????
    132 U0116 ????				      RORG	RamLocal
    133 U0116 ????
    134 U0116 ????						; Pointers - 14 bytes
    135 U0116 ????
    136 U0116 ????						; The unused 3 bits of the high byte in each pointer
    137 U0116 ????						; may be used for the speeds of each row
    138 U0116 ????
    139 U0116 ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
    140 U0116 ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
    141 U0116 ????	       00 00		      ds	2
    142 U0118 ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
    143 U0118 ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
    144 U0118 ????	       00 00		      ds	2
    145 U011a ????			   TartGfxPtr1		; pointer for the tart graphics
    146 U011a ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
    147 U011a ????	       00 00		      ds	2
    148 U011c ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
    149 U011c ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
    150 U011c ????	       00 00		      ds	2
    151 U011e ????			   TartGfxPtr2		; pointer for the tart graphics
    152 U011e ????			   HthGfxLPtr		; pointer for left half of the health graphics
    153 U011e ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
    154 U011e ????	       00 00		      ds	2
    155 U0120 ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
    156 U0120 ????			   HthGfxRPtr		; pointer for right half of the health graphics
    157 U0120 ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
    158 U0120 ????	       00 00		      ds	2
    159 U0122 ????			   ThrobPtr		; pointer for loading the throb colors
    160 U0122 ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
    161 U0122 ????	       00 00		      ds	2
    162 U0124 ????
    163 U0124 ????						; Variable game colors - 2 bytes
    164 U0124 ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
    165 U0125 ????	       00	   PgBarColor ds	1	; color for full part of progress bar
    166 U0126 ????
    167 U0126 ????						; Variables used when drawing the cat - 5 bytes
    168 U0126 ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
    169 U0127 ????			   CatPosition		; data describing the cat's position
    170 U0127 ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
    171 U0128 ????						; bits 4-0 store the number of scanlines to skip after
    172 U0128 ????						; top of the cat's row before drawing the cat, from 0-18
    173 U0128 ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
    174 U0129 ????			   Rainbow		; PF0 value for the rainbow graphics
    175 U0129 ????			   JoyCenter		; least significant bit, true if joystick has been returned to center
    176 U0129 ????	       00		      ds	1
    177 U012a ????			   PreCatRows		; number of rows to draw before the two "cat" rows
    178 U012a ????	       00		      ds	1
    179 U012b ????
    180 U012b ????						; Variables used for the food items - 21 bytes
    181 U012b ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
    182 U012b ????	       00 00 00 00*	      ds	7	; this frame.
    183 U0132 ????						; Lo nybble either holds the pre-loaded value of the next
    184 U0132 ????						; food item to appear in this row, or temporarily holds the
    185 U0132 ????						; 3rd food item which isn't shown this frame, based on how many
    186 U0132 ????						; food items are visible in this row (2-3), which is determined
    187 U0132 ????						; by the position of the leftmost food item.
    188 U0132 ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
    189 U0132 ????	       00 00 00 00*	      ds	7	; this frame.
    190 U0139 ????						; Lo nybble holds the fractional positional value
    191 U0139 ????						; for the row's position (0-15).
    192 U0139 ????			   FoodPosX		; (range 0-88)
    193 U0139 ????	       00 00 00 00*	      ds	7
    194 U0140 ????
    195 U0140 ????						; Variables for the progress bar and health display - 7 bytes
    196 U0140 ????			   Progress		; value for level progress, which can be
    197 U0140 ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
    198 U0141 ????			   Health		; amount of health
    199 U0141 ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
    200 U0142 ????			   ProgressBar		; array of 5 playfield values for progress bar
    201 U0142 ????						; (shared with next 5 bytes of RAM)
    202 U0142 ????
    203 U0142 ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    204 U0142 ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    205 U0142 ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    206 U0145 ????			   CatRow2FoodL
    207 U0145 ????	       00		      ds	1
    208 U0146 ????			   CatRow2FoodR
    209 U0146 ????	       00		      ds	1
    210 U0147 ????			   CatRow2Color1
    211 U0147 ????	       00		      ds	1
    212 U0148 ????			   CatRow2Color2
    213 U0148 ????	       00		      ds	1
    214 U0149 ????
    215 U0149 ????						; Variables for the throbbing lines' colors - 4 bytes
    216 U0149 ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    217 U014c ????						; throbbing lines. The first color is darkest,
    218 U014c ????						; the last is brightest.
    219 U014c ????	       00	   CatThrobPF ds	1
    220 U014d ????
    221 U014d ????						; Temporary variables - 2 bytes
    222 U014d ????	       00	   Temp       ds	1
    223 U014e ????	       00	   TempLoop   ds	1
    224 U014f ????
    225 U014f ????						; 51 bytes free
    226 U014f ????
    227 U014f ????						; Variables which can be shared with the stack - 3 bytes
    228 U014f ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    229 U0150 ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    230 U0151 ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    231 U0152 ????
    232 U0152 ????						; 7 of 15 available temporary RAM bytes used (8 left)
    233 U0152 ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    234 U0152 ????
    235 U0152 ????				      RORG	$100 - 34
    236 U0152 ????			   RamBowColors
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U0152 ????				      include	headers/macros.h
      1 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0152 ????						; Start Bank
      3 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0152 ????						; Takes an integer for the bank
      5 U0152 ????						;
      6 U0152 ????						; Placed at the start of each bank
      7 U0152 ????						; Sets the bank's ROM location, and adds the global jump table
      8 U0152 ????						;
      9 U0152 ????						; Uses 18 bytes of ROM for the jump table
     10 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U0152 ????
     12 U0152 ????				      MAC	start_bank
     13 U0152 ????				      SEG	BANK_{1}
     14 U0152 ????				      ORG	[{1} - 1] * $1000
     15 U0152 ????				      RORG	$1000
     16 U0152 ????				      SUBROUTINE
     17 U0152 ????
     18 U0152 ????			   JmpInitSystem
     19 U0152 ????				      nop	SelectBank1
     20 U0152 ????				      jmp	InitSystem
     21 U0152 ????			   JmpMenuOverScan
     22 U0152 ????				      nop	SelectBank1
     23 U0152 ????				      jmp	MenuOverScan
     24 U0152 ????			   JmpGamePlay
     25 U0152 ????				      nop	SelectBank2
     26 U0152 ????				      jmp	GameplayInit
     27 U0152 ????
     28 U0152 ????				      ENDM
     29 U0152 ????
     30 U0152 ????
     31 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     32 U0152 ????						; End Bank
     33 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34 U0152 ????						; Takes an integer for the bank
     35 U0152 ????						;
     36 U0152 ????						; Placed at the end of each bank
     37 U0152 ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     38 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     39 U0152 ????
     40 U0152 ????				      MAC	end_bank
     41 U0152 ????				      ORG	[{1} - 1] * $1000 + $0FFA
     42 U0152 ????
     43 U0152 ????				      .word	JmpInitSystem	; NMI
     44 U0152 ????				      .word	JmpInitSystem	; RESET
     45 U0152 ????				      .word	JmpInitSystem	; IRQ
     46 U0152 ????
     47 U0152 ????				      ENDM
     48 U0152 ????
     49 U0152 ????
     50 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51 U0152 ????						; Set Overscan Timer
     52 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0152 ????						; Sets and starts the timer for the overscan
     54 U0152 ????						;
     55 U0152 ????						; Uses 13 bytes of ROM
     56 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57 U0152 ????
     58 U0152 ????				      MAC	set_oscan_timer
     59 U0152 ????				      SUBROUTINE
     60 U0152 ????
     61 U0152 ????				      lda	#OSCAN_NTSC
     62 U0152 ????				      bit	Variation
     63 U0152 ????				      bmi	.NtscMode
     64 U0152 ????				      lda	#OSCAN_PAL
     65 U0152 ????			   .NtscMode
     66 U0152 ????				      sta	WSYNC
     67 U0152 ????				      sta	TIM64T	; set overscan timer
     68 U0152 ????
     69 U0152 ????				      ENDM
     70 U0152 ????
     71 U0152 ????
     72 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73 U0152 ????						; Vertical Sync
     74 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75 U0152 ????						; Performs a vertical sync, and starts the timer for vertical blanking
     76 U0152 ????						;
     77 U0152 ????						; Uses 22 bytes of ROM
     78 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U0152 ????
     80 U0152 ????				      MAC	vert_sync
     81 U0152 ????				      SUBROUTINE
     82 U0152 ????
     83 U0152 ????				      ldx	#VBLANK_NTSC	; TIM64T value for NTSC mode
     84 U0152 ????				      bit	Variation
     85 U0152 ????				      bmi	.NtscMode
     86 U0152 ????				      ldx	#VBLANK_PAL	; TIM64T value for PAL mode
     87 U0152 ????			   .NtscMode
     88 U0152 ????				      lda	#%1110
     89 U0152 ????			   .VsyncLoop
     90 U0152 ????				      sta	WSYNC
     91 U0152 ????				      sta	VSYNC
     92 U0152 ????				      sta	VBLANK
     93 U0152 ????				      stx	TIM64T
     94 U0152 ????				      lsr
     95 U0152 ????				      bne	.VsyncLoop
     96 U0152 ????
     97 U0152 ????				      ENDM
     98 U0152 ????
     99 U0152 ????
    100 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101 U0152 ????						; Timer Loop
    102 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103 U0152 ????						; Loops until the timer runs down
    104 U0152 ????						; Used to finish vertical blanking and overscan
    105 U0152 ????						;
    106 U0152 ????						; Uses 5 bytes of ROM
    107 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108 U0152 ????
    109 U0152 ????				      MAC	timer_loop
    110 U0152 ????				      SUBROUTINE
    111 U0152 ????
    112 U0152 ????			   .TimerLoop
    113 U0152 ????				      lda	INTIM
    114 U0152 ????				      bne	.TimerLoop	; loop until end of vertical blanking
    115 U0152 ????
    116 U0152 ????				      ENDM
    117 U0152 ????
    118 U0152 ????
    119 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    120 U0152 ????						; Throb Rainbow Background
    121 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122 U0152 ????						; Checks the background color, and if black, the throb color is used instead
    123 U0152 ????						; The throb color must be pre-loaded into the X register
    124 U0152 ????						;
    125 U0152 ????						; Uses 11 bytes of ROM
    126 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    127 U0152 ????
    128 U0152 ????				      MAC	throb_rainbow_bk
    129 U0152 ????				      SUBROUTINE
    130 U0152 ????			   .X	      SET	{1}
    131 U0152 ????
    132 U0152 ????				      lda	RamBowColors+.X	; 3
    133 U0152 ????				      bne	.Rainbow	; 5/6
    134 U0152 ????				      stx	COLUBK	; 8
    135 U0152 ????				      beq	.End	; 11
    136 U0152 ????			   .Rainbow
    137 U0152 ????				      sta	COLUBK	; 9
    138 U0152 ????				      nop		; 11
    139 U0152 ????			   .End
    140 U0152 ????				      ENDM
    141 U0152 ????
    142 U0152 ????
    143 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    144 U0152 ????						; Throb Rainbow Playfield
    145 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    146 U0152 ????						; Checks the playfield color, and if black, the throb color is used instead
    147 U0152 ????						; The throb color must be pre-loaded into the X register
    148 U0152 ????						;
    149 U0152 ????						; Uses 11 bytes of ROM
    150 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    151 U0152 ????
    152 U0152 ????				      MAC	throb_rainbow_pf
    153 U0152 ????				      SUBROUTINE
    154 U0152 ????			   .X	      SET	{1}
    155 U0152 ????
    156 U0152 ????				      lda	RamBowColors+.X	; 3
    157 U0152 ????				      bne	.Rainbow	; 5/6
    158 U0152 ????				      stx	COLUPF	; 8
    159 U0152 ????				      beq	.End	; 11
    160 U0152 ????			   .Rainbow
    161 U0152 ????				      sta	COLUPF	; 9
    162 U0152 ????				      nop		; 11
    163 U0152 ????			   .End
    164 U0152 ????				      ENDM
    165 U0152 ????
    166 U0152 ????
    167 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168 U0152 ????						; Jump to Next Page
    169 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    170 U0152 ????						; Jumps to the beginning of the next page, padding the end of the current one
    171 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U0152 ????
    173 U0152 ????				      MAC	next_page
    174 U0152 ????				      SUBROUTINE
    175 U0152 ????
    176 U0152 ????				      jmp	.NextPage
    177 U0152 ????				      ALIGN	$100
    178 U0152 ????			   .NextPage
    179 U0152 ????
    180 U0152 ????				      ENDM
    181 U0152 ????
    182 U0152 ????
    183 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    184 U0152 ????						; Skip Word
    185 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186 U0152 ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    187 U0152 ????						; skipping the next two bytes of ROM.
    188 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189 U0152 ????
    190 U0152 ????				      MAC	skip_word
    191 U0152 ????				      HEX	0C
    192 U0152 ????				      ENDM
------- FILE main.asm
     18 U0152 ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U0152 ????				      include	bank1.asm
      1 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0152 ????						; Bank 1
      3 U0152 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0152 ????
      0 U0152 ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 12 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c 20 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c		       0c f7 1f 	      nop	SelectBank2
     14  000f		       4c 12 10 	      jmp	GameplayInit
     15  0012
      6  0012
------- FILE init.asm LEVEL 3 PASS 2
      0  0012					      include	init.asm
      1  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0012							; Clear system registers and RAM
      3  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0012							; Uses 14 bytes of ROM
      5  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0012
      7  0012				   InitSystem
      8  0012
      9  0012							; clear CPU and zeropage
     10  0012		       d8		      cld
     11  0013		       ab 00		      lxa	#0
     12  0015		       a8		      tay
     13  0016				   .ClearStack
     14  0016		       ca		      dex
     15  0017		       9a		      txs
     16  0018		       48		      pha
     17  0019		       d0 fb		      bne	.ClearStack
     18  001b
     19  001b							; check for forced 50hz mode
     20  001b		       4e 82 02 	      lsr	SWCHB	; reset switch state -> carry flag
     21  001e		       66 81		      ror	Variation	; write to D7
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  0020					      include	bank1/code/oscan_logic.asm
      1  0020							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0020							; Overscan logic for menu
      3  0020							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0020
      5  0020				   MenuOverScan
      0  0020					      SET_OSCAN_TIMER
      1  0020					      SUBROUTINE
      2  0020
      3  0020		       a9 24		      lda	#OSCAN_NTSC
      4  0022		       24 81		      bit	Variation
      5  0024		       30 02		      bmi	.NtscMode
      6  0026		       a9 40		      lda	#OSCAN_PAL
      7  0028				   .NtscMode
      8  0028		       85 02		      sta	WSYNC
      9  002a		       8d 96 02 	      sta	TIM64T
     10  002d
      7  002d
      8  002d		       a9 02		      lda	#2	; temp menu bypass
      9  002f		       2c 82 02 	      bit	SWCHB
     10  0032		       d0 03		      bne	.NoResetPress
     11  0034		       4c 0c 10 	      jmp	JmpGamePlay
     12  0037				   .NoResetPress
     13  0037
     14  0037		       e6 80		      inc	Frame	; next frame
     15  0039		       a5 80		      lda	Frame
     16  003b		       29 03		      and	#%00000011	; update animation every 4 frames
     17  003d		       d0 0b		      bne	.NoFrameInc
     18  003f
     19  003f		       a6 8d		      ldx	MenuCatFrame
     20  0041		       e8		      inx
     21  0042		       e0 06		      cpx	#6
     22  0044		       d0 02		      bne	.NoReset
     23  0046		       a2 00		      ldx	#0
     24  0048				   .NoReset
     25  0048		       86 8d		      stx	MenuCatFrame
     26  004a				   .NoFrameInc
     27  004a
      0  004a					      TIMER_LOOP
      1  004a					      SUBROUTINE
      2  004a
      3  004a				   .TimerLoop
      4  004a		       ad 84 02 	      lda	INTIM
      5  004d		       d0 fb		      bne	.TimerLoop
      6  004f
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  004f					      include	bank1/code/vblank_logic.asm
      1  004f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  004f							; Vertical Sync and Logic
      3  004f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  004f
      0  004f					      VERT_SYNC		; 11
      1  004f					      SUBROUTINE
      2  004f
      3  004f		       a2 2b		      ldx	#VBLANK_NTSC
      4  0051		       24 81		      bit	Variation
      5  0053		       30 02		      bmi	.NtscMode
      6  0055		       a2 4a		      ldx	#VBLANK_PAL
      7  0057				   .NtscMode
      8  0057		       a9 0e		      lda	#%1110
      9  0059				   .VsyncLoop
     10  0059		       85 02		      sta	WSYNC
     11  005b		       85 00		      sta	VSYNC
     12  005d		       85 01		      sta	VBLANK
     13  005f		       8e 96 02 	      stx	TIM64T
     14  0062		       4a		      lsr
     15  0063		       d0 f4		      bne	.VsyncLoop
     16  0065
      6  0065
      7  0065		       a2 eb		      ldx	#RamBowColorsBk+19
      8  0067		       a5 80		      lda	Frame
      9  0069		       29 08		      and	#%00001000
     10  006b		       d0 0f		      bne	.Rainbow1
     11  006d		       a9 e0		      lda	#%11100000
     12  006f		       85 0d		      sta	PF0
     13  0071		       a9 c1		      lda	#%11000001
     14  0073		       85 0e		      sta	PF1
     15  0075		       a9 e9		      lda	#RamBowColorsBk+17
     16  0077		       85 95		      sta	BowColorsPfPtr
     17  0079		       4c 89 10 	      jmp	.Rainbow2
     18  007c				   .Rainbow1
     19  007c		       ca		      dex
     20  007d		       a9 c0		      lda	#%11000000
     21  007f		       85 0d		      sta	PF0
     22  0081		       a9 e0		      lda	#%11100000
     23  0083		       85 0e		      sta	PF1
     24  0085		       a9 e7		      lda	#RamBowColorsBk+15
     25  0087		       85 95		      sta	BowColorsPfPtr
     26  0089				   .Rainbow2
     27  0089		       a9 00		      lda	#0
     28  008b		       85 96		      sta	BowColorsPfPtr+1
     29  008d
     30  008d		       a5 ec		      lda	MenuBgColor
     31  008f		       85 d7		      sta	RamBowColorsBk-1
     32  0091		       85 d8		      sta	RamBowColorsBk
     33  0093		       85 d9		      sta	RamBowColorsBk+1
     34  0095		       85 ea		      sta	RamBowColorsBk+18
     35  0097		       85 eb		      sta	RamBowColorsBk+19
     36  0099		       85 ec		      sta	RamBowColorsBk+20
     37  009b
     38  009b		       a5 8d		      lda	MenuCatFrame
     39  009d		       c9 02		      cmp	#2
     40  009f		       10 01		      bpl	.Jmp2
     41  00a1		       ca		      dex
     42  00a2				   .Jmp2
     43  00a2		       9a		      txs
     44  00a3
     45  00a3		       a2 00		      ldx	#0
     46  00a5		       a9 08		      lda	#%1000
     47  00a7		       2c 82 02 	      bit	SWCHB
     48  00aa		       d0 02		      bne	.NtscMode
     49  00ac		       a2 08		      ldx	#8
     50  00ae				   .NtscMode
     51  00ae
     52  00ae		       bd b9 17 	      lda	MenuColors,x
     53  00b1		       85 ec		      sta	MenuBgColor
     54  00b3		       e8		      inx
     55  00b4		       bd b9 17 	      lda	MenuColors,x
     56  00b7		       85 8b		      sta	CatTartColor
     57  00b9
     58  00b9		       a0 06		      ldy	#6
     59  00bb				   .SetBowColors
     60  00bb		       bd ba 17 	      lda	MenuColors+1,x
     61  00be		       48		      pha
     62  00bf		       48		      pha
     63  00c0		       48		      pha
     64  00c1		       e8		      inx
     65  00c2		       88		      dey
     66  00c3		       d0 f6		      bne	.SetBowColors
     67  00c5
     68  00c5		       a2 d6		      ldx	#RamMenuCatGfxR+15
     69  00c7		       9a		      txs
     70  00c8
     71  00c8							; push graphics for GRP1
     72  00c8		       a9 16		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
     73  00ca		       85 90		      sta	MenuCatRamPtr+1	; and set pointer to this page
     74  00cc		       a6 8d		      ldx	MenuCatFrame	; get animation frame
     75  00ce		       bd ad 17 	      lda	MenuCatOffsetGfx,x	; get offset within page
     76  00d1		       85 8f		      sta	MenuCatRamPtr	; and set pointer address
     77  00d3
     78  00d3		       a0 0d		      ldy	#13
     79  00d5				   .LoopGfxR
     80  00d5		       b1 8f		      lda	(MenuCatRamPtr),y	; get next byte of gfx
     81  00d7		       48		      pha		; and push to RAM
     82  00d8		       88		      dey
     83  00d9		       10 fa		      bpl	.LoopGfxR
     84  00db
     85  00db		       8a		      txa		; get animation frame
     86  00dc		       0a		      asl		; multiply by 2
     87  00dd		       a8		      tay
     88  00de		       b9 54 17 	      lda	MenuCatLowGfxR,y
     89  00e1		       48		      pha
     90  00e2		       c8		      iny
     91  00e3		       b9 54 17 	      lda	MenuCatLowGfxR,y
     92  00e6		       48		      pha
     93  00e7
     94  00e7							; push graphics for right copies of PF2
     95  00e7		       bd b3 17 	      lda	MenuCatOffsetPf,x
     96  00ea		       85 8f		      sta	MenuCatRamPtr
     97  00ec
     98  00ec		       a0 0c		      ldy	#12
     99  00ee				   .LoopPfR
    100  00ee		       b1 8f		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    101  00f0		       48		      pha		; and push to RAM
    102  00f1		       88		      dey
    103  00f2		       10 fa		      bpl	.LoopPfR
    104  00f4
    105  00f4		       8a		      txa		; get animation frame
    106  00f5		       0a		      asl		; multiply by 2
    107  00f6		       a8		      tay
    108  00f7		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    109  00fa		       48		      pha
    110  00fb		       c8		      iny
    111  00fc		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    112  00ff		       48		      pha
    113  0100		       85 9a		      sta	MenuCatShift	; use highest bit for cat face shift
    114  0102
    115  0102							; push graphics for left copies of PF2
    116  0102		       8a		      txa		; get animation frame
    117  0103		       0a		      asl
    118  0104		       0a		      asl
    119  0105		       0a		      asl
    120  0106		       38		      sec
    121  0107		       e5 8d		      sbc	MenuCatFrame
    122  0109		       0a		      asl		; multiply by 14 (clears carry flag)
    123  010a		       85 8e		      sta	MenuCatFrameX14	; save to reuse later
    124  010c		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    125  010e		       85 8f		      sta	MenuCatRamPtr	; and set pointer address
    126  0110
    127  0110		       a0 0e		      ldy	#14
    128  0112				   .LoopPfL
    129  0112		       b1 8f		      lda	(MenuCatRamPtr),y
    130  0114		       48		      pha
    131  0115		       88		      dey
    132  0116		       10 fa		      bpl	.LoopPfL
    133  0118
    134  0118							; push graphics for GRP0
    135  0118		       a9 17		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    136  011a		       85 90		      sta	MenuCatRamPtr+1	; and set pointer to this page
    137  011c		       a5 8e		      lda	MenuCatFrameX14	; get animation frame times 14
    138  011e		       85 8f		      sta	MenuCatRamPtr	; and set pointer address
    139  0120
    140  0120		       a0 0d		      ldy	#13
    141  0122				   .LoopGfxL
    142  0122		       b1 8f		      lda	(MenuCatRamPtr),y
    143  0124		       48		      pha
    144  0125		       88		      dey
    145  0126		       10 fa		      bpl	.LoopGfxL
    146  0128
    147  0128							; prepare graphics pointers for kernel
    148  0128		       a9 16		      lda	#>MenuCatGfxPage1
    149  012a		       85 92		      sta	MenuCatHmvPtrP+1
    150  012c		       85 94		      sta	MenuCatMslPtr+1
    151  012e		       a9 17		      lda	#>MenuCatGfxPage2
    152  0130		       85 90		      sta	MenuCatHmvPtrM+1
    153  0132
    154  0132		       a5 8e		      lda	MenuCatFrameX14	; get animation frame times 14
    155  0134		       e0 05		      cpx	#5
    156  0136		       d0 03		      bne	.NotFrame5
    157  0138		       38		      sec
    158  0139		       e9 0e		      sbc	#14
    159  013b				   .NotFrame5
    160  013b		       18		      clc
    161  013c		       69 ad		      adc	#<MenuCatHmoveP
    162  013e		       85 91		      sta	MenuCatHmvPtrP
    163  0140		       a5 8e		      lda	MenuCatFrameX14	; get animation frame times 14
    164  0142		       38		      sec
    165  0143		       e5 8d		      sbc	MenuCatFrame	; adjust to times 13
    166  0145		       e0 00		      cpx	#0
    167  0147		       f0 03		      beq	.Frame0
    168  0149		       38		      sec
    169  014a		       e9 0d		      sbc	#13
    170  014c				   .Frame0
    171  014c		       18		      clc
    172  014d		       69 6c		      adc	#<MenuCatHmoveM
    173  014f		       85 8f		      sta	MenuCatHmvPtrM
    174  0151		       a0 f3		      ldy	#<MenuCatMslGfx
    175  0153		       e0 05		      cpx	#5
    176  0155		       d0 01		      bne	.Not5
    177  0157		       88		      dey
    178  0158				   .Not5
    179  0158		       84 93		      sty	MenuCatMslPtr
    180  015a
      0  015a					      TIMER_LOOP
      1  015a					      SUBROUTINE
      2  015a
      3  015a				   .TimerLoop
      4  015a		       ad 84 02 	      lda	INTIM
      5  015d		       d0 fb		      bne	.TimerLoop
      6  015f
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  015f					      include	bank1/code/kernel.asm
      1  015f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  015f							; Kernel
      3  015f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  015f
      5  015f		       85 02		      sta	WSYNC
      6  0161
      7  0161		       a0 3e		      ldy	#62
      8  0163				   .Loop1
      9  0163		       88		      dey
     10  0164		       85 02		      sta	WSYNC
     11  0166		       d0 fb		      bne	.Loop1	; 02
     12  0168
------- FILE bank1/code/menucat_prep.asm LEVEL 4 PASS 2
      0  0168					      include	bank1/code/menucat_prep.asm
      1  0168							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0168							; Menu Cat Prep
      3  0168							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0168							; Positions the graphics objects for the giant Nyan Cat display on the menu.
      5  0168							;
      6  0168							; Uses 64 bytes of ROM
      7  0168							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0168
      0  0168					      SLEEP	13	; 15
      1  0168				   .CYCLES    SET	13
      2  0168
      3  0168				  -	      IF	.CYCLES < 2
      4  0168				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0168				  -	      ERR
      6  0168					      ENDIF
      7  0168
      8  0168					      IF	.CYCLES & 1
      9  0168					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0168		       04 00		      nop	0
     11  016a				  -	      ELSE
     12  016a				  -	      bit	VSYNC
     13  016a					      ENDIF
     14  016a				   .CYCLES    SET	.CYCLES - 3
     15  016a					      ENDIF
     16  016a
     17  016a					      REPEAT	.CYCLES / 2
     18  016a		       ea		      nop
     17  016a					      REPEND
     18  016b		       ea		      nop
     17  016b					      REPEND
     18  016c		       ea		      nop
     17  016c					      REPEND
     18  016d		       ea		      nop
     17  016d					      REPEND
     18  016e		       ea		      nop
     19  016f					      REPEND
     10  016f
     11  016f		       a9 10		      lda	#$10	; 17
     12  0171		       85 21		      sta	HMP1	; 20	left 9 clocks
     13  0173		       0a		      asl		; 22	A = #$20
     14  0174		       85 24		      sta	HMBL	; 25	left 10 clocks
     15  0176		       85 23		      sta	HMM1	; 28	left 10 clocks
     16  0178		       a0 80		      ldy	#$80	; 30
     17  017a		       84 20		      sty	HMP0	; 33	no movement
     18  017c		       a9 90		      lda	#$90	; 35
     19  017e
     20  017e		       85 14		      sta	RESBL	; 38
     21  0180		       85 22		      sta	HMM0	; 41	left 1 clock
     22  0182		       85 10		      sta	RESP0	; 44
     23  0184		       85 12		      sta	RESM0	; 47
     24  0186		       85 13		      sta	RESM1	; 50
     25  0188		       85 11		      sta	RESP1	; 53
     26  018a
     27  018a		       a9 07		      lda	#QUAD_SIZE	; 55
     28  018c		       85 04		      sta	NUSIZ0	; 58
     29  018e		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     30  0190							; 60
     31  0190		       85 05		      sta	NUSIZ1	; 63
     32  0192		       a9 31		      lda	#$31	; 65
     33  0194		       85 0a		      sta	CTRLPF	; 68
     34  0196		       85 25		      sta	VDELP0	; 71	enable VDELP0
     35  0198		       85 2a		      sta	HMOVE	; 74	cycle 74!
     36  019a
     37  019a		       ea		      nop		; 00
     38  019b		       0a		      asl		; 02	A = #$62
     39  019c		       a2 e0		      ldx	#$E0	; 04
     40  019e		       85 20		      sta	HMP0	; 07	left 6 clocks
     41  01a0		       86 22		      stx	HMM0	; 10	right 2 clocks
     42  01a2		       86 21		      stx	HMP1	; 13	right 2 clocks
     43  01a4		       86 23		      stx	HMM1	; 16	right 2 clocks
     44  01a6		       84 24		      sty	HMBL	; 19	no movement
------- FILE bank1/code/kernel.asm
     14  01a8
     15  01a8		       a5 8d		      lda	MenuCatFrame
     16  01aa		       c9 02		      cmp	#2
     17  01ac		       30 06		      bmi	.HiCat
     18  01ae		       85 02		      sta	WSYNC
     19  01b0		       85 02		      sta	WSYNC
     20  01b2		       85 02		      sta	WSYNC
     21  01b4		       85 02	   .HiCat     sta	WSYNC
     22  01b6		       ea		      nop		; 02
     23  01b7
      0  01b7					      NEXT_PAGE
      1  01b7					      SUBROUTINE
      2  01b7
      3  01b7		       4c 00 12 	      jmp	.NextPage
      4  0200		       00 00 00 00*	      ALIGN	$100
      5  0200				   .NextPage
      6  0200
     25  0200
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0200					      include	bank1/code/menucat1_4.asm
      1  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0200							; Menu Cat Kernel (Blocks 1-3)
      3  0200							;
      4  0200							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0200							;
      6  0200							; 70 bytes
      7  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0200
      9  0200							; 16 bytes
     10  0200		       85 02		      sta	WSYNC	;	2
     11  0202		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0204		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0207		       a0 0b		      ldy	#11	; 08	2
     14  0209		       88	   .LP	      dey		; 59	1
     15  020a		       c0 03		      cpy	#3	; 61	2
     16  020c		       d0 fb		      bne	.LP	; 63	2
      0  020e					      SLEEP	2	; 65	1
      1  020e				   .CYCLES    SET	2
      2  020e
      3  020e				  -	      IF	.CYCLES < 2
      4  020e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  020e				  -	      ERR
      6  020e					      ENDIF
      7  020e
      8  020e				  -	      IF	.CYCLES & 1
      9  020e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  020e				  -	      nop	0
     11  020e				  -	      ELSE
     12  020e				  -	      bit	VSYNC
     13  020e				  -	      ENDIF
     14  020e				  -.CYCLES    SET	.CYCLES - 3
     15  020e					      ENDIF
     16  020e
     17  020e					      REPEAT	.CYCLES / 2
     18  020e		       ea		      nop
     19  020f					      REPEND
     18  020f		       4c 1c 12 	      jmp	.Enter1_3	; 68	2
     19  0212
     20  0212				   .Loop
     21  0212
     22  0212		       85 09		      sta	COLUBK	; 56	2
     23  0214		       85 02		      sta	WSYNC	; 00	2
     24  0216
      0  0216					      SLEEP	4	; 04	2
      1  0216				   .CYCLES    SET	4
      2  0216
      3  0216				  -	      IF	.CYCLES < 2
      4  0216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0216				  -	      ERR
      6  0216					      ENDIF
      7  0216
      8  0216				  -	      IF	.CYCLES & 1
      9  0216				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0216				  -	      nop	0
     11  0216				  -	      ELSE
     12  0216				  -	      bit	VSYNC
     13  0216				  -	      ENDIF
     14  0216				  -.CYCLES    SET	.CYCLES - 3
     15  0216					      ENDIF
     16  0216
     17  0216					      REPEAT	.CYCLES / 2
     18  0216		       ea		      nop
     17  0216					      REPEND
     18  0217		       ea		      nop
     19  0218					      REPEND
     26  0218		       d0 0d		      bne	.Skip	; 07	2
     27  021a
     28  021a				   MenuCatKernel1_3
     29  021a
     30  021a							; 10 bytes
      0  021a					      SLEEP	3	; 68	2
      1  021a				   .CYCLES    SET	3
      2  021a
      3  021a				  -	      IF	.CYCLES < 2
      4  021a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  021a				  -	      ERR
      6  021a					      ENDIF
      7  021a
      8  021a					      IF	.CYCLES & 1
      9  021a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  021a		       04 00		      nop	0
     11  021c				  -	      ELSE
     12  021c				  -	      bit	VSYNC
     13  021c					      ENDIF
     14  021c				   .CYCLES    SET	.CYCLES - 3
     15  021c					      ENDIF
     16  021c
     17  021c				  -	      REPEAT	.CYCLES / 2
     18  021c				  -	      nop
     19  021c					      REPEND
     32  021c				   .Enter1_3
     33  021c		       84 1f		      sty	ENABL	; 71	2
     34  021e		       a2 03		      ldx	#3	; 73	2
     35  0220		       85 2a		      sta	HMOVE	; 00	2
     36  0222
     37  0222							; 4 bytes
     38  0222		       b9 31 16 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0225		       85 1b		      sta	GRP0	; 07	2
     40  0227
     41  0227				   .Skip
     42  0227
     43  0227							; 8 bytes
     44  0227		       b9 e8 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  022a		       85 09		      sta	COLUBK	; 14	2
     46  022c		       b1 95		      lda	(BowColorsPfPtr),y	; 19	2
     47  022e		       85 08		      sta	COLUPF	; 22	2
     48  0230
     49  0230							; 8 bytes
     50  0230		       b9 2d 16 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0233		       85 1c		      sta	GRP1	; 29	2
     52  0235		       b9 00 16 	      lda	MenuCatTopPf,y	; 33	2
     53  0238		       85 0f		      sta	PF2	; 36	2
     54  023a
     55  023a							; 17 bytes
     56  023a		       a5 8b		      lda	CatTartColor	; 39	2
     57  023c		       85 09		      sta	COLUBK	; 42	2
     58  023e		       a5 ec		      lda	MenuBgColor	; 45	2
     59  0240		       85 08		      sta	COLUPF	; 48	2
     60  0242		       ca		      dex		; 50	1
     61  0243		       d0 cd		      bne	.Loop	; 53/52	2
     62  0245		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0247							; 54	2
     64  0247		       85 09		      sta	COLUBK	; 57	2
     65  0249		       86 04		      stx	NUSIZ0	; 60	2
     66  024b
     67  024b							; 5 bytes
     68  024b		       88		      dey		; 62	1
     69  024c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  024e
     71  024e
     72  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  024e							; Menu Cat Kernel (Block 4)
     74  024e							;
     75  024e							; This kernel draws block 4 of the cat in the menu display.
     76  024e							;
     77  024e							; ? bytes
     78  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  024e
     80  024e		       a2 03		      ldx	#3	; 66	2
     81  0250
     82  0250		       ad 31 16 	      lda	MenuCatTopGfxL	; 69	2
     83  0253		       85 1b		      sta	GRP0	; 72	2
     84  0255		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0258
      0  0258					      SLEEP	3	; 03	2
      1  0258				   .CYCLES    SET	3
      2  0258
      3  0258				  -	      IF	.CYCLES < 2
      4  0258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0258				  -	      ERR
      6  0258					      ENDIF
      7  0258
      8  0258					      IF	.CYCLES & 1
      9  0258					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0258		       04 00		      nop	0
     11  025a				  -	      ELSE
     12  025a				  -	      bit	VSYNC
     13  025a					      ENDIF
     14  025a				   .CYCLES    SET	.CYCLES - 3
     15  025a					      ENDIF
     16  025a
     17  025a				  -	      REPEAT	.CYCLES / 2
     18  025a				  -	      nop
     19  025a					      REPEND
     87  025a				   .Loop4
     88  025a		       a5 e8		      lda	RamBowColorsBk+16	; 06	2
     89  025c		       85 09		      sta	COLUBK	; 09	2
     90  025e		       b1 95		      lda	(BowColorsPfPtr),y	; 14	2
     91  0260		       85 08		      sta	COLUPF	; 17	2
     92  0262
     93  0262		       ad 2d 16 	      lda	MenuCatTopGfxR	; 20	2
     94  0265		       85 1c		      sta	GRP1	; 23	2
     95  0267
     96  0267		       86 20		      stx	HMP0	; 26	2
     97  0269		       86 24		      stx	HMBL	; 29	2
     98  026b
      0  026b					      SLEEP	6	; 36	4
      1  026b				   .CYCLES    SET	6
      2  026b
      3  026b				  -	      IF	.CYCLES < 2
      4  026b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  026b				  -	      ERR
      6  026b					      ENDIF
      7  026b
      8  026b				  -	      IF	.CYCLES & 1
      9  026b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  026b				  -	      nop	0
     11  026b				  -	      ELSE
     12  026b				  -	      bit	VSYNC
     13  026b				  -	      ENDIF
     14  026b				  -.CYCLES    SET	.CYCLES - 3
     15  026b					      ENDIF
     16  026b
     17  026b					      REPEAT	.CYCLES / 2
     18  026b		       ea		      nop
     17  026b					      REPEND
     18  026c		       ea		      nop
     17  026c					      REPEND
     18  026d		       ea		      nop
     19  026e					      REPEND
    100  026e
    101  026e		       a5 8b		      lda	CatTartColor	; 39	2
    102  0270		       85 09		      sta	COLUBK	; 42	2
    103  0272		       a5 ec		      lda	MenuBgColor	; 45	2
    104  0274		       85 08		      sta	COLUPF	; 48	2
    105  0276
    106  0276		       38		      sec		; 50	1
    107  0277		       ca		      dex		; 52	1
    108  0278
    109  0278		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  027b
    111  027b		       f0 04		      beq	.Exit4	; 59/58	2
    112  027d		       85 02		      sta	WSYNC	; 00	2
    113  027f		       d0 d9		      bne	.Loop4	; 03	2
    114  0281
    115  0281				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0281					      include	bank1/code/menucat5.asm
      1  0281							;
      2  0281
      3  0281		       a5 9a		      lda	MenuCatShift	; 62	2
      4  0283		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0285					      SKIP_WORD		; 68	1
      1  0285		       0c		      HEX	0C
      6  0286				   .ClearHmove
      7  0286		       85 2b		      sta	HMCLR	; 68	2
      8  0288
      9  0288		       a5 95		      lda	BowColorsPfPtr	; 71	2
     10  028a		       e9 0d		      sbc	#13	; 73	2
     11  028c		       85 95		      sta	BowColorsPfPtr	; 00	2
     12  028e
     13  028e		       85 2a		      sta	HMOVE	; 03	2
     14  0290		       85 95		      sta	BowColorsPfPtr	; 06	2
     15  0292		       a0 0c		      ldy	#12	; 08	2
     16  0294
     17  0294							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0294
     19  0294							; 10 bytes
     20  0294		       a5 e7		      lda	RamBowColorsBk+15	; 11	2
     21  0296		       85 09		      sta	COLUBK	; 14	2
     22  0298		       b1 95		      lda	(BowColorsPfPtr),y	; 19	2
     23  029a		       85 08		      sta	COLUPF	; 22	2
     24  029c		       85 99		      sta	RainbowColorPf	; 25	2
     25  029e
     26  029e							; 7 bytes
     27  029e		       a5 d6		      lda	RamMenuCatGfxR+15	; 28	2
     28  02a0		       85 1c		      sta	GRP1	; 31	2
     29  02a2		       4a		      lsr		; 33	1
     30  02a3		       85 1d		      sta	ENAM0	; 36	2
     31  02a5
     32  02a5							; 4 bytes
     33  02a5		       a5 8b		      lda	CatTartColor	; 39	2
     34  02a7		       85 09		      sta	COLUBK	; 42	2
     35  02a9
     36  02a9							; 5 bytes
     37  02a9		       a5 d5		      lda	RamMenuCatGfxR+14	; 45	2
     38  02ab		       85 97		      sta	RamMenuCatGfx	; 48	2
     39  02ad
     40  02ad							; 10 bytes
     41  02ad		       a5 ec		      lda	MenuBgColor	; 51	2
     42  02af		       85 08		      sta	COLUPF	; 54	2
     43  02b1		       85 09		      sta	COLUBK	; 57	2
     44  02b3		       85 2b		      sta	HMCLR	; 60	2
     45  02b5		       85 02		      sta	WSYNC	; 00	2
     46  02b7
     47  02b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  02b7
     49  02b7							; 8 bytes
     50  02b7		       a5 e7		      lda	RamBowColorsBk+15	; 03	2
     51  02b9		       85 09		      sta	COLUBK	; 06	2
     52  02bb		       a5 99		      lda	RainbowColorPf	; 09	2
     53  02bd		       85 08		      sta	COLUPF	; 12	2
     54  02bf
     55  02bf							; 8 bytes
     56  02bf		       b1 8f		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  02c1		       85 22		      sta	HMM0	; 20	2
     58  02c3		       0a		      asl		; 22	1
     59  02c4		       0a		      asl		; 24	1
     60  02c5		       0a		      asl		; 26	1
     61  02c6		       0a		      asl		; 28	1
     62  02c7		       85 23		      sta	HMM1	; 31
     63  02c9
     64  02c9							; 11 bytes
      0  02c9					      SLEEP	2	; 33	3
      1  02c9				   .CYCLES    SET	2
      2  02c9
      3  02c9				  -	      IF	.CYCLES < 2
      4  02c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02c9				  -	      ERR
      6  02c9					      ENDIF
      7  02c9
      8  02c9				  -	      IF	.CYCLES & 1
      9  02c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02c9				  -	      nop	0
     11  02c9				  -	      ELSE
     12  02c9				  -	      bit	VSYNC
     13  02c9				  -	      ENDIF
     14  02c9				  -.CYCLES    SET	.CYCLES - 3
     15  02c9					      ENDIF
     16  02c9
     17  02c9					      REPEAT	.CYCLES / 2
     18  02c9		       ea		      nop
     19  02ca					      REPEND
     66  02ca		       a5 8b		      lda	CatTartColor	; 36	2
     67  02cc		       85 09		      sta	COLUBK	; 39	2
     68  02ce
     69  02ce		       b1 93		      lda	(MenuCatMslPtr),y	; 44	2
     70  02d0		       85 98		      sta	RamMenuCatMissile	; 47	2
     71  02d2
     72  02d2							; 8 bytes
     73  02d2		       a5 ec		      lda	MenuBgColor	; 50	2
     74  02d4		       85 08		      sta	COLUPF	; 53	2
     75  02d6		       85 09		      sta	COLUBK	; 56	2
     76  02d8		       85 02		      sta	WSYNC	; 00	2
     77  02da
     78  02da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  02da
     80  02da							; 8 bytes
     81  02da		       a5 e7		      lda	RamBowColorsBk+15	; 03	2
     82  02dc		       85 09		      sta	COLUBK	; 06	2
     83  02de		       a5 99		      lda	RainbowColorPf	; 09	2
     84  02e0		       85 08		      sta	COLUPF	; 12	2
     85  02e2
     86  02e2							; 11 bytes
      0  02e2					      SLEEP	20	; 32	10
      1  02e2				   .CYCLES    SET	20
      2  02e2
      3  02e2				  -	      IF	.CYCLES < 2
      4  02e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02e2				  -	      ERR
      6  02e2					      ENDIF
      7  02e2
      8  02e2				  -	      IF	.CYCLES & 1
      9  02e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02e2				  -	      nop	0
     11  02e2				  -	      ELSE
     12  02e2				  -	      bit	VSYNC
     13  02e2				  -	      ENDIF
     14  02e2				  -.CYCLES    SET	.CYCLES - 3
     15  02e2					      ENDIF
     16  02e2
     17  02e2					      REPEAT	.CYCLES / 2
     18  02e2		       ea		      nop
     17  02e2					      REPEND
     18  02e3		       ea		      nop
     17  02e3					      REPEND
     18  02e4		       ea		      nop
     17  02e4					      REPEND
     18  02e5		       ea		      nop
     17  02e5					      REPEND
     18  02e6		       ea		      nop
     17  02e6					      REPEND
     18  02e7		       ea		      nop
     17  02e7					      REPEND
     18  02e8		       ea		      nop
     17  02e8					      REPEND
     18  02e9		       ea		      nop
     17  02e9					      REPEND
     18  02ea		       ea		      nop
     17  02ea					      REPEND
     18  02eb		       ea		      nop
     19  02ec					      REPEND
     88  02ec		       88		      dey		; 34	1
     89  02ed
     90  02ed							; 6 bytes
     91  02ed		       a5 8b		      lda	CatTartColor	; 37	2
     92  02ef		       85 09		      sta	COLUBK	; 40	2
     93  02f1
     94  02f1							; 12 bytes
     95  02f1		       a2 ff		      ldx	#$FF	; 42	2
     96  02f3		       a5 ec		      lda	MenuBgColor	; 45	3
     97  02f5		       85 08		      sta	COLUPF	; 48	2
     98  02f7		       86 1f		      stx	ENABL	; 51	2
     99  02f9		       86 1e		      stx	ENAM1	; 54	2
    100  02fb		       85 09		      sta	COLUBK	; 57	2
    101  02fd		       4c 1a 13 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0300					      include	bank1/code/menucat6_17.asm
      1  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0300							; Menu Cat Kernel (Blocks 6-17)
      3  0300							;
      4  0300							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0300							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0300							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0300							;
      8  0300							; 179 bytes
      9  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0300
     11  0300					      ALIGN	$100
     12  0300
     13  0300				   MenuCatKernel6_17
     14  0300
     15  0300							; 24 bytes
     16  0300		       b9 ad 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0303		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0305		       a9 08		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0307		       a6 8b		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0309		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  030b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  030e		       b9 bc 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0311		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0313		       a5 ec		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0315		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0317		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  031a
     28  031a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  031a
     30  031a				   .Enter6_17		; enter sandman
     31  031a
     32  031a							; 14 bytes
     33  031a		       a5 97		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  031c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  031e		       a5 98		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0320		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0322		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0324		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0326		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0328
     41  0328							; 12 bytes
     42  0328		       b9 db 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  032b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  032d		       85 99		      sta	RainbowColorBk	; 14	2 - save for later
     45  032f		       b3 95		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0331		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0333		       9a		      txs		; 24	1 - save for later
     48  0334
     49  0334							; 26 bytes
     50  0334		       b9 ac 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0337		       85 0f		      sta	PF2	; 31	2
     52  0339		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     53  033b		       a6 8b		      ldx	CatTartColor	; 36	2
     54  033d		       85 09		      sta	COLUBK	; 39	2
     55  033f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0342		       b9 bb 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0345		       85 0f		      sta	PF2	; 50	2
     58  0347		       a5 ec		      lda	MenuBgColor	; 53	2
     59  0349		       85 08		      sta	COLUPF	; 56	2
     60  034b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  034e
     62  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  034e
     64  034e							; 10 bytes
     65  034e		       b1 8f		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0350		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0352		       0a		      asl		; 70	1
     68  0353		       0a		      asl		; 72	1
     69  0354		       0a		      asl		; 74	1
     70  0355		       0a		      asl		; 00	1
     71  0356		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0358
     73  0358							; 7 bytes
     74  0358		       a5 99		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  035a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  035c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  035d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  035f
     79  035f							; 5 bytes
     80  035f		       b1 91		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0361		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0363		       ea		      nop		; 24	1
     83  0364
     84  0364							; 26 bytes
     85  0364		       b9 ac 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0367		       85 0f		      sta	PF2	; 31	2
     87  0369		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     88  036b		       a6 8b		      ldx	CatTartColor	; 36	2
     89  036d		       85 09		      sta	COLUBK	; 39	2
     90  036f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0372		       b9 bb 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0375		       85 0f		      sta	PF2	; 50	2
     93  0377		       a5 ec		      lda	MenuBgColor	; 53	2
     94  0379		       85 08		      sta	COLUPF	; 56	2
     95  037b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  037e
     97  037e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  037e
     99  037e							; 14 bytes
    100  037e		       b9 9d 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0381		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0383		       b9 c9 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0386		       85 97		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0388		       b1 93		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  038a		       85 98		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  038c
    107  038c							; 7 bytes
    108  038c		       a5 99		      lda	RainbowColorBk	; 09	2
    109  038e		       85 09		      sta	COLUBK	; 12	2
    110  0390		       ba		      tsx		; 14	1
    111  0391		       86 08		      stx	COLUPF	; 17	2
    112  0393
    113  0393							; 6 bytes
    114  0393		       88		      dey		; 19	1 - dec y for next kernel block
    115  0394		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0396		       4c 00 13 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0399
    118  0399				   .Exit
    119  0399
    120  0399							; 25 bytes
    121  0399		       4c 00 14 	      jmp	.Align6_17	; 25	2
    122  039c
    123  0400		       00 00 00 00*	      ALIGN	$100
    124  0400				   .Align6_17
    125  0400
    126  0400		       a5 ac		      lda	RamMenuCatPfL+3	; 28	2
    127  0402		       85 0f		      sta	PF2	; 31	2
    128  0404		       a9 08		      lda	#COL_CAT_FACE	; 33	2
    129  0406		       a6 8b		      ldx	CatTartColor	; 36	2
    130  0408		       85 09		      sta	COLUBK	; 39	2
    131  040a		       ea		      nop		; 41	1
    132  040b		       86 08		      stx	COLUPF	; 44	2
    133  040d		       a5 bb		      lda	RamMenuCatPfR+3	; 47	2
    134  040f		       85 0f		      sta	PF2	; 50	2
    135  0411		       a5 ec		      lda	MenuBgColor	; 53	2
    136  0413		       85 08		      sta	COLUPF	; 56	2
    137  0415		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0417					      include	bank1/code/menucat18.asm
      1  0417							; 59
      2  0417
      3  0417		       84 1d		      sty	ENAM0	; 62	2
      4  0419		       a5 97		      lda	RamMenuCatGfx	; 65	2
      5  041b		       85 1c		      sta	GRP1	; 68	2
      6  041d		       a9 60		      lda	#$60	; 70	2
      7  041f		       85 21		      sta	HMP1	; 73	2
      8  0421		       85 2a		      sta	HMOVE	; 00	2
      9  0423
     10  0423		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0425							; 02	2
     12  0425		       85 04		      sta	NUSIZ0	; 05	2
     13  0427
     14  0427		       a5 da		      lda	RamBowColorsBk+2	; 08	2
     15  0429		       85 09		      sta	COLUBK	; 11	2
     16  042b		       85 08		      sta	COLUPF	; 14	2
     17  042d
     18  042d		       a0 02		      ldy	#2	; 16	2
     19  042f		       ea		      nop		; 18	1
     20  0430		       a6 ec		      ldx	MenuBgColor	; 21	2
     21  0432		       9a		      txs		; 23	1
     22  0433
     23  0433				   .Loop18
     24  0433
     25  0433		       a5 ab		      lda	RamMenuCatPfL+2	; 26	2
     26  0435		       85 0f		      sta	PF2	; 29	2
     27  0437
     28  0437		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     29  0439		       a2 00		      ldx	#0	; 33	2
     30  043b		       86 1f		      stx	ENABL	; 36	2
     31  043d		       85 09		      sta	COLUBK	; 39	2
     32  043f		       86 08		      stx	COLUPF	; 42	2
     33  0441		       85 12		      sta	RESM0	; 45	2
     34  0443		       a5 ba		      lda	RamMenuCatPfR+2	; 48	2
     35  0445		       85 0f		      sta	PF2	; 51	2
     36  0447		       ba		      tsx		; 53	1
     37  0448		       86 08		      stx	COLUPF	; 56	2
     38  044a		       86 09		      stx	COLUBK	; 59	2
     39  044c		       88		      dey		; 61	1
     40  044d		       f0 16		      beq	.Exit18	; 64/63	2
     41  044f
      0  044f					      SLEEP	8	; 71	2
      1  044f				   .CYCLES    SET	8
      2  044f
      3  044f				  -	      IF	.CYCLES < 2
      4  044f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  044f				  -	      ERR
      6  044f					      ENDIF
      7  044f
      8  044f				  -	      IF	.CYCLES & 1
      9  044f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  044f				  -	      nop	0
     11  044f				  -	      ELSE
     12  044f				  -	      bit	VSYNC
     13  044f				  -	      ENDIF
     14  044f				  -.CYCLES    SET	.CYCLES - 3
     15  044f					      ENDIF
     16  044f
     17  044f					      REPEAT	.CYCLES / 2
     18  044f		       ea		      nop
     17  044f					      REPEND
     18  0450		       ea		      nop
     17  0450					      REPEND
     18  0451		       ea		      nop
     17  0451					      REPEND
     18  0452		       ea		      nop
     19  0453					      REPEND
     43  0453
     44  0453		       a5 da		      lda	RamBowColorsBk+2	; 74	2
     45  0455		       85 09		      sta	COLUBK	; 01	2
     46  0457		       85 08		      sta	COLUPF	; 04	2
     47  0459
     48  0459		       84 99		      sty	RainbowColorBk	; 07
     49  045b		       a0 0d		      ldy	#13	; 09
     50  045d		       b1 91		      lda	(MenuCatHmvPtrP),y	; 14
     51  045f		       85 21		      sta	HMP1	; 17
     52  0461		       a4 99		      ldy	RainbowColorBk	; 20
     53  0463
     54  0463		       d0 ce		      bne	.Loop18	; 23	2
     55  0465
     56  0465				   .Exit18		; 64
     57  0465
     58  0465		       85 02		      sta	WSYNC	; 00
     59  0467
     60  0467		       a5 da		      lda	RamBowColorsBk+2	; 03
     61  0469		       85 09		      sta	COLUBK	; 06
     62  046b		       85 08		      sta	COLUPF	; 09
     63  046d
     64  046d		       a5 95		      lda	BowColorsPfPtr	; 12
     65  046f		       38		      sec		; 14
     66  0470		       e9 03		      sbc	#3	; 16
     67  0472		       85 95		      sta	BowColorsPfPtr	; 19
      0  0474					      SLEEP	4	; 23
      1  0474				   .CYCLES    SET	4
      2  0474
      3  0474				  -	      IF	.CYCLES < 2
      4  0474				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0474				  -	      ERR
      6  0474					      ENDIF
      7  0474
      8  0474				  -	      IF	.CYCLES & 1
      9  0474				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0474				  -	      nop	0
     11  0474				  -	      ELSE
     12  0474				  -	      bit	VSYNC
     13  0474				  -	      ENDIF
     14  0474				  -.CYCLES    SET	.CYCLES - 3
     15  0474					      ENDIF
     16  0474
     17  0474					      REPEAT	.CYCLES / 2
     18  0474		       ea		      nop
     17  0474					      REPEND
     18  0475		       ea		      nop
     19  0476					      REPEND
     69  0476
     70  0476		       a5 ab		      lda	RamMenuCatPfL+2	; 26	2
     71  0478		       85 0f		      sta	PF2	; 29	2
     72  047a
     73  047a		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     74  047c		       a2 00		      ldx	#0	; 33	2
     75  047e		       86 1f		      stx	ENABL	; 36	2
     76  0480		       85 09		      sta	COLUBK	; 39	2
     77  0482		       86 08		      stx	COLUPF	; 42	2
     78  0484		       85 12		      sta	RESM0	; 45	2
     79  0486		       a5 ba		      lda	RamMenuCatPfR+2	; 48	2
     80  0488		       85 0f		      sta	PF2	; 51	2
     81  048a		       ba		      tsx		; 53	1
     82  048b		       86 08		      stx	COLUPF	; 56	2
     83  048d		       86 09		      stx	COLUBK	; 59	2
     84  048f
      0  048f					      SLEEP	5	; 64
      1  048f				   .CYCLES    SET	5
      2  048f
      3  048f				  -	      IF	.CYCLES < 2
      4  048f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  048f				  -	      ERR
      6  048f					      ENDIF
      7  048f
      8  048f					      IF	.CYCLES & 1
      9  048f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  048f		       04 00		      nop	0
     11  0491				  -	      ELSE
     12  0491				  -	      bit	VSYNC
     13  0491					      ENDIF
     14  0491				   .CYCLES    SET	.CYCLES - 3
     15  0491					      ENDIF
     16  0491
     17  0491					      REPEAT	.CYCLES / 2
     18  0491		       ea		      nop
     19  0492					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0492					      include	bank1/code/menucat19_20.asm
      1  0492							;
      2  0492
      3  0492		       a0 01		      ldy	#1	; 66	2
      4  0494
      5  0494				   MenuCatKernel19_20
      6  0494
      7  0494		       b9 9b 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0497		       85 1b		      sta	GRP0	; 73	2
      9  0499		       85 2a		      sta	HMOVE	; 00	2
     10  049b		       b9 c7 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  049e		       85 1c		      sta	GRP1	; 07	2
     12  04a0
     13  04a0		       b9 d8 00 	      lda	RamBowColorsBk,y	; 11	3
     14  04a3		       85 09		      sta	COLUBK	; 14	2
     15  04a5		       b1 95		      lda	(BowColorsPfPtr),y	; 19	2
     16  04a7		       85 08		      sta	COLUPF	; 22	2
     17  04a9		       b9 a9 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  04ac		       85 0f		      sta	PF2	; 29	2
      0  04ae					      SLEEP	2	; 31	1
      1  04ae				   .CYCLES    SET	2
      2  04ae
      3  04ae				  -	      IF	.CYCLES < 2
      4  04ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04ae				  -	      ERR
      6  04ae					      ENDIF
      7  04ae
      8  04ae				  -	      IF	.CYCLES & 1
      9  04ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04ae				  -	      nop	0
     11  04ae				  -	      ELSE
     12  04ae				  -	      bit	VSYNC
     13  04ae				  -	      ENDIF
     14  04ae				  -.CYCLES    SET	.CYCLES - 3
     15  04ae					      ENDIF
     16  04ae
     17  04ae					      REPEAT	.CYCLES / 2
     18  04ae		       ea		      nop
     19  04af					      REPEND
     20  04af
     21  04af		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     22  04b1		       a6 ec		      ldx	MenuBgColor	; 36	2
     23  04b3		       85 09		      sta	COLUBK	; 39	2
     24  04b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  04b8		       b9 b8 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  04bb		       85 0f		      sta	PF2	; 50	2
     27  04bd
     28  04bd		       85 2b		      sta	HMCLR	; 53	2
      0  04bf					      SLEEP	2	; 55	1
      1  04bf				   .CYCLES    SET	2
      2  04bf
      3  04bf				  -	      IF	.CYCLES < 2
      4  04bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04bf				  -	      ERR
      6  04bf					      ENDIF
      7  04bf
      8  04bf				  -	      IF	.CYCLES & 1
      9  04bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04bf				  -	      nop	0
     11  04bf				  -	      ELSE
     12  04bf				  -	      bit	VSYNC
     13  04bf				  -	      ENDIF
     14  04bf				  -.CYCLES    SET	.CYCLES - 3
     15  04bf					      ENDIF
     16  04bf
     17  04bf					      REPEAT	.CYCLES / 2
     18  04bf		       ea		      nop
     19  04c0					      REPEND
     30  04c0
     31  04c0		       86 09		      stx	COLUBK	; 58	2
     32  04c2		       85 02		      sta	WSYNC	; 00	2
     33  04c4
     34  04c4		       b9 d8 00 	      lda	RamBowColorsBk,y	; 04	3
     35  04c7		       85 09		      sta	COLUBK	; 07	2
     36  04c9		       b1 95		      lda	(BowColorsPfPtr),y	; 12	2
     37  04cb		       85 08		      sta	COLUPF	; 15	2
     38  04cd		       b9 a9 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  04d0		       85 0f		      sta	PF2	; 22	2
     40  04d2
     41  04d2		       a9 00		      lda	#$00	; 24	2
     42  04d4		       85 20		      sta	HMP0	; 27	2
     43  04d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  04d9
     45  04d9		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     46  04db		       a6 ec		      ldx	MenuBgColor	; 36	2
     47  04dd		       85 09		      sta	COLUBK	; 39	2
     48  04df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  04e2		       b9 b8 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  04e5		       85 0f		      sta	PF2	; 50	2
     51  04e7
     52  04e7		       a9 20		      lda	#$20	; 52	2
     53  04e9		       85 22		      sta	HMM0	; 55	2
     54  04eb
     55  04eb		       86 09		      stx	COLUBK	; 58	2
     56  04ed		       85 02		      sta	WSYNC	; 00	2
     57  04ef
     58  04ef		       b9 d8 00 	      lda	RamBowColorsBk,y	; 04	3
     59  04f2		       85 09		      sta	COLUBK	; 07	2
     60  04f4		       b1 95		      lda	(BowColorsPfPtr),y	; 12	2
     61  04f6		       85 08		      sta	COLUPF	; 15	2
     62  04f8		       b9 a9 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  04fb		       85 0f		      sta	PF2	; 22	2
     64  04fd
     65  04fd		       a9 e0		      lda	#$E0	; 24	2
     66  04ff		       85 23		      sta	HMM1	; 27	2
      0  0501					      SLEEP	4	; 31	5
      1  0501				   .CYCLES    SET	4
      2  0501
      3  0501				  -	      IF	.CYCLES < 2
      4  0501				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0501				  -	      ERR
      6  0501					      ENDIF
      7  0501
      8  0501				  -	      IF	.CYCLES & 1
      9  0501				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0501				  -	      nop	0
     11  0501				  -	      ELSE
     12  0501				  -	      bit	VSYNC
     13  0501				  -	      ENDIF
     14  0501				  -.CYCLES    SET	.CYCLES - 3
     15  0501					      ENDIF
     16  0501
     17  0501					      REPEAT	.CYCLES / 2
     18  0501		       ea		      nop
     17  0501					      REPEND
     18  0502		       ea		      nop
     19  0503					      REPEND
     68  0503
     69  0503		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     70  0505		       a6 ec		      ldx	MenuBgColor	; 36	2
     71  0507		       85 09		      sta	COLUBK	; 39	2
     72  0509		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  050c		       b9 b8 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  050f		       85 0f		      sta	PF2	; 50	2
     75  0511
      0  0511					      SLEEP	5	; 55	3
      1  0511				   .CYCLES    SET	5
      2  0511
      3  0511				  -	      IF	.CYCLES < 2
      4  0511				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0511				  -	      ERR
      6  0511					      ENDIF
      7  0511
      8  0511					      IF	.CYCLES & 1
      9  0511					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0511		       04 00		      nop	0
     11  0513				  -	      ELSE
     12  0513				  -	      bit	VSYNC
     13  0513					      ENDIF
     14  0513				   .CYCLES    SET	.CYCLES - 3
     15  0513					      ENDIF
     16  0513
     17  0513					      REPEAT	.CYCLES / 2
     18  0513		       ea		      nop
     19  0514					      REPEND
     77  0514
     78  0514		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0517
     80  0517		       88		      dey		; 61	1
     81  0518		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  051a		       4c 94 14 	      jmp	MenuCatKernel19_20	; 66	2
     83  051d
     84  051d				   .Exit19_20
     85  051d
     86  051d		       a9 00		      lda	#0
     87  051f		       85 1b		      sta	GRP0
     88  0521		       85 1c		      sta	GRP1
     89  0523		       85 1d		      sta	ENAM0
     90  0525		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     31  0527
     32  0527		       a5 8d		      lda	MenuCatFrame
     33  0529		       c9 02		      cmp	#2
     34  052b		       10 06		      bpl	.LoCat
     35  052d		       85 02		      sta	WSYNC
     36  052f		       85 02		      sta	WSYNC
     37  0531		       85 02		      sta	WSYNC
     38  0533		       85 02	   .LoCat     sta	WSYNC
     39  0535
     40  0535		       a0 3e		      ldy	#62
     41  0537				   .Loop2
     42  0537		       88		      dey
     43  0538		       85 02		      sta	WSYNC
     44  053a		       d0 fb		      bne	.Loop2
     45  053c
     46  053c		       4c 20 10 	      jmp	MenuOverScan
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  053f					      include	bank1/data/menucatgfx.asm
      1  053f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  053f							; Menu Cat Graphics
      3  053f							;
      4  053f							; Graphics for drawing the menu cat display
      5  053f							;
      6  053f							; Uses 1 page + 173 bytes of ROM
      7  053f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  053f
      9  0600		       00 00 00 00*	      ALIGN	$100
     10  0600
     11  0600				   MenuCatGfxPage1
     12  0600
     13  0600
     14  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0600							; Menu Cat Top Playfield Graphics
     16  0600							;
     17  0600							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0600							;
     19  0600							; 3 bytes of ROM
     20  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0600
     22  0600				   MenuCatTopPf
     23  0600
     24  0600		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0601		       07		      .byte.b	%00000111
     26  0602		       07		      .byte.b	%00000111
     27  0603							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0603
     29  0603							; 3 bytes used in page
     30  0603
     31  0603
     32  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0603							; Menu Cat Right Player Graphics
     34  0603							;
     35  0603							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0603							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0603							;
     38  0603							; 42 bytes of ROM (14 per frame)
     39  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0603
     41  0603				   MenuCatGfxR
     42  0603
     43  0603							; frames 1/5
     44  0603		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0604		       04		      .byte.b	%00000100
     46  0605		       f2		      .byte.b	%11110010
     47  0606		       91		      .byte.b	%10010001
     48  0607		       01		      .byte.b	%00000001
     49  0608		       59		      .byte.b	%01011001
     50  0609		       09		      .byte.b	%00001001
     51  060a		       01		      .byte.b	%00000001
     52  060b		       02		      .byte.b	%00000010
     53  060c		       c2		      .byte.b	%11000010
     54  060d		       22		      .byte.b	%00100010
     55  060e		       32		      .byte.b	%00110010
     56  060f		       2c		      .byte.b	%00101100
     57  0610		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0611
     59  0611							; frames 2/3/4
     60  0611		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0612		       04		      .byte.b	%00000100
     62  0613		       f2		      .byte.b	%11110010
     63  0614		       91		      .byte.b	%10010001
     64  0615		       01		      .byte.b	%00000001
     65  0616		       59		      .byte.b	%01011001
     66  0617		       09		      .byte.b	%00001001
     67  0618		       01		      .byte.b	%00000001
     68  0619		       02		      .byte.b	%00000010
     69  061a		       c2		      .byte.b	%11000010
     70  061b		       62		      .byte.b	%01100010
     71  061c		       52		      .byte.b	%01010010
     72  061d		       4c		      .byte.b	%01001100
     73  061e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  061f
     75  061f							; frame 6
     76  061f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0620		       f8		      .byte.b	%11111000
     78  0621		       04		      .byte.b	%00000100
     79  0622		       f2		      .byte.b	%11110010
     80  0623		       91		      .byte.b	%10010001
     81  0624		       01		      .byte.b	%00000001
     82  0625		       59		      .byte.b	%01011001
     83  0626		       09		      .byte.b	%00001001
     84  0627		       01		      .byte.b	%00000001
     85  0628		       02		      .byte.b	%00000010
     86  0629		       c2		      .byte.b	%11000010
     87  062a		       22		      .byte.b	%00100010
     88  062b		       32		      .byte.b	%00110010
     89  062c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  062d
     91  062d							; 45 bytes used in page
     92  062d
     93  062d
     94  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  062d							; Menu Cat Top Right Player Graphics
     96  062d							;
     97  062d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  062d							;
     99  062d							; 4 bytes of ROM
    100  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  062d
    102  062d				   MenuCatTopGfxR
    103  062d
    104  062d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  062e		       10		      .byte.b	%00010000
    106  062f		       10		      .byte.b	%00010000
    107  0630		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0631
    109  0631							; 49 bytes used in page
    110  0631
    111  0631
    112  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0631							; Menu Cat Top Left Player Graphics
    114  0631							;
    115  0631							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0631							;
    117  0631							; 3 bytes of ROM
    118  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0631
    120  0631				   MenuCatTopGfxL
    121  0631
    122  0631		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0632		       08		      .byte.b	%00001000
    124  0633		       20		      .byte.b	%00100000
    125  0634							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0634
    127  0634							; 52 bytes used in page
    128  0634
    129  0634
    130  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0634							; Menu Cat Left Playfield Graphics
    132  0634							;
    133  0634							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0634							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0634							;
    136  0634							; 84 bytes of ROM (14 per frame)
    137  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0634
    139  0634				   MenuCatPfL
    140  0634
    141  0634							; frame 1
    142  0634		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0635		       93		      .byte.b	%10010011
    144  0636		       f3		      .byte.b	%11110011
    145  0637		       bf		      .byte.b	%10111111
    146  0638		       bf		      .byte.b	%10111111
    147  0639		       3f		      .byte.b	%00111111
    148  063a		       3f		      .byte.b	%00111111
    149  063b		       3f		      .byte.b	%00111111
    150  063c		       3b		      .byte.b	%00111011
    151  063d		       39		      .byte.b	%00111001
    152  063e		       bd		      .byte.b	%10111101
    153  063f		       bc		      .byte.b	%10111100
    154  0640		       bf		      .byte.b	%10111111
    155  0641		       bf		      .byte.b	%10111111
    156  0642		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0643
    158  0643							; frame 2
    159  0643							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0643		       97		      .byte.b	%10010111
    161  0644		       f7		      .byte.b	%11110111
    162  0645		       bf		      .byte.b	%10111111
    163  0646		       bf		      .byte.b	%10111111
    164  0647		       bf		      .byte.b	%10111111
    165  0648		       bf		      .byte.b	%10111111
    166  0649		       bb		      .byte.b	%10111011
    167  064a		       b9		      .byte.b	%10111001
    168  064b		       bc		      .byte.b	%10111100
    169  064c		       bc		      .byte.b	%10111100
    170  064d		       bf		      .byte.b	%10111111
    171  064e		       bf		      .byte.b	%10111111
    172  064f		       bf		      .byte.b	%10111111
    173  0650		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0651
    175  0651							; frame 3
    176  0651							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0651		       a7		      .byte.b	%10100111
    178  0652		       f7		      .byte.b	%11110111
    179  0653		       bf		      .byte.b	%10111111
    180  0654		       bf		      .byte.b	%10111111
    181  0655		       bf		      .byte.b	%10111111
    182  0656		       bc		      .byte.b	%10111100
    183  0657		       b9		      .byte.b	%10111001
    184  0658		       bf		      .byte.b	%10111111
    185  0659		       bf		      .byte.b	%10111111
    186  065a		       bf		      .byte.b	%10111111
    187  065b		       bf		      .byte.b	%10111111
    188  065c		       bf		      .byte.b	%10111111
    189  065d		       bf		      .byte.b	%10111111
    190  065e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  065f
    192  065f							; frame 4
    193  065f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  065f		       97		      .byte.b	%10010111
    195  0660		       f7		      .byte.b	%11110111
    196  0661		       bf		      .byte.b	%10111111
    197  0662		       bf		      .byte.b	%10111111
    198  0663		       bc		      .byte.b	%10111100
    199  0664		       bc		      .byte.b	%10111100
    200  0665		       b9		      .byte.b	%10111001
    201  0666		       bb		      .byte.b	%10111011
    202  0667		       bf		      .byte.b	%10111111
    203  0668		       bf		      .byte.b	%10111111
    204  0669		       bf		      .byte.b	%10111111
    205  066a		       bf		      .byte.b	%10111111
    206  066b		       bf		      .byte.b	%10111111
    207  066c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  066d
    209  066d							; frame 5
    210  066d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  066d		       cb		      .byte.b	%11001011
    212  066e		       f3		      .byte.b	%11110011
    213  066f		       bf		      .byte.b	%10111111
    214  0670		       bf		      .byte.b	%10111111
    215  0671		       3f		      .byte.b	%00111111
    216  0672		       3f		      .byte.b	%00111111
    217  0673		       3f		      .byte.b	%00111111
    218  0674		       3b		      .byte.b	%00111011
    219  0675		       38		      .byte.b	%00111000
    220  0676		       bc		      .byte.b	%10111100
    221  0677		       bf		      .byte.b	%10111111
    222  0678		       bf		      .byte.b	%10111111
    223  0679		       bf		      .byte.b	%10111111
    224  067a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  067b
    226  067b							; frame 6
    227  067b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  067b		       cb		      .byte.b	%11001011
    229  067c		       f3		      .byte.b	%11110011
    230  067d		       bb		      .byte.b	%10111011
    231  067e		       bf		      .byte.b	%10111111
    232  067f		       bf		      .byte.b	%10111111
    233  0680		       3f		      .byte.b	%00111111
    234  0681		       3f		      .byte.b	%00111111
    235  0682		       3b		      .byte.b	%00111011
    236  0683		       39		      .byte.b	%00111001
    237  0684		       3c		      .byte.b	%00111100
    238  0685		       bc		      .byte.b	%10111100
    239  0686		       bf		      .byte.b	%10111111
    240  0687		       bf		      .byte.b	%10111111
    241  0688							;	.byte %10111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0688
    243  0688							; 136 bytes used in page
    244  0688
    245  0688
    246  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0688							; Menu Cat Right Playfield Graphics
    248  0688							;
    249  0688							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0688							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0688							;
    252  0688							; 37 bytes of ROM (12 per frame + 1)
    253  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0688
    255  0688				   MenuCatPfR
    256  0688
    257  0688							; frames 1/5
    258  0688		       bf		      .byte.b	%10111111	; PF2(R) gfx block 18
    259  0689		       81		      .byte.b	%10000001
    260  068a		       81		      .byte.b	%10000001
    261  068b		       80		      .byte.b	%10000000
    262  068c		       80		      .byte.b	%10000000
    263  068d		       80		      .byte.b	%10000000
    264  068e		       80		      .byte.b	%10000000
    265  068f		       80		      .byte.b	%10000000
    266  0690		       81		      .byte.b	%10000001
    267  0691		       99		      .byte.b	%10011001
    268  0692		       99		      .byte.b	%10011001
    269  0693		       bd		      .byte.b	%10111101
    270  0694							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0694
    272  0694							; frames 2/3/4
    273  0694		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0695		       c1		      .byte.b	%11000001
    275  0696		       80		      .byte.b	%10000000
    276  0697		       80		      .byte.b	%10000000
    277  0698		       80		      .byte.b	%10000000
    278  0699		       80		      .byte.b	%10000000
    279  069a		       80		      .byte.b	%10000000
    280  069b		       80		      .byte.b	%10000000
    281  069c		       80		      .byte.b	%10000000
    282  069d		       88		      .byte.b	%10001000
    283  069e		       9c		      .byte.b	%10011100
    284  069f		       9c		      .byte.b	%10011100
    285  06a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  06a0
    287  06a0							; frame 6
    288  06a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  06a1		       ff		      .byte.b	%11111111
    290  06a2		       81		      .byte.b	%10000001
    291  06a3		       81		      .byte.b	%10000001
    292  06a4		       80		      .byte.b	%10000000
    293  06a5		       80		      .byte.b	%10000000
    294  06a6		       80		      .byte.b	%10000000
    295  06a7		       80		      .byte.b	%10000000
    296  06a8		       80		      .byte.b	%10000000
    297  06a9		       81		      .byte.b	%10000001
    298  06aa		       99		      .byte.b	%10011001
    299  06ab		       99		      .byte.b	%10011001
    300  06ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  06ad							; 173 bytes used in page
    302  06ad
    303  06ad
    304  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  06ad							; Menu Cat Player Hmove Graphics
    306  06ad							;
    307  06ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  06ad							; The frame's graphics will be accessed through a pointer.
    309  06ad							;
    310  06ad							; 70 bytes of ROM (14 per frame)
    311  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  06ad
    313  06ad				   MenuCatHmoveP
    314  06ad
    315  06ad							; frame 1
    316  06ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  06ae		       a0		      .byte.b	$A0
    318  06af		       c0		      .byte.b	$C0
    319  06b0		       00		      .byte.b	$00
    320  06b1		       00		      .byte.b	$00
    321  06b2		       00		      .byte.b	$00
    322  06b3		       00		      .byte.b	$00
    323  06b4		       00		      .byte.b	$00
    324  06b5		       00		      .byte.b	$00
    325  06b6		       00		      .byte.b	$00
    326  06b7		       00		      .byte.b	$00
    327  06b8		       00		      .byte.b	$00
    328  06b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  06ba
    330  06ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  06bb
    332  06bb							; frame 2
    333  06bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  06bc		       a0		      .byte.b	$A0
    335  06bd		       a0		      .byte.b	$A0
    336  06be		       00		      .byte.b	$00
    337  06bf		       00		      .byte.b	$00
    338  06c0		       00		      .byte.b	$00
    339  06c1		       00		      .byte.b	$00
    340  06c2		       00		      .byte.b	$00
    341  06c3		       00		      .byte.b	$00
    342  06c4		       00		      .byte.b	$00
    343  06c5		       00		      .byte.b	$00
    344  06c6		       00		      .byte.b	$00
    345  06c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  06c8
    347  06c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  06c9
    349  06c9							; frame 3
    350  06c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  06ca		       80		      .byte.b	$80
    352  06cb		       a0		      .byte.b	$A0
    353  06cc		       00		      .byte.b	$00
    354  06cd		       00		      .byte.b	$00
    355  06ce		       00		      .byte.b	$00
    356  06cf		       00		      .byte.b	$00
    357  06d0		       00		      .byte.b	$00
    358  06d1		       00		      .byte.b	$00
    359  06d2		       00		      .byte.b	$00
    360  06d3		       00		      .byte.b	$00
    361  06d4		       00		      .byte.b	$00
    362  06d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  06d6
    364  06d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  06d7
    366  06d7							; frame 4
    367  06d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  06d8		       80		      .byte.b	$80
    369  06d9		       c0		      .byte.b	$C0
    370  06da		       00		      .byte.b	$00
    371  06db		       00		      .byte.b	$00
    372  06dc		       00		      .byte.b	$00
    373  06dd		       00		      .byte.b	$00
    374  06de		       00		      .byte.b	$00
    375  06df		       00		      .byte.b	$00
    376  06e0		       00		      .byte.b	$00
    377  06e1		       00		      .byte.b	$00
    378  06e2		       00		      .byte.b	$00
    379  06e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  06e4
    381  06e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  06e5
    383  06e5							; frames 5/6
    384  06e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  06e6		       c0		      .byte.b	$C0
    386  06e7		       c0		      .byte.b	$C0
    387  06e8		       00		      .byte.b	$00
    388  06e9		       00		      .byte.b	$00
    389  06ea		       00		      .byte.b	$00
    390  06eb		       00		      .byte.b	$00
    391  06ec		       00		      .byte.b	$00
    392  06ed		       00		      .byte.b	$00
    393  06ee		       00		      .byte.b	$00
    394  06ef		       00		      .byte.b	$00
    395  06f0		       00		      .byte.b	$00
    396  06f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  06f2
    398  06f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  06f3
    400  06f3							; 243 bytes used in page
    401  06f3
    402  06f3
    403  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  06f3							; Menu Cat Missile Graphics
    405  06f3							;
    406  06f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  06f3							; menu cat display.
    408  06f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  06f3							; Because of that, this table cannot be at the start of a page.
    410  06f3							;
    411  06f3							; 13 bytes of ROM
    412  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  06f3
    414  06f3				   MenuCatMslGfx
    415  06f3
    416  06f3							; frame 6
    417  06f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  06f4
    419  06f4							; frames 5/4/3/2/1
    420  06f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  06f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  06f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  06f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  06f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  06f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  06fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  06fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  06fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  06fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  06fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  06ff
    432  06ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0700
    434  0700							; all 256 bytes used in page
    435  0700
    436  0700
    437  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0700							; PAGE BOUNDARY
    439  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0700
    441  0700				   MenuCatGfxPage2
    442  0700
    443  0700
    444  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0700							; Menu Cat Left Player Graphics
    446  0700							;
    447  0700							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0700							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0700							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0700							;
    451  0700							; 84 bytes of ROM (14 per frame)
    452  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0700
    454  0700				   MenuCatGfxL
    455  0700
    456  0700							; frame 1
    457  0700		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0701		       9a		      .byte.b	%10011010
    459  0702		       8f		      .byte.b	%10001111
    460  0703		       70		      .byte.b	%01110000
    461  0704		       04		      .byte.b	%00000100
    462  0705		       01		      .byte.b	%00000001
    463  0706		       03		      .byte.b	%00000011
    464  0707		       0f		      .byte.b	%00001111
    465  0708		       19		      .byte.b	%00011001
    466  0709		       33		      .byte.b	%00110011
    467  070a		       67		      .byte.b	%01100111
    468  070b		       4d		      .byte.b	%01001101
    469  070c		       79		      .byte.b	%01111001
    470  070d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  070e
    472  070e							; frame 2
    473  070e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  070f		       94		      .byte.b	%10010100
    475  0710		       9f		      .byte.b	%10011111
    476  0711		       60		      .byte.b	%01100000
    477  0712		       08		      .byte.b	%00001000
    478  0713		       01		      .byte.b	%00000001
    479  0714		       07		      .byte.b	%00000111
    480  0715		       19		      .byte.b	%00011001
    481  0716		       21		      .byte.b	%00100001
    482  0717		       4f		      .byte.b	%01001111
    483  0718		       49		      .byte.b	%01001001
    484  0719		       31		      .byte.b	%00110001
    485  071a		       01		      .byte.b	%00000001
    486  071b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  071c
    488  071c							; frame 3
    489  071c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  071d		       94		      .byte.b	%10010100
    491  071e		       bf		      .byte.b	%10111111
    492  071f		       c0		      .byte.b	%11000000
    493  0720		       08		      .byte.b	%00001000
    494  0721		       3d		      .byte.b	%00111101
    495  0722		       47		      .byte.b	%01000111
    496  0723		       61		      .byte.b	%01100001
    497  0724		       1f		      .byte.b	%00011111
    498  0725		       03		      .byte.b	%00000011
    499  0726		       01		      .byte.b	%00000001
    500  0727		       01		      .byte.b	%00000001
    501  0728		       01		      .byte.b	%00000001
    502  0729		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  072a
    504  072a							; frame 4
    505  072a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  072b		       94		      .byte.b	%10010100
    507  072c		       9f		      .byte.b	%10011111
    508  072d		       60		      .byte.b	%01100000
    509  072e		       c4		      .byte.b	%11000100
    510  072f		       49		      .byte.b	%01001001
    511  0730		       4f		      .byte.b	%01001111
    512  0731		       21		      .byte.b	%00100001
    513  0732		       19		      .byte.b	%00011001
    514  0733		       07		      .byte.b	%00000111
    515  0734		       01		      .byte.b	%00000001
    516  0735		       01		      .byte.b	%00000001
    517  0736		       01		      .byte.b	%00000001
    518  0737		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0738
    520  0738							; frame 5
    521  0738		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0739		       94		      .byte.b	%10010100
    523  073a		       8f		      .byte.b	%10001111
    524  073b		       78		      .byte.b	%01111000
    525  073c		       0c		      .byte.b	%00001100
    526  073d		       01		      .byte.b	%00000001
    527  073e		       01		      .byte.b	%00000001
    528  073f		       07		      .byte.b	%00000111
    529  0740		       3d		      .byte.b	%00111101
    530  0741		       c3		      .byte.b	%11000011
    531  0742		       8f		      .byte.b	%10001111
    532  0743		       79		      .byte.b	%01111001
    533  0744		       01		      .byte.b	%00000001
    534  0745		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0746
    536  0746							; frame 6
    537  0746		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0747		       94		      .byte.b	%10010100
    539  0748		       8f		      .byte.b	%10001111
    540  0749		       58		      .byte.b	%01011000
    541  074a		       0c		      .byte.b	%00001100
    542  074b		       01		      .byte.b	%00000001
    543  074c		       01		      .byte.b	%00000001
    544  074d		       07		      .byte.b	%00000111
    545  074e		       19		      .byte.b	%00011001
    546  074f		       21		      .byte.b	%00100001
    547  0750		       4f		      .byte.b	%01001111
    548  0751		       49		      .byte.b	%01001001
    549  0752		       31		      .byte.b	%00110001
    550  0753		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0754
    552  0754							; 84 bytes used in page
    553  0754
    554  0754
    555  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0754							; Menu Cat Lower Right Player Graphics
    557  0754							;
    558  0754							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0754							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0754							;
    561  0754							; 12 bytes of ROM (2 per frame)
    562  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0754
    564  0754				   MenuCatLowGfxR
    565  0754
    566  0754							; frame 1
    567  0754		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0755		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0756
    570  0756							; frame 2
    571  0756		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0757		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0758
    574  0758							; frame 3
    575  0758		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0759		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  075a
    578  075a							; frame 4
    579  075a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  075b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  075c
    582  075c							; frame 5
    583  075c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  075d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  075e
    586  075e							; frame 6
    587  075e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  075f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0760
    590  0760							; 96 bytes used in page
    591  0760
    592  0760
    593  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0760							; Menu Cat Lower Right Playfield Graphics
    595  0760							;
    596  0760							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0760							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0760							;
    599  0760							; 12 bytes of ROM (2 per frame)
    600  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0760
    602  0760				   MenuCatLowPfGfxR
    603  0760
    604  0760							; frame 1
    605  0760		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0761		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0762
    608  0762							; frame 2
    609  0762		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0763		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0764
    612  0764							; frame 3
    613  0764		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0765		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0766
    616  0766							; frame 4
    617  0766		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0767		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0768
    620  0768							; frame 5
    621  0768		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0769		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  076a
    624  076a							; frame 6
    625  076a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  076b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  076c
    628  076c							; 108 bytes used in page
    629  076c
    630  076c
    631  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  076c							; Menu Cat Missile Hmove Graphics
    633  076c							;
    634  076c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  076c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  076c							; The frame's graphics will be accessed through a pointer.
    637  076c							;
    638  076c							; 65 bytes of ROM (13 per frame)
    639  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  076c
    641  076c				   MenuCatHmoveM
    642  076c
    643  076c							; frames 1/2
    644  076c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  076d		       0e		      .byte.b	$0E
    646  076e		       0e		      .byte.b	$0E
    647  076f		       e0		      .byte.b	$E0
    648  0770		       00		      .byte.b	$00
    649  0771		       20		      .byte.b	$20
    650  0772		       20		      .byte.b	$20
    651  0773		       02		      .byte.b	$02
    652  0774		       00		      .byte.b	$00
    653  0775		       e0		      .byte.b	$E0
    654  0776		       e0		      .byte.b	$E0
    655  0777		       c2		      .byte.b	$C2
    656  0778		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0779
    658  0779							; frame 3
    659  0779		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  077a		       0e		      .byte.b	$0E
    661  077b		       0e		      .byte.b	$0E
    662  077c		       e0		      .byte.b	$E0
    663  077d		       00		      .byte.b	$00
    664  077e		       20		      .byte.b	$20
    665  077f		       20		      .byte.b	$20
    666  0780		       02		      .byte.b	$02
    667  0781		       00		      .byte.b	$00
    668  0782		       e0		      .byte.b	$E0
    669  0783		       e0		      .byte.b	$E0
    670  0784		       c2		      .byte.b	$C2
    671  0785		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0786
    673  0786							; frame 4
    674  0786		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0787		       0e		      .byte.b	$0E
    676  0788		       0e		      .byte.b	$0E
    677  0789		       e0		      .byte.b	$E0
    678  078a		       00		      .byte.b	$00
    679  078b		       20		      .byte.b	$20
    680  078c		       20		      .byte.b	$20
    681  078d		       02		      .byte.b	$02
    682  078e		       00		      .byte.b	$00
    683  078f		       e0		      .byte.b	$E0
    684  0790		       e0		      .byte.b	$E0
    685  0791		       c2		      .byte.b	$C2
    686  0792		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0793
    688  0793							; frame 5
    689  0793		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0794		       0e		      .byte.b	$0E
    691  0795		       0e		      .byte.b	$0E
    692  0796		       e0		      .byte.b	$E0
    693  0797		       00		      .byte.b	$00
    694  0798		       20		      .byte.b	$20
    695  0799		       20		      .byte.b	$20
    696  079a		       02		      .byte.b	$02
    697  079b		       00		      .byte.b	$00
    698  079c		       e0		      .byte.b	$E0
    699  079d		       e0		      .byte.b	$E0
    700  079e		       c2		      .byte.b	$C2
    701  079f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  07a0
    703  07a0							; frame 6
    704  07a0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  07a1		       2e		      .byte.b	$2E
    706  07a2		       0e		      .byte.b	$0E
    707  07a3		       0e		      .byte.b	$0E
    708  07a4		       e0		      .byte.b	$E0
    709  07a5		       00		      .byte.b	$00
    710  07a6		       20		      .byte.b	$20
    711  07a7		       20		      .byte.b	$20
    712  07a8		       02		      .byte.b	$02
    713  07a9		       00		      .byte.b	$00
    714  07aa		       e0		      .byte.b	$E0
    715  07ab		       e0		      .byte.b	$E0
    716  07ac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  07ad
    718  07ad							; 173 bytes used in page
    719  07ad
    720  07ad
    721  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  07ad							; Offset Tables
    723  07ad							;
    724  07ad							; Tables of offsets to the correct data for frames that can share graphics.
    725  07ad							;
    726  07ad							; 12 bytes of ROM (6 bytes per table)
    727  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  07ad
    729  07ad				   MenuCatOffsetGfx
    730  07ad		       03		      .byte.b	<MenuCatGfxR+0
    731  07ae		       11		      .byte.b	<MenuCatGfxR+14
    732  07af		       11		      .byte.b	<MenuCatGfxR+14
    733  07b0		       11		      .byte.b	<MenuCatGfxR+14
    734  07b1		       03		      .byte.b	<MenuCatGfxR+0
    735  07b2		       1f		      .byte.b	<MenuCatGfxR+28
    736  07b3
    737  07b3				   MenuCatOffsetPf
    738  07b3		       88		      .byte.b	<MenuCatPfR+0
    739  07b4		       94		      .byte.b	<MenuCatPfR+12
    740  07b5		       94		      .byte.b	<MenuCatPfR+12
    741  07b6		       94		      .byte.b	<MenuCatPfR+12
    742  07b7		       88		      .byte.b	<MenuCatPfR+0
    743  07b8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
------- FILE bank1/data/colors.asm LEVEL 3 PASS 2
      0  07b9					      include	bank1/data/colors.asm
      1  07b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  07b9							;
      3  07b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  07b9
      5  07b9				   MenuColors
      6  07b9
      7  07b9							; NTSC
      8  07b9		       a2		      .byte.b	$A2	; menu bg color
      9  07ba		       5f		      .byte.b	$5F	; cat tart color
     10  07bb		       44		      .byte.b	$44	; rainbow color red
     11  07bc		       38		      .byte.b	$38	; rainbow color orange
     12  07bd		       1c		      .byte.b	$1C	; rainbow color yellow
     13  07be		       ca		      .byte.b	$CA	; rainbow color green
     14  07bf		       a8		      .byte.b	$A8	; rainbow color blue
     15  07c0		       76		      .byte.b	$76	; rainbow color purple
     16  07c1
     17  07c1							; PAL
     18  07c1		       92		      .byte.b	$92	; menu bg color
     19  07c2		       6f		      .byte.b	$6F	; cat tart color
     20  07c3		       64		      .byte.b	$64	; rainbow color red
     21  07c4		       48		      .byte.b	$48	; rainbow color orange
     22  07c5		       3c		      .byte.b	$3C	; rainbow color yellow
     23  07c6		       5a		      .byte.b	$5A	; rainbow color green
     24  07c7		       b8		      .byte.b	$B8	; rainbow color blue
     25  07c8		       c6		      .byte.b	$C6	; rainbow color purple
------- FILE bank1.asm
     13  07c9
      0  07c9					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
------- FILE main.asm
------- FILE bank2.asm LEVEL 2 PASS 2
      0  1000					      include	bank2.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Bank 2
      3  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1000
      0  1000					      START_BANK	2
      1  2000 ????				      SEG	BANK_2
      2  1000					      ORG	[2 - 1] * $1000
      3  1000					      RORG	$1000
      4  1000					      SUBROUTINE
      5  1000
      6  1000				   JmpInitSystem
      7  1000		       0c f6 1f 	      nop	SelectBank1
      8  1003		       4c 12 10 	      jmp	InitSystem
      9  1006				   JmpMenuOverScan
     10  1006		       0c f6 1f 	      nop	SelectBank1
     11  1009		       4c 20 10 	      jmp	MenuOverScan
     12  100c				   JmpGamePlay
     13  100c		       0c f7 1f 	      nop	SelectBank2
     14  100f		       4c 12 10 	      jmp	GameplayInit
     15  1012
      6  1012
------- FILE bank2/init.asm LEVEL 3 PASS 2
      0  1012					      include	bank2/init.asm
      1  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1012							; Gameplay Initialization
      3  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1012
      5  1012				   GameplayInit SUBROUTINE
      6  1012
      7  1012		       a9 00		      lda	#0
      8  1014		       a2 8d		      ldx	#RamLocal
      9  1016				   .ClearRam
     10  1016		       95 00		      sta	$00,x
     11  1018		       9a		      txs
     12  1019		       e8		      inx
     13  101a		       d0 fa		      bne	.ClearRam
     14  101c
     15  101c							; Set the food items (temporary demo code)
     16  101c		       a9 10		      lda	#$10
     17  101e		       85 a2		      sta	FoodItemL+0
     18  1020		       a9 70		      lda	#$70
     19  1022		       85 a9		      sta	FoodItemR+0
     20  1024
     21  1024		       a9 20		      lda	#$20
     22  1026		       85 a3		      sta	FoodItemL+1
     23  1028		       a9 80		      lda	#$80
     24  102a		       85 aa		      sta	FoodItemR+1
     25  102c
     26  102c		       a9 30		      lda	#$30
     27  102e		       85 a4		      sta	FoodItemL+2
     28  1030		       a9 90		      lda	#$90
     29  1032		       85 ab		      sta	FoodItemR+2
     30  1034
     31  1034		       a9 40		      lda	#$40
     32  1036		       85 a5		      sta	FoodItemL+3
     33  1038		       a9 a0		      lda	#$A0
     34  103a		       85 ac		      sta	FoodItemR+3
     35  103c
     36  103c		       a9 50		      lda	#$50
     37  103e		       85 a6		      sta	FoodItemL+4
     38  1040		       a9 b0		      lda	#$B0
     39  1042		       85 ad		      sta	FoodItemR+4
     40  1044
     41  1044		       a9 60		      lda	#$60
     42  1046		       85 a7		      sta	FoodItemL+5
     43  1048		       a9 c0		      lda	#$C0
     44  104a		       85 ae		      sta	FoodItemR+5
     45  104c
     46  104c		       a9 d0		      lda	#$D0
     47  104e		       85 a8		      sta	FoodItemL+6
     48  1050		       a9 e0		      lda	#$E0
     49  1052		       85 af		      sta	FoodItemR+6
------- FILE bank2.asm
------- FILE bank2/code/oscan_logic.asm LEVEL 3 PASS 2
      0  1054					      include	bank2/code/oscan_logic.asm
      1  1054							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1054							; Overscan
      3  1054							;
      4  1054							; Start the overscan timer and do game logic
      5  1054							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1054
      7  1054				   Overscan   SUBROUTINE
      8  1054
      9  1054		       e6 80		      inc	Frame	; increment the frame number
      0  1056					      SET_OSCAN_TIMER
      1  1056					      SUBROUTINE
      2  1056
      3  1056		       a9 24		      lda	#OSCAN_NTSC
      4  1058		       24 81		      bit	Variation
      5  105a		       30 02		      bmi	.NtscMode
      6  105c		       a9 40		      lda	#OSCAN_PAL
      7  105e				   .NtscMode
      8  105e		       85 02		      sta	WSYNC
      9  1060		       8d 96 02 	      sta	TIM64T
     10  1063
     11  1063
     12  1063							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     13  1063							; Proccess Joysticks
     14  1063							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  1063
     16  1063		       a9 00		      lda	#0
     17  1065		       8d 81 02 	      sta	SWACNT	; set all I/O pins to input for joystick reading
     18  1068		       ad 80 02 	      lda	SWCHA	; get joystick position for this frame ONLY ONCE
     19  106b		       85 c4		      sta	Temp	; save joystick position for consistency
     20  106d		       29 30		      and	#$30	; check left stick's up/down bit states
     21  106f		       c9 30		      cmp	#$30	; to see if they are both HI (joystick centered)
     22  1071		       d0 06		      bne	.NotCenter	; if not, skip ahead
     23  1073		       a5 a0		      lda	JoyCenter	; otherwise set rightmost bit of JoyCenter
     24  1075		       09 01		      ora	#1	; (to signify that the joystick HAS been re-centered
     25  1077		       85 a0		      sta	JoyCenter	; before the cat's next movement)
     26  1079				   .NotCenter
     27  1079		       a5 0c		      lda	INPT4	; if the left fire button is pressed,
     28  107b		       10 06		      bpl	.CheckPos	; skip the check for a previously centered joystick
     29  107d		       a5 a0		      lda	JoyCenter	; otherwise, check if the joystick has been centered
     30  107f		       29 01		      and	#1
     31  1081		       f0 2a		      beq	.Skip	; if it hasn't, don't make a movement
     32  1083				   .CheckPos
     33  1083		       a5 9e		      lda	CatPosition	; get cat's position
     34  1085		       29 1f		      and	#$1F	; check right 5 bits only
     35  1087		       f0 04		      beq	.ReadJoy	; if zero, we are centered on a row (read joystick)
     36  1089		       c9 13		      cmp	#19	; or if 19, we are centered on the bottom row
     37  108b		       d0 20		      bne	.Skip	; if not centered, skip reading joystick
     38  108d				   .ReadJoy
     39  108d		       a5 c4		      lda	Temp
     40  108f		       0a		      asl		; ignore joystick right
     41  1090		       0a		      asl		; ignore joystick left
     42  1091		       0a		      asl		; check joystick down
     43  1092		       b0 09		      bcs	.NoDown
     44  1094
     45  1094							; Now that we know the player is pressing the joystick down, we need to
     46  1094							; decide if the cat should be moved down a row.
     47  1094
     48  1094		       a6 9f		      ldx	CatRow
     49  1096		       e0 06		      cpx	#6
     50  1098		       f0 13		      beq	.Skip	; If already at the bottom row, don't move down
     51  109a		       e8		      inx
     52  109b		       d0 08		      bne	.ChangeRow
     53  109d
     54  109d				   .NoDown
     55  109d		       0a		      asl		; check joystick up
     56  109e		       b0 0d		      bcs	.Skip
     57  10a0		       a6 9f		      ldx	CatRow
     58  10a2		       f0 09		      beq	.Skip	; If already at the top row, don't move up
     59  10a4		       ca		      dex
     60  10a5				   .ChangeRow
     61  10a5		       86 9f		      stx	CatRow
     62  10a7		       a5 a0		      lda	JoyCenter
     63  10a9		       29 fe		      and	#$FE
     64  10ab		       85 a0		      sta	JoyCenter	; clear rightmost bit in JoyCenter
     65  10ad				   .Skip
     66  10ad
     67  10ad
     68  10ad							; Caclulate cat's position data
     69  10ad					      SUBROUTINE
     70  10ad
     71  10ad		       a5 9f		      lda	CatRow
     72  10af		       29 07		      and	#$07
     73  10b1		       aa		      tax
     74  10b2		       bd 5b 1e 	      lda	RowPosition,x
     75  10b5		       c5 9d		      cmp	CatPosY
     76  10b7		       f0 17		      beq	.NoMove
     77  10b9		       30 08		      bmi	.MoveUp
     78  10bb				   .MoveDown
     79  10bb		       38		      sec
     80  10bc		       e5 9d		      sbc	CatPosY
     81  10be		       4a		      lsr
     82  10bf		       65 9d		      adc	CatPosY
     83  10c1		       d0 0b		      bne	.UpdatePos
     84  10c3				   .MoveUp
     85  10c3		       a5 9d		      lda	CatPosY
     86  10c5		       38		      sec
     87  10c6		       fd 5b 1e 	      sbc	RowPosition,x
     88  10c9		       4a		      lsr
     89  10ca		       18		      clc
     90  10cb		       7d 5b 1e 	      adc	RowPosition,x
     91  10ce				   .UpdatePos
     92  10ce		       85 9d		      sta	CatPosY
     93  10d0				   .NoMove
     94  10d0		       a2 00		      ldx	#0
     95  10d2				   .DivideLoop
     96  10d2		       38		      sec
     97  10d3		       e8		      inx
     98  10d4		       e9 13		      sbc	#19
     99  10d6		       90 07		      bcc	.AddBack
    100  10d8
    101  10d8		       e0 05		      cpx	#5
    102  10da		       d0 f6		      bne	.DivideLoop
    103  10dc		       e8		      inx
    104  10dd		       d0 02		      bne	.SetCatPos
    105  10df				   .AddBack
    106  10df		       69 13		      adc	#19
    107  10e1				   .SetCatPos
    108  10e1		       85 9e		      sta	CatPosition
    109  10e3		       8a		      txa
    110  10e4		       0a		      asl
    111  10e5		       0a		      asl
    112  10e6		       0a		      asl
    113  10e7		       0a		      asl
    114  10e8		       0a		      asl
    115  10e9		       65 9e		      adc	CatPosition
    116  10eb		       85 9e		      sta	CatPosition
    117  10ed		       ca		      dex
    118  10ee		       86 a1		      stx	PreCatRows
    119  10f0
    120  10f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121  10f0							; Finish Overscan
    122  10f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    123  10f0
      0  10f0					      TIMER_LOOP
      1  10f0					      SUBROUTINE
      2  10f0
      3  10f0				   .TimerLoop
      4  10f0		       ad 84 02 	      lda	INTIM
      5  10f3		       d0 fb		      bne	.TimerLoop
      6  10f5
------- FILE bank2.asm
------- FILE bank2/code/vblank_logic.asm LEVEL 3 PASS 2
      0  10f5					      include	bank2/code/vblank_logic.asm
      1  10f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10f5							; Vertical Blank
      3  10f5							;
      4  10f5							; Do the vertical blanking and game logic
      5  10f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  10f5
      0  10f5					      VERT_SYNC
      1  10f5					      SUBROUTINE
      2  10f5
      3  10f5		       a2 2b		      ldx	#VBLANK_NTSC
      4  10f7		       24 81		      bit	Variation
      5  10f9		       30 02		      bmi	.NtscMode
      6  10fb		       a2 4a		      ldx	#VBLANK_PAL
      7  10fd				   .NtscMode
      8  10fd		       a9 0e		      lda	#%1110
      9  10ff				   .VsyncLoop
     10  10ff		       85 02		      sta	WSYNC
     11  1101		       85 00		      sta	VSYNC
     12  1103		       85 01		      sta	VBLANK
     13  1105		       8e 96 02 	      stx	TIM64T
     14  1108		       4a		      lsr
     15  1109		       d0 f4		      bne	.VsyncLoop
     16  110b
      8  110b
      9  110b		       85 2b		      sta	HMCLR
     10  110d		       85 02		      sta	WSYNC
     11  110f
     12  110f							; set gfx obj positions for scoreboard display
     13  110f		       a9 f0		      lda	#$F0	; 02
     14  1111		       85 23		      sta	HMM1	; 05
     15  1113		       a9 10		      lda	#$10	; 07
     16  1115		       85 21		      sta	HMP1	; 10
     17  1117		       85 22		      sta	HMM0	; 13
      0  1119					      SLEEP	7	; 20
      1  1119				   .CYCLES    SET	7
      2  1119
      3  1119				  -	      IF	.CYCLES < 2
      4  1119				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1119				  -	      ERR
      6  1119					      ENDIF
      7  1119
      8  1119					      IF	.CYCLES & 1
      9  1119					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1119		       04 00		      nop	0
     11  111b				  -	      ELSE
     12  111b				  -	      bit	VSYNC
     13  111b					      ENDIF
     14  111b				   .CYCLES    SET	.CYCLES - 3
     15  111b					      ENDIF
     16  111b
     17  111b					      REPEAT	.CYCLES / 2
     18  111b		       ea		      nop
     17  111b					      REPEND
     18  111c		       ea		      nop
     19  111d					      REPEND
     19  111d		       85 13		      sta	RESM1	; 23
      0  111f					      SLEEP	3	; 26
      1  111f				   .CYCLES    SET	3
      2  111f
      3  111f				  -	      IF	.CYCLES < 2
      4  111f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  111f				  -	      ERR
      6  111f					      ENDIF
      7  111f
      8  111f					      IF	.CYCLES & 1
      9  111f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  111f		       04 00		      nop	0
     11  1121				  -	      ELSE
     12  1121				  -	      bit	VSYNC
     13  1121					      ENDIF
     14  1121				   .CYCLES    SET	.CYCLES - 3
     15  1121					      ENDIF
     16  1121
     17  1121				  -	      REPEAT	.CYCLES / 2
     18  1121				  -	      nop
     19  1121					      REPEND
     21  1121		       85 14		      sta	RESBL	; 29
     22  1123		       20 24 18 	      jsr	Sleep12	; 41
      0  1126					      SLEEP	11	; 52
      1  1126				   .CYCLES    SET	11
      2  1126
      3  1126				  -	      IF	.CYCLES < 2
      4  1126				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1126				  -	      ERR
      6  1126					      ENDIF
      7  1126
      8  1126					      IF	.CYCLES & 1
      9  1126					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1126		       04 00		      nop	0
     11  1128				  -	      ELSE
     12  1128				  -	      bit	VSYNC
     13  1128					      ENDIF
     14  1128				   .CYCLES    SET	.CYCLES - 3
     15  1128					      ENDIF
     16  1128
     17  1128					      REPEAT	.CYCLES / 2
     18  1128		       ea		      nop
     17  1128					      REPEND
     18  1129		       ea		      nop
     17  1129					      REPEND
     18  112a		       ea		      nop
     17  112a					      REPEND
     18  112b		       ea		      nop
     19  112c					      REPEND
     24  112c		       85 10		      sta	RESP0	; 55
     25  112e		       85 11		      sta	RESP1	; 58
     26  1130		       20 24 18 	      jsr	Sleep12	; 67
     27  1133		       85 12		      sta	RESM0	; 70
     28  1135
     29  1135		       85 02		      sta	WSYNC
     30  1137		       85 2a		      sta	HMOVE
     31  1139
     32  1139							; prepare for throbbing lines
     33  1139		       a5 80		      lda	Frame	; get the current frame number
     34  113b		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     35  113d		       4a		      lsr
     36  113e		       4a		      lsr		; shift to get a value from 0-7
     37  113f		       85 c4		      sta	Temp
     38  1141		       0a		      asl		; carry flag will always be clear after this
     39  1142		       65 c4		      adc	Temp	; multiply by 3
     40  1144		       a8		      tay
     41  1145
     42  1145		       a5 9b		      lda	ScoreColor
     43  1147		       29 f0		      and	#$F0
     44  1149		       85 c4		      sta	Temp
     45  114b		       b9 57 1b 	      lda	ThrobGfx+0,y
     46  114e		       0a		      asl
     47  114f		       90 01		      bcc	.Color0
      0  1151					      SKIP_WORD
      1  1151		       0c		      HEX	0C
     49  1152				   .Color0
     50  1152		       65 c4		      adc	Temp
     51  1154		       85 c0		      sta	ThrobColor+0
     52  1156		       b9 58 1b 	      lda	ThrobGfx+1,y
     53  1159		       0a		      asl
     54  115a		       90 01		      bcc	.Color1
      0  115c					      SKIP_WORD
      1  115c		       0c		      HEX	0C
     56  115d				   .Color1
     57  115d		       65 c4		      adc	Temp
     58  115f		       85 c1		      sta	ThrobColor+1
     59  1161		       b9 59 1b 	      lda	ThrobGfx+2,y
     60  1164		       0a		      asl
     61  1165		       90 01		      bcc	.Color2
      0  1167					      SKIP_WORD
      1  1167		       0c		      HEX	0C
     63  1168				   .Color2
     64  1168		       65 c4		      adc	Temp
     65  116a		       85 c2		      sta	ThrobColor+2
     66  116c
     67  116c					      SUBROUTINE
     68  116c
     69  116c							; get graphics data for the scoreboard and push it onto the stack
     70  116c
     71  116c							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
     72  116c		       a9 1b		      lda	#>ScoreGfx
     73  116e		       85 8e		      sta	LvlLoadPtr+1
     74  1170		       85 90		      sta	ScrLoadPtr0+1
     75  1172		       85 92		      sta	ScrLoadPtr1+1
     76  1174		       85 94		      sta	ScrLoadPtr2+1
     77  1176		       85 96		      sta	ScrLoadPtr3+1
     78  1178		       85 98		      sta	ScrLoadPtr4+1
     79  117a		       85 9a		      sta	ScrLoadPtr5+1
     80  117c
     81  117c							; Prepare pointer for level digit graphics - 14 cycles
     82  117c		       a5 88		      lda	BCDLevel
     83  117e		       29 0f		      and	#$0F
     84  1180		       0a		      asl
     85  1181		       0a		      asl
     86  1182		       0a		      asl
     87  1183		       85 8d		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
     88  1185
     89  1185							; Prepare pointers for score digit graphics - 69 cycles
     90  1185
     91  1185		       a7 82		      lax	BCDScore+0
     92  1187		       29 f0		      and	#$F0
     93  1189		       4a		      lsr
     94  118a		       85 8f		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
     95  118c
     96  118c		       8a		      txa
     97  118d		       29 0f		      and	#$0F
     98  118f		       0a		      asl
     99  1190		       0a		      asl
    100  1191		       0a		      asl
    101  1192		       85 91		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    102  1194
    103  1194		       a7 83		      lax	BCDScore+1
    104  1196		       29 f0		      and	#$F0
    105  1198		       4a		      lsr
    106  1199		       85 93		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    107  119b
    108  119b		       8a		      txa
    109  119c		       29 0f		      and	#$0F
    110  119e		       0a		      asl
    111  119f		       0a		      asl
    112  11a0		       0a		      asl
    113  11a1		       85 95		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    114  11a3
    115  11a3		       a7 84		      lax	BCDScore+2
    116  11a5		       29 f0		      and	#$F0
    117  11a7		       4a		      lsr
    118  11a8		       85 97		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    119  11aa
    120  11aa		       8a		      txa
    121  11ab		       29 0f		      and	#$0F
    122  11ad		       0a		      asl
    123  11ae		       0a		      asl
    124  11af		       0a		      asl
    125  11b0		       85 99		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    126  11b2
    127  11b2							; Load the stack with the graphics for the scoreboard - 428 cycles
    128  11b2		       a0 06		      ldy	#6
    129  11b4				   .LoadScoreboard
    130  11b4		       b1 99		      lda	(ScrLoadPtr5),y
    131  11b6		       48		      pha
    132  11b7		       b1 97		      lda	(ScrLoadPtr4),y
    133  11b9		       48		      pha
    134  11ba		       b1 95		      lda	(ScrLoadPtr3),y
    135  11bc		       48		      pha
    136  11bd		       b1 93		      lda	(ScrLoadPtr2),y
    137  11bf		       48		      pha
    138  11c0		       b1 91		      lda	(ScrLoadPtr1),y
    139  11c2		       48		      pha
    140  11c3		       b1 8f		      lda	(ScrLoadPtr0),y
    141  11c5		       48		      pha
    142  11c6		       b1 8d		      lda	(LvlLoadPtr),y
    143  11c8		       48		      pha
    144  11c9		       88		      dey
    145  11ca		       10 e8		      bpl	.LoadScoreboard
    146  11cc
    147  11cc		       a5 80		      lda	Frame
    148  11ce		       4a		      lsr
    149  11cf		       4a		      lsr
    150  11d0		       4a		      lsr
    151  11d1		       85 b7		      sta	Progress
    152  11d3
    153  11d3		       85 2b		      sta	HMCLR
    154  11d5		       a6 b0		      ldx	FoodPosX
    155  11d7		       ca		      dex
    156  11d8		       10 02		      bpl	.NoReset0
    157  11da		       a2 58		      ldx	#88
    158  11dc				   .NoReset0
    159  11dc		       86 b0		      stx	FoodPosX+0
    160  11de
    161  11de		       8a		      txa
    162  11df		       38		      sec
    163  11e0		       e9 12		      sbc	#18
    164  11e2		       b0 02		      bcs	.NoReset1
    165  11e4		       69 59		      adc	#89
    166  11e6				   .NoReset1
    167  11e6		       85 b1		      sta	FoodPosX+1
    168  11e8
    169  11e8		       e9 34		      sbc	#52
    170  11ea		       b0 02		      bcs	.NoReset2
    171  11ec		       69 59		      adc	#89
    172  11ee				   .NoReset2
    173  11ee		       85 b2		      sta	FoodPosX+2
    174  11f0
    175  11f0		       e9 1b		      sbc	#27
    176  11f2		       b0 02		      bcs	.NoReset3
    177  11f4		       69 59		      adc	#89
    178  11f6				   .NoReset3
    179  11f6		       85 b3		      sta	FoodPosX+3
    180  11f8
    181  11f8		       e9 3f		      sbc	#63
    182  11fa		       b0 02		      bcs	.NoReset4
    183  11fc		       69 59		      adc	#89
    184  11fe				   .NoReset4
    185  11fe		       85 b4		      sta	FoodPosX+4
    186  1200
    187  1200		       e9 29		      sbc	#41
    188  1202		       b0 02		      bcs	.NoReset5
    189  1204		       69 59		      adc	#89
    190  1206				   .NoReset5
    191  1206		       85 b5		      sta	FoodPosX+5
    192  1208
    193  1208		       e9 11		      sbc	#17
    194  120a		       b0 02		      bcs	.NoReset6
    195  120c		       69 59		      adc	#89
    196  120e				   .NoReset6
    197  120e		       85 b6		      sta	FoodPosX+6
    198  1210
    199  1210
    200  1210							; Calculate Hmove offsets for 2nd cat row's food items
    201  1210		       a9 05		      lda	#5
    202  1212		       38		      sec
    203  1213		       e5 a1		      sbc	PreCatRows
    204  1215		       a8		      tay
    205  1216
    206  1216		       b9 a2 00 	      lda	FoodItemL,y
    207  1219		       29 f0		      and	#$F0
    208  121b		       85 bc		      sta	CatRow2FoodL
    209  121d		       aa		      tax
    210  121e		       bd 0f 1d 	      lda	FoodGfx+15,x
    211  1221		       85 be		      sta	CatRow2Color1
    212  1223
    213  1223		       b9 a9 00 	      lda	FoodItemR,y
    214  1226		       29 f0		      and	#$F0
    215  1228		       85 bd		      sta	CatRow2FoodR
    216  122a		       aa		      tax
    217  122b		       bd 0f 1d 	      lda	FoodGfx+15,x
    218  122e		       85 bf		      sta	CatRow2Color2
    219  1230
    220  1230		       b9 b0 00 	      lda	FoodPosX,y
    221  1233		       e9 2c		      sbc	#44
    222  1235		       f0 04		      beq	.Prepare
    223  1237		       90 02		      bcc	.Prepare
    224  1239		       e9 2d		      sbc	#45
    225  123b				   .Prepare
    226  123b		       38		      sec
    227  123c		       e9 01		      sbc	#1
    228  123e		       a2 70		      ldx	#$70
    229  1240		       a0 02		      ldy	#2
    230  1242				   .OffsetLoop
    231  1242		       18		      clc
    232  1243		       69 0f		      adc	#15
    233  1245		       f0 02		      beq	.CalcOffset
    234  1247		       30 0d		      bmi	.MaxOffset
    235  1249				   .CalcOffset
    236  1249		       49 07		      eor	#7
    237  124b		       0a		      asl
    238  124c		       0a		      asl
    239  124d		       0a		      asl
    240  124e		       0a		      asl
    241  124f		       99 b9 00 	      sta	CatRowHmove,y
    242  1252		       a9 00		      lda	#0
    243  1254		       f0 02		      beq	.NextOffset
    244  1256				   .MaxOffset
    245  1256		       96 b9		      stx	CatRowHmove,y
    246  1258				   .NextOffset
    247  1258		       88		      dey
    248  1259		       10 e7		      bpl	.OffsetLoop
    249  125b
    250  125b
    251  125b					      SUBROUTINE
    252  125b
    253  125b		       a9 7a		      lda	#COL_SCORE	; 2
    254  125d		       85 9b		      sta	ScoreColor	; 3
    255  125f
    256  125f		       a5 9b		      lda	ScoreColor	; 3
    257  1261		       85 06		      sta	COLUP0	; 3 - set color registers
    258  1263		       85 07		      sta	COLUP1	; 3
    259  1265		       85 08		      sta	COLUPF	; 3
    260  1267		       85 09		      sta	COLUBK	; 3
    261  1269
    262  1269
    263  1269							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    264  1269							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    265  1269							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    266  1269
    267  1269		       a9 1d		      lda	#>FoodGfx
    268  126b		       85 8e		      sta	FoodGfxPtr1+1
    269  126d		       85 90		      sta	FoodGfxPtr2+1
    270  126f
    271  126f		       a9 1e		      lda	#>CatTartGfx
    272  1271		       85 92		      sta	TartGfxPtr1+1
    273  1273		       85 96		      sta	TartGfxPtr2+1
    274  1275
    275  1275		       a9 1e		      lda	#>CatFaceGfx
    276  1277		       85 94		      sta	CatGfxPtr1+1
    277  1279		       85 98		      sta	CatGfxPtr2+1
    278  127b
    279  127b		       a5 9e		      lda	CatPosition
    280  127d		       29 1f		      and	#%00011111
    281  127f		       aa		      tax
    282  1280		       18		      clc
    283  1281		       69 06		      adc	#<CatTartGfx
    284  1283		       85 95		      sta	TartGfxPtr2
    285  1285		       69 13		      adc	#19
    286  1287		       85 91		      sta	TartGfxPtr1
    287  1289
    288  1289		       8a		      txa
    289  128a		       69 28		      adc	#<CatFaceGfx
    290  128c		       85 97		      sta	CatGfxPtr2
    291  128e		       69 13		      adc	#19
    292  1290		       85 93		      sta	CatGfxPtr1
    293  1292
    294  1292		       a9 56		      lda	#$56
    295  1294		       85 9c		      sta	PgBarColor
    296  1296		       a9 5f		      lda	#COL_CAT_TART
    297  1298		       85 8b		      sta	CatTartColor
    298  129a
    299  129a		       a5 80		      lda	Frame
    300  129c		       29 08		      and	#%00001000
    301  129e		       4a		      lsr
    302  129f		       4a		      lsr
    303  12a0		       4a		      lsr
    304  12a1		       a8		      tay
    305  12a2		       a5 a0		      lda	Rainbow
    306  12a4		       29 0f		      and	#$0F
    307  12a6		       59 1e 1c 	      eor	RainbowGfx,y
    308  12a9		       85 a0		      sta	Rainbow
    309  12ab
    310  12ab
    311  12ab							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  12ab							; Prepare for Main Gameplay Kernel
    313  12ab							;
    314  12ab							; Figure out how many rows to draw before and after the two cat rows
    315  12ab							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  12ab
    317  12ab
    318  12ab							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    319  12ab							; Finish Vertical Blanking
    320  12ab							;
    321  12ab							; Loop until the end of vertical blanking
    322  12ab							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    323  12ab
      0  12ab					      NEXT_PAGE
      1  12ab					      SUBROUTINE
      2  12ab
      3  12ab		       4c 00 13 	      jmp	.NextPage
      4  1300		       00 00 00 00*	      ALIGN	$100
      5  1300				   .NextPage
      6  1300
      0  1300					      TIMER_LOOP
      1  1300					      SUBROUTINE
      2  1300
      3  1300				   .TimerLoop
      4  1300		       ad 84 02 	      lda	INTIM
      5  1303		       d0 fb		      bne	.TimerLoop
      6  1305
------- FILE bank2.asm
------- FILE bank2/code/kernel.asm LEVEL 3 PASS 2
      0  1305					      include	bank2/code/kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       85 02		      sta	WSYNC
      0  1307					      SLEEP	3
      1  1307				   .CYCLES    SET	3
      2  1307
      3  1307				  -	      IF	.CYCLES < 2
      4  1307				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1307				  -	      ERR
      6  1307					      ENDIF
      7  1307
      8  1307					      IF	.CYCLES & 1
      9  1307					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1307		       04 00		      nop	0
     11  1309				  -	      ELSE
     12  1309				  -	      bit	VSYNC
     13  1309					      ENDIF
     14  1309				   .CYCLES    SET	.CYCLES - 3
     15  1309					      ENDIF
     16  1309
     17  1309				  -	      REPEAT	.CYCLES / 2
     18  1309				  -	      nop
     19  1309					      REPEND
      7  1309
      8  1309							; Include kernel routines
------- FILE bank2/code/kernel_score.asm LEVEL 4 PASS 2
      0  1309					      include	bank2/code/kernel_score.asm
      1  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1309							; Scoreboard Display
      3  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1309							; Draw the 6-digit score and level counter
      5  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1309
      7  1309					      SUBROUTINE
      8  1309
      9  1309		       a9 13		      lda	#$13
     10  130b		       85 04		      sta	NUSIZ0
     11  130d		       a9 20		      lda	#%00100000
     12  130f		       85 0d		      sta	PF0
     13  1311		       a9 35		      lda	#%00110101
     14  1313		       85 0a		      sta	CTRLPF
     15  1315
     16  1315		       a5 88		      lda	BCDLevel
     17  1317		       4a		      lsr
     18  1318		       4a		      lsr
     19  1319		       4a		      lsr
     20  131a		       85 1d		      sta	ENAM0
     21  131c		       85 1e		      sta	ENAM1
     22  131e
     23  131e		       a9 00		      lda	#0
     24  1320		       85 06		      sta	COLUP0
     25  1322		       85 07		      sta	COLUP1
     26  1324		       85 1b		      sta	GRP0
     27  1326
     28  1326		       a9 ff		      lda	#$FF
     29  1328		       85 1f		      sta	ENABL
     30  132a		       85 25		      sta	VDELP0
     31  132c		       85 26		      sta	VDELP1
     32  132e
     33  132e		       a9 08		      lda	#8
     34  1330		       8d 96 02 	      sta	TIM64T
     35  1333		       a0 05		      ldy	#5
     36  1335
     37  1335		       85 02		      sta	WSYNC
     38  1337
     39  1337				   ScoreboardLoop
     40  1337		       b9 50 1b 	      lda	LevelGfx,y	; 04
     41  133a		       8d 05 00 	      sta.w	NUSIZ1	; 08
     42  133d
     43  133d		       68		      pla		; 12
     44  133e		       85 1c		      sta	GRP1	; 15
     45  1340		       68		      pla		; 19
     46  1341		       85 1b		      sta	GRP0	; 22
     47  1343
     48  1343		       68		      pla		; 26
     49  1344		       85 1c		      sta	GRP1	; 29
     50  1346		       68		      pla		; 33
     51  1347		       85 1b		      sta	GRP0	; 36
     52  1349
     53  1349		       a9 03		      lda	#3	; 38
     54  134b		       85 05		      sta	NUSIZ1	; 41
     55  134d
     56  134d		       68		      pla		; 45
     57  134e		       aa		      tax		; 47
     58  134f		       68		      pla		; 51
     59  1350		       a8		      tay		; 53
     60  1351		       68		      pla		; 57
     61  1352
     62  1352		       86 1c		      stx	GRP1	; 60
     63  1354		       84 1b		      sty	GRP0	; 63
     64  1356		       85 1c		      sta	GRP1	; 66
     65  1358		       85 1b		      sta	GRP0	; 69
     66  135a
     67  135a		       ac 84 02 	      ldy	INTIM	; 73
     68  135d		       10 d8		      bpl	ScoreboardLoop	; 00/75
     69  135f
     70  135f		       a9 00		      lda	#0	; 01
     71  1361		       85 1b		      sta	GRP0	; 04
     72  1363		       85 1c		      sta	GRP1	; 07
     73  1365		       85 26		      sta	VDELP1	; 10
     74  1367		       85 25		      sta	VDELP0	; 13
     75  1369		       85 1f		      sta	ENABL	; 16
     76  136b		       85 1d		      sta	ENAM0	; 19
     77  136d		       85 1e		      sta	ENAM1	; 22
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_gameplay.asm LEVEL 4 PASS 2
      0  136f					      include	bank2/code/kernel_gameplay.asm
      1  136f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  136f							; Output 4 blank scanlines, while setting up the graphics objects.
      3  136f							; CPU is at cycle 33
      4  136f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  136f
      6  136f							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  136f		       a2 ff		      ldx	#$FF
      8  1371		       9a		      txs
      9  1372
     10  1372		       a0 11		      ldy	#17
     11  1374				   .ClearRainbow
     12  1374		       48		      pha
     13  1375		       48		      pha
     14  1376		       88		      dey
     15  1377		       d0 fb		      bne	.ClearRainbow
     16  1379
     17  1379							; Load rainbow colors into RAM - 65 cycles
     18  1379		       a9 14		      lda	#20
     19  137b		       e5 9e		      sbc	CatPosition	; carry is assumed to be set
     20  137d		       29 1f		      and	#%00011111
     21  137f		       18		      clc
     22  1380		       69 eb		      adc	#RamBowColors+13
     23  1382		       aa		      tax
     24  1383		       9a		      txs
     25  1384
     26  1384		       a0 05		      ldy	#5
     27  1386				   .LoadRainbow
     28  1386		       b9 00 1e 	      lda	RainbowColors,y
     29  1389		       48		      pha
     30  138a		       48		      pha
     31  138b		       88		      dey
     32  138c		       10 f8		      bpl	.LoadRainbow
     33  138e
     34  138e		       a9 00		      lda	#ONE_COPY
     35  1390		       85 04		      sta	NUSIZ0
     36  1392		       a9 04		      lda	#TWO_WIDE
     37  1394		       85 05		      sta	NUSIZ1
     38  1396		       a9 06		      lda	#6
     39  1398		       85 c6		      sta	CurrentRow
     40  139a		       85 02		      sta	WSYNC
     41  139c
     42  139c		       a5 9b		      lda	ScoreColor
     43  139e		       85 09		      sta	COLUBK
     44  13a0		       a2 dd		      ldx	#GAMEPLAY_STACK
     45  13a2		       9a		      txs
     46  13a3		       20 50 14 	      jsr	SetFoodPosition
     47  13a6		       85 02		      sta	WSYNC
     48  13a8
      0  13a8					      NEXT_PAGE
      1  13a8					      SUBROUTINE
      2  13a8
      3  13a8		       4c 00 14 	      jmp	.NextPage
      4  1400		       00 00 00 00*	      ALIGN	$100
      5  1400				   .NextPage
      6  1400
     50  1400
     51  1400				   PreKernel
     52  1400		       85 02		      sta	WSYNC
     53  1402
     54  1402		       a5 f1		      lda	RamBowColors+19
     55  1404		       d0 02		      bne	.SetCatThrobPF
     56  1406		       a5 c0		      lda	ThrobColor+0
     57  1408				   .SetCatThrobPF
     58  1408		       85 c3		      sta	CatThrobPF
     59  140a		       85 02		      sta	WSYNC
     60  140c
      0  140c					      SLEEP	2
      1  140c				   .CYCLES    SET	2
      2  140c
      3  140c				  -	      IF	.CYCLES < 2
      4  140c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  140c				  -	      ERR
      6  140c					      ENDIF
      7  140c
      8  140c				  -	      IF	.CYCLES & 1
      9  140c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  140c				  -	      nop	0
     11  140c				  -	      ELSE
     12  140c				  -	      bit	VSYNC
     13  140c				  -	      ENDIF
     14  140c				  -.CYCLES    SET	.CYCLES - 3
     15  140c					      ENDIF
     16  140c
     17  140c					      REPEAT	.CYCLES / 2
     18  140c		       ea		      nop
     19  140d					      REPEND
     62  140d		       a9 90		      lda	#$90	; 04
     63  140f		       85 20		      sta	HMP0	; 07
     64  1411		       a9 01		      lda	#PF_REFLECT	; 09
     65  1413		       85 0a		      sta	CTRLPF	; 12
     66  1415		       a5 a0		      lda	Rainbow	; 15
     67  1417		       85 0d		      sta	PF0	; 18
     68  1419		       a9 08		      lda	#COL_CAT_FACE	; 20
     69  141b		       85 06		      sta	COLUP0	; 23
     70  141d
     71  141d		       a5 a8		      lda	FoodItemL+6	; 26
     72  141f		       85 10		      sta	RESP0	; 29
     73  1421		       29 f0		      and	#$F0	; 31
     74  1423		       85 8d		      sta	FoodGfxPtr1	; 34
     75  1425		       aa		      tax		; 36
     76  1426		       bd 0f 1d 	      lda	FoodGfx+15,x	; 40
     77  1429		       85 c7		      sta	FoodColor1	; 43
     78  142b
     79  142b		       a5 af		      lda	FoodItemR+6	; 46
     80  142d		       29 f0		      and	#$F0	; 48
     81  142f		       85 8f		      sta	FoodGfxPtr2	; 51
     82  1431		       aa		      tax		; 53
     83  1432		       bd 0f 1d 	      lda	FoodGfx+15,x	; 57
     84  1435		       85 c8		      sta	FoodColor2	; 60
     85  1437
     86  1437		       a5 b6		      lda	FoodPosX+6	; 63
     87  1439		       85 c4		      sta	Temp	; 66
      0  143b					      SLEEP	4	; 70
      1  143b				   .CYCLES    SET	4
      2  143b
      3  143b				  -	      IF	.CYCLES < 2
      4  143b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  143b				  -	      ERR
      6  143b					      ENDIF
      7  143b
      8  143b				  -	      IF	.CYCLES & 1
      9  143b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  143b				  -	      nop	0
     11  143b				  -	      ELSE
     12  143b				  -	      bit	VSYNC
     13  143b				  -	      ENDIF
     14  143b				  -.CYCLES    SET	.CYCLES - 3
     15  143b					      ENDIF
     16  143b
     17  143b					      REPEAT	.CYCLES / 2
     18  143b		       ea		      nop
     17  143b					      REPEND
     18  143c		       ea		      nop
     19  143d					      REPEND
     89  143d		       85 2a		      sta	HMOVE	; 73
     90  143f
     91  143f		       a5 c1		      lda	ThrobColor+1	; 03
     92  1441		       85 09		      sta	COLUBK	; 06
     93  1443		       85 08		      sta	COLUPF	; 09
     94  1445		       a9 80		      lda	#$80	; 11
     95  1447		       85 20		      sta	HMP0	; 14
     96  1449
     97  1449		       a5 a1		      lda	PreCatRows
     98  144b		       d0 22		      bne	HiRows
     99  144d		       4c d4 14 	      jmp	CatRows
    100  1450
    101  1450							; If any part of the cat needs to be drawn in the top row,
    102  1450							; skip straight to CatRows.
    103  1450
------- FILE bank2/code/kernel_hi_rows.asm LEVEL 5 PASS 2
      0  1450					      include	bank2/code/kernel_hi_rows.asm
      1  1450							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1450							; Draw all the rows above the cat's two rows
      3  1450							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1450
------- FILE bank2/subroutines/set_food_pos.asm LEVEL 6 PASS 2
      0  1450					      include	bank2/subroutines/set_food_pos.asm
      1  1450				   SetFoodPosition
      2  1450
      3  1450		       85 02		      sta	WSYNC	; 00
      4  1452
      5  1452		       85 09		      sta	COLUBK	; 03
      6  1454		       85 08		      sta	COLUPF	; 06
      7  1456
      0  1456					      SLEEP	4	; 10
      1  1456				   .CYCLES    SET	4
      2  1456
      3  1456				  -	      IF	.CYCLES < 2
      4  1456				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1456				  -	      ERR
      6  1456					      ENDIF
      7  1456
      8  1456				  -	      IF	.CYCLES & 1
      9  1456				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1456				  -	      nop	0
     11  1456				  -	      ELSE
     12  1456				  -	      bit	VSYNC
     13  1456				  -	      ENDIF
     14  1456				  -.CYCLES    SET	.CYCLES - 3
     15  1456					      ENDIF
     16  1456
     17  1456					      REPEAT	.CYCLES / 2
     18  1456		       ea		      nop
     17  1456					      REPEND
     18  1457		       ea		      nop
     19  1458					      REPEND
      9  1458
     10  1458		       a4 c6		      ldy	CurrentRow	; 13
     11  145a		       b9 b0 00 	      lda	FoodPosX,y	; 17
     12  145d
     13  145d		       38		      sec		; 19
     14  145e				   .DivideLoop
     15  145e		       e9 0f		      sbc	#15	; 21
     16  1460		       b0 fc		      bcs	.DivideLoop	; 23
     17  1462
     18  1462		       85 11		      sta	RESP1	; 26
     19  1464
     20  1464		       49 07		      eor	#7
     21  1466		       69 01		      adc	#1
     22  1468		       0a		      asl
     23  1469		       0a		      asl
     24  146a		       0a		      asl
     25  146b		       0a		      asl
     26  146c		       85 21		      sta	HMP1	; 41/66
     27  146e
     28  146e		       60		      rts		; 47/72
------- FILE bank2/code/kernel_hi_rows.asm
      6  146f
      7  146f				   HiRows
      8  146f					      SUBROUTINE
      9  146f
     10  146f		       85 02		      sta	WSYNC
     11  1471		       a5 c0		      lda	ThrobColor+0
     12  1473		       85 09		      sta	COLUBK
     13  1475		       85 08		      sta	COLUPF
     14  1477
     15  1477							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1477							; This will probably be a good time to prepare the pointers for the
     17  1477							; food items' graphics, as well as loading the colors for the food items.
     18  1477
     19  1477							; After that, output 14 lines to draw a single row with food items,
     20  1477							; but without drawing the cat. The food graphics will be updated every line,
     21  1477							; but there will probably not be enough time to also update the food colors
     22  1477							; every line throughout the kernel.
     23  1477
     24  1477		       20 00 18 	      jsr	DrawFoodRow
     25  147a		       c6 c6		      dec	CurrentRow	; 73
     26  147c		       85 02		      sta	WSYNC
     27  147e
     28  147e							; Lastly, output four single-color lines to draw most of a "throb" line,
     29  147e							; while setting the position of player 1 to draw the next set of food items.
     30  147e
     31  147e		       a5 c0		      lda	ThrobColor+0
     32  1480		       85 09		      sta	COLUBK
     33  1482		       85 08		      sta	COLUPF
     34  1484		       a9 00		      lda	#0
     35  1486		       85 1b		      sta	GRP0
     36  1488		       85 1c		      sta	GRP1
     37  148a		       a5 c1		      lda	ThrobColor+1
     38  148c		       20 50 14 	      jsr	SetFoodPosition
     39  148f		       85 02		      sta	WSYNC
     40  1491
     41  1491		       a5 c2		      lda	ThrobColor+2	; 03
     42  1493		       85 09		      sta	COLUBK	; 06
     43  1495		       85 08		      sta	COLUPF	; 09
     44  1497		       20 24 18 	      jsr	Sleep12
     45  149a		       20 24 18 	      jsr	Sleep12
     46  149d		       20 24 18 	      jsr	Sleep12
     47  14a0		       20 24 18 	      jsr	Sleep12
     48  14a3		       20 24 18 	      jsr	Sleep12	; 69
     49  14a6		       8d 2a 00 	      sta.w	HMOVE	; 73
     50  14a9		       85 02		      sta	WSYNC
     51  14ab
     52  14ab		       a5 c1		      lda	ThrobColor+1	; 03
     53  14ad		       85 09		      sta	COLUBK	; 06
     54  14af		       85 08		      sta	COLUPF	; 09
     55  14b1
     56  14b1		       b9 a2 00 	      lda	FoodItemL,y	; 13
     57  14b4		       29 f0		      and	#$F0	; 15
     58  14b6		       85 8d		      sta	FoodGfxPtr1	; 18
     59  14b8		       aa		      tax		; 20
     60  14b9		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     61  14bc		       85 c7		      sta	FoodColor1	; 27
     62  14be
     63  14be		       b9 a9 00 	      lda	FoodItemR,y	; 31
     64  14c1		       29 f0		      and	#$F0	; 33
     65  14c3		       85 8f		      sta	FoodGfxPtr2	; 36
     66  14c5		       aa		      tax		; 38
     67  14c6		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     68  14c9		       85 c8		      sta	FoodColor2	; 45
     69  14cb
     70  14cb		       b9 b0 00 	      lda	FoodPosX,y	; 49
     71  14ce		       85 c4		      sta	Temp	; 52
     72  14d0		       c6 a1		      dec	PreCatRows
     73  14d2		       d0 9b		      bne	HiRows
     74  14d4
     75  14d4							; If this is not the last row before drawing the cat's rows,
     76  14d4							; loop back to HiRows to draw the next row.
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_cat_rows.asm LEVEL 5 PASS 2
      0  14d4					      include	bank2/code/kernel_cat_rows.asm
      1  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14d4							; Cat Row Kernel
      3  14d4							;
      4  14d4							; This is the kernel that is used to draw the two rows containing the cat.
      5  14d4							; It also draw the throbbing line between the cat's rows.
      6  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  14d4
      8  14d4				   CatRows
      9  14d4					      SUBROUTINE
     10  14d4
     11  14d4		       85 02		      sta	WSYNC
     12  14d6
     13  14d6							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     14  14d6		       a6 c0		      ldx	ThrobColor+0	; 03
     15  14d8		       86 09		      stx	COLUBK	; 06
     16  14da		       86 08		      stx	COLUPF	; 09
     17  14dc		       a0 0d		      ldy	#13	; 11
     18  14de		       b1 91		      lda	(TartGfxPtr1),y	; 16
     19  14e0		       85 0e		      sta	PF1	; 19
      0  14e2					      SLEEP	3	; 22
      1  14e2				   .CYCLES    SET	3
      2  14e2
      3  14e2				  -	      IF	.CYCLES < 2
      4  14e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14e2				  -	      ERR
      6  14e2					      ENDIF
      7  14e2
      8  14e2					      IF	.CYCLES & 1
      9  14e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14e2		       04 00		      nop	0
     11  14e4				  -	      ELSE
     12  14e4				  -	      bit	VSYNC
     13  14e4					      ENDIF
     14  14e4				   .CYCLES    SET	.CYCLES - 3
     15  14e4					      ENDIF
     16  14e4
     17  14e4				  -	      REPEAT	.CYCLES / 2
     18  14e4				  -	      nop
     19  14e4					      REPEND
     21  14e4		       a5 8b		      lda	CatTartColor	; 25
     22  14e6		       85 08		      sta	COLUPF	; 28
      0  14e8					      SLEEP	2	; 30
      1  14e8				   .CYCLES    SET	2
      2  14e8
      3  14e8				  -	      IF	.CYCLES < 2
      4  14e8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14e8				  -	      ERR
      6  14e8					      ENDIF
      7  14e8
      8  14e8				  -	      IF	.CYCLES & 1
      9  14e8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  14e8				  -	      nop	0
     11  14e8				  -	      ELSE
     12  14e8				  -	      bit	VSYNC
     13  14e8				  -	      ENDIF
     14  14e8				  -.CYCLES    SET	.CYCLES - 3
     15  14e8					      ENDIF
     16  14e8
     17  14e8					      REPEAT	.CYCLES / 2
     18  14e8		       ea		      nop
     19  14e9					      REPEND
     24  14e9		       86 08		      stx	COLUPF	; 33
     25  14eb
     26  14eb					      SUBROUTINE
     27  14eb
     28  14eb		       a6 c6		      ldx	CurrentRow	; 36
     29  14ed		       b5 b0		      lda	FoodPosX,x	; 40
     30  14ef
      0  14ef					      NEXT_PAGE
      1  14ef					      SUBROUTINE
      2  14ef
      3  14ef		       4c 00 15 	      jmp	.NextPage
      4  1500		       00 00 00 00*	      ALIGN	$100
      5  1500				   .NextPage
      6  1500
     32  1500
      0  1500					      SLEEP	5	; 48
      1  1500				   .CYCLES    SET	5
      2  1500
      3  1500				  -	      IF	.CYCLES < 2
      4  1500				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1500				  -	      ERR
      6  1500					      ENDIF
      7  1500
      8  1500					      IF	.CYCLES & 1
      9  1500					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1500		       04 00		      nop	0
     11  1502				  -	      ELSE
     12  1502				  -	      bit	VSYNC
     13  1502					      ENDIF
     14  1502				   .CYCLES    SET	.CYCLES - 3
     15  1502					      ENDIF
     16  1502
     17  1502					      REPEAT	.CYCLES / 2
     18  1502		       ea		      nop
     19  1503					      REPEND
     34  1503		       a6 c8		      ldx	FoodColor2	; 51
     35  1505		       9a		      txs		; 53
     36  1506		       c9 30		      cmp	#48	; 55
     37  1508		       a2 00		      ldx	#0	; 57
     38  150a
     39  150a							; Then output the 14 lines to draw a single row. This will include drawing
     40  150a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  150a							; All graphics will be updated every line.
     42  150a
     43  150a		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  150c		       90 42		      bcc	.LeftEntrance	; 62
     45  150e
     46  150e							; 14 bytes into the page
     47  150e
     48  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  150e							; Kernel used when food items are closer to the right edge of the screen
     50  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  150e
     52  150e				   .RightLoop
     53  150e							; 8 cycles
     54  150e		       b1 93		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     55  1510		       85 1b		      sta	GRP0	; 52
     56  1512
     57  1512							; 9 cycles
     58  1512		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     59  1514		       ba		      tsx		; 57 - load 2nd food item's color
     60  1515		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     61  1517
     62  1517				   .RightEntrance		; enter loop here
     63  1517							; 2 cycles
     64  1517		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     65  1519
     66  1519							; 8 cycles
     67  1519		       b1 91		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     68  151b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     69  151d
     70  151d							; 8 cycles
     71  151d		       b1 8d		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     72  151f		       85 1c		      sta	GRP1	; 02
     73  1521
     74  1521							; 7 cycles
     75  1521		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     76  1524		       85 09		      sta	COLUBK	; 09
     77  1526
     78  1526							; 7 cycles
     79  1526		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     80  1529		       85 08		      sta	COLUPF	; 16
     81  152b
     82  152b							; 6 cycles
     83  152b		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
     84  152d		       85 07		      sta	COLUP1	; 22
     85  152f
     86  152f							; 8 cycles
     87  152f		       a5 8b		      lda	CatTartColor	; 25
     88  1531		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     89  1533		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     90  1535		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     91  1537
     92  1537							; 5 cycles
     93  1537		       b3 8f		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     94  1539
     95  1539							; 2 cycles
     96  1539		       88		      dey		; 41
     97  153a		       10 d2		      bpl	.RightLoop	; 44/43
     98  153c
     99  153c		       a0 12		      ldy	#18	; 45
    100  153e		       b1 95		      lda	(TartGfxPtr2),y	; 50
      0  1540					      SLEEP	2	; 52
      1  1540				   .CYCLES    SET	2
      2  1540
      3  1540				  -	      IF	.CYCLES < 2
      4  1540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1540				  -	      ERR
      6  1540					      ENDIF
      7  1540
      8  1540				  -	      IF	.CYCLES & 1
      9  1540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1540				  -	      nop	0
     11  1540				  -	      ELSE
     12  1540				  -	      bit	VSYNC
     13  1540				  -	      ENDIF
     14  1540				  -.CYCLES    SET	.CYCLES - 3
     15  1540					      ENDIF
     16  1540
     17  1540					      REPEAT	.CYCLES / 2
     18  1540		       ea		      nop
     19  1541					      REPEND
    102  1541		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    103  1543		       ba		      tsx		; 57 - load 2nd food item's color
    104  1544		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    105  1546		       b0 38		      bcs	.End	; 63
    106  1548
    107  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108  1548							; Kernel used when food items are closer to the left edge of the screen
    109  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    110  1548
    111  1548				   .LeftLoop
    112  1548							; 8 cycles
    113  1548		       b1 93		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    114  154a		       85 1b		      sta	GRP0	; 57
    115  154c
    116  154c							; 5 cycles
    117  154c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    118  154e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    119  1550
    120  1550				   .LeftEntrance		; enter loop here
    121  1550							; 8 cycles
    122  1550		       b1 91		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    123  1552		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    124  1554
    125  1554							; 8 cycles
    126  1554		       b1 8d		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    127  1556		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    128  1558
    129  1558							; 7 cycles
    130  1558		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    131  155b		       85 09		      sta	COLUBK	; 09
    132  155d
    133  155d							; 7 cycles
    134  155d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    135  1560		       85 08		      sta	COLUPF	; 16
    136  1562
    137  1562							; 6 cycles
    138  1562		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    139  1564		       85 07		      sta	COLUP1	; 22
    140  1566
    141  1566							; 8 cycles
    142  1566		       a5 8b		      lda	CatTartColor	; 25
    143  1568		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    144  156a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    145  156c
    146  156c							; 13 cycles
    147  156c		       b1 8f		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    148  156e		       ba		      tsx		; 38 - load 2nd food item's color
    149  156f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    150  1571		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    151  1573
    152  1573							; 5 cycles
    153  1573		       88		      dey		; 46
    154  1574		       10 d2		      bpl	.LeftLoop	; 49/48
    155  1576
    156  1576		       a2 00		      ldx	#0	; 50
    157  1578		       86 08		      stx	COLUPF	; 53
    158  157a
    159  157a		       a0 12		      ldy	#18	; 55
    160  157c		       b1 95		      lda	(TartGfxPtr2),y	; 60
    161  157e
    162  157e		       86 1c		      stx	GRP1	; 63
    163  1580
    164  1580				   .End
    165  1580
    166  1580
    167  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1580							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    169  1580							; cat with the rainbow. In order to align player 1 for the next row's
    170  1580							; food items, it will be neccesary to have three versions of this kernel,
    171  1580							; one for each of the three 60-color-clock spaced positions to reset.
    172  1580							; HMOVE will be written to on the first four scanlines. With a maximum
    173  1580							; movement of 15 color-clocks per scanline, this will allow a movement of
    174  1580							; up to 60 color clocks. With three versions of the kernel, it should be
    175  1580							; possible to put player 1 anywhere on the screen.
    176  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    177  1580
    178  1580							; Draw throb line #1
    179  1580		       85 0e		      sta	PF1	; 66
    180  1582		       b1 97		      lda	(CatGfxPtr2),y	; 71
    181  1584		       85 1b		      sta	GRP0	; 74
    182  1586		       a6 c0		      ldx	ThrobColor+0	; 01
    183  1588
      0  1588					      THROB_RAINBOW_BK	18	; 12
      1  1588					      SUBROUTINE
      2  1588				   .X	      SET	18
      3  1588
      4  1588		       a5 f0		      lda	RamBowColors+.X
      5  158a		       d0 04		      bne	.Rainbow
      6  158c		       86 09		      stx	COLUBK
      7  158e		       f0 03		      beq	.End
      8  1590				   .Rainbow
      9  1590		       85 09		      sta	COLUBK
     10  1592		       ea		      nop
     11  1593				   .End
    185  1593
    186  1593		       a5 c3		      lda	CatThrobPF	; 15
    187  1595		       85 08		      sta	COLUPF	; 18
    188  1597		       8e 07 00 	      stx.w	COLUP1	; 22
    189  159a		       a5 8b		      lda	CatTartColor	; 25
    190  159c		       85 08		      sta	COLUPF	; 28
    191  159e		       86 09		      stx	COLUBK	; 31
    192  15a0		       88		      dey		; 33
    193  15a1		       85 11		      sta	RESP1	; 36
    194  15a3		       86 08		      stx	COLUPF	; 39
    195  15a5		       b1 97		      lda	(CatGfxPtr2),y	; 44
    196  15a7		       85 1b		      sta	GRP0	; 47
    197  15a9		       b1 95		      lda	(TartGfxPtr2),y	; 52
    198  15ab		       85 0e		      sta	PF1	; 55
    199  15ad		       c6 c6		      dec	CurrentRow	; 60
    200  15af		       a2 00		      ldx	#0	; 62
    201  15b1		       86 1c		      stx	GRP1	; 65
    202  15b3
    203  15b3							; Draw throb line #2
    204  15b3		       a5 bb		      lda	CatRowHmove+2	; 68
    205  15b5		       85 21		      sta	HMP1	; 71
      0  15b7					      SLEEP	2	; 73
      1  15b7				   .CYCLES    SET	2
      2  15b7
      3  15b7				  -	      IF	.CYCLES < 2
      4  15b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b7				  -	      ERR
      6  15b7					      ENDIF
      7  15b7
      8  15b7				  -	      IF	.CYCLES & 1
      9  15b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b7				  -	      nop	0
     11  15b7				  -	      ELSE
     12  15b7				  -	      bit	VSYNC
     13  15b7				  -	      ENDIF
     14  15b7				  -.CYCLES    SET	.CYCLES - 3
     15  15b7					      ENDIF
     16  15b7
     17  15b7					      REPEAT	.CYCLES / 2
     18  15b7		       ea		      nop
     19  15b8					      REPEND
    207  15b8		       a6 c1		      ldx	ThrobColor+1	; 00
      0  15ba					      THROB_RAINBOW_BK	17	; 11
      1  15ba					      SUBROUTINE
      2  15ba				   .X	      SET	17
      3  15ba
      4  15ba		       a5 ef		      lda	RamBowColors+.X
      5  15bc		       d0 04		      bne	.Rainbow
      6  15be		       86 09		      stx	COLUBK
      7  15c0		       f0 03		      beq	.End
      8  15c2				   .Rainbow
      9  15c2		       85 09		      sta	COLUBK
     10  15c4		       ea		      nop
     11  15c5				   .End
      0  15c5					      THROB_RAINBOW_PF	18	; 22
      1  15c5					      SUBROUTINE
      2  15c5				   .X	      SET	18
      3  15c5
      4  15c5		       a5 f0		      lda	RamBowColors+.X
      5  15c7		       d0 04		      bne	.Rainbow
      6  15c9		       86 08		      stx	COLUPF
      7  15cb		       f0 03		      beq	.End
      8  15cd				   .Rainbow
      9  15cd		       85 08		      sta	COLUPF
     10  15cf		       ea		      nop
     11  15d0				   .End
    210  15d0		       a5 8b		      lda	CatTartColor	; 25
    211  15d2		       85 08		      sta	COLUPF	; 28
    212  15d4		       86 09		      stx	COLUBK	; 31
    213  15d6		       86 08		      stx	COLUPF	; 34
    214  15d8		       88		      dey		; 36
    215  15d9		       a6 c6		      ldx	CurrentRow	; 39
    216  15db		       b5 b0		      lda	FoodPosX,x	; 43
    217  15dd		       c9 2d		      cmp	#45	; 45
    218  15df		       10 01		      bpl	.RightSide	; 48/47
      0  15e1					      SKIP_WORD		; 51
      1  15e1		       0c		      HEX	0C
    220  15e2				   .RightSide
    221  15e2		       85 11		      sta	RESP1	; 51
    222  15e4		       b1 97		      lda	(CatGfxPtr2),y	; 56
    223  15e6		       85 1b		      sta	GRP0	; 59
    224  15e8		       b1 95		      lda	(TartGfxPtr2),y	; 64
    225  15ea		       85 0e		      sta	PF1	; 67
      0  15ec					      SLEEP	3	; 70
      1  15ec				   .CYCLES    SET	3
      2  15ec
      3  15ec				  -	      IF	.CYCLES < 2
      4  15ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ec				  -	      ERR
      6  15ec					      ENDIF
      7  15ec
      8  15ec					      IF	.CYCLES & 1
      9  15ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ec		       04 00		      nop	0
     11  15ee				  -	      ELSE
     12  15ee				  -	      bit	VSYNC
     13  15ee					      ENDIF
     14  15ee				   .CYCLES    SET	.CYCLES - 3
     15  15ee					      ENDIF
     16  15ee
     17  15ee				  -	      REPEAT	.CYCLES / 2
     18  15ee				  -	      nop
     19  15ee					      REPEND
    227  15ee		       85 2a		      sta	HMOVE	; 73
    228  15f0
    229  15f0							; Draw throb line #3
    230  15f0		       a6 c2		      ldx	ThrobColor+2	; 00
      0  15f2					      THROB_RAINBOW_BK	16	; 11
      1  15f2					      SUBROUTINE
      2  15f2				   .X	      SET	16
      3  15f2
      4  15f2		       a5 ee		      lda	RamBowColors+.X
      5  15f4		       d0 04		      bne	.Rainbow
      6  15f6		       86 09		      stx	COLUBK
      7  15f8		       f0 03		      beq	.End
      8  15fa				   .Rainbow
      9  15fa		       85 09		      sta	COLUBK
     10  15fc		       ea		      nop
     11  15fd				   .End
      0  15fd					      THROB_RAINBOW_PF	17	; 22
      1  15fd					      SUBROUTINE
      2  15fd				   .X	      SET	17
      3  15fd
      4  15fd		       a5 ef		      lda	RamBowColors+.X
      5  15ff		       d0 04		      bne	.Rainbow
      6  1601		       86 08		      stx	COLUPF
      7  1603		       f0 03		      beq	.End
      8  1605				   .Rainbow
      9  1605		       85 08		      sta	COLUPF
     10  1607		       ea		      nop
     11  1608				   .End
    233  1608		       a5 8b		      lda	CatTartColor	; 25
    234  160a		       85 08		      sta	COLUPF	; 28
    235  160c		       86 09		      stx	COLUBK	; 31
    236  160e		       86 08		      stx	COLUPF	; 34
    237  1610		       88		      dey		; 36
    238  1611		       b1 97		      lda	(CatGfxPtr2),y	; 41
    239  1613		       85 1b		      sta	GRP0	; 44
    240  1615		       b1 95		      lda	(TartGfxPtr2),y	; 49
    241  1617		       85 0e		      sta	PF1	; 52
    242  1619		       a5 bc		      lda	CatRow2FoodL	; 55
    243  161b		       85 8d		      sta	FoodGfxPtr1	; 58
    244  161d		       a5 bd		      lda	CatRow2FoodR	; 61
    245  161f		       85 8f		      sta	FoodGfxPtr2	; 64
    246  1621		       a5 ba		      lda	CatRowHmove+1	; 67
    247  1623		       85 21		      sta	HMP1	; 70
    248  1625		       85 2a		      sta	HMOVE	; 73
    249  1627
    250  1627							; Draw throb line #4
    251  1627		       a6 c1		      ldx	ThrobColor+1	; 00
      0  1629					      THROB_RAINBOW_BK	15	; 11
      1  1629					      SUBROUTINE
      2  1629				   .X	      SET	15
      3  1629
      4  1629		       a5 ed		      lda	RamBowColors+.X
      5  162b		       d0 04		      bne	.Rainbow
      6  162d		       86 09		      stx	COLUBK
      7  162f		       f0 03		      beq	.End
      8  1631				   .Rainbow
      9  1631		       85 09		      sta	COLUBK
     10  1633		       ea		      nop
     11  1634				   .End
      0  1634					      THROB_RAINBOW_PF	16	; 22
      1  1634					      SUBROUTINE
      2  1634				   .X	      SET	16
      3  1634
      4  1634		       a5 ee		      lda	RamBowColors+.X
      5  1636		       d0 04		      bne	.Rainbow
      6  1638		       86 08		      stx	COLUPF
      7  163a		       f0 03		      beq	.End
      8  163c				   .Rainbow
      9  163c		       85 08		      sta	COLUPF
     10  163e		       ea		      nop
     11  163f				   .End
    254  163f		       a5 8b		      lda	CatTartColor	; 25
    255  1641		       85 08		      sta	COLUPF	; 28
    256  1643		       86 09		      stx	COLUBK	; 31
    257  1645		       86 08		      stx	COLUPF	; 34
    258  1647		       88		      dey		; 36
    259  1648		       b1 97		      lda	(CatGfxPtr2),y	; 41
    260  164a		       85 1b		      sta	GRP0	; 44
    261  164c		       b1 95		      lda	(TartGfxPtr2),y	; 49
    262  164e		       85 0e		      sta	PF1	; 52
    263  1650		       a5 be		      lda	CatRow2Color1	; 55
    264  1652		       85 c7		      sta	FoodColor1	; 58
    265  1654		       ae bf 00 	      ldx.w	CatRow2Color2	; 55
    266  1657		       9a		      txs		; 58
    267  1658		       a5 b9		      lda	CatRowHmove+0	; 67
    268  165a		       85 21		      sta	HMP1	; 70
    269  165c		       85 2a		      sta	HMOVE	; 73
    270  165e
    271  165e							; Draw throb line #5
    272  165e					      SUBROUTINE
    273  165e
    274  165e		       a6 c0		      ldx	ThrobColor+0	; 00
      0  1660					      THROB_RAINBOW_BK	14	; 11
      1  1660					      SUBROUTINE
      2  1660				   .X	      SET	14
      3  1660
      4  1660		       a5 ec		      lda	RamBowColors+.X
      5  1662		       d0 04		      bne	.Rainbow
      6  1664		       86 09		      stx	COLUBK
      7  1666		       f0 03		      beq	.End
      8  1668				   .Rainbow
      9  1668		       85 09		      sta	COLUBK
     10  166a		       ea		      nop
     11  166b				   .End
      0  166b					      THROB_RAINBOW_PF	15	; 22
      1  166b					      SUBROUTINE
      2  166b				   .X	      SET	15
      3  166b
      4  166b		       a5 ed		      lda	RamBowColors+.X
      5  166d		       d0 04		      bne	.Rainbow
      6  166f		       86 08		      stx	COLUPF
      7  1671		       f0 03		      beq	.End
      8  1673				   .Rainbow
      9  1673		       85 08		      sta	COLUPF
     10  1675		       ea		      nop
     11  1676				   .End
    277  1676		       a5 8b		      lda	CatTartColor	; 25
    278  1678		       85 08		      sta	COLUPF	; 28
    279  167a		       86 09		      stx	COLUBK	; 31
    280  167c		       86 08		      stx	COLUPF	; 34
    281  167e		       88		      dey		; 36
    282  167f		       b1 97		      lda	(CatGfxPtr2),y	; 41
    283  1681		       85 1b		      sta	GRP0	; 44
    284  1683		       a6 c6		      ldx	CurrentRow	; 47
    285  1685		       b5 b0		      lda	FoodPosX,x	; 51
    286  1687		       c9 30		      cmp	#48	; 53
    287  1689		       a2 00		      ldx	#0	; 55
    288  168b		       ea		      nop		; 57
    289  168c
    290  168c							; Then output the 14 lines to draw a single row. This will include drawing
    291  168c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    292  168c							; All graphics will be updated every line.
    293  168c
    294  168c		       b0 0b		      bcs	.RightEntrance	; 60/59
    295  168e		       90 42		      bcc	.LeftEntrance	; 62
    296  1690
    297  1690							; 14 bytes into the page
    298  1690
    299  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    300  1690							; Kernel used when food items are closer to the right edge of the screen
    301  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  1690
    303  1690				   .RightLoop
    304  1690							; 8 cycles
    305  1690		       b1 97		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    306  1692		       85 1b		      sta	GRP0	; 52
    307  1694
    308  1694							; 9 cycles
    309  1694		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    310  1696		       ba		      tsx		; 57 - load 2nd food item's color
    311  1697		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    312  1699
    313  1699				   .RightEntrance		; enter loop here
    314  1699							; 2 cycles
    315  1699		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    316  169b
    317  169b							; 8 cycles
    318  169b		       b1 95		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    319  169d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    320  169f
    321  169f							; 8 cycles
    322  169f		       b1 8d		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    323  16a1		       85 1c		      sta	GRP1	; 02
    324  16a3
    325  16a3							; 7 cycles
    326  16a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    327  16a6		       85 09		      sta	COLUBK	; 09
    328  16a8
    329  16a8							; 7 cycles
    330  16a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    331  16ab		       85 08		      sta	COLUPF	; 16
    332  16ad
    333  16ad							; 6 cycles
    334  16ad		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    335  16af		       85 07		      sta	COLUP1	; 22
    336  16b1
    337  16b1							; 8 cycles
    338  16b1		       a5 8b		      lda	CatTartColor	; 25
    339  16b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    340  16b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    341  16b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    342  16b9
    343  16b9							; 5 cycles
    344  16b9		       b3 8f		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    345  16bb
    346  16bb							; 2 cycles
    347  16bb		       88		      dey		; 41
    348  16bc		       10 d2		      bpl	.RightLoop	; 44/43
    349  16be
    350  16be		       a0 12		      ldy	#18	; 45
    351  16c0		       b1 95		      lda	(TartGfxPtr2),y	; 50
      0  16c2					      SLEEP	2	; 52
      1  16c2				   .CYCLES    SET	2
      2  16c2
      3  16c2				  -	      IF	.CYCLES < 2
      4  16c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c2				  -	      ERR
      6  16c2					      ENDIF
      7  16c2
      8  16c2				  -	      IF	.CYCLES & 1
      9  16c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c2				  -	      nop	0
     11  16c2				  -	      ELSE
     12  16c2				  -	      bit	VSYNC
     13  16c2				  -	      ENDIF
     14  16c2				  -.CYCLES    SET	.CYCLES - 3
     15  16c2					      ENDIF
     16  16c2
     17  16c2					      REPEAT	.CYCLES / 2
     18  16c2		       ea		      nop
     19  16c3					      REPEND
    353  16c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    354  16c5		       ba		      tsx		; 57 - load 2nd food item's color
    355  16c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    356  16c8		       b0 36		      bcs	.End	; 63
    357  16ca
    358  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    359  16ca							; Kernel used when food items are closer to the left edge of the screen
    360  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  16ca
    362  16ca				   .LeftLoop
    363  16ca							; 8 cycles
    364  16ca		       b1 97		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    365  16cc		       85 1b		      sta	GRP0	; 57
    366  16ce
    367  16ce							; 5 cycles
    368  16ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    369  16d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    370  16d2
    371  16d2							; enter loop here
    372  16d2				   .LeftEntrance
    373  16d2							; 8 cycles
    374  16d2		       b1 95		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    375  16d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    376  16d6
    377  16d6							; 8 cycles
    378  16d6		       b1 8d		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    379  16d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    380  16da
    381  16da							; 7 cycles
    382  16da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    383  16dd		       85 09		      sta	COLUBK	; 09
    384  16df
    385  16df							; 7 cycles
    386  16df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    387  16e2		       85 08		      sta	COLUPF	; 16
    388  16e4
    389  16e4							; 6 cycles
    390  16e4		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    391  16e6		       85 07		      sta	COLUP1	; 22
    392  16e8
    393  16e8							; 8 cycles
    394  16e8		       a5 8b		      lda	CatTartColor	; 25
    395  16ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    396  16ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    397  16ee
    398  16ee							; 13 cycles
    399  16ee		       b1 8f		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    400  16f0		       ba		      tsx		; 38 - load 2nd food item's color
    401  16f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    402  16f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    403  16f5
    404  16f5							; 5 cycles
    405  16f5		       88		      dey		; 46
    406  16f6		       10 d2		      bpl	.LeftLoop	; 49/48
    407  16f8
    408  16f8		       a2 00		      ldx	#0	; 50
    409  16fa		       86 08		      stx	COLUPF	; 53
    410  16fc
    411  16fc		       a0 12		      ldy	#18	; 55
    412  16fe		       b1 95		      lda	(TartGfxPtr2),y	; 60
    413  1700				   .End
    414  1700
    415  1700		       a2 ff		      ldx	#$FF	; 65
    416  1702		       9a		      txs		; 67
    417  1703		       a2 00		      ldx	#0
    418  1705
    419  1705							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    420  1705							; Use this time to prepare the next row's food item pointers (unless this is
    421  1705							; the last row). If this is the last row, skip over LoRows.
    422  1705
    423  1705		       85 02		      sta	WSYNC
    424  1707		       a5 c0		      lda	ThrobColor+0
    425  1709		       85 09		      sta	COLUBK
    426  170b		       85 08		      sta	COLUPF
    427  170d		       86 1c		      stx	GRP1
      0  170f					      SLEEP	18
      1  170f				   .CYCLES    SET	18
      2  170f
      3  170f				  -	      IF	.CYCLES < 2
      4  170f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  170f				  -	      ERR
      6  170f					      ENDIF
      7  170f
      8  170f				  -	      IF	.CYCLES & 1
      9  170f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  170f				  -	      nop	0
     11  170f				  -	      ELSE
     12  170f				  -	      bit	VSYNC
     13  170f				  -	      ENDIF
     14  170f				  -.CYCLES    SET	.CYCLES - 3
     15  170f					      ENDIF
     16  170f
     17  170f					      REPEAT	.CYCLES / 2
     18  170f		       ea		      nop
     17  170f					      REPEND
     18  1710		       ea		      nop
     17  1710					      REPEND
     18  1711		       ea		      nop
     17  1711					      REPEND
     18  1712		       ea		      nop
     17  1712					      REPEND
     18  1713		       ea		      nop
     17  1713					      REPEND
     18  1714		       ea		      nop
     17  1714					      REPEND
     18  1715		       ea		      nop
     17  1715					      REPEND
     18  1716		       ea		      nop
     17  1716					      REPEND
     18  1717		       ea		      nop
     19  1718					      REPEND
    429  1718		       86 1b		      stx	GRP0
    430  171a		       c6 c6		      dec	CurrentRow
    431  171c		       30 03		      bmi	.GpEnd
    432  171e
    433  171e							; If the cat is at the very bottom of the screen, don't disable the
    434  171e							; missile/player graphics until after they are drawn, so they don't get
    435  171e							; clipped at the bottom of the screen. An easy way to do this would be to
    436  171e							; simply disable them after they would have been drawn, whether they are
    437  171e							; already disabled or not.
    438  171e
    439  171e		       4c 25 18 	      jmp	LoRows
    440  1721				   .GpEnd
    441  1721		       4c 8d 18 	      jmp	GameplayEnd
    442  1724
    443  1800		       00 00 00 00*	      ALIGN	$100
    444  1800
------- FILE bank2/subroutines/draw_food_row.asm LEVEL 6 PASS 2
      0  1800					      include	bank2/subroutines/draw_food_row.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 8d		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 c7		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c4		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 8f		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 c8		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE bank2/code/kernel_cat_rows.asm
    446  1825
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_lo_rows.asm LEVEL 5 PASS 2
      0  1825					      include	bank2/code/kernel_lo_rows.asm
      1  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1825							; Draw all the rows below the cat's two rows.
      3  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1825
      5  1825				   LoRows
      6  1825					      SUBROUTINE
      7  1825
      8  1825							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1825							; player 1 for the next row's food items.
     10  1825
     11  1825		       a5 c1		      lda	ThrobColor+1
     12  1827		       20 50 14 	      jsr	SetFoodPosition
     13  182a		       85 02		      sta	WSYNC
     14  182c
     15  182c		       a5 c2		      lda	ThrobColor+2	; 03
     16  182e		       85 09		      sta	COLUBK	; 06
     17  1830		       85 08		      sta	COLUPF	; 09
     18  1832		       20 24 18 	      jsr	Sleep12
     19  1835		       20 24 18 	      jsr	Sleep12
     20  1838		       20 24 18 	      jsr	Sleep12
     21  183b		       20 24 18 	      jsr	Sleep12
     22  183e		       20 24 18 	      jsr	Sleep12	; 69
     23  1841		       8d 2a 00 	      sta.w	HMOVE	; 73
     24  1844		       85 02		      sta	WSYNC
     25  1846
     26  1846		       a5 c1		      lda	ThrobColor+1
     27  1848		       85 09		      sta	COLUBK
     28  184a		       85 08		      sta	COLUPF
     29  184c		       85 02		      sta	WSYNC
     30  184e
     31  184e		       a5 c0		      lda	ThrobColor+0	; 3
     32  1850		       85 09		      sta	COLUBK	; 6
     33  1852		       85 08		      sta	COLUPF	; 9
     34  1854		       a4 c6		      ldy	CurrentRow	; 12
     35  1856
     36  1856		       b9 a2 00 	      lda	FoodItemL,y	; 16
     37  1859		       29 f0		      and	#$F0	; 18
     38  185b		       85 8d		      sta	FoodGfxPtr1	; 21
     39  185d		       aa		      tax		; 23
     40  185e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     41  1861		       85 c7		      sta	FoodColor1	; 30
     42  1863
     43  1863		       b9 a9 00 	      lda	FoodItemR,y	; 34
     44  1866		       29 f0		      and	#$F0	; 37
     45  1868		       85 8f		      sta	FoodGfxPtr2	; 39
     46  186a		       aa		      tax		; 41
     47  186b		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     48  186e		       85 c8		      sta	FoodColor2	; 48
     49  1870
     50  1870		       b9 b0 00 	      lda	FoodPosX,y	; 52
     51  1873		       85 c4		      sta	Temp	; 55
     52  1875
     53  1875							; Output 14 lines to draw a row, exactly the same as in HiRows.
     54  1875							; It may be possible to code this as a subroutine to save ROM space.
     55  1875
     56  1875		       20 00 18 	      jsr	DrawFoodRow	; 61
     57  1878		       85 02		      sta	WSYNC
     58  187a
     59  187a							; Lastly, output a single line for the next "throb" line.
     60  187a							; Use this time to prepare the next row's food item pointers (unless this is
     61  187a							; the last row). If this is not the last row, loop to LoRows for the next row.
     62  187a
     63  187a		       a5 c0		      lda	ThrobColor+0
     64  187c		       85 09		      sta	COLUBK
     65  187e		       85 08		      sta	COLUPF
     66  1880		       a9 00		      lda	#0
     67  1882		       85 1b		      sta	GRP0
     68  1884		       85 1c		      sta	GRP1
     69  1886		       c6 c6		      dec	CurrentRow
     70  1888		       10 9b		      bpl	LoRows
     71  188a
     72  188a		       a2 ff		      ldx	#$FF
     73  188c		       9a		      txs
     74  188d
     75  188d				   GameplayEnd
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_health.asm LEVEL 4 PASS 2
      0  188d					      include	bank2/code/kernel_health.asm
      1  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  188d							; Health Display
      3  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  188d							; Draw the health indicator and progress bar
      5  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  188d
      7  188d					      SUBROUTINE
      8  188d
      9  188d		       85 02		      sta	WSYNC
     10  188f		       a5 c1		      lda	ThrobColor+1	; 03
     11  1891		       85 09		      sta	COLUBK	; 06
     12  1893
     13  1893		       a9 00		      lda	#0	; 08
     14  1895		       85 0d		      sta	PF0	; 11
     15  1897		       85 0a		      sta	CTRLPF	; 14
     16  1899		       85 06		      sta	COLUP0	; 17
     17  189b		       85 07		      sta	COLUP1	; 20
     18  189d
     19  189d		       a9 05		      lda	#DOUBLE_SIZE	; 22
     20  189f		       85 04		      sta	NUSIZ0	; 25
     21  18a1		       85 05		      sta	NUSIZ1	; 28
     22  18a3		       a9 88		      lda	#$80 + REFP_TRUE	; 30
     23  18a5		       85 0c		      sta	REFP1	; 33
     24  18a7		       85 21		      sta	HMP1	; 36
     25  18a9		       a2 ff		      ldx	#$FF	; 38
     26  18ab		       86 20		      stx	HMP0	; 41
     27  18ad
     28  18ad		       86 ba		      stx	ProgressBar+1	; 44
     29  18af		       86 bb		      stx	ProgressBar+2	; 47
     30  18b1		       86 bc		      stx	ProgressBar+3	; 50
     31  18b3		       ca		      dex		; 52
     32  18b4		       86 bd		      stx	ProgressBar+4	; 55
     33  18b6		       a2 e0		      ldx	#$E0	; 57
     34  18b8		       86 b9		      stx	ProgressBar+0	; 60
     35  18ba
     36  18ba		       a9 08		      lda	#COL_CAT_FACE	; 62
     37  18bc		       85 10		      sta	RESP0	; 65
     38  18be		       85 11		      sta	RESP1	; 68
     39  18c0		       85 08		      sta	COLUPF	; 71
     40  18c2		       85 2a		      sta	HMOVE	; 74
     41  18c4
     42  18c4		       a5 9b		      lda	ScoreColor	; 01
     43  18c6		       85 09		      sta	COLUBK	; 04
     44  18c8
     45  18c8							; Load RAM for progress bar display (28-53 cycles)
     46  18c8
     47  18c8		       a5 b7		      lda	Progress	; 3 - get amount of progress
     48  18ca
     49  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  18ca							; The level progress bar uses the following playfield bits:
     51  18ca							; (note that PF0 and PF2 are NOT reversed in this diagram)
     52  18ca							;
     53  18ca							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
     54  18ca							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
     55  18ca							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
     56  18ca							;
     57  18ca							; When the progress bar is empty, every bit labeled "X" above should be
     58  18ca							; set (1), and when it is full, every "X" bit should be cleared (0).
     59  18ca							; The bits labeled "o" must ALWAYS be cleared.
     60  18ca							;
     61  18ca							; The leftmost playfield value (the 1st PF0) will be calculated first,
     62  18ca							; and then each playfield value to the right until the 2nd PF1
     63  18ca							; will be calculated.
     64  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  18ca
     66  18ca		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
     67  18cc
     68  18cc		       38		      sec		; 2
     69  18cd		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
     70  18cf		       30 1e		      bmi	.Underflow1	; 2/3
     71  18d1		       84 b9		      sty	ProgressBar	; 3 - this playfield byte is full
     72  18d3
     73  18d3		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
     74  18d5		       30 23		      bmi	.Underflow2	; 2/3
     75  18d7		       84 ba		      sty	ProgressBar+1	; 3 - this playfield byte is full
     76  18d9
     77  18d9		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
     78  18db		       30 28		      bmi	.Underflow3	; 2/3
     79  18dd		       84 bb		      sty	ProgressBar+2	; 3 - this playfield byte is full
     80  18df
     81  18df		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
     82  18e1		       30 2d		      bmi	.Underflow4	; 2/3
     83  18e3		       84 bc		      sty	ProgressBar+3	; 3 - this playfield byte is full
     84  18e5
     85  18e5		       aa		      tax		; 2
     86  18e6		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
     87  18e9		       0a		      asl		; 2
     88  18ea		       85 bd		      sta	ProgressBar+4	; 3
     89  18ec		       4c 18 19 	      jmp	.Finish	; 3
     90  18ef
     91  18ef				   .Underflow1		; for 1st PF0
     92  18ef		       69 03		      adc	#3	; 3 - add back the 3
     93  18f1		       aa		      tax		; 2
     94  18f2		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
     95  18f5		       85 b9		      sta	ProgressBar	; 3
     96  18f7		       4c 18 19 	      jmp	.Finish	; 3
     97  18fa
     98  18fa				   .Underflow2		; for 1st PF1
     99  18fa		       69 08		      adc	#8	; 3 - add back the 8
    100  18fc		       aa		      tax		; 2
    101  18fd		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    102  1900		       85 ba		      sta	ProgressBar+1	; 3
    103  1902		       4c 18 19 	      jmp	.Finish	; 3
    104  1905
    105  1905				   .Underflow3		; for PF2
    106  1905		       69 08		      adc	#8	; 3 - add back the 8
    107  1907		       aa		      tax		; 2
    108  1908		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    109  190b		       85 bb		      sta	ProgressBar+2	; 3
    110  190d		       4c 18 19 	      jmp	.Finish	; 3
    111  1910
    112  1910				   .Underflow4		; for 2nd PF0
    113  1910		       69 04		      adc	#4	; 3 - add back the 4
    114  1912		       aa		      tax		; 2
    115  1913		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    116  1916		       85 bc		      sta	ProgressBar+3	; 3
    117  1918
    118  1918				   .Finish		; 57
    119  1918
    120  1918		       a0 04		      ldy	#4
    121  191a		       85 02		      sta	WSYNC
    122  191c
    123  191c							; draw top of health
    124  191c				   .HealthTop
    125  191c		       a2 03		      ldx	#3	; 02
    126  191e				   .Loop
    127  191e		       85 02		      sta	WSYNC
    128  1920		       b9 6f 1b 	      lda	HealthTopGfx,y	; 04
    129  1923		       85 1b		      sta	GRP0	; 07
    130  1925		       85 1c		      sta	GRP1	; 10
    131  1927		       a9 00		      lda	#$00	; 12
    132  1929		       85 0f		      sta	PF2	; 15
    133  192b
    134  192b							; Set the pointers for health graphics - 26 cycles
    135  192b		       18		      clc		; 17
    136  192c		       a9 1b		      lda	#>HealthLeftGfx	; 19
    137  192e		       85 96		      sta	HthGfxLPtr+1	; 22
    138  1930		       85 98		      sta	HthGfxRPtr+1	; 25
    139  1932		       a9 74		      lda	#<HealthLeftGfx	; 27
    140  1934		       65 b8		      adc	Health	; 30
    141  1936		       85 95		      sta	HthGfxLPtr	; 33
    142  1938		       a9 94		      lda	#<HealthRightGfx	; 35
    143  193a		       65 b8		      adc	Health	; 38
    144  193c		       85 97		      sta	HthGfxRPtr	; 41
    145  193e		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
    146  1941		       85 0f		      sta	PF2	; 48
    147  1943
    148  1943		       ca		      dex		; 50
    149  1944		       d0 d8		      bne	.Loop	; 52
    150  1946
    151  1946		       88		      dey		; 54
    152  1947		       10 d3		      bpl	.HealthTop	; 56
    153  1949
    154  1949					      SUBROUTINE
    155  1949
    156  1949		       a0 03		      ldy	#3	; 58
    157  194b		       a2 03		      ldx	#3	; 60
    158  194d		       86 c4		      stx	Temp	; 63
    159  194f
    160  194f		       4c 00 1a 	      jmp	.HealthMiddle	; 66
    161  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
    162  1a00
    163  1a00							; draw middle of health, with progress bar
    164  1a00				   .HealthMiddle
    165  1a00		       85 02		      sta	WSYNC
    166  1a02				   .Loop
    167  1a02		       a5 b9		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    168  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    169  1a06		       a5 ba		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    170  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    171  1a0a		       a5 bb		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    172  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    173  1a0e		       a5 9c		      lda	PgBarColor	; 21 - get the progress bar color
    174  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    175  1a12		       a5 bc		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    176  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    177  1a16		       b1 95		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    178  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    179  1a1a		       b1 97		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    180  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    181  1a1e		       a5 bd		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    182  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    183  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    184  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    185  1a26		       a5 9b		      lda	ScoreColor	; 60 - get the color for the background
    186  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    187  1a2b
    188  1a2b		       ca		      dex		; 66
    189  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    190  1a2e
    191  1a2e		       a6 c4		      ldx	Temp	; 71
    192  1a30		       88		      dey		; 73
    193  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    194  1a33
    195  1a33					      SUBROUTINE
    196  1a33
    197  1a33		       a9 00		      lda	#0
    198  1a35		       85 0d		      sta	PF0
    199  1a37		       85 0e		      sta	PF1
    200  1a39		       a0 07		      ldy	#7
    201  1a3b
    202  1a3b							; draw bottom of health
    203  1a3b				   .HealthBottom
    204  1a3b		       a2 03		      ldx	#3
    205  1a3d				   .Loop
    206  1a3d		       b1 95		      lda	(HthGfxLPtr),y
    207  1a3f		       85 1b		      sta	GRP0
    208  1a41		       b1 97		      lda	(HthGfxRPtr),y
    209  1a43		       85 1c		      sta	GRP1
    210  1a45		       a9 00		      lda	#$00
    211  1a47		       85 0f		      sta	PF2
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    213  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    214  1a53		       85 0f		      sta	PF2
    215  1a55		       85 02		      sta	WSYNC
    216  1a57
    217  1a57		       ca		      dex
    218  1a58		       d0 e3		      bne	.Loop
    219  1a5a
    220  1a5a		       88		      dey
    221  1a5b		       c0 03		      cpy	#3
    222  1a5d		       d0 dc		      bne	.HealthBottom
    223  1a5f
    224  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    225  1a5f
    226  1a5f		       86 1b		      stx	GRP0
    227  1a61		       86 1c		      stx	GRP1
    228  1a63		       86 0c		      stx	REFP1
    229  1a65		       86 0f		      stx	PF2
    230  1a67
    231  1a67		       85 02		      sta	WSYNC
------- FILE bank2/code/kernel.asm
     12  1a69
     13  1a69		       4c 54 10 	      jmp	Overscan
------- FILE bank2.asm
------- FILE bank2/data/graphics.asm LEVEL 3 PASS 2
      0  1a6c					      include	bank2/data/graphics.asm
      1  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a6c							; Graphics Tables
      3  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a6c
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       78		      .byte.b	%01111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50				   LevelGfx
    130  1b50
    131  1b50		       34		      .byte.b	$34
    132  1b51		       04		      .byte.b	$04
    133  1b52		       04		      .byte.b	$04
    134  1b53		       04		      .byte.b	$04
    135  1b54		       04		      .byte.b	$04
    136  1b55		       04		      .byte.b	$04
    137  1b56		       24		      .byte.b	$24
    138  1b57
    139  1b57
    140  1b57
    141  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1b57							; Throbbing Line Graphics
    143  1b57							;
    144  1b57							; Graphics tables for the throbbing lines
    145  1b57							;
    146  1b57							; Table takes up $18 (24) bytes of ROM
    147  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b57
    149  1b57				   ThrobGfx
    150  1b57
    151  1b57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1b58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1b59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1b5a
    155  1b5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1b5a
    157  1b5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1b5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1b5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1b5d
    161  1b5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1b5d
    163  1b5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1b5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1b5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1b60
    167  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1b60
    169  1b60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1b61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1b62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1b63
    173  1b63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1b63
    175  1b63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1b64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1b65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1b66
    179  1b66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1b66
    181  1b66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1b67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1b68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1b69
    185  1b69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1b69
    187  1b69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1b6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1b6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1b6c
    191  1b6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1b6c
    193  1b6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1b6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1b6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1b6f
    197  1b6f
    198  1b6f
    199  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1b6f							; Health Graphics
    201  1b6f							;
    202  1b6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1b6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1b6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1b6f							; the graphics for the lower right are flipped.
    206  1b6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1b6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1b6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1b6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1b6f							; LOWER 4 lines of graphics (also upside-down).
    211  1b6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1b6f							; health graphics drawn with the playfield.
    213  1b6f							;
    214  1b6f							; Table takes up $45 (69) bytes of ROM
    215  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1b6f
    217  1b6f				   HealthTopGfx
    218  1b6f
    219  1b6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1b70		       43		      .byte.b	%01000011
    221  1b71		       44		      .byte.b	%01000100
    222  1b72		       48		      .byte.b	%01001000
    223  1b73		       30		      .byte.b	%00110000
    224  1b74
    225  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1b74				   HealthLeftGfx
    227  1b74
    228  1b74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1b75		       8c		      .byte.b	%10001100
    230  1b76		       84		      .byte.b	%10000100
    231  1b77		       80		      .byte.b	%10000000
    232  1b78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1b79		       20		      .byte.b	%00100000
    234  1b7a		       47		      .byte.b	%01000111
    235  1b7b		       84		      .byte.b	%10000100
    236  1b7c
    237  1b7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1b7c
    239  1b7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1b7d		       8c		      .byte.b	%10001100
    241  1b7e		       84		      .byte.b	%10000100
    242  1b7f		       80		      .byte.b	%10000000
    243  1b80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1b81		       20		      .byte.b	%00100000
    245  1b82		       47		      .byte.b	%01000111
    246  1b83		       80		      .byte.b	%10000000
    247  1b84
    248  1b84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1b84
    250  1b84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1b85		       8c		      .byte.b	%10001100
    252  1b86		       84		      .byte.b	%10000100
    253  1b87		       80		      .byte.b	%10000000
    254  1b88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1b89		       20		      .byte.b	%00100000
    256  1b8a		       44		      .byte.b	%01000100
    257  1b8b		       87		      .byte.b	%10000111
    258  1b8c
    259  1b8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1b8c
    261  1b8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1b8d		       9c		      .byte.b	%10011100
    263  1b8e		       80		      .byte.b	%10000000
    264  1b8f		       80		      .byte.b	%10000000
    265  1b90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1b91		       20		      .byte.b	%00100000
    267  1b92		       46		      .byte.b	%01000110
    268  1b93		       81		      .byte.b	%10000001
    269  1b94
    270  1b94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1b94				   HealthRightGfx
    272  1b94
    273  1b94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1b95		       9a		      .byte.b	%10011010
    275  1b96		       90		      .byte.b	%10010000
    276  1b97		       80		      .byte.b	%10000000
    277  1b98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1b99		       20		      .byte.b	%00100000
    279  1b9a		       4f		      .byte.b	%01001111
    280  1b9b		       89		      .byte.b	%10001001
    281  1b9c
    282  1b9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1b9c
    284  1b9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1b9d		       9a		      .byte.b	%10011010
    286  1b9e		       90		      .byte.b	%10010000
    287  1b9f		       80		      .byte.b	%10000000
    288  1ba0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ba1		       20		      .byte.b	%00100000
    290  1ba2		       4f		      .byte.b	%01001111
    291  1ba3		       80		      .byte.b	%10000000
    292  1ba4
    293  1ba4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ba4
    295  1ba4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ba5		       9a		      .byte.b	%10011010
    297  1ba6		       88		      .byte.b	%10001000
    298  1ba7		       80		      .byte.b	%10000000
    299  1ba8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ba9		       20		      .byte.b	%00100000
    301  1baa		       48		      .byte.b	%01001000
    302  1bab		       8f		      .byte.b	%10001111
    303  1bac
    304  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1bac
    306  1bac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1bad		       ba		      .byte.b	%10111010
    308  1bae		       80		      .byte.b	%10000000
    309  1baf		       80		      .byte.b	%10000000
    310  1bb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1bb1		       20		      .byte.b	%00100000
    312  1bb2		       4c		      .byte.b	%01001100
    313  1bb3		       83		      .byte.b	%10000011
    314  1bb4
    315  1bb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1bb4
    317  1bb4							; 3 bytes left in this page
    318  1bb4
    319  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1c00
    321  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1c00				   HealthBgGfx
    323  1c00							; 13 bytes
    324  1c00
    325  1c00		       00		      .byte.b	%00000000
    326  1c01		       3e		      .byte.b	%00111110
    327  1c02		       7f		      .byte.b	%01111111
    328  1c03		       7f		      .byte.b	%01111111
    329  1c04		       7f		      .byte.b	%01111111
    330  1c05		       7f		      .byte.b	%01111111
    331  1c06		       7f		      .byte.b	%01111111
    332  1c07		       7f		      .byte.b	%01111111
    333  1c08		       7f		      .byte.b	%01111111
    334  1c09		       7f		      .byte.b	%01111111
    335  1c0a		       63		      .byte.b	%01100011
    336  1c0b		       63		      .byte.b	%01100011
    337  1c0c		       00		      .byte.b	%00000000
    338  1c0d
    339  1c0d
    340  1c0d
    341  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1c0d							; Progress Bar Graphics
    343  1c0d							;
    344  1c0d							;
    345  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1c0d
    347  1c0d				   PgBarGfx
    348  1c0d							; 9 bytes
    349  1c0d
    350  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1c0f		       3f		      .byte.b	%00111111
    353  1c10		       1f		      .byte.b	%00011111
    354  1c11		       0f		      .byte.b	%00001111
    355  1c12		       07		      .byte.b	%00000111
    356  1c13		       03		      .byte.b	%00000011
    357  1c14		       01		      .byte.b	%00000001
    358  1c15		       00		      .byte.b	%00000000
    359  1c16
    360  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1c16				   PgBarGfxR
    362  1c16							; 8 bytes
    363  1c16
    364  1c16		       ff		      .byte.b	%11111111	; PF2
    365  1c17		       fe		      .byte.b	%11111110
    366  1c18		       fc		      .byte.b	%11111100
    367  1c19		       f8		      .byte.b	%11111000
    368  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1c1c		       c0		      .byte.b	%11000000
    371  1c1d		       80		      .byte.b	%10000000
    372  1c1e
    373  1c1e
    374  1c1e
    375  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1c1e							; Cat Rainbow Graphics
    377  1c1e							;
    378  1c1e							;
    379  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1c1e
    381  1c1e				   RainbowGfx
    382  1c1e							; 4 bytes
    383  1c1e
    384  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1c1f
    386  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1c20
    388  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1c21
    390  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1c22
    392  1d00		       00 00 00 00*	      ALIGN	$100
    393  1d00
    394  1d00				   FoodGfx
    395  1d00
    396  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1d00							; 0 - blank
    398  1d00
    399  1d00		       01		      .byte.b	%00000001
    400  1d01		       80		      .byte.b	%10000000
    401  1d02		       01		      .byte.b	%00000001
    402  1d03		       80		      .byte.b	%10000000
    403  1d04		       01		      .byte.b	%00000001
    404  1d05		       80		      .byte.b	%10000000
    405  1d06		       01		      .byte.b	%00000001
    406  1d07		       80		      .byte.b	%10000000
    407  1d08		       01		      .byte.b	%00000001
    408  1d09		       80		      .byte.b	%10000000
    409  1d0a		       01		      .byte.b	%00000001
    410  1d0b		       80		      .byte.b	%10000000
    411  1d0c		       01		      .byte.b	%00000001
    412  1d0d		       80		      .byte.b	%10000000
    413  1d0e
    414  1d0e		       00		      .byte.b	0
    415  1d0f		       00		      .byte.b	$00
    416  1d10
    417  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1d10							; 1 - apple
    419  1d10
    420  1d10		       34		      .byte.b	%00110100
    421  1d11		       7e		      .byte.b	%01111110
    422  1d12		       7e		      .byte.b	%01111110
    423  1d13		       ff		      .byte.b	%11111111
    424  1d14		       ff		      .byte.b	%11111111
    425  1d15		       ff		      .byte.b	%11111111
    426  1d16		       ff		      .byte.b	%11111111
    427  1d17		       ff		      .byte.b	%11111111
    428  1d18		       ff		      .byte.b	%11111111
    429  1d19		       7f		      .byte.b	%01111111
    430  1d1a		       6a		      .byte.b	%01101010
    431  1d1b		       08		      .byte.b	%00001000
    432  1d1c		       0c		      .byte.b	%00001100
    433  1d1d		       04		      .byte.b	%00000100
    434  1d1e
    435  1d1e		       00		      .byte.b	0
    436  1d1f		       46		      .byte.b	$46
    437  1d20
    438  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1d20							; 2 - peach
    440  1d20
    441  1d20		       3c		      .byte.b	%00111100
    442  1d21		       6e		      .byte.b	%01101110
    443  1d22		       6e		      .byte.b	%01101110
    444  1d23		       df		      .byte.b	%11011111
    445  1d24		       df		      .byte.b	%11011111
    446  1d25		       bf		      .byte.b	%10111111
    447  1d26		       bf		      .byte.b	%10111111
    448  1d27		       bf		      .byte.b	%10111111
    449  1d28		       de		      .byte.b	%11011110
    450  1d29		       5e		      .byte.b	%01011110
    451  1d2a		       6c		      .byte.b	%01101100
    452  1d2b		       18		      .byte.b	%00011000
    453  1d2c		       10		      .byte.b	%00010000
    454  1d2d		       30		      .byte.b	%00110000
    455  1d2e
    456  1d2e		       00		      .byte.b	0
    457  1d2f		       3a		      .byte.b	$3A
    458  1d30
    459  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1d30							; 3 - banana
    461  1d30
    462  1d30		       38		      .byte.b	%00111000
    463  1d31		       7c		      .byte.b	%01111100
    464  1d32		       fe		      .byte.b	%11111110
    465  1d33		       fe		      .byte.b	%11111110
    466  1d34		       ff		      .byte.b	%11111111
    467  1d35		       ff		      .byte.b	%11111111
    468  1d36		       8f		      .byte.b	%10001111
    469  1d37		       07		      .byte.b	%00000111
    470  1d38		       07		      .byte.b	%00000111
    471  1d39		       03		      .byte.b	%00000011
    472  1d3a		       03		      .byte.b	%00000011
    473  1d3b		       02		      .byte.b	%00000010
    474  1d3c		       06		      .byte.b	%00000110
    475  1d3d		       06		      .byte.b	%00000110
    476  1d3e
    477  1d3e		       00		      .byte.b	0
    478  1d3f		       1e		      .byte.b	$1E
    479  1d40
    480  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1d40							; 4 - pear
    482  1d40
    483  1d40		       38		      .byte.b	%00111000
    484  1d41		       7c		      .byte.b	%01111100
    485  1d42		       fe		      .byte.b	%11111110
    486  1d43		       fe		      .byte.b	%11111110
    487  1d44		       fe		      .byte.b	%11111110
    488  1d45		       fe		      .byte.b	%11111110
    489  1d46		       7c		      .byte.b	%01111100
    490  1d47		       7c		      .byte.b	%01111100
    491  1d48		       38		      .byte.b	%00111000
    492  1d49		       38		      .byte.b	%00111000
    493  1d4a		       30		      .byte.b	%00110000
    494  1d4b		       10		      .byte.b	%00010000
    495  1d4c		       18		      .byte.b	%00011000
    496  1d4d		       08		      .byte.b	%00001000
    497  1d4e
    498  1d4e		       00		      .byte.b	0
    499  1d4f		       cc		      .byte.b	$CC
    500  1d50
    501  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1d50							; 5 - plum
    503  1d50
    504  1d50		       38		      .byte.b	%00111000
    505  1d51		       6c		      .byte.b	%01101100
    506  1d52		       6e		      .byte.b	%01101110
    507  1d53		       de		      .byte.b	%11011110
    508  1d54		       df		      .byte.b	%11011111
    509  1d55		       bf		      .byte.b	%10111111
    510  1d56		       bf		      .byte.b	%10111111
    511  1d57		       bf		      .byte.b	%10111111
    512  1d58		       de		      .byte.b	%11011110
    513  1d59		       de		      .byte.b	%11011110
    514  1d5a		       5e		      .byte.b	%01011110
    515  1d5b		       3c		      .byte.b	%00111100
    516  1d5c		       20		      .byte.b	%00100000
    517  1d5d		       60		      .byte.b	%01100000
    518  1d5e
    519  1d5e		       00		      .byte.b	0
    520  1d5f		       88		      .byte.b	$88
    521  1d60
    522  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1d60							; 6 - grapes
    524  1d60
    525  1d60		       18		      .byte.b	%00011000
    526  1d61		       08		      .byte.b	%00001000
    527  1d62		       36		      .byte.b	%00110110
    528  1d63		       12		      .byte.b	%00010010
    529  1d64		       6c		      .byte.b	%01101100
    530  1d65		       24		      .byte.b	%00100100
    531  1d66		       db		      .byte.b	%11011011
    532  1d67		       49		      .byte.b	%01001001
    533  1d68		       36		      .byte.b	%00110110
    534  1d69		       12		      .byte.b	%00010010
    535  1d6a		       6c		      .byte.b	%01101100
    536  1d6b		       34		      .byte.b	%00110100
    537  1d6c		       10		      .byte.b	%00010000
    538  1d6d		       18		      .byte.b	%00011000
    539  1d6e
    540  1d6e		       00		      .byte.b	0
    541  1d6f		       64		      .byte.b	$64
    542  1d70
    543  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1d70							; 7 - broccoli
    545  1d70
    546  1d70		       18		      .byte.b	%00011000
    547  1d71		       18		      .byte.b	%00011000
    548  1d72		       1c		      .byte.b	%00011100
    549  1d73		       3e		      .byte.b	%00111110
    550  1d74		       2a		      .byte.b	%00101010
    551  1d75		       12		      .byte.b	%00010010
    552  1d76		       2a		      .byte.b	%00101010
    553  1d77		       54		      .byte.b	%01010100
    554  1d78		       aa		      .byte.b	%10101010
    555  1d79		       55		      .byte.b	%01010101
    556  1d7a		       aa		      .byte.b	%10101010
    557  1d7b		       55		      .byte.b	%01010101
    558  1d7c		       2a		      .byte.b	%00101010
    559  1d7d		       04		      .byte.b	%00000100
    560  1d7e
    561  1d7e		       00		      .byte.b	0
    562  1d7f		       c7		      .byte.b	$C7
    563  1d80
    564  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1d80							; 8 - cabbage
    566  1d80
    567  1d80		       18		      .byte.b	%00011000
    568  1d81		       76		      .byte.b	%01110110
    569  1d82		       76		      .byte.b	%01110110
    570  1d83		       7a		      .byte.b	%01111010
    571  1d84		       f9		      .byte.b	%11111001
    572  1d85		       fb		      .byte.b	%11111011
    573  1d86		       ed		      .byte.b	%11101101
    574  1d87		       db		      .byte.b	%11011011
    575  1d88		       fb		      .byte.b	%11111011
    576  1d89		       e9		      .byte.b	%11101001
    577  1d8a		       56		      .byte.b	%01010110
    578  1d8b		       76		      .byte.b	%01110110
    579  1d8c		       6e		      .byte.b	%01101110
    580  1d8d		       18		      .byte.b	%00011000
    581  1d8e
    582  1d8e		       00		      .byte.b	0
    583  1d8f		       da		      .byte.b	$DA
    584  1d90
    585  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1d90							; 9 - celery
    587  1d90
    588  1d90		       c0		      .byte.b	%11000000
    589  1d91		       e0		      .byte.b	%11100000
    590  1d92		       70		      .byte.b	%01110000
    591  1d93		       30		      .byte.b	%00110000
    592  1d94		       18		      .byte.b	%00011000
    593  1d95		       18		      .byte.b	%00011000
    594  1d96		       0c		      .byte.b	%00001100
    595  1d97		       0c		      .byte.b	%00001100
    596  1d98		       0e		      .byte.b	%00001110
    597  1d99		       06		      .byte.b	%00000110
    598  1d9a		       0d		      .byte.b	%00001101
    599  1d9b		       0b		      .byte.b	%00001011
    600  1d9c		       0d		      .byte.b	%00001101
    601  1d9d		       06		      .byte.b	%00000110
    602  1d9e
    603  1d9e		       00		      .byte.b	0
    604  1d9f		       d6		      .byte.b	$D6
    605  1da0
    606  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1da0							; A - green pepper
    608  1da0
    609  1da0		       6c		      .byte.b	%01101100
    610  1da1		       6c		      .byte.b	%01101100
    611  1da2		       fe		      .byte.b	%11111110
    612  1da3		       fe		      .byte.b	%11111110
    613  1da4		       f6		      .byte.b	%11110110
    614  1da5		       f6		      .byte.b	%11110110
    615  1da6		       f6		      .byte.b	%11110110
    616  1da7		       f6		      .byte.b	%11110110
    617  1da8		       f6		      .byte.b	%11110110
    618  1da9		       ec		      .byte.b	%11101100
    619  1daa		       7c		      .byte.b	%01111100
    620  1dab		       10		      .byte.b	%00010000
    621  1dac		       18		      .byte.b	%00011000
    622  1dad		       08		      .byte.b	%00001000
    623  1dae
    624  1dae		       00		      .byte.b	0
    625  1daf		       c8		      .byte.b	$C8
    626  1db0
    627  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1db0							; B - pumpkin
    629  1db0
    630  1db0		       3c		      .byte.b	%00111100
    631  1db1		       56		      .byte.b	%01010110
    632  1db2		       b7		      .byte.b	%10110111
    633  1db3		       ad		      .byte.b	%10101101
    634  1db4		       ad		      .byte.b	%10101101
    635  1db5		       ad		      .byte.b	%10101101
    636  1db6		       ad		      .byte.b	%10101101
    637  1db7		       ad		      .byte.b	%10101101
    638  1db8		       b7		      .byte.b	%10110111
    639  1db9		       56		      .byte.b	%01010110
    640  1dba		       3c		      .byte.b	%00111100
    641  1dbb		       18		      .byte.b	%00011000
    642  1dbc		       0c		      .byte.b	%00001100
    643  1dbd		       0c		      .byte.b	%00001100
    644  1dbe
    645  1dbe		       00		      .byte.b	0
    646  1dbf		       2a		      .byte.b	$2A
    647  1dc0
    648  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1dc0							; C - mushroom
    650  1dc0
    651  1dc0		       18		      .byte.b	%00011000
    652  1dc1		       3c		      .byte.b	%00111100
    653  1dc2		       24		      .byte.b	%00100100
    654  1dc3		       24		      .byte.b	%00100100
    655  1dc4		       24		      .byte.b	%00100100
    656  1dc5		       66		      .byte.b	%01100110
    657  1dc6		       a5		      .byte.b	%10100101
    658  1dc7		       99		      .byte.b	%10011001
    659  1dc8		       e7		      .byte.b	%11100111
    660  1dc9		       ff		      .byte.b	%11111111
    661  1dca		       5a		      .byte.b	%01011010
    662  1dcb		       76		      .byte.b	%01110110
    663  1dcc		       3c		      .byte.b	%00111100
    664  1dcd		       18		      .byte.b	%00011000
    665  1dce
    666  1dce		       00		      .byte.b	0
    667  1dcf		       08		      .byte.b	$08
    668  1dd0
    669  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1dd0							; D - key
    671  1dd0
    672  1dd0		       10		      .byte.b	%00010000
    673  1dd1		       1e		      .byte.b	%00011110
    674  1dd2		       1e		      .byte.b	%00011110
    675  1dd3		       18		      .byte.b	%00011000
    676  1dd4		       1e		      .byte.b	%00011110
    677  1dd5		       1e		      .byte.b	%00011110
    678  1dd6		       10		      .byte.b	%00010000
    679  1dd7		       10		      .byte.b	%00010000
    680  1dd8		       10		      .byte.b	%00010000
    681  1dd9		       10		      .byte.b	%00010000
    682  1dda		       38		      .byte.b	%00111000
    683  1ddb		       6c		      .byte.b	%01101100
    684  1ddc		       6c		      .byte.b	%01101100
    685  1ddd		       38		      .byte.b	%00111000
    686  1dde
    687  1dde		       00		      .byte.b	0
    688  1ddf		       2c		      .byte.b	$2C
    689  1de0
    690  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1de0							; E - ring
    692  1de0
    693  1de0		       00		      .byte.b	%00000000
    694  1de1		       18		      .byte.b	%00011000
    695  1de2		       3c		      .byte.b	%00111100
    696  1de3		       66		      .byte.b	%01100110
    697  1de4		       42		      .byte.b	%01000010
    698  1de5		       42		      .byte.b	%01000010
    699  1de6		       42		      .byte.b	%01000010
    700  1de7		       66		      .byte.b	%01100110
    701  1de8		       3c		      .byte.b	%00111100
    702  1de9		       18		      .byte.b	%00011000
    703  1dea		       18		      .byte.b	%00011000
    704  1deb		       2c		      .byte.b	%00101100
    705  1dec		       18		      .byte.b	%00011000
    706  1ded		       00		      .byte.b	%00000000
    707  1dee
    708  1dee		       00		      .byte.b	0
    709  1def		       2c		      .byte.b	$2C
    710  1df0
    711  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1df0							; F - heart
    713  1df0
    714  1df0		       00		      .byte.b	%00000000
    715  1df1		       18		      .byte.b	%00011000
    716  1df2		       18		      .byte.b	%00011000
    717  1df3		       3c		      .byte.b	%00111100
    718  1df4		       3c		      .byte.b	%00111100
    719  1df5		       7e		      .byte.b	%01111110
    720  1df6		       7e		      .byte.b	%01111110
    721  1df7		       ff		      .byte.b	%11111111
    722  1df8		       ff		      .byte.b	%11111111
    723  1df9		       ff		      .byte.b	%11111111
    724  1dfa		       e7		      .byte.b	%11100111
    725  1dfb		       e7		      .byte.b	%11100111
    726  1dfc		       42		      .byte.b	%01000010
    727  1dfd		       00		      .byte.b	%00000000
    728  1dfe
    729  1dfe		       00		      .byte.b	0
    730  1dff		       4a		      .byte.b	$4A
    731  1e00
    732  1e00				   RainbowColors
    733  1e00
    734  1e00		       64		      .byte.b	$64
    735  1e01		       88		      .byte.b	$88
    736  1e02		       c8		      .byte.b	$C8
    737  1e03		       1e		      .byte.b	$1E
    738  1e04		       28		      .byte.b	$28
    739  1e05		       44		      .byte.b	$44
    740  1e06
    741  1e06				   CatTartGfx
    742  1e06
    743  1e06		       00 00 00 00*	      ds	18, $00
    744  1e18
    745  1e18		       00		      .byte.b	%00000000
    746  1e19		       00		      .byte.b	%00000000
    747  1e1a		       e0		      .byte.b	%11100000
    748  1e1b		       c0		      .byte.b	%11000000
    749  1e1c		       c0		      .byte.b	%11000000
    750  1e1d		       c0		      .byte.b	%11000000
    751  1e1e		       c0		      .byte.b	%11000000
    752  1e1f		       c0		      .byte.b	%11000000
    753  1e20		       c0		      .byte.b	%11000000
    754  1e21		       e0		      .byte.b	%11100000
    755  1e22		       e0		      .byte.b	%11100000
    756  1e23		       e0		      .byte.b	%11100000
    757  1e24		       e0		      .byte.b	%11100000
    758  1e25		       e0		      .byte.b	%11100000
    759  1e26		       e0		      .byte.b	%11100000
    760  1e27		       e0		      .byte.b	%11100000
    761  1e28
    762  1e28				   CatFaceGfx
    763  1e28
    764  1e28		       00 00 00 00*	      ds	18, $00
    765  1e3a
    766  1e3a		       36		      .byte.b	%00110110
    767  1e3b		       36		      .byte.b	%00110110
    768  1e3c		       00		      .byte.b	%00000000
    769  1e3d		       7e		      .byte.b	%01111110
    770  1e3e		       c1		      .byte.b	%11000001
    771  1e3f		       d5		      .byte.b	%11010101
    772  1e40		       ff		      .byte.b	%11111111
    773  1e41		       d5		      .byte.b	%11010101
    774  1e42		       dd		      .byte.b	%11011101
    775  1e43		       ff		      .byte.b	%11111111
    776  1e44		       66		      .byte.b	%01100110
    777  1e45		       66		      .byte.b	%01100110
    778  1e46		       42		      .byte.b	%01000010
    779  1e47		       00		      .byte.b	%00000000
    780  1e48
    781  1e48		       00 00 00 00*	      ds	19, $00
    782  1e5b
    783  1e5b
    784  1e5b
    785  1e5b				   RowPosition
    786  1e5b		       00		      .byte.b	0
    787  1e5c		       13		      .byte.b	19
    788  1e5d		       26		      .byte.b	38
    789  1e5e		       39		      .byte.b	57
    790  1e5f		       4c		      .byte.b	76
    791  1e60		       5f		      .byte.b	95
    792  1e61		       72		      .byte.b	114
------- FILE bank2.asm
     12  1e62
      0  1e62					      END_BANK	2
      1  1ffa					      ORG	[2 - 1] * $1000 + $0FFA
      2  1ffa
      3  1ffa		       00 10		      .word.w	JmpInitSystem
      4  1ffc		       00 10		      .word.w	JmpInitSystem
      5  1ffe		       00 10		      .word.w	JmpInitSystem
      6  2000
------- FILE main.asm
------- FILE bank3.asm LEVEL 2 PASS 2
      0  2000					      include	bank3.asm
      1  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000							; Bank 3
      3  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  2000
      0  2000					      START_BANK	3
      1  3000 ????				      SEG	BANK_3
      2  2000					      ORG	[3 - 1] * $1000
      3  2000					      RORG	$1000
      4  2000					      SUBROUTINE
      5  2000
      6  2000				   JmpInitSystem
      7  2000		       0c f6 1f 	      nop	SelectBank1
      8  2003		       4c 12 10 	      jmp	InitSystem
      9  2006				   JmpMenuOverScan
     10  2006		       0c f6 1f 	      nop	SelectBank1
     11  2009		       4c 20 10 	      jmp	MenuOverScan
     12  200c				   JmpGamePlay
     13  200c		       0c f7 1f 	      nop	SelectBank2
     14  200f		       4c 12 10 	      jmp	GameplayInit
     15  2012
      6  2012
      0  2012					      END_BANK	3
      1  2ffa					      ORG	[3 - 1] * $1000 + $0FFA
      2  2ffa
      3  2ffa		       00 10		      .word.w	JmpInitSystem
      4  2ffc		       00 10		      .word.w	JmpInitSystem
      5  2ffe		       00 10		      .word.w	JmpInitSystem
      6  3000
------- FILE main.asm
------- FILE bank4.asm LEVEL 2 PASS 2
      0  3000					      include	bank4.asm
      1  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  3000							; Bank 4
      3  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  3000
      0  3000					      START_BANK	4
      1  4000 ????				      SEG	BANK_4
      2  3000					      ORG	[4 - 1] * $1000
      3  3000					      RORG	$1000
      4  3000					      SUBROUTINE
      5  3000
      6  3000				   JmpInitSystem
      7  3000		       0c f6 1f 	      nop	SelectBank1
      8  3003		       4c 12 10 	      jmp	InitSystem
      9  3006				   JmpMenuOverScan
     10  3006		       0c f6 1f 	      nop	SelectBank1
     11  3009		       4c 20 10 	      jmp	MenuOverScan
     12  300c				   JmpGamePlay
     13  300c		       0c f7 1f 	      nop	SelectBank2
     14  300f		       4c 12 10 	      jmp	GameplayInit
     15  3012
      6  3012
      0  3012					      END_BANK	4
      1  3ffa					      ORG	[4 - 1] * $1000 + $0FFA
      2  3ffa
      3  3ffa		       00 10		      .word.w	JmpInitSystem
      4  3ffc		       00 10		      .word.w	JmpInitSystem
      5  3ffe		       00 10		      .word.w	JmpInitSystem
      6  4000
------- FILE main.asm
