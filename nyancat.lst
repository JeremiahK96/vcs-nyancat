------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 01-08-2018 Version 2.7
     12  2000 ????						;
     13  2000 ????						; Redesign the scoreboard kernel
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates, RAM labels, and macros
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7  0000 ????
      8  0000 ????
      9 U00de ????				      SEG.U	VARS
     10 U0080					      ORG	$80
     11 U0080
     12 U0080
     13 U0080
     14 U0080				   RamStart
     15 U0080
     16 U0080		       00	   Frame      ds	1	; Current frame
     17 U0081
     18 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19 U0081							; Variables for the score and level counter - 6 bytes
     20 U0081
     21 U0081				   BCDScore		; 3-byte array for score value which will be stored as a
     22 U0081		       00 00 00 	      ds	3	; BCD encoded 6-digit number and used to control the
     23 U0084							; 6-digit score display
     24 U0084
     25 U0084				   BCDScoreAdd		; 2-byte array for the value to be added to the score
     26 U0084		       00 00		      ds	2	; on the next frame (max of 9,999)
     27 U0086
     28 U0086				   BCDLevel		; value for the current level which will be stored as a
     29 U0086		       00		      ds	1	; BCD encoded 2-digit number and used to control the
     30 U0087							; level counter display
     31 U0087
     32 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0087							; Variable game colors - 3 bytes
     34 U0087
     35 U0087		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     36 U0088		       00	   PgBarColor ds	1	; color for full part of progress bar
     37 U0089		       00	   CatTartColor ds	1	; color of the cat's tart body
     38 U008a
     39 U008a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40 U008a							; Variables for the progress bar and health display - 7 bytes
     41 U008a
     42 U008a				   Progress		; value for level progress, which can be
     43 U008a		       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     44 U008b
     45 U008b				   Health		; amount of health
     46 U008b		       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     47 U008c
     48 U008c				   ProgressBar		; array of 5 values to be written to the playfield
     49 U008c		       00 00 00 00*	      ds	5	; registers when drawing progress bar
     50 U0091
     51 U0091							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52 U0091							; Pointers - 14 bytes
     53 U0091
     54 U0091				   FoodGfxPtr1		; pointer for 1st food item's graphics
     55 U0091				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     56 U0091		       00 00		      ds	2
     57 U0093
     58 U0093				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     59 U0093				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     60 U0093		       00 00		      ds	2
     61 U0095
     62 U0095				   TartGfxPtr1		; pointer for the tart graphics
     63 U0095				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     64 U0095		       00 00		      ds	2
     65 U0097
     66 U0097				   CatGfxPtr1		; pointer for the cat face/paws graphics
     67 U0097				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     68 U0097		       00 00		      ds	2
     69 U0099
     70 U0099				   TartGfxPtr2		; pointer for the tart graphics
     71 U0099				   HthGfxLPtr		; pointer for left half of the health graphics
     72 U0099				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     73 U0099		       00 00		      ds	2
     74 U009b
     75 U009b				   CatGfxPtr2		; pointer for the cat face/paws graphics
     76 U009b				   HthGfxRPtr		; pointer for right half of the health graphics
     77 U009b				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     78 U009b		       00 00		      ds	2
     79 U009d
     80 U009d				   ThrobPtr		; pointer for loading the throb colors
     81 U009d				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     82 U009d		       00 00		      ds	2
     83 U009f
     84 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85 U009f							; Variables used when drawing the cat - 5 bytes
     86 U009f
     87 U009f				   CatPosY		; number of scanlines to skip before drawing cat
     88 U009f		       00		      ds	1
     89 U00a0				   CatPosition		; data describing the cat's position
     90 U00a0		       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     91 U00a1							; bits 4-0 store the number of scanlines to skip after
     92 U00a1							; top of the cat's row before drawing the cat, from 0-18
     93 U00a1
     94 U00a1				   Rainbow		; PF0 value for the rainbow graphics
     95 U00a1				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     96 U00a1		       00		      ds	1
     97 U00a2
     98 U00a2				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     99 U00a2				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
    100 U00a2		       00		      ds	1
    101 U00a3
    102 U00a3				   PreCatRows		; number of rows to draw before the two "cat" rows
    103 U00a3		       00		      ds	1
    104 U00a4
    105 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106 U00a4							; Variables used for the food items - 21 bytes
    107 U00a4
    108 U00a4				   FoodItemL		; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    109 U00a4		       00 00 00 00*	      ds	7	; will be drawn on each frame. The first 7 bytes are for
    110 U00ab				   FoodItemR		; the left items, last 7 bytes are for the right items.
    111 U00ab		       00 00 00 00*	      ds	7	; Hi nybble holds the value (0-15) of the item to draw.
    112 U00b2							; Lo nybble holds the value of next frame's item.
    113 U00b2							; All nybbles are swapped at the start of each frame.
    114 U00b2
    115 U00b2				   FoodPosX		; (range 0-88)
    116 U00b2		       00 00 00 00*	      ds	7
    117 U00b9
    118 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119 U00b9							; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    120 U00b9
    121 U00b9
    122 U00b9				   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    123 U00b9		       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    124 U00bc
    125 U00bc				   CatRow2FoodL 		;
    126 U00bc		       00		      ds	1	;
    127 U00bd				   CatRow2FoodR 		;
    128 U00bd		       00		      ds	1	;
    129 U00be
    130 U00be				   CatRow2Color1		;
    131 U00be		       00		      ds	1	;
    132 U00bf				   CatRow2Color2		;
    133 U00bf		       00		      ds	1	;
    134 U00c0
    135 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    136 U00c0							; Variables for the throbbing lines' colors - 4 bytes
    137 U00c0
    138 U00c0		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    139 U00c3							; throbbing lines. The first color is darkest,
    140 U00c3							; the last is brightest.
    141 U00c3
    142 U00c3		       00	   CatThrobPF ds	1
    143 U00c4
    144 U00c4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    145 U00c4							; Temporary variables - 2 bytes
    146 U00c4
    147 U00c4		       00	   Temp       ds	1
    148 U00c5		       00	   TempLoop   ds	1
    149 U00c6
    150 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    151 U00c6							; 69 of 79 non-temporary RAM bytes used (10 left)
    152 U00c6							; last 49 bytes of RAM are used for stack space in the scoreboard display
    153 U00c6
    154 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    155 U00c6							; Variables which can be shared with the stack - 3 bytes
    156 U00c6
    157 U00c6		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    158 U00c7
    159 U00c7		       00	   FoodColor1 ds	1	; color of the 1st food item
    160 U00c8		       00	   FoodColor2 ds	1	; color of the 2nd food item
    161 U00c9
    162 U00c9							; 7 of 15 available temporary RAM bytes used (8 left)
    163 U00c9							; last 34 bytes of RAM are used to hold the rainbow color graphics
    164 U00c9
    165 U00de					      ORG	$100 - 34
    166 U00de				   RamBowColors
------- FILE main.asm
------- FILE headers/Macros.h LEVEL 2 PASS 2
      0 U00de					      include	headers/Macros.h
      1 U00de					      MAC	throb_rainbow_bk
      2 U00de
      3 U00de					      SUBROUTINE
      4 U00de
      5 U00de				   .X	      SET	{1}
      6 U00de
      7 U00de					      lda	RamBowColors+.X	; 3
      8 U00de					      bne	.Rainbow	; 5/6
      9 U00de
     10 U00de					      stx	COLUBK	; 8
     11 U00de					      beq	.End	; 11
     12 U00de
     13 U00de				   .Rainbow
     14 U00de					      sta	COLUBK	; 9
     15 U00de					      nop		; 11
     16 U00de
     17 U00de				   .End
     18 U00de
     19 U00de					      ENDM
     20 U00de
     21 U00de
     22 U00de
     23 U00de					      MAC	throb_rainbow_pf
     24 U00de
     25 U00de					      SUBROUTINE
     26 U00de
     27 U00de				   .X	      SET	{1}
     28 U00de
     29 U00de					      lda	RamBowColors+.X	; 3
     30 U00de					      bne	.Rainbow	; 5/6
     31 U00de
     32 U00de					      stx	COLUPF	; 8
     33 U00de					      beq	.End	; 11
     34 U00de
     35 U00de				   .Rainbow
     36 U00de					      sta	COLUPF	; 9
     37 U00de					      nop		; 11
     38 U00de
     39 U00de				   .End
     40 U00de
     41 U00de					      ENDM
     42 U00de
     43 U00de
     44 U00de
     45 U00de					      MAC	skip_word
     46 U00de
     47 U00de					      HEX	0C
     48 U00de
     49 U00de					      ENDM
------- FILE main.asm
     35 U00de
     36 U00de							; Ensure that the code is placed in the proper place in the binary
     37 U00de
     38  2000 ????				      SEG	CODE
     39  1000					      ORG	$1000	; 4K ROM
     40  1000
     41  1000
     42  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     43  1000							; Full System Clear
     44  1000							;
     45  1000							; Clear all system registers and RAM at startup
     46  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  1000
     48  1000				   SystemClear
     49  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     51  100b
     52  100b
     53  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  100b							; Game Logic
     55  100b							;
     56  100b							; Do the overscan, vertical sync, and vertical blanking,
     57  100b							; along with any game logic
     58  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 c4		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 c4		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 c4		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 c4		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 c4		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 c4		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 8c		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8d		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8e		      sta	ProgressBar+2	; 34
     30  1069		       85 8f		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 90		      sta	ProgressBar+4	; 42
     33  106f
     34  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35  106f							; Prepare for throbbing lines - 43 cycles
     36  106f
     37  106f		       a5 80		      lda	Frame	; 45 - get the current frame number
     38  1071		       29 1c		      and	#%00011100	; 47 - change animation frame every 4 game frames
     39  1073		       4a		      lsr		; 49
     40  1074		       4a		      lsr		; 51 - shift to get a value from 0-7
     41  1075		       85 c4		      sta	Temp	; 54
     42  1077		       0a		      asl		; 56 - carry flag will always be clear after this
     43  1078		       65 c4		      adc	Temp	; 59 - multiply by 3
     44  107a		       a8		      tay		; 61
     45  107b
     46  107b		       85 12		      sta	RESM0	; 64 - set position of left side of level counter digit
     47  107d
     48  107d		       a5 87		      lda	ScoreColor	; 67
     49  107f		       29 f0		      and	#$F0	; 69
     50  1081		       85 c4		      sta	Temp	; 72
     51  1083
     52  1083		       b9 57 1b 	      lda	ThrobGfx+0,y	; 00
     53  1086		       0a		      asl		; 02
     54  1087		       90 01		      bcc	.Color0
     55  1089		       0c		      HEX	0C	; 08
     56  108a				   .Color0
     57  108a		       65 c4		      adc	Temp	; 08
     58  108c		       85 c0		      sta	ThrobColor+0	; 11
     59  108e
     60  108e		       b9 58 1b 	      lda	ThrobGfx+1,y	; 15
     61  1091		       0a		      asl		; 17
     62  1092		       90 01		      bcc	.Color1
     63  1094		       0c		      HEX	0C	; 23
     64  1095				   .Color1
     65  1095		       65 c4		      adc	Temp	; 23
     66  1097		       85 c1		      sta	ThrobColor+1	; 26
     67  1099
     68  1099		       b9 59 1b 	      lda	ThrobGfx+2,y	; 30
     69  109c		       0a		      asl		; 32
     70  109d		       90 01		      bcc	.Color2
     71  109f		       0c		      HEX	0C	; 38
     72  10a0				   .Color2
     73  10a0		       65 c4		      adc	Temp	; 38
     74  10a2		       85 c2		      sta	ThrobColor+2	; 41
     75  10a4
     76  10a4							; sleep19
     77  10a4		       20 24 18 	      jsr	Sleep12
      0  10a7					      SLEEP	7	; 60
      1  10a7				   .CYCLES    SET	7
      2  10a7
      3  10a7				  -	      IF	.CYCLES < 2
      4  10a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10a7				  -	      ERR
      6  10a7					      ENDIF
      7  10a7
      8  10a7					      IF	.CYCLES & 1
      9  10a7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10a7		       04 00		      nop	0
     11  10a9				  -	      ELSE
     12  10a9				  -	      bit	VSYNC
     13  10a9					      ENDIF
     14  10a9				   .CYCLES    SET	.CYCLES - 3
     15  10a9					      ENDIF
     16  10a9
     17  10a9					      REPEAT	.CYCLES / 2
     18  10a9		       ea		      nop
     17  10a9					      REPEND
     18  10aa		       ea		      nop
     19  10ab					      REPEND
     79  10ab
     80  10ab		       85 14		      sta	RESBL	; 63 - set position of leading "1" in level counter
     81  10ad		       85 13		      sta	RESM1	; 66 - set position of right side of level counter digit
     82  10af
     83  10af		       85 02		      sta	WSYNC
     84  10b1		       85 2a		      sta	HMOVE
     85  10b3
     86  10b3
     87  10b3
     88  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  10b3							; Load Scoreboard
     90  10b3							;
     91  10b3							; Get graphics data for the scoreboard and push it onto the stack
     92  10b3							;
     93  10b3							; Takes 534 cycles to complete (7 full scanlines + 2 cycles)
     94  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  10b3
     96  10b3					      SUBROUTINE
     97  10b3
     98  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10b3							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
    100  10b3
    101  10b3		       a9 1b		      lda	#>ScoreGfx
    102  10b5		       85 92		      sta	LvlLoadPtr+1
    103  10b7		       85 94		      sta	ScrLoadPtr0+1
    104  10b9		       85 96		      sta	ScrLoadPtr1+1
    105  10bb		       85 98		      sta	ScrLoadPtr2+1
    106  10bd		       85 9a		      sta	ScrLoadPtr3+1
    107  10bf		       85 9c		      sta	ScrLoadPtr4+1
    108  10c1		       85 9e		      sta	ScrLoadPtr5+1
    109  10c3
    110  10c3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    111  10c3							; Prepare pointer for level digit graphics - 14 cycles
    112  10c3
    113  10c3		       a5 86		      lda	BCDLevel
    114  10c5		       29 0f		      and	#$0F
    115  10c7		       0a		      asl
    116  10c8		       0a		      asl
    117  10c9		       0a		      asl
    118  10ca		       85 91		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
    119  10cc
    120  10cc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121  10cc							; Prepare pointers for score digit graphics - 69 cycles
    122  10cc
    123  10cc		       a7 81		      lax	BCDScore+0
    124  10ce		       29 f0		      and	#$F0
    125  10d0		       4a		      lsr
    126  10d1		       85 93		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
    127  10d3
    128  10d3		       8a		      txa
    129  10d4		       29 0f		      and	#$0F
    130  10d6		       0a		      asl
    131  10d7		       0a		      asl
    132  10d8		       0a		      asl
    133  10d9		       85 95		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    134  10db
    135  10db		       a7 82		      lax	BCDScore+1
    136  10dd		       29 f0		      and	#$F0
    137  10df		       4a		      lsr
    138  10e0		       85 97		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    139  10e2
    140  10e2		       8a		      txa
    141  10e3		       29 0f		      and	#$0F
    142  10e5		       0a		      asl
    143  10e6		       0a		      asl
    144  10e7		       0a		      asl
    145  10e8		       85 99		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    146  10ea
    147  10ea		       a7 83		      lax	BCDScore+2
    148  10ec		       29 f0		      and	#$F0
    149  10ee		       4a		      lsr
    150  10ef		       85 9b		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    151  10f1
    152  10f1		       8a		      txa
    153  10f2		       29 0f		      and	#$0F
    154  10f4		       0a		      asl
    155  10f5		       0a		      asl
    156  10f6		       0a		      asl
    157  10f7		       85 9d		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    158  10f9
    159  10f9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    160  10f9							; Load the stack with the graphics for the scoreboard - 428 cycles
    161  10f9
    162  10f9		       a0 06		      ldy	#6
    163  10fb
    164  10fb				   .LoadScoreboard
    165  10fb
    166  10fb		       b1 9d		      lda	(ScrLoadPtr5),y
    167  10fd		       48		      pha
    168  10fe		       b1 9b		      lda	(ScrLoadPtr4),y
    169  1100		       48		      pha
    170  1101		       b1 99		      lda	(ScrLoadPtr3),y
    171  1103		       48		      pha
    172  1104		       b1 97		      lda	(ScrLoadPtr2),y
    173  1106		       48		      pha
    174  1107		       b1 95		      lda	(ScrLoadPtr1),y
    175  1109		       48		      pha
    176  110a		       b1 93		      lda	(ScrLoadPtr0),y
    177  110c		       48		      pha
    178  110d		       b1 91		      lda	(LvlLoadPtr),y
    179  110f		       48		      pha
    180  1110
    181  1110		       88		      dey
    182  1111		       10 e8		      bpl	.LoadScoreboard
    183  1113
    184  1113
    185  1113
    186  1113							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187  1113							; Load RAM for progress bar display (28-53 cycles)
    188  1113
    189  1113		       a5 8a		      lda	Progress	; 3 - get amount of progress
    190  1115
    191  1115							; The level progress bar uses the following playfield bits:
    192  1115							; (note that PF0 and PF2 are NOT reversed in this diagram)
    193  1115							;
    194  1115							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    195  1115							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    196  1115							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    197  1115							;
    198  1115							; When the progress bar is empty, every bit labeled "X" above should be
    199  1115							; set (1), and when it is full, every "X" bit should be cleared (0).
    200  1115							; The bits labeled "o" must ALWAYS be cleared.
    201  1115							;
    202  1115							; The leftmost playfield value (the 1st PF0) will be calculated first,
    203  1115							; and then each playfield value to the right until the 2nd PF1
    204  1115							; will be calculated.
    205  1115
    206  1115		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    207  1117
    208  1117		       38		      sec		; 2
    209  1118		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    210  111a		       30 1e		      bmi	.Underflow1	; 2/3
    211  111c		       84 8c		      sty	ProgressBar	; 3 - this playfield byte is full
    212  111e
    213  111e		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    214  1120		       30 23		      bmi	.Underflow2	; 2/3
    215  1122		       84 8d		      sty	ProgressBar+1	; 3 - this playfield byte is full
    216  1124
    217  1124		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    218  1126		       30 28		      bmi	.Underflow3	; 2/3
    219  1128		       84 8e		      sty	ProgressBar+2	; 3 - this playfield byte is full
    220  112a
    221  112a		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    222  112c		       30 2d		      bmi	.Underflow4	; 2/3
    223  112e		       84 8f		      sty	ProgressBar+3	; 3 - this playfield byte is full
    224  1130
    225  1130		       aa		      tax		; 2
    226  1131		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    227  1134		       0a		      asl		; 2
    228  1135		       85 90		      sta	ProgressBar+4	; 3
    229  1137		       4c 63 11 	      jmp	.Finish	; 3
    230  113a
    231  113a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    232  113a				   .Underflow1		; for 1st PF0
    233  113a
    234  113a		       69 03		      adc	#3	; 3 - add back the 3
    235  113c		       aa		      tax		; 2
    236  113d		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    237  1140		       85 8c		      sta	ProgressBar	; 3
    238  1142		       4c 63 11 	      jmp	.Finish	; 3
    239  1145
    240  1145							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1145				   .Underflow2		; for 1st PF1
    242  1145
    243  1145		       69 08		      adc	#8	; 3 - add back the 8
    244  1147		       aa		      tax		; 2
    245  1148		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    246  114b		       85 8d		      sta	ProgressBar+1	; 3
    247  114d		       4c 63 11 	      jmp	.Finish	; 3
    248  1150
    249  1150							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    250  1150				   .Underflow3		; for PF2
    251  1150
    252  1150		       69 08		      adc	#8	; 3 - add back the 8
    253  1152		       aa		      tax		; 2
    254  1153		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    255  1156		       85 8e		      sta	ProgressBar+2	; 3
    256  1158		       4c 63 11 	      jmp	.Finish	; 3
    257  115b
    258  115b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    259  115b				   .Underflow4		; for 2nd PF0
    260  115b
    261  115b		       69 04		      adc	#4	; 3 - add back the 4
    262  115d		       aa		      tax		; 2
    263  115e		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    264  1161		       85 8f		      sta	ProgressBar+3	; 3
    265  1163
    266  1163							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1163				   .Finish
    268  1163
    269  1163		       85 2b		      sta	HMCLR
    270  1165
    271  1165
    272  1165
    273  1165		       a9 10		      lda	#$10
    274  1167		       85 a4		      sta	FoodItemL+0
    275  1169		       a9 70		      lda	#$70
    276  116b		       85 ab		      sta	FoodItemR+0
    277  116d		       a9 20		      lda	#$20
    278  116f		       85 a5		      sta	FoodItemL+1
    279  1171		       a9 80		      lda	#$80
    280  1173		       85 ac		      sta	FoodItemR+1
    281  1175		       a9 30		      lda	#$30
    282  1177		       85 a6		      sta	FoodItemL+2
    283  1179		       a9 90		      lda	#$90
    284  117b		       85 ad		      sta	FoodItemR+2
    285  117d		       a9 40		      lda	#$40
    286  117f		       85 a7		      sta	FoodItemL+3
    287  1181		       a9 a0		      lda	#$A0
    288  1183		       85 ae		      sta	FoodItemR+3
    289  1185		       a9 50		      lda	#$50
    290  1187		       85 a8		      sta	FoodItemL+4
    291  1189		       a9 b0		      lda	#$B0
    292  118b		       85 af		      sta	FoodItemR+4
    293  118d		       a9 60		      lda	#$60
    294  118f		       85 a9		      sta	FoodItemL+5
    295  1191		       a9 c0		      lda	#$C0
    296  1193		       85 b0		      sta	FoodItemR+5
    297  1195		       a9 d0		      lda	#$D0
    298  1197		       85 aa		      sta	FoodItemL+6
    299  1199		       a9 e0		      lda	#$E0
    300  119b		       85 b1		      sta	FoodItemR+6
    301  119d
    302  119d		       a6 b2		      ldx	FoodPosX
    303  119f		       ca		      dex
    304  11a0		       10 02		      bpl	.NoReset0
    305  11a2		       a2 58		      ldx	#88
    306  11a4				   .NoReset0
    307  11a4		       86 b2		      stx	FoodPosX+0
    308  11a6
    309  11a6		       8a		      txa
    310  11a7		       38		      sec
    311  11a8
    312  11a8		       e9 12		      sbc	#18
    313  11aa		       b0 02		      bcs	.NoReset1
    314  11ac		       69 59		      adc	#89
    315  11ae				   .NoReset1
    316  11ae		       85 b3		      sta	FoodPosX+1
    317  11b0
    318  11b0		       e9 34		      sbc	#52
    319  11b2		       b0 02		      bcs	.NoReset2
    320  11b4		       69 59		      adc	#89
    321  11b6				   .NoReset2
    322  11b6		       85 b4		      sta	FoodPosX+2
    323  11b8
    324  11b8		       e9 1b		      sbc	#27
    325  11ba		       b0 02		      bcs	.NoReset3
    326  11bc		       69 59		      adc	#89
    327  11be				   .NoReset3
    328  11be		       85 b5		      sta	FoodPosX+3
    329  11c0
    330  11c0		       e9 3f		      sbc	#63
    331  11c2		       b0 02		      bcs	.NoReset4
    332  11c4		       69 59		      adc	#89
    333  11c6				   .NoReset4
    334  11c6		       85 b6		      sta	FoodPosX+4
    335  11c8
    336  11c8		       e9 29		      sbc	#41
    337  11ca		       b0 02		      bcs	.NoReset5
    338  11cc		       69 59		      adc	#89
    339  11ce				   .NoReset5
    340  11ce		       85 b7		      sta	FoodPosX+5
    341  11d0
    342  11d0		       e9 11		      sbc	#17
    343  11d2		       b0 02		      bcs	.NoReset6
    344  11d4		       69 59		      adc	#89
    345  11d6				   .NoReset6
    346  11d6		       85 b8		      sta	FoodPosX+6
    347  11d8
    348  11d8
    349  11d8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    350  11d8							; Caclulate cat's position data
    351  11d8
    352  11d8					      SUBROUTINE
    353  11d8
    354  11d8		       a6 9f		      ldx	CatPosY
    355  11da		       e8		      inx
    356  11db		       e0 73		      cpx	#115
    357  11dd		       d0 02		      bne	.CatY
    358  11df		       a2 00		      ldx	#0
    359  11e1				   .CatY
    360  11e1		       86 9f		      stx	CatPosY
    361  11e3
    362  11e3		       8a		      txa
    363  11e4
    364  11e4		       a2 00		      ldx	#0
    365  11e6				   .DivideLoop
    366  11e6		       38		      sec
    367  11e7		       e8		      inx
    368  11e8		       e9 13		      sbc	#19
    369  11ea		       90 07		      bcc	.AddBack
    370  11ec
    371  11ec		       e0 05		      cpx	#5
    372  11ee		       d0 f6		      bne	.DivideLoop
    373  11f0		       e8		      inx
    374  11f1		       d0 02		      bne	.SetCatPos
    375  11f3
    376  11f3				   .AddBack
    377  11f3		       69 13		      adc	#19
    378  11f5
    379  11f5				   .SetCatPos
    380  11f5		       85 a0		      sta	CatPosition
    381  11f7
    382  11f7		       8a		      txa
    383  11f8		       0a		      asl
    384  11f9		       0a		      asl
    385  11fa		       0a		      asl
    386  11fb		       0a		      asl
    387  11fc		       0a		      asl
    388  11fd		       65 a0		      adc	CatPosition
    389  11ff		       85 a0		      sta	CatPosition
    390  1201
    391  1201		       ca		      dex
    392  1202		       86 a3		      stx	PreCatRows
    393  1204
    394  1204							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    395  1204							; Calculate Hmove offsets for 2nd cat row's food items
    396  1204
    397  1204		       a9 05		      lda	#5
    398  1206		       38		      sec
    399  1207		       e5 a3		      sbc	PreCatRows
    400  1209		       a8		      tay
    401  120a
    402  120a		       b9 a4 00 	      lda	FoodItemL,y
    403  120d		       29 f0		      and	#$F0
    404  120f		       85 bc		      sta	CatRow2FoodL
    405  1211		       aa		      tax
    406  1212		       bd 0f 1d 	      lda	FoodGfx+15,x
    407  1215		       85 be		      sta	CatRow2Color1
    408  1217
    409  1217		       b9 ab 00 	      lda	FoodItemR,y
    410  121a		       29 f0		      and	#$F0
    411  121c		       85 bd		      sta	CatRow2FoodR
    412  121e		       aa		      tax
    413  121f		       bd 0f 1d 	      lda	FoodGfx+15,x
    414  1222		       85 bf		      sta	CatRow2Color2
    415  1224
    416  1224		       b9 b2 00 	      lda	FoodPosX,y
    417  1227		       e9 2c		      sbc	#44
    418  1229		       f0 04		      beq	.Prepare
    419  122b		       90 02		      bcc	.Prepare
    420  122d		       e9 2d		      sbc	#45
    421  122f
    422  122f				   .Prepare
    423  122f		       38		      sec
    424  1230		       e9 01		      sbc	#1
    425  1232
    426  1232		       a2 70		      ldx	#$70
    427  1234		       a0 02		      ldy	#2
    428  1236
    429  1236				   .OffsetLoop
    430  1236		       18		      clc
    431  1237		       69 0f		      adc	#15
    432  1239		       f0 02		      beq	.CalcOffset
    433  123b		       30 0d		      bmi	.MaxOffset
    434  123d
    435  123d				   .CalcOffset
    436  123d		       49 07		      eor	#7
    437  123f		       0a		      asl
    438  1240		       0a		      asl
    439  1241		       0a		      asl
    440  1242		       0a		      asl
    441  1243
    442  1243		       99 b9 00 	      sta	CatRowHmove,y
    443  1246		       a9 00		      lda	#0
    444  1248		       f0 02		      beq	.NextOffset
    445  124a
    446  124a				   .MaxOffset
    447  124a		       96 b9		      stx	CatRowHmove,y
    448  124c
    449  124c				   .NextOffset
    450  124c		       88		      dey
    451  124d		       10 e7		      bpl	.OffsetLoop
    452  124f
    453  124f
    454  124f
    455  124f
    456  124f
    457  124f					      SUBROUTINE
    458  124f
    459  124f
    460  124f
    461  124f
    462  124f
    463  124f
    464  124f		       a9 7a		      lda	#COL_SCORE	; 2
    465  1251		       85 87		      sta	ScoreColor	; 3
    466  1253
    467  1253		       a5 87		      lda	ScoreColor	; 3
    468  1255		       85 06		      sta	COLUP0	; 3 - set color registers
    469  1257		       85 07		      sta	COLUP1	; 3
    470  1259		       85 08		      sta	COLUPF	; 3
    471  125b		       85 09		      sta	COLUBK	; 3
    472  125d
    473  125d		       a5 80		      lda	Frame
    474  125f		       29 0f		      and	#%00001111
    475  1261		       f0 04		      beq	.IncScore
    476  1263		       a9 00		      lda	#0
    477  1265		       f0 02		      beq	.IncSkip
    478  1267				   .IncScore
    479  1267		       a9 89		      lda	#$89
    480  1269				   .IncSkip
    481  1269		       85 85		      sta	BCDScoreAdd+1
    482  126b
    483  126b		       a9 19		      lda	#$19
    484  126d		       85 86		      sta	BCDLevel
    485  126f
    486  126f
    487  126f
    488  126f
    489  126f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    490  126f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    491  126f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    492  126f
    493  126f		       a9 1d		      lda	#>FoodGfx
    494  1271		       85 92		      sta	FoodGfxPtr1+1
    495  1273		       85 94		      sta	FoodGfxPtr2+1
    496  1275
    497  1275		       a9 1e		      lda	#>CatTartGfx
    498  1277		       85 96		      sta	TartGfxPtr1+1
    499  1279		       85 9a		      sta	TartGfxPtr2+1
    500  127b
    501  127b		       a9 1e		      lda	#>CatFaceGfx
    502  127d		       85 98		      sta	CatGfxPtr1+1
    503  127f		       85 9c		      sta	CatGfxPtr2+1
    504  1281
    505  1281		       a5 a0		      lda	CatPosition
    506  1283		       29 1f		      and	#%00011111
    507  1285		       aa		      tax
    508  1286
    509  1286		       18		      clc
    510  1287
    511  1287		       69 06		      adc	#<CatTartGfx
    512  1289		       85 99		      sta	TartGfxPtr2
    513  128b		       69 13		      adc	#19
    514  128d		       85 95		      sta	TartGfxPtr1
    515  128f
    516  128f		       8a		      txa
    517  1290		       69 28		      adc	#<CatFaceGfx
    518  1292		       85 9b		      sta	CatGfxPtr2
    519  1294		       69 13		      adc	#19
    520  1296		       85 97		      sta	CatGfxPtr1
    521  1298
    522  1298		       a9 56		      lda	#$56
    523  129a		       85 88		      sta	PgBarColor
    524  129c
    525  129c		       a9 4a		      lda	#COL_CAT_TART
    526  129e		       85 89		      sta	CatTartColor
    527  12a0
    528  12a0		       a5 80		      lda	Frame
    529  12a2		       29 08		      and	#%00001000
    530  12a4		       4a		      lsr
    531  12a5		       4a		      lsr
    532  12a6		       4a		      lsr
    533  12a7		       a8		      tay
    534  12a8		       b9 1e 1c 	      lda	RainbowGfx,y
    535  12ab		       85 a1		      sta	Rainbow
    536  12ad
    537  12ad		       85 2b		      sta	HMCLR
    538  12af		       85 02		      sta	WSYNC
    539  12b1
    540  12b1		       a9 40		      lda	#$40
    541  12b3		       85 21		      sta	HMP1
    542  12b5
    543  12b5		       a9 80		      lda	#$80
    544  12b7		       85 22		      sta	HMM0
    545  12b9
    546  12b9		       a9 30		      lda	#$30
    547  12bb		       85 20		      sta	HMP0
    548  12bd
    549  12bd		       a9 f0		      lda	#$F0
    550  12bf		       85 23		      sta	HMM1
    551  12c1
    552  12c1		       85 13		      sta	RESM1
    553  12c3
      0  12c3					      SLEEP	4	; 27
      1  12c3				   .CYCLES    SET	4
      2  12c3
      3  12c3				  -	      IF	.CYCLES < 2
      4  12c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  12c3				  -	      ERR
      6  12c3					      ENDIF
      7  12c3
      8  12c3				  -	      IF	.CYCLES & 1
      9  12c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  12c3				  -	      nop	0
     11  12c3				  -	      ELSE
     12  12c3				  -	      bit	VSYNC
     13  12c3				  -	      ENDIF
     14  12c3				  -.CYCLES    SET	.CYCLES - 3
     15  12c3					      ENDIF
     16  12c3
     17  12c3					      REPEAT	.CYCLES / 2
     18  12c3		       ea		      nop
     17  12c3					      REPEND
     18  12c4		       ea		      nop
     19  12c5					      REPEND
    555  12c5
    556  12c5		       85 14		      sta	RESBL
    557  12c7
      0  12c7					      SLEEP	23	; 53
      1  12c7				   .CYCLES    SET	23
      2  12c7
      3  12c7				  -	      IF	.CYCLES < 2
      4  12c7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  12c7				  -	      ERR
      6  12c7					      ENDIF
      7  12c7
      8  12c7					      IF	.CYCLES & 1
      9  12c7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  12c7		       04 00		      nop	0
     11  12c9				  -	      ELSE
     12  12c9				  -	      bit	VSYNC
     13  12c9					      ENDIF
     14  12c9				   .CYCLES    SET	.CYCLES - 3
     15  12c9					      ENDIF
     16  12c9
     17  12c9					      REPEAT	.CYCLES / 2
     18  12c9		       ea		      nop
     17  12c9					      REPEND
     18  12ca		       ea		      nop
     17  12ca					      REPEND
     18  12cb		       ea		      nop
     17  12cb					      REPEND
     18  12cc		       ea		      nop
     17  12cc					      REPEND
     18  12cd		       ea		      nop
     17  12cd					      REPEND
     18  12ce		       ea		      nop
     17  12ce					      REPEND
     18  12cf		       ea		      nop
     17  12cf					      REPEND
     18  12d0		       ea		      nop
     17  12d0					      REPEND
     18  12d1		       ea		      nop
     17  12d1					      REPEND
     18  12d2		       ea		      nop
     19  12d3					      REPEND
    559  12d3
    560  12d3		       85 10		      sta	RESP0
    561  12d5		       85 11		      sta	RESP1
    562  12d7
      0  12d7					      SLEEP	8	; 64
      1  12d7				   .CYCLES    SET	8
      2  12d7
      3  12d7				  -	      IF	.CYCLES < 2
      4  12d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  12d7				  -	      ERR
      6  12d7					      ENDIF
      7  12d7
      8  12d7				  -	      IF	.CYCLES & 1
      9  12d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  12d7				  -	      nop	0
     11  12d7				  -	      ELSE
     12  12d7				  -	      bit	VSYNC
     13  12d7				  -	      ENDIF
     14  12d7				  -.CYCLES    SET	.CYCLES - 3
     15  12d7					      ENDIF
     16  12d7
     17  12d7					      REPEAT	.CYCLES / 2
     18  12d7		       ea		      nop
     17  12d7					      REPEND
     18  12d8		       ea		      nop
     17  12d8					      REPEND
     18  12d9		       ea		      nop
     17  12d9					      REPEND
     18  12da		       ea		      nop
     19  12db					      REPEND
    564  12db
    565  12db		       85 12		      sta	RESM0
    566  12dd
    567  12dd		       85 02		      sta	WSYNC
    568  12df		       85 2a		      sta	HMOVE
    569  12e1
    570  12e1
    571  12e1
    572  12e1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    573  12e1							; Prepare for Main Gameplay Kernel
    574  12e1							;
    575  12e1							; Figure out how many rows to draw before and after the two cat rows
    576  12e1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    577  12e1
    578  12e1
    579  12e1
    580  12e1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    581  12e1							; Finish Vertical Blanking
    582  12e1							;
    583  12e1							; Loop until the end of vertical blanking
    584  12e1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    585  12e1
    586  12e1		       4c 00 13 	      jmp	VblankTimerLoop
    587  12e4
    588  1300		       00 00 00 00*	      ALIGN	$100
    589  1300
    590  1300				   VblankTimerLoop
    591  1300		       ad 84 02 	      lda	INTIM
    592  1303		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     63  1305
     64  1305
     65  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66  1305							; Kernel
     67  1305							;
     68  1305							; Draw the screen
     69  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     70  1305
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1305					      include	code/Kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       a9 00		      lda	#0
      6  1307		       85 02		      sta	WSYNC
      7  1309		       85 01		      sta	VBLANK	; enable display
      8  130b
      9  130b							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  130b					      include	code/ScoreboardKernel.asm
      1  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  130b							; Scoreboard Display
      3  130b							;
      4  130b							; Draw the 6-digit score and level counter.
      5  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  130b
      7  130b					      SUBROUTINE
      8  130b
      9  130b		       a9 13		      lda	#$13
     10  130d		       85 04		      sta	NUSIZ0
     11  130f
     12  130f		       a9 20		      lda	#%00100000
     13  1311		       85 0d		      sta	PF0
     14  1313
     15  1313		       a9 35		      lda	#%00110101
     16  1315		       85 0a		      sta	CTRLPF
     17  1317
     18  1317		       a5 86		      lda	BCDLevel
     19  1319		       4a		      lsr
     20  131a		       4a		      lsr
     21  131b		       4a		      lsr
     22  131c		       85 1e		      sta	ENAM1
     23  131e		       85 1d		      sta	ENAM0
     24  1320
     25  1320		       a9 00		      lda	#0
     26  1322		       85 06		      sta	COLUP0
     27  1324		       85 07		      sta	COLUP1
     28  1326		       85 1b		      sta	GRP0
     29  1328
     30  1328		       a9 ff		      lda	#$FF
     31  132a		       85 1d		      sta	ENAM0
     32  132c		       85 1f		      sta	ENABL
     33  132e		       85 25		      sta	VDELP0
     34  1330		       85 26		      sta	VDELP1
     35  1332
     36  1332		       a9 08		      lda	#8
     37  1334		       8d 96 02 	      sta	TIM64T
     38  1337		       a0 05		      ldy	#5
     39  1339
     40  1339		       85 02		      sta	WSYNC
     41  133b
     42  133b				   ScoreboardLoop
     43  133b
     44  133b		       b9 50 1b 	      lda	LevelGfx,y	; 04
     45  133e		       8d 05 00 	      sta.w	NUSIZ1	; 08
     46  1341
     47  1341		       68		      pla		; 12
     48  1342		       85 1c		      sta	GRP1	; 15
     49  1344		       68		      pla		; 19
     50  1345		       85 1b		      sta	GRP0	; 22
     51  1347
     52  1347		       68		      pla		; 26
     53  1348		       85 1c		      sta	GRP1	; 29
     54  134a		       68		      pla		; 33
     55  134b		       85 1b		      sta	GRP0	; 36
     56  134d
     57  134d		       a9 03		      lda	#3	; 38
     58  134f		       85 05		      sta	NUSIZ1	; 41
     59  1351
     60  1351		       68		      pla		; 45
     61  1352		       aa		      tax		; 47
     62  1353		       68		      pla		; 51
     63  1354		       a8		      tay		; 53
     64  1355		       68		      pla		; 57
     65  1356
     66  1356		       86 1c		      stx	GRP1	; 60
     67  1358		       84 1b		      sty	GRP0	; 63
     68  135a		       85 1c		      sta	GRP1	; 66
     69  135c		       85 1b		      sta	GRP0	; 69
     70  135e
     71  135e		       ac 84 02 	      ldy	INTIM	; 73
     72  1361		       10 d8		      bpl	ScoreboardLoop	; 00/75
     73  1363
     74  1363
     75  1363		       a9 00		      lda	#0	; 01
     76  1365		       85 1b		      sta	GRP0	; 04
     77  1367		       85 1c		      sta	GRP1	; 07
     78  1369		       85 26		      sta	VDELP1	; 10
     79  136b		       85 25		      sta	VDELP0	; 13
     80  136d		       85 1f		      sta	ENABL	; 16
     81  136f		       85 1d		      sta	ENAM0	; 19
     82  1371		       85 1e		      sta	ENAM1	; 22
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1373					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1373							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1373							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1373							; CPU is at cycle 33
      4  1373
      5  1373							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1373							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1373
      8  1373
      9  1373		       a2 ff		      ldx	#$FF
     10  1375		       9a		      txs
     11  1376
     12  1376		       a0 11		      ldy	#17
     13  1378				   .ClearRainbow
     14  1378		       48		      pha
     15  1379		       48		      pha
     16  137a
     17  137a		       88		      dey
     18  137b		       d0 fb		      bne	.ClearRainbow
     19  137d
     20  137d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  137d							; Load rainbow colors into RAM - 65 cycles
     22  137d
     23  137d		       a9 14		      lda	#20
     24  137f		       e5 a0		      sbc	CatPosition	; carry is assumed to be set
     25  1381		       29 1f		      and	#%00011111
     26  1383		       18		      clc
     27  1384		       69 eb		      adc	#RamBowColors+13
     28  1386		       aa		      tax
     29  1387		       9a		      txs
     30  1388
     31  1388		       a0 05		      ldy	#5
     32  138a
     33  138a				   .LoadRainbow
     34  138a		       b9 00 1e 	      lda	RainbowColors,y
     35  138d		       48		      pha
     36  138e		       48		      pha
     37  138f
     38  138f		       88		      dey
     39  1390		       10 f8		      bpl	.LoadRainbow
     40  1392
     41  1392
     42  1392		       85 02		      sta	WSYNC
     43  1394
     44  1394		       a5 87		      lda	ScoreColor
     45  1396		       8d 09 00 	      sta.w	COLUBK
     46  1399
     47  1399		       85 02		      sta	WSYNC
     48  139b
      0  139b					      SLEEP	4
      1  139b				   .CYCLES    SET	4
      2  139b
      3  139b				  -	      IF	.CYCLES < 2
      4  139b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  139b				  -	      ERR
      6  139b					      ENDIF
      7  139b
      8  139b				  -	      IF	.CYCLES & 1
      9  139b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  139b				  -	      nop	0
     11  139b				  -	      ELSE
     12  139b				  -	      bit	VSYNC
     13  139b				  -	      ENDIF
     14  139b				  -.CYCLES    SET	.CYCLES - 3
     15  139b					      ENDIF
     16  139b
     17  139b					      REPEAT	.CYCLES / 2
     18  139b		       ea		      nop
     17  139b					      REPEND
     18  139c		       ea		      nop
     19  139d					      REPEND
     50  139d
     51  139d							; Player 0 is already aligned for drawing the cat's face.
     52  139d
     53  139d							; Align player 1 to draw the current frame's food items for the top row.
     54  139d
     55  139d							; food item can be placed anywhere from 0-88
     56  139d							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     57  139d
     58  139d		       a5 b8		      lda	FoodPosX+6	; 07 - get the food's position for the top row
     59  139f
     60  139f		       38		      sec		; 09
     61  13a0				   .DivideLoop
     62  13a0		       e9 0f		      sbc	#15	; 11
     63  13a2		       b0 fc		      bcs	.DivideLoop	; 13
     64  13a4
     65  13a4		       49 07		      eor	#7	; 15
     66  13a6		       69 01		      adc	#1	; 17
     67  13a8		       0a		      asl		; 19
     68  13a9		       0a		      asl		; 21
     69  13aa		       0a		      asl		; 23
     70  13ab
     71  13ab		       85 11		      sta	RESP1	; 26
     72  13ad
     73  13ad		       0a		      asl		; 53
     74  13ae		       85 21		      sta	HMP1	; 56
     75  13b0
     76  13b0		       a9 00		      lda	#ONE_COPY	; 58
     77  13b2		       85 04		      sta	NUSIZ0	; 61
     78  13b4		       a9 04		      lda	#TWO_WIDE	; 63
     79  13b6		       85 05		      sta	NUSIZ1	; 66
     80  13b8
     81  13b8		       85 02		      sta	WSYNC
     82  13ba
     83  13ba		       4c 00 14 	      jmp	.Align1
     84  13bd
     85  1400		       00 00 00 00*	      ALIGN	$100
     86  1400
     87  1400				   .Align1
     88  1400
     89  1400				   PreKernel
     90  1400		       a2 06		      ldx	#6
     91  1402		       86 c6		      stx	CurrentRow
     92  1404
     93  1404		       85 02		      sta	WSYNC
     94  1406
     95  1406		       a5 f1		      lda	RamBowColors+19
     96  1408		       d0 02		      bne	.SetCatThrobPF
     97  140a		       a5 c0		      lda	ThrobColor+0
     98  140c				   .SetCatThrobPF
     99  140c		       85 c3		      sta	CatThrobPF
    100  140e
    101  140e		       85 02		      sta	WSYNC
    102  1410
      0  1410					      SLEEP	2
      1  1410				   .CYCLES    SET	2
      2  1410
      3  1410				  -	      IF	.CYCLES < 2
      4  1410				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1410				  -	      ERR
      6  1410					      ENDIF
      7  1410
      8  1410				  -	      IF	.CYCLES & 1
      9  1410				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1410				  -	      nop	0
     11  1410				  -	      ELSE
     12  1410				  -	      bit	VSYNC
     13  1410				  -	      ENDIF
     14  1410				  -.CYCLES    SET	.CYCLES - 3
     15  1410					      ENDIF
     16  1410
     17  1410					      REPEAT	.CYCLES / 2
     18  1410		       ea		      nop
     19  1411					      REPEND
    104  1411		       a9 90		      lda	#$90
    105  1413		       85 20		      sta	HMP0
    106  1415
    107  1415		       a9 01		      lda	#PF_REFLECT	; 09
    108  1417		       85 0a		      sta	CTRLPF	; 12
    109  1419
    110  1419		       a5 a1		      lda	Rainbow	; 15
    111  141b		       85 0d		      sta	PF0	; 18
    112  141d
    113  141d		       a9 09		      lda	#COL_CAT_FACE	; 20
    114  141f		       85 06		      sta	COLUP0	; 23
    115  1421
    116  1421		       a5 aa		      lda	FoodItemL+6	; 26
    117  1423		       85 10		      sta	RESP0	; 29
    118  1425		       29 f0		      and	#$F0	; 31
    119  1427		       85 91		      sta	FoodGfxPtr1	; 34
    120  1429		       aa		      tax		; 36
    121  142a		       bd 0f 1d 	      lda	FoodGfx+15,x	; 40
    122  142d		       85 c7		      sta	FoodColor1	; 43
    123  142f
    124  142f		       a5 b1		      lda	FoodItemR+6	; 46
    125  1431		       29 f0		      and	#$F0	; 48
    126  1433		       85 93		      sta	FoodGfxPtr2	; 51
    127  1435		       aa		      tax		; 53
    128  1436		       bd 0f 1d 	      lda	FoodGfx+15,x	; 57
    129  1439		       85 c8		      sta	FoodColor2	; 60
    130  143b
    131  143b		       a5 b8		      lda	FoodPosX+6	; 63
    132  143d		       85 c4		      sta	Temp	; 66
    133  143f
    134  143f		       a2 dd		      ldx	#GAMEPLAY_STACK	; 68
    135  1441		       9a		      txs		; 70
    136  1442
    137  1442		       85 2a		      sta	HMOVE	; 73
    138  1444
    139  1444		       a5 c1		      lda	ThrobColor+1	; 03
    140  1446		       85 09		      sta	COLUBK	; 06
    141  1448		       85 08		      sta	COLUPF	; 09
    142  144a
    143  144a		       a9 80		      lda	#$80	; 11
    144  144c		       85 20		      sta	HMP0	; 14
    145  144e
    146  144e		       a5 a3		      lda	PreCatRows
    147  1450		       d0 03		      bne	HiRows
    148  1452		       4c d4 14 	      jmp	CatRows
    149  1455
    150  1455							; If any part of the cat needs to be drawn in the top row,
    151  1455							; skip straight to CatRows.
    152  1455
    153  1455
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  1455					      include	code/Gameplay Kernel/HiRows.asm
      1  1455							; Draw all the rows above the cat's two rows
      2  1455
      3  1455				   HiRows     SUBROUTINE
      4  1455
      5  1455		       85 02		      sta	WSYNC
      6  1457
      7  1457		       a5 c0		      lda	ThrobColor+0
      8  1459		       85 09		      sta	COLUBK
      9  145b		       85 08		      sta	COLUPF
     10  145d
     11  145d
     12  145d							; First, output a single-color line to draw the bottom of a "throb" line.
     13  145d							; This will probably be a good time to prepare the pointers for the
     14  145d							; food items' graphics, as well as loading the colors for the food items.
     15  145d
     16  145d							; After that, output 14 lines to draw a single row with food items,
     17  145d							; but without drawing the cat. The food graphics will be updated every line,
     18  145d							; but there will probably not be enough time to also update the food colors
     19  145d							; every line throughout the kernel.
     20  145d
     21  145d		       20 00 18 	      jsr	DrawFoodRow
     22  1460
     23  1460		       c6 c6		      dec	CurrentRow	; 73
     24  1462
     25  1462		       85 02		      sta	WSYNC
     26  1464
     27  1464							; Lastly, output four single-color lines to draw most of a "throb" line,
     28  1464							; while setting the position of player 1 to draw the next set of food items.
     29  1464
     30  1464
     31  1464		       a5 c0		      lda	ThrobColor+0
     32  1466		       85 09		      sta	COLUBK
     33  1468		       85 08		      sta	COLUPF
     34  146a		       a9 00		      lda	#0
     35  146c		       85 1b		      sta	GRP0
     36  146e		       85 1c		      sta	GRP1
     37  1470		       85 02		      sta	WSYNC
     38  1472
     39  1472		       a5 c1		      lda	ThrobColor+1	; 03
     40  1474		       85 09		      sta	COLUBK	; 06
     41  1476		       85 08		      sta	COLUPF	; 09
     42  1478
     43  1478		       a4 c6		      ldy	CurrentRow	; 12 - get the row we are drawing
     44  147a		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     45  147d
     46  147d		       38		      sec		; 18
     47  147e				   .DivideLoop
     48  147e		       e9 0f		      sbc	#15	; 20
     49  1480		       b0 fc		      bcs	.DivideLoop	; 22
     50  1482
     51  1482		       8d 11 00 	      sta.w	RESP1	; 26
     52  1485
     53  1485		       49 07		      eor	#7
     54  1487		       69 01		      adc	#1
     55  1489		       0a		      asl
     56  148a		       0a		      asl
     57  148b		       0a		      asl
     58  148c		       0a		      asl
     59  148d		       85 21		      sta	HMP1
     60  148f
     61  148f		       85 02		      sta	WSYNC
     62  1491
     63  1491		       a5 c2		      lda	ThrobColor+2	; 03
     64  1493		       85 09		      sta	COLUBK	; 06
     65  1495		       85 08		      sta	COLUPF	; 09
     66  1497
     67  1497		       20 24 18 	      jsr	Sleep12
     68  149a		       20 24 18 	      jsr	Sleep12
     69  149d		       20 24 18 	      jsr	Sleep12
     70  14a0		       20 24 18 	      jsr	Sleep12
     71  14a3		       20 24 18 	      jsr	Sleep12	; 69
     72  14a6
     73  14a6		       8d 2a 00 	      sta.w	HMOVE	; 73
     74  14a9
     75  14a9		       85 02		      sta	WSYNC
     76  14ab
     77  14ab		       a5 c1		      lda	ThrobColor+1	; 03
     78  14ad		       85 09		      sta	COLUBK	; 06
     79  14af		       85 08		      sta	COLUPF	; 09
     80  14b1
     81  14b1		       b9 a4 00 	      lda	FoodItemL,y	; 13
     82  14b4		       29 f0		      and	#$F0	; 15
     83  14b6		       85 91		      sta	FoodGfxPtr1	; 18
     84  14b8		       aa		      tax		; 20
     85  14b9		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     86  14bc		       85 c7		      sta	FoodColor1	; 27
     87  14be
     88  14be		       b9 ab 00 	      lda	FoodItemR,y	; 31
     89  14c1		       29 f0		      and	#$F0	; 33
     90  14c3		       85 93		      sta	FoodGfxPtr2	; 36
     91  14c5		       aa		      tax		; 38
     92  14c6		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     93  14c9		       85 c8		      sta	FoodColor2	; 45
     94  14cb
     95  14cb		       b9 b2 00 	      lda	FoodPosX,y	; 49
     96  14ce		       85 c4		      sta	Temp	; 52
     97  14d0
     98  14d0		       c6 a3		      dec	PreCatRows
     99  14d2		       d0 81		      bne	HiRows
    100  14d4
    101  14d4							; If this is not the last row before drawing the cat's rows,
    102  14d4							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  14d4					      include	code/Gameplay Kernel/CatRows.asm
      1  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14d4							; Cat Row Kernel
      3  14d4							;
      4  14d4							; This is the subroutine that is used to draw the two gameplay kernel rows
      5  14d4							; containing the cat. It does not draw the throbbing line between the two rows,
      6  14d4							; it only draws a single, 14-scanline row with the cat and food items.
      7  14d4							; This subroutine is called twice in the kernel, once for each of the two rows
      8  14d4							; containing the cat.
      9  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  14d4
     11  14d4				   CatRows    SUBROUTINE
     12  14d4
     13  14d4		       85 02		      sta	WSYNC
     14  14d6
     15  14d6							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     16  14d6							; If the cat is at the very top of the row, draw the top of the pop-tart.
     17  14d6
     18  14d6		       a5 c0		      lda	ThrobColor+0	; 03
     19  14d8		       85 09		      sta	COLUBK	; 06
     20  14da		       85 08		      sta	COLUPF	; 09
     21  14dc
     22  14dc		       a6 c8		      ldx	FoodColor2	; 12
     23  14de		       9a		      txs		; 14
     24  14df
      0  14df					      SLEEP	19	; 41
      1  14df				   .CYCLES    SET	19
      2  14df
      3  14df				  -	      IF	.CYCLES < 2
      4  14df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14df				  -	      ERR
      6  14df					      ENDIF
      7  14df
      8  14df					      IF	.CYCLES & 1
      9  14df					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14df		       04 00		      nop	0
     11  14e1				  -	      ELSE
     12  14e1				  -	      bit	VSYNC
     13  14e1					      ENDIF
     14  14e1				   .CYCLES    SET	.CYCLES - 3
     15  14e1					      ENDIF
     16  14e1
     17  14e1					      REPEAT	.CYCLES / 2
     18  14e1		       ea		      nop
     17  14e1					      REPEND
     18  14e2		       ea		      nop
     17  14e2					      REPEND
     18  14e3		       ea		      nop
     17  14e3					      REPEND
     18  14e4		       ea		      nop
     17  14e4					      REPEND
     18  14e5		       ea		      nop
     17  14e5					      REPEND
     18  14e6		       ea		      nop
     17  14e6					      REPEND
     18  14e7		       ea		      nop
     17  14e7					      REPEND
     18  14e8		       ea		      nop
     19  14e9					      REPEND
     26  14e9
     27  14e9					      SUBROUTINE
     28  14e9
     29  14e9		       a4 c6		      ldy	CurrentRow	; 47
     30  14eb		       b9 b2 00 	      lda	FoodPosX,y	; 51
     31  14ee
     32  14ee		       4c 00 15 	      jmp	.Align2	; 44
     33  1500		       00 00 00 00*	      ALIGN	$100
     34  1500				   .Align2
     35  1500
     36  1500		       c9 30		      cmp	#48	; 53
     37  1502
     38  1502		       a2 00		      ldx	#0	; 55
     39  1504		       a0 0d		      ldy	#13	; 57
     40  1506
     41  1506		       b1 95		      lda	(TartGfxPtr1),y	;
     42  1508		       85 0e		      sta	PF1	;
     43  150a
     44  150a							; Then output the 14 lines to draw a single row. This will include drawing
     45  150a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     46  150a							; All graphics will be updated every line.
     47  150a
     48  150a		       b0 0b		      bcs	.RightEntrance	; 60/59
     49  150c		       90 42		      bcc	.LeftEntrance	; 62
     50  150e
     51  150e							; 14 bytes into the page
     52  150e
     53  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  150e							; Kernel used when food items are closer to the right edge of the screen
     55  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     56  150e
     57  150e				   .RightLoop
     58  150e
     59  150e							; 8 cycles
     60  150e		       b1 97		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     61  1510		       85 1b		      sta	GRP0	; 52
     62  1512
     63  1512							; 9 cycles
     64  1512		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     65  1514		       ba		      tsx		; 57 - load 2nd food item's color
     66  1515		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     67  1517
     68  1517				   .RightEntrance		; enter loop here
     69  1517
     70  1517							; 2 cycles
     71  1517		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     72  1519
     73  1519							; 8 cycles
     74  1519		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     75  151b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     76  151d
     77  151d							; 8 cycles
     78  151d		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     79  151f		       85 1c		      sta	GRP1	; 02
     80  1521
     81  1521							; 7 cycles
     82  1521		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     83  1524		       85 09		      sta	COLUBK	; 09
     84  1526
     85  1526							; 7 cycles
     86  1526		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     87  1529		       85 08		      sta	COLUPF	; 16
     88  152b
     89  152b							; 6 cycles
     90  152b		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
     91  152d		       85 07		      sta	COLUP1	; 22
     92  152f
     93  152f							; 8 cycles
     94  152f		       a5 89		      lda	CatTartColor	; 25
     95  1531		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     96  1533		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     97  1535		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     98  1537
     99  1537							; 5 cycles
    100  1537		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    101  1539
    102  1539							; 2 cycles
    103  1539		       88		      dey		; 41
    104  153a		       10 d2		      bpl	.RightLoop	; 44/43
    105  153c
    106  153c		       a0 12		      ldy	#18	; 45
    107  153e		       b1 99		      lda	(TartGfxPtr2),y	; 50
    108  1540
      0  1540					      SLEEP	2	; 52
      1  1540				   .CYCLES    SET	2
      2  1540
      3  1540				  -	      IF	.CYCLES < 2
      4  1540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1540				  -	      ERR
      6  1540					      ENDIF
      7  1540
      8  1540				  -	      IF	.CYCLES & 1
      9  1540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1540				  -	      nop	0
     11  1540				  -	      ELSE
     12  1540				  -	      bit	VSYNC
     13  1540				  -	      ENDIF
     14  1540				  -.CYCLES    SET	.CYCLES - 3
     15  1540					      ENDIF
     16  1540
     17  1540					      REPEAT	.CYCLES / 2
     18  1540		       ea		      nop
     19  1541					      REPEND
    110  1541
    111  1541		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    112  1543		       ba		      tsx		; 57 - load 2nd food item's color
    113  1544		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    114  1546
    115  1546		       b0 38		      bcs	.End	; 63
    116  1548
    117  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    118  1548							; Kernel used when food items are closer to the left edge of the screen
    119  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    120  1548
    121  1548				   .LeftLoop
    122  1548
    123  1548							; 8 cycles
    124  1548		       b1 97		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    125  154a		       85 1b		      sta	GRP0	; 57
    126  154c
    127  154c							; 5 cycles
    128  154c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    129  154e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    130  1550
    131  1550				   .LeftEntrance		; enter loop here
    132  1550
    133  1550							; 8 cycles
    134  1550		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    135  1552		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    136  1554
    137  1554							; 8 cycles
    138  1554		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    139  1556		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    140  1558
    141  1558							; 7 cycles
    142  1558		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    143  155b		       85 09		      sta	COLUBK	; 09
    144  155d
    145  155d							; 7 cycles
    146  155d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    147  1560		       85 08		      sta	COLUPF	; 16
    148  1562
    149  1562							; 6 cycles
    150  1562		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    151  1564		       85 07		      sta	COLUP1	; 22
    152  1566
    153  1566							; 8 cycles
    154  1566		       a5 89		      lda	CatTartColor	; 25
    155  1568		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    156  156a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    157  156c
    158  156c							; 13 cycles
    159  156c		       b1 93		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    160  156e		       ba		      tsx		; 38 - load 2nd food item's color
    161  156f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    162  1571		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    163  1573
    164  1573							; 5 cycles
    165  1573		       88		      dey		; 46
    166  1574		       10 d2		      bpl	.LeftLoop	; 49/48
    167  1576
    168  1576		       a2 00		      ldx	#0	; 50
    169  1578		       86 08		      stx	COLUPF	; 53
    170  157a
    171  157a		       a0 12		      ldy	#18	; 55
    172  157c		       b1 99		      lda	(TartGfxPtr2),y	; 60
    173  157e
    174  157e		       86 1c		      stx	GRP1	; 63
    175  1580
    176  1580				   .End
    177  1580
    178  1580
    179  1580
    180  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    181  1580							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    182  1580							; cat with the rainbow. In order to align player 1 for the next row's
    183  1580							; food items, it will be neccesary to have three versions of this kernel,
    184  1580							; one for each of the three 60-color-clock spaced positions to reset.
    185  1580							; HMOVE will be written to on the first four scanlines. With a maximum
    186  1580							; movement of 15 color-clocks per scanline, this will allow a movement of
    187  1580							; up to 60 color clocks. With three versions of the kernel, it should be
    188  1580							; possible to put player 1 anywhere on the screen.
    189  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    190  1580
    191  1580
    192  1580
    193  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    194  1580							; Draw throb line #1
    195  1580
    196  1580		       85 0e		      sta	PF1	; 66
    197  1582
    198  1582		       b1 9b		      lda	(CatGfxPtr2),y	; 71
    199  1584		       85 1b		      sta	GRP0	; 74
    200  1586
    201  1586		       a6 c0		      ldx	ThrobColor+0	; 01
    202  1588
      0  1588					      THROB_RAINBOW_BK	18	; 12
      1  1588
      2  1588					      SUBROUTINE
      3  1588
      4  1588				   .X	      SET	18
      5  1588
      6  1588		       a5 f0		      lda	RamBowColors+.X
      7  158a		       d0 04		      bne	.Rainbow
      8  158c
      9  158c		       86 09		      stx	COLUBK
     10  158e		       f0 03		      beq	.End
     11  1590
     12  1590				   .Rainbow
     13  1590		       85 09		      sta	COLUBK
     14  1592		       ea		      nop
     15  1593
     16  1593				   .End
     17  1593
    204  1593
    205  1593		       a5 c3		      lda	CatThrobPF	; 15
    206  1595		       85 08		      sta	COLUPF	; 18
    207  1597		       8e 07 00 	      stx.w	COLUP1	; 22
    208  159a
    209  159a		       a5 89		      lda	CatTartColor	; 25
    210  159c		       85 08		      sta	COLUPF	; 28
    211  159e		       86 09		      stx	COLUBK	; 31
    212  15a0
    213  15a0		       88		      dey		; 33
    214  15a1		       85 11		      sta	RESP1	; 36
    215  15a3		       86 08		      stx	COLUPF	; 39
    216  15a5
    217  15a5		       b1 9b		      lda	(CatGfxPtr2),y	; 44
    218  15a7		       85 1b		      sta	GRP0	; 47
    219  15a9
    220  15a9		       b1 99		      lda	(TartGfxPtr2),y	; 52
    221  15ab		       85 0e		      sta	PF1	; 55
    222  15ad
    223  15ad		       c6 c6		      dec	CurrentRow	; 60
    224  15af		       a2 00		      ldx	#0	; 62
    225  15b1		       86 1c		      stx	GRP1	; 65
    226  15b3
    227  15b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  15b3							; Draw throb line #2
    229  15b3
    230  15b3		       a5 bb		      lda	CatRowHmove+2	; 68
    231  15b5		       85 21		      sta	HMP1	; 71
      0  15b7					      SLEEP	2	; 73
      1  15b7				   .CYCLES    SET	2
      2  15b7
      3  15b7				  -	      IF	.CYCLES < 2
      4  15b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b7				  -	      ERR
      6  15b7					      ENDIF
      7  15b7
      8  15b7				  -	      IF	.CYCLES & 1
      9  15b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b7				  -	      nop	0
     11  15b7				  -	      ELSE
     12  15b7				  -	      bit	VSYNC
     13  15b7				  -	      ENDIF
     14  15b7				  -.CYCLES    SET	.CYCLES - 3
     15  15b7					      ENDIF
     16  15b7
     17  15b7					      REPEAT	.CYCLES / 2
     18  15b7		       ea		      nop
     19  15b8					      REPEND
    233  15b8
    234  15b8		       a6 c1		      ldx	ThrobColor+1	; 00
      0  15ba					      THROB_RAINBOW_BK	17	; 11
      1  15ba
      2  15ba					      SUBROUTINE
      3  15ba
      4  15ba				   .X	      SET	17
      5  15ba
      6  15ba		       a5 ef		      lda	RamBowColors+.X
      7  15bc		       d0 04		      bne	.Rainbow
      8  15be
      9  15be		       86 09		      stx	COLUBK
     10  15c0		       f0 03		      beq	.End
     11  15c2
     12  15c2				   .Rainbow
     13  15c2		       85 09		      sta	COLUBK
     14  15c4		       ea		      nop
     15  15c5
     16  15c5				   .End
     17  15c5
      0  15c5					      THROB_RAINBOW_PF	18	; 22
      1  15c5
      2  15c5					      SUBROUTINE
      3  15c5
      4  15c5				   .X	      SET	18
      5  15c5
      6  15c5		       a5 f0		      lda	RamBowColors+.X
      7  15c7		       d0 04		      bne	.Rainbow
      8  15c9
      9  15c9		       86 08		      stx	COLUPF
     10  15cb		       f0 03		      beq	.End
     11  15cd
     12  15cd				   .Rainbow
     13  15cd		       85 08		      sta	COLUPF
     14  15cf		       ea		      nop
     15  15d0
     16  15d0				   .End
     17  15d0
    237  15d0
    238  15d0		       a5 89		      lda	CatTartColor	; 25
    239  15d2		       85 08		      sta	COLUPF	; 28
    240  15d4		       86 09		      stx	COLUBK	; 31
    241  15d6		       86 08		      stx	COLUPF	; 34
    242  15d8
    243  15d8		       88		      dey		; 36
    244  15d9
    245  15d9		       a6 c6		      ldx	CurrentRow	; 39
    246  15db		       b5 b2		      lda	FoodPosX,x	; 43
    247  15dd		       c9 2d		      cmp	#45	; 45
    248  15df		       10 01		      bpl	.RightSide	; 48/47
      0  15e1					      SKIP_WORD		; 51
      1  15e1
      2  15e1		       0c		      HEX	0C
      3  15e2
    250  15e2				   .RightSide
    251  15e2		       85 11		      sta	RESP1	; 51
    252  15e4
    253  15e4		       b1 9b		      lda	(CatGfxPtr2),y	; 56
    254  15e6		       85 1b		      sta	GRP0	; 59
    255  15e8
    256  15e8		       b1 99		      lda	(TartGfxPtr2),y	; 64
    257  15ea		       85 0e		      sta	PF1	; 67
      0  15ec					      SLEEP	3	; 70
      1  15ec				   .CYCLES    SET	3
      2  15ec
      3  15ec				  -	      IF	.CYCLES < 2
      4  15ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ec				  -	      ERR
      6  15ec					      ENDIF
      7  15ec
      8  15ec					      IF	.CYCLES & 1
      9  15ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ec		       04 00		      nop	0
     11  15ee				  -	      ELSE
     12  15ee				  -	      bit	VSYNC
     13  15ee					      ENDIF
     14  15ee				   .CYCLES    SET	.CYCLES - 3
     15  15ee					      ENDIF
     16  15ee
     17  15ee				  -	      REPEAT	.CYCLES / 2
     18  15ee				  -	      nop
     19  15ee					      REPEND
    259  15ee		       85 2a		      sta	HMOVE	; 73
    260  15f0
    261  15f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    262  15f0							; Draw throb line #3
    263  15f0
    264  15f0		       a6 c2		      ldx	ThrobColor+2	; 00
      0  15f2					      THROB_RAINBOW_BK	16	; 11
      1  15f2
      2  15f2					      SUBROUTINE
      3  15f2
      4  15f2				   .X	      SET	16
      5  15f2
      6  15f2		       a5 ee		      lda	RamBowColors+.X
      7  15f4		       d0 04		      bne	.Rainbow
      8  15f6
      9  15f6		       86 09		      stx	COLUBK
     10  15f8		       f0 03		      beq	.End
     11  15fa
     12  15fa				   .Rainbow
     13  15fa		       85 09		      sta	COLUBK
     14  15fc		       ea		      nop
     15  15fd
     16  15fd				   .End
     17  15fd
      0  15fd					      THROB_RAINBOW_PF	17	; 22
      1  15fd
      2  15fd					      SUBROUTINE
      3  15fd
      4  15fd				   .X	      SET	17
      5  15fd
      6  15fd		       a5 ef		      lda	RamBowColors+.X
      7  15ff		       d0 04		      bne	.Rainbow
      8  1601
      9  1601		       86 08		      stx	COLUPF
     10  1603		       f0 03		      beq	.End
     11  1605
     12  1605				   .Rainbow
     13  1605		       85 08		      sta	COLUPF
     14  1607		       ea		      nop
     15  1608
     16  1608				   .End
     17  1608
    267  1608
    268  1608		       a5 89		      lda	CatTartColor	; 25
    269  160a		       85 08		      sta	COLUPF	; 28
    270  160c		       86 09		      stx	COLUBK	; 31
    271  160e		       86 08		      stx	COLUPF	; 34
    272  1610
    273  1610		       88		      dey		; 36
    274  1611
    275  1611		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    276  1613		       85 1b		      sta	GRP0	; 44
    277  1615
    278  1615		       b1 99		      lda	(TartGfxPtr2),y	; 49
    279  1617		       85 0e		      sta	PF1	; 52
    280  1619
    281  1619		       a5 bc		      lda	CatRow2FoodL	; 55
    282  161b		       85 91		      sta	FoodGfxPtr1	; 58
    283  161d		       a5 bd		      lda	CatRow2FoodR	; 61
    284  161f		       85 93		      sta	FoodGfxPtr2	; 64
    285  1621
    286  1621		       a5 ba		      lda	CatRowHmove+1	; 67
    287  1623		       85 21		      sta	HMP1	; 70
    288  1625
    289  1625		       85 2a		      sta	HMOVE	; 73
    290  1627
    291  1627							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    292  1627							; Draw throb line #4
    293  1627
    294  1627		       a6 c1		      ldx	ThrobColor+1	; 00
      0  1629					      THROB_RAINBOW_BK	15	; 11
      1  1629
      2  1629					      SUBROUTINE
      3  1629
      4  1629				   .X	      SET	15
      5  1629
      6  1629		       a5 ed		      lda	RamBowColors+.X
      7  162b		       d0 04		      bne	.Rainbow
      8  162d
      9  162d		       86 09		      stx	COLUBK
     10  162f		       f0 03		      beq	.End
     11  1631
     12  1631				   .Rainbow
     13  1631		       85 09		      sta	COLUBK
     14  1633		       ea		      nop
     15  1634
     16  1634				   .End
     17  1634
      0  1634					      THROB_RAINBOW_PF	16	; 22
      1  1634
      2  1634					      SUBROUTINE
      3  1634
      4  1634				   .X	      SET	16
      5  1634
      6  1634		       a5 ee		      lda	RamBowColors+.X
      7  1636		       d0 04		      bne	.Rainbow
      8  1638
      9  1638		       86 08		      stx	COLUPF
     10  163a		       f0 03		      beq	.End
     11  163c
     12  163c				   .Rainbow
     13  163c		       85 08		      sta	COLUPF
     14  163e		       ea		      nop
     15  163f
     16  163f				   .End
     17  163f
    297  163f
    298  163f		       a5 89		      lda	CatTartColor	; 25
    299  1641		       85 08		      sta	COLUPF	; 28
    300  1643		       86 09		      stx	COLUBK	; 31
    301  1645		       86 08		      stx	COLUPF	; 34
    302  1647
    303  1647		       88		      dey		; 36
    304  1648
    305  1648		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    306  164a		       85 1b		      sta	GRP0	; 44
    307  164c
    308  164c		       b1 99		      lda	(TartGfxPtr2),y	; 49
    309  164e		       85 0e		      sta	PF1	; 52
    310  1650
    311  1650		       a5 be		      lda	CatRow2Color1	; 55
    312  1652		       85 c7		      sta	FoodColor1	; 58
    313  1654		       ae bf 00 	      ldx.w	CatRow2Color2	; 55
    314  1657		       9a		      txs		; 58
    315  1658
    316  1658		       a5 b9		      lda	CatRowHmove+0	; 67
    317  165a		       85 21		      sta	HMP1	; 70
    318  165c
    319  165c		       85 2a		      sta	HMOVE	; 73
    320  165e
    321  165e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  165e							; Draw throb line #5
    323  165e
    324  165e					      SUBROUTINE
    325  165e
    326  165e		       a6 c0		      ldx	ThrobColor+0	; 00
      0  1660					      THROB_RAINBOW_BK	14	; 11
      1  1660
      2  1660					      SUBROUTINE
      3  1660
      4  1660				   .X	      SET	14
      5  1660
      6  1660		       a5 ec		      lda	RamBowColors+.X
      7  1662		       d0 04		      bne	.Rainbow
      8  1664
      9  1664		       86 09		      stx	COLUBK
     10  1666		       f0 03		      beq	.End
     11  1668
     12  1668				   .Rainbow
     13  1668		       85 09		      sta	COLUBK
     14  166a		       ea		      nop
     15  166b
     16  166b				   .End
     17  166b
      0  166b					      THROB_RAINBOW_PF	15	; 22
      1  166b
      2  166b					      SUBROUTINE
      3  166b
      4  166b				   .X	      SET	15
      5  166b
      6  166b		       a5 ed		      lda	RamBowColors+.X
      7  166d		       d0 04		      bne	.Rainbow
      8  166f
      9  166f		       86 08		      stx	COLUPF
     10  1671		       f0 03		      beq	.End
     11  1673
     12  1673				   .Rainbow
     13  1673		       85 08		      sta	COLUPF
     14  1675		       ea		      nop
     15  1676
     16  1676				   .End
     17  1676
    329  1676
    330  1676		       a5 89		      lda	CatTartColor	; 25
    331  1678		       85 08		      sta	COLUPF	; 28
    332  167a		       86 09		      stx	COLUBK	; 31
    333  167c		       86 08		      stx	COLUPF	; 34
    334  167e
    335  167e		       88		      dey		; 36
    336  167f
    337  167f		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    338  1681		       85 1b		      sta	GRP0	; 44
    339  1683
    340  1683		       a6 c6		      ldx	CurrentRow	; 47
    341  1685		       b5 b2		      lda	FoodPosX,x	; 51
    342  1687		       c9 30		      cmp	#48	; 53
    343  1689
    344  1689		       a2 00		      ldx	#0	; 55
    345  168b		       ea		      nop		; 57
    346  168c
    347  168c							; Then output the 14 lines to draw a single row. This will include drawing
    348  168c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    349  168c							; All graphics will be updated every line.
    350  168c
    351  168c		       b0 0b		      bcs	.RightEntrance	; 60/59
    352  168e		       90 42		      bcc	.LeftEntrance	; 62
    353  1690
    354  1690							; 14 bytes into the page
    355  1690
    356  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    357  1690							; Kernel used when food items are closer to the right edge of the screen
    358  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    359  1690
    360  1690				   .RightLoop
    361  1690
    362  1690							; 8 cycles
    363  1690		       b1 9b		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    364  1692		       85 1b		      sta	GRP0	; 52
    365  1694
    366  1694							; 9 cycles
    367  1694		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    368  1696		       ba		      tsx		; 57 - load 2nd food item's color
    369  1697		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    370  1699
    371  1699				   .RightEntrance		; enter loop here
    372  1699
    373  1699							; 2 cycles
    374  1699		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    375  169b
    376  169b							; 8 cycles
    377  169b		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    378  169d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    379  169f
    380  169f							; 8 cycles
    381  169f		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    382  16a1		       85 1c		      sta	GRP1	; 02
    383  16a3
    384  16a3							; 7 cycles
    385  16a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    386  16a6		       85 09		      sta	COLUBK	; 09
    387  16a8
    388  16a8							; 7 cycles
    389  16a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    390  16ab		       85 08		      sta	COLUPF	; 16
    391  16ad
    392  16ad							; 6 cycles
    393  16ad		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    394  16af		       85 07		      sta	COLUP1	; 22
    395  16b1
    396  16b1							; 8 cycles
    397  16b1		       a5 89		      lda	CatTartColor	; 25
    398  16b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    399  16b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    400  16b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    401  16b9
    402  16b9							; 5 cycles
    403  16b9		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    404  16bb
    405  16bb							; 2 cycles
    406  16bb		       88		      dey		; 41
    407  16bc		       10 d2		      bpl	.RightLoop	; 44/43
    408  16be
    409  16be		       a0 12		      ldy	#18	; 45
    410  16c0		       b1 99		      lda	(TartGfxPtr2),y	; 50
    411  16c2
      0  16c2					      SLEEP	2	; 52
      1  16c2				   .CYCLES    SET	2
      2  16c2
      3  16c2				  -	      IF	.CYCLES < 2
      4  16c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c2				  -	      ERR
      6  16c2					      ENDIF
      7  16c2
      8  16c2				  -	      IF	.CYCLES & 1
      9  16c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c2				  -	      nop	0
     11  16c2				  -	      ELSE
     12  16c2				  -	      bit	VSYNC
     13  16c2				  -	      ENDIF
     14  16c2				  -.CYCLES    SET	.CYCLES - 3
     15  16c2					      ENDIF
     16  16c2
     17  16c2					      REPEAT	.CYCLES / 2
     18  16c2		       ea		      nop
     19  16c3					      REPEND
    413  16c3
    414  16c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    415  16c5		       ba		      tsx		; 57 - load 2nd food item's color
    416  16c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    417  16c8
    418  16c8		       b0 36		      bcs	.End	; 63
    419  16ca
    420  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    421  16ca							; Kernel used when food items are closer to the left edge of the screen
    422  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  16ca
    424  16ca				   .LeftLoop
    425  16ca
    426  16ca							; 8 cycles
    427  16ca		       b1 9b		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    428  16cc		       85 1b		      sta	GRP0	; 57
    429  16ce
    430  16ce							; 5 cycles
    431  16ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    432  16d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    433  16d2
    434  16d2				   .LeftEntrance		; enter loop here
    435  16d2
    436  16d2							; 8 cycles
    437  16d2		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    438  16d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    439  16d6
    440  16d6							; 8 cycles
    441  16d6		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    442  16d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    443  16da
    444  16da							; 7 cycles
    445  16da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    446  16dd		       85 09		      sta	COLUBK	; 09
    447  16df
    448  16df							; 7 cycles
    449  16df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    450  16e2		       85 08		      sta	COLUPF	; 16
    451  16e4
    452  16e4							; 6 cycles
    453  16e4		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    454  16e6		       85 07		      sta	COLUP1	; 22
    455  16e8
    456  16e8							; 8 cycles
    457  16e8		       a5 89		      lda	CatTartColor	; 25
    458  16ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    459  16ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    460  16ee
    461  16ee							; 13 cycles
    462  16ee		       b1 93		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    463  16f0		       ba		      tsx		; 38 - load 2nd food item's color
    464  16f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    465  16f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    466  16f5
    467  16f5							; 5 cycles
    468  16f5		       88		      dey		; 46
    469  16f6		       10 d2		      bpl	.LeftLoop	; 49/48
    470  16f8
    471  16f8		       a2 00		      ldx	#0	; 50
    472  16fa		       86 08		      stx	COLUPF	; 53
    473  16fc
    474  16fc		       a0 12		      ldy	#18	; 55
    475  16fe		       b1 99		      lda	(TartGfxPtr2),y	; 60
    476  1700
    477  1700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    478  1700
    479  1700				   .End
    480  1700
    481  1700		       a2 ff		      ldx	#$FF	; 65
    482  1702		       9a		      txs		; 67
    483  1703
    484  1703		       a2 00		      ldx	#0
    485  1705
    486  1705							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    487  1705							; Use this time to prepare the next row's food item pointers (unless this is
    488  1705							; the last row). If this is the last row, skip over LoRows.
    489  1705
    490  1705		       85 02		      sta	WSYNC
    491  1707		       a5 c0		      lda	ThrobColor+0
    492  1709		       85 09		      sta	COLUBK
    493  170b		       85 08		      sta	COLUPF
    494  170d		       86 1c		      stx	GRP1
      0  170f					      SLEEP	25
      1  170f				   .CYCLES    SET	25
      2  170f
      3  170f				  -	      IF	.CYCLES < 2
      4  170f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  170f				  -	      ERR
      6  170f					      ENDIF
      7  170f
      8  170f					      IF	.CYCLES & 1
      9  170f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  170f		       04 00		      nop	0
     11  1711				  -	      ELSE
     12  1711				  -	      bit	VSYNC
     13  1711					      ENDIF
     14  1711				   .CYCLES    SET	.CYCLES - 3
     15  1711					      ENDIF
     16  1711
     17  1711					      REPEAT	.CYCLES / 2
     18  1711		       ea		      nop
     17  1711					      REPEND
     18  1712		       ea		      nop
     17  1712					      REPEND
     18  1713		       ea		      nop
     17  1713					      REPEND
     18  1714		       ea		      nop
     17  1714					      REPEND
     18  1715		       ea		      nop
     17  1715					      REPEND
     18  1716		       ea		      nop
     17  1716					      REPEND
     18  1717		       ea		      nop
     17  1717					      REPEND
     18  1718		       ea		      nop
     17  1718					      REPEND
     18  1719		       ea		      nop
     17  1719					      REPEND
     18  171a		       ea		      nop
     17  171a					      REPEND
     18  171b		       ea		      nop
     19  171c					      REPEND
    496  171c		       86 1b		      stx	GRP0
    497  171e
    498  171e		       c6 c6		      dec	CurrentRow
    499  1720		       30 03		      bmi	.GpEnd
    500  1722
    501  1722							; If the cat is at the very bottom of the screen, don't disable the
    502  1722							; missile/player graphics until after they are drawn, so they don't get
    503  1722							; clipped at the bottom of the screen. An easy way to do this would be to
    504  1722							; simply disable them after they would have been drawn, whether they are
    505  1722							; already disabled or not.
    506  1722
    507  1722		       4c 25 18 	      jmp	LoRows
    508  1725
    509  1725				   .GpEnd
    510  1725		       4c a7 18 	      jmp	GameplayEnd
    511  1728
    512  1800		       00 00 00 00*	      ALIGN	$100
    513  1800
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1800					      include	subroutines/DrawFoodRow.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 91		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 c7		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c4		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 93		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 c8		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE code/Gameplay Kernel/CatRows.asm
    515  1825
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1825					      include	code/Gameplay Kernel/LoRows.asm
      1  1825							; Draw all the rows below the cat's two rows.
      2  1825
      3  1825				   LoRows     SUBROUTINE
      4  1825
      5  1825		       85 02		      sta	WSYNC
      6  1827
      7  1827							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      8  1827							; player 1 for the next row's food items.
      9  1827
     10  1827		       a5 c1		      lda	ThrobColor+1	; 03
     11  1829		       85 09		      sta	COLUBK	; 06
     12  182b		       85 08		      sta	COLUPF	; 09
     13  182d
     14  182d		       a4 c6		      ldy	CurrentRow	; 12 - get the row we are drawing
     15  182f		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     16  1832
     17  1832		       38		      sec		; 18
     18  1833				   .DivideLoop
     19  1833		       e9 0f		      sbc	#15	; 20
     20  1835		       b0 fc		      bcs	.DivideLoop	; 22
     21  1837
     22  1837		       8d 11 00 	      sta.w	RESP1	; 26
     23  183a
     24  183a		       49 07		      eor	#7
     25  183c
     26  183c		       69 01		      adc	#1
     27  183e		       0a		      asl
     28  183f		       0a		      asl
     29  1840		       0a		      asl
     30  1841		       0a		      asl
     31  1842		       85 21		      sta	HMP1
     32  1844
     33  1844		       85 02		      sta	WSYNC
     34  1846
     35  1846		       a5 c2		      lda	ThrobColor+2	; 03
     36  1848		       85 09		      sta	COLUBK	; 06
     37  184a		       85 08		      sta	COLUPF	; 09
     38  184c
     39  184c		       20 24 18 	      jsr	Sleep12
     40  184f		       20 24 18 	      jsr	Sleep12
     41  1852		       20 24 18 	      jsr	Sleep12
     42  1855		       20 24 18 	      jsr	Sleep12
     43  1858		       20 24 18 	      jsr	Sleep12	; 69
     44  185b
     45  185b		       8d 2a 00 	      sta.w	HMOVE	; 73
     46  185e
     47  185e		       85 02		      sta	WSYNC
     48  1860
     49  1860		       a5 c1		      lda	ThrobColor+1
     50  1862		       85 09		      sta	COLUBK
     51  1864		       85 08		      sta	COLUPF
     52  1866		       85 02		      sta	WSYNC
     53  1868
     54  1868		       a5 c0		      lda	ThrobColor+0	; 3
     55  186a		       85 09		      sta	COLUBK	; 6
     56  186c		       85 08		      sta	COLUPF	; 9
     57  186e
     58  186e		       a4 c6		      ldy	CurrentRow	; 12
     59  1870
     60  1870		       b9 a4 00 	      lda	FoodItemL,y	; 16
     61  1873		       29 f0		      and	#$F0	; 18
     62  1875		       85 91		      sta	FoodGfxPtr1	; 21
     63  1877		       aa		      tax		; 23
     64  1878		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     65  187b		       85 c7		      sta	FoodColor1	; 30
     66  187d
     67  187d		       b9 ab 00 	      lda	FoodItemR,y	; 34
     68  1880		       29 f0		      and	#$F0	; 37
     69  1882		       85 93		      sta	FoodGfxPtr2	; 39
     70  1884		       aa		      tax		; 41
     71  1885		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     72  1888		       85 c8		      sta	FoodColor2	; 48
     73  188a
     74  188a		       b9 b2 00 	      lda	FoodPosX,y	; 52
     75  188d		       85 c4		      sta	Temp	; 55
     76  188f
     77  188f
     78  188f
     79  188f							; Output 14 lines to draw a row, exactly the same as in HiRows.
     80  188f							; It may be possible to code this as a subroutine to save ROM space.
     81  188f
     82  188f		       20 00 18 	      jsr	DrawFoodRow	; 61
     83  1892
     84  1892		       85 02		      sta	WSYNC
     85  1894
     86  1894							; Lastly, output a single line for the next "throb" line.
     87  1894							; Use this time to prepare the next row's food item pointers (unless this is
     88  1894							; the last row). If this is not the last row, loop to LoRows for the next row.
     89  1894
     90  1894		       a5 c0		      lda	ThrobColor+0
     91  1896		       85 09		      sta	COLUBK
     92  1898		       85 08		      sta	COLUPF
     93  189a		       a9 00		      lda	#0
     94  189c		       85 1b		      sta	GRP0
     95  189e		       85 1c		      sta	GRP1
     96  18a0
     97  18a0		       c6 c6		      dec	CurrentRow
     98  18a2		       10 81		      bpl	LoRows
     99  18a4
    100  18a4		       a2 ff		      ldx	#$FF
    101  18a6		       9a		      txs
    102  18a7
    103  18a7				   GameplayEnd
    104  18a7		       85 02		      sta	WSYNC
      0  18a9					      SLEEP	2
      1  18a9				   .CYCLES    SET	2
      2  18a9
      3  18a9				  -	      IF	.CYCLES < 2
      4  18a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  18a9				  -	      ERR
      6  18a9					      ENDIF
      7  18a9
      8  18a9				  -	      IF	.CYCLES & 1
      9  18a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  18a9				  -	      nop	0
     11  18a9				  -	      ELSE
     12  18a9				  -	      bit	VSYNC
     13  18a9				  -	      ENDIF
     14  18a9				  -.CYCLES    SET	.CYCLES - 3
     15  18a9					      ENDIF
     16  18a9
     17  18a9					      REPEAT	.CYCLES / 2
     18  18a9		       ea		      nop
     19  18aa					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  18aa					      include	code/ProgressHealthKernel.asm
      1  18aa		       a5 c1		      lda	ThrobColor+1
      2  18ac		       85 09		      sta	COLUBK
      3  18ae		       a9 00		      lda	#0
      4  18b0		       85 0d		      sta	PF0
      5  18b2		       85 0a		      sta	CTRLPF
      6  18b4		       a9 09		      lda	#COL_CAT_FACE
      7  18b6		       85 08		      sta	COLUPF
      8  18b8
      0  18b8					      SLEEP	32	; 53
      1  18b8				   .CYCLES    SET	32
      2  18b8
      3  18b8				  -	      IF	.CYCLES < 2
      4  18b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  18b8				  -	      ERR
      6  18b8					      ENDIF
      7  18b8
      8  18b8				  -	      IF	.CYCLES & 1
      9  18b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  18b8				  -	      nop	0
     11  18b8				  -	      ELSE
     12  18b8				  -	      bit	VSYNC
     13  18b8				  -	      ENDIF
     14  18b8				  -.CYCLES    SET	.CYCLES - 3
     15  18b8					      ENDIF
     16  18b8
     17  18b8					      REPEAT	.CYCLES / 2
     18  18b8		       ea		      nop
     17  18b8					      REPEND
     18  18b9		       ea		      nop
     17  18b9					      REPEND
     18  18ba		       ea		      nop
     17  18ba					      REPEND
     18  18bb		       ea		      nop
     17  18bb					      REPEND
     18  18bc		       ea		      nop
     17  18bc					      REPEND
     18  18bd		       ea		      nop
     17  18bd					      REPEND
     18  18be		       ea		      nop
     17  18be					      REPEND
     18  18bf		       ea		      nop
     17  18bf					      REPEND
     18  18c0		       ea		      nop
     17  18c0					      REPEND
     18  18c1		       ea		      nop
     17  18c1					      REPEND
     18  18c2		       ea		      nop
     17  18c2					      REPEND
     18  18c3		       ea		      nop
     17  18c3					      REPEND
     18  18c4		       ea		      nop
     17  18c4					      REPEND
     18  18c5		       ea		      nop
     17  18c5					      REPEND
     18  18c6		       ea		      nop
     17  18c6					      REPEND
     18  18c7		       ea		      nop
     19  18c8					      REPEND
     10  18c8
     11  18c8		       a9 20		      lda	#$20	; 55
     12  18ca		       85 20		      sta	HMP0	; 58
     13  18cc		       a9 b0		      lda	#$B0	; 60
     14  18ce		       85 21		      sta	HMP1	; 63
     15  18d0
     16  18d0		       85 10		      sta	RESP0	; 66
     17  18d2		       85 11		      sta	RESP1	; 69
     18  18d4
     19  18d4		       a9 00		      lda	#$00	; 71
     20  18d6
     21  18d6		       85 2a		      sta	HMOVE	; 74
     22  18d8
     23  18d8		       85 06		      sta	COLUP0
     24  18da		       85 07		      sta	COLUP1
     25  18dc
     26  18dc		       a5 87		      lda	ScoreColor
     27  18de		       85 09		      sta	COLUBK
     28  18e0
     29  18e0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  18e2		       85 04		      sta	NUSIZ0
     31  18e4		       85 05		      sta	NUSIZ1
     32  18e6
     33  18e6		       a9 08		      lda	#REFP_TRUE
     34  18e8		       85 0c		      sta	REFP1
     35  18ea
     36  18ea					      SUBROUTINE
     37  18ea
     38  18ea		       a0 04		      ldy	#4
     39  18ec		       85 02		      sta	WSYNC
     40  18ee
     41  18ee							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  18ee				   .HealthTop		; draw top of health
     43  18ee
     44  18ee		       a2 03		      ldx	#3
     45  18f0
     46  18f0				   .Loop
     47  18f0		       85 02		      sta	WSYNC
     48  18f2
     49  18f2		       b9 6f 1b 	      lda	HealthTopGfx,y	; 04
     50  18f5		       85 1b		      sta	GRP0	; 07
     51  18f7		       85 1c		      sta	GRP1	; 10
     52  18f9		       a9 00		      lda	#$00	; 12
     53  18fb		       85 0f		      sta	PF2	; 15
     54  18fd
     55  18fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     56  18fd							; Set the pointers for health graphics - 26 cycles
     57  18fd
     58  18fd		       18		      clc		; 17
     59  18fe
     60  18fe		       a9 1b		      lda	#>HealthLeftGfx	; 19
     61  1900		       85 9a		      sta	HthGfxLPtr+1	; 22
     62  1902		       85 9c		      sta	HthGfxRPtr+1	; 25
     63  1904
     64  1904		       a9 74		      lda	#<HealthLeftGfx	; 27
     65  1906		       65 8b		      adc	Health	; 30
     66  1908		       85 99		      sta	HthGfxLPtr	; 33
     67  190a
     68  190a		       a9 94		      lda	#<HealthRightGfx	; 35
     69  190c		       65 8b		      adc	Health	; 38
     70  190e		       85 9b		      sta	HthGfxRPtr	; 41
     71  1910
     72  1910
     73  1910
     74  1910		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
     75  1913		       85 0f		      sta	PF2	; 48
     76  1915
     77  1915		       ca		      dex		; 50
     78  1916		       d0 d8		      bne	.Loop	; 52
     79  1918
     80  1918		       88		      dey		; 54
     81  1919		       10 d3		      bpl	.HealthTop	; 56
     82  191b
     83  191b
     84  191b					      SUBROUTINE
     85  191b
     86  191b
     87  191b		       a0 03		      ldy	#3	; 58
     88  191d		       a2 03		      ldx	#3	; 60
     89  191f		       86 c4		      stx	Temp	; 63
     90  1921
     91  1921		       4c 00 1a 	      jmp	.HealthMiddle	; 66
     92  1924
     93  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
     94  1a00
     95  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  1a00				   .HealthMiddle		; draw middle of health, with progress bar
     97  1a00
     98  1a00		       85 02		      sta	WSYNC
     99  1a02				   .Loop
    100  1a02		       a5 8c		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    101  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    102  1a06
    103  1a06		       a5 8d		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    104  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    105  1a0a
    106  1a0a		       a5 8e		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    107  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    108  1a0e
    109  1a0e		       a5 88		      lda	PgBarColor	; 21 - get the progress bar color
    110  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    111  1a12
    112  1a12		       a5 8f		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    113  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    114  1a16
    115  1a16		       b1 99		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    116  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    117  1a1a		       b1 9b		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    118  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    119  1a1e
    120  1a1e		       a5 90		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    121  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    122  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    123  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    124  1a26
    125  1a26		       a5 87		      lda	ScoreColor	; 60 - get the color for the background
    126  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    127  1a2b
    128  1a2b		       ca		      dex		; 66
    129  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    130  1a2e
    131  1a2e		       a6 c4		      ldx	Temp	; 71
    132  1a30
    133  1a30		       88		      dey		; 73
    134  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    135  1a33
    136  1a33
    137  1a33
    138  1a33
    139  1a33
    140  1a33
    141  1a33
    142  1a33
    143  1a33
    144  1a33					      SUBROUTINE
    145  1a33
    146  1a33
    147  1a33		       a9 00		      lda	#0
    148  1a35		       85 0d		      sta	PF0
    149  1a37		       85 0e		      sta	PF1
    150  1a39
    151  1a39		       a0 07		      ldy	#7
    152  1a3b
    153  1a3b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    154  1a3b				   .HealthBottom		; draw bottom of health
    155  1a3b
    156  1a3b		       a2 03		      ldx	#3
    157  1a3d				   .Loop
    158  1a3d		       b1 99		      lda	(HthGfxLPtr),y
    159  1a3f		       85 1b		      sta	GRP0
    160  1a41		       b1 9b		      lda	(HthGfxRPtr),y
    161  1a43		       85 1c		      sta	GRP1
    162  1a45		       a9 00		      lda	#$00
    163  1a47		       85 0f		      sta	PF2
    164  1a49
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    166  1a50
    167  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    168  1a53		       85 0f		      sta	PF2
    169  1a55		       85 02		      sta	WSYNC
    170  1a57
    171  1a57		       ca		      dex
    172  1a58		       d0 e3		      bne	.Loop
    173  1a5a
    174  1a5a		       88		      dey
    175  1a5b		       c0 03		      cpy	#3
    176  1a5d		       d0 dc		      bne	.HealthBottom
    177  1a5f
    178  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  1a5f
    180  1a5f		       a9 00		      lda	#$00
    181  1a61		       85 1b		      sta	GRP0
    182  1a63		       85 1c		      sta	GRP1
    183  1a65		       85 0b		      sta	REFP0
    184  1a67		       85 0c		      sta	REFP1
    185  1a69		       85 0f		      sta	PF2
    186  1a6b
    187  1a6b		       85 02		      sta	WSYNC
    188  1a6d
------- FILE code/Kernel.asm
     13  1a6d
     14  1a6d		       a9 02		      lda	#2
     15  1a6f		       85 01		      sta	VBLANK	; disable display
     16  1a71
     17  1a71		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     72  1a74
     73  1a74		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     74  1a75
     75  1a75
     76  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  1a75							; Data Tables
     78  1a75							;
     79  1a75							; Include data tables
     80  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     81  1a75
     82  1a75							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1a75					      include	data/Graphics.asm
      1  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a75							; Graphics Tables
      3  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a75
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       78		      .byte.b	%01111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50				   LevelGfx
    130  1b50
    131  1b50		       34		      .byte.b	$34
    132  1b51		       04		      .byte.b	$04
    133  1b52		       04		      .byte.b	$04
    134  1b53		       04		      .byte.b	$04
    135  1b54		       04		      .byte.b	$04
    136  1b55		       04		      .byte.b	$04
    137  1b56		       24		      .byte.b	$24
    138  1b57
    139  1b57
    140  1b57
    141  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1b57							; Throbbing Line Graphics
    143  1b57							;
    144  1b57							; Graphics tables for the throbbing lines
    145  1b57							;
    146  1b57							; Table takes up $18 (24) bytes of ROM
    147  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b57
    149  1b57				   ThrobGfx
    150  1b57
    151  1b57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1b58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1b59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1b5a
    155  1b5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1b5a
    157  1b5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1b5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1b5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1b5d
    161  1b5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1b5d
    163  1b5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1b5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1b5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1b60
    167  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1b60
    169  1b60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1b61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1b62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1b63
    173  1b63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1b63
    175  1b63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1b64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1b65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1b66
    179  1b66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1b66
    181  1b66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1b67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1b68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1b69
    185  1b69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1b69
    187  1b69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1b6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1b6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1b6c
    191  1b6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1b6c
    193  1b6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1b6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1b6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1b6f
    197  1b6f
    198  1b6f
    199  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1b6f							; Health Graphics
    201  1b6f							;
    202  1b6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1b6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1b6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1b6f							; the graphics for the lower right are flipped.
    206  1b6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1b6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1b6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1b6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1b6f							; LOWER 4 lines of graphics (also upside-down).
    211  1b6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1b6f							; health graphics drawn with the playfield.
    213  1b6f							;
    214  1b6f							; Table takes up $45 (69) bytes of ROM
    215  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1b6f
    217  1b6f				   HealthTopGfx
    218  1b6f
    219  1b6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1b70		       43		      .byte.b	%01000011
    221  1b71		       44		      .byte.b	%01000100
    222  1b72		       48		      .byte.b	%01001000
    223  1b73		       30		      .byte.b	%00110000
    224  1b74
    225  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1b74				   HealthLeftGfx
    227  1b74
    228  1b74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1b75		       8c		      .byte.b	%10001100
    230  1b76		       84		      .byte.b	%10000100
    231  1b77		       80		      .byte.b	%10000000
    232  1b78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1b79		       20		      .byte.b	%00100000
    234  1b7a		       47		      .byte.b	%01000111
    235  1b7b		       84		      .byte.b	%10000100
    236  1b7c
    237  1b7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1b7c
    239  1b7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1b7d		       8c		      .byte.b	%10001100
    241  1b7e		       84		      .byte.b	%10000100
    242  1b7f		       80		      .byte.b	%10000000
    243  1b80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1b81		       20		      .byte.b	%00100000
    245  1b82		       47		      .byte.b	%01000111
    246  1b83		       80		      .byte.b	%10000000
    247  1b84
    248  1b84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1b84
    250  1b84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1b85		       8c		      .byte.b	%10001100
    252  1b86		       84		      .byte.b	%10000100
    253  1b87		       80		      .byte.b	%10000000
    254  1b88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1b89		       20		      .byte.b	%00100000
    256  1b8a		       44		      .byte.b	%01000100
    257  1b8b		       87		      .byte.b	%10000111
    258  1b8c
    259  1b8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1b8c
    261  1b8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1b8d		       9c		      .byte.b	%10011100
    263  1b8e		       80		      .byte.b	%10000000
    264  1b8f		       80		      .byte.b	%10000000
    265  1b90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1b91		       20		      .byte.b	%00100000
    267  1b92		       46		      .byte.b	%01000110
    268  1b93		       81		      .byte.b	%10000001
    269  1b94
    270  1b94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1b94				   HealthRightGfx
    272  1b94
    273  1b94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1b95		       9a		      .byte.b	%10011010
    275  1b96		       90		      .byte.b	%10010000
    276  1b97		       80		      .byte.b	%10000000
    277  1b98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1b99		       20		      .byte.b	%00100000
    279  1b9a		       4f		      .byte.b	%01001111
    280  1b9b		       89		      .byte.b	%10001001
    281  1b9c
    282  1b9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1b9c
    284  1b9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1b9d		       9a		      .byte.b	%10011010
    286  1b9e		       90		      .byte.b	%10010000
    287  1b9f		       80		      .byte.b	%10000000
    288  1ba0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ba1		       20		      .byte.b	%00100000
    290  1ba2		       4f		      .byte.b	%01001111
    291  1ba3		       80		      .byte.b	%10000000
    292  1ba4
    293  1ba4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ba4
    295  1ba4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ba5		       9a		      .byte.b	%10011010
    297  1ba6		       88		      .byte.b	%10001000
    298  1ba7		       80		      .byte.b	%10000000
    299  1ba8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ba9		       20		      .byte.b	%00100000
    301  1baa		       48		      .byte.b	%01001000
    302  1bab		       8f		      .byte.b	%10001111
    303  1bac
    304  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1bac
    306  1bac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1bad		       ba		      .byte.b	%10111010
    308  1bae		       80		      .byte.b	%10000000
    309  1baf		       80		      .byte.b	%10000000
    310  1bb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1bb1		       20		      .byte.b	%00100000
    312  1bb2		       4c		      .byte.b	%01001100
    313  1bb3		       83		      .byte.b	%10000011
    314  1bb4
    315  1bb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1bb4
    317  1bb4							; 3 bytes left in this page
    318  1bb4
    319  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1c00
    321  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1c00				   HealthBgGfx
    323  1c00							; 13 bytes
    324  1c00
    325  1c00		       00		      .byte.b	%00000000
    326  1c01		       3e		      .byte.b	%00111110
    327  1c02		       7f		      .byte.b	%01111111
    328  1c03		       7f		      .byte.b	%01111111
    329  1c04		       7f		      .byte.b	%01111111
    330  1c05		       7f		      .byte.b	%01111111
    331  1c06		       7f		      .byte.b	%01111111
    332  1c07		       7f		      .byte.b	%01111111
    333  1c08		       7f		      .byte.b	%01111111
    334  1c09		       7f		      .byte.b	%01111111
    335  1c0a		       63		      .byte.b	%01100011
    336  1c0b		       63		      .byte.b	%01100011
    337  1c0c		       00		      .byte.b	%00000000
    338  1c0d
    339  1c0d
    340  1c0d
    341  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1c0d							; Progress Bar Graphics
    343  1c0d							;
    344  1c0d							;
    345  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1c0d
    347  1c0d				   PgBarGfx
    348  1c0d							; 9 bytes
    349  1c0d
    350  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1c0f		       3f		      .byte.b	%00111111
    353  1c10		       1f		      .byte.b	%00011111
    354  1c11		       0f		      .byte.b	%00001111
    355  1c12		       07		      .byte.b	%00000111
    356  1c13		       03		      .byte.b	%00000011
    357  1c14		       01		      .byte.b	%00000001
    358  1c15		       00		      .byte.b	%00000000
    359  1c16
    360  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1c16				   PgBarGfxR
    362  1c16							; 8 bytes
    363  1c16
    364  1c16		       ff		      .byte.b	%11111111	; PF2
    365  1c17		       fe		      .byte.b	%11111110
    366  1c18		       fc		      .byte.b	%11111100
    367  1c19		       f8		      .byte.b	%11111000
    368  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1c1c		       c0		      .byte.b	%11000000
    371  1c1d		       80		      .byte.b	%10000000
    372  1c1e
    373  1c1e
    374  1c1e
    375  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1c1e							; Cat Rainbow Graphics
    377  1c1e							;
    378  1c1e							;
    379  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1c1e
    381  1c1e				   RainbowGfx
    382  1c1e							; 4 bytes
    383  1c1e
    384  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1c1f
    386  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1c20
    388  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1c21
    390  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1c22
    392  1d00		       00 00 00 00*	      ALIGN	$100
    393  1d00
    394  1d00				   FoodGfx
    395  1d00
    396  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1d00							; 0 - blank
    398  1d00
    399  1d00		       01		      .byte.b	%00000001
    400  1d01		       80		      .byte.b	%10000000
    401  1d02		       01		      .byte.b	%00000001
    402  1d03		       80		      .byte.b	%10000000
    403  1d04		       01		      .byte.b	%00000001
    404  1d05		       80		      .byte.b	%10000000
    405  1d06		       01		      .byte.b	%00000001
    406  1d07		       80		      .byte.b	%10000000
    407  1d08		       01		      .byte.b	%00000001
    408  1d09		       80		      .byte.b	%10000000
    409  1d0a		       01		      .byte.b	%00000001
    410  1d0b		       80		      .byte.b	%10000000
    411  1d0c		       01		      .byte.b	%00000001
    412  1d0d		       80		      .byte.b	%10000000
    413  1d0e
    414  1d0e		       00		      .byte.b	0
    415  1d0f		       00		      .byte.b	$00
    416  1d10
    417  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1d10							; 1 - apple
    419  1d10
    420  1d10		       34		      .byte.b	%00110100
    421  1d11		       7e		      .byte.b	%01111110
    422  1d12		       7e		      .byte.b	%01111110
    423  1d13		       ff		      .byte.b	%11111111
    424  1d14		       ff		      .byte.b	%11111111
    425  1d15		       ff		      .byte.b	%11111111
    426  1d16		       ff		      .byte.b	%11111111
    427  1d17		       ff		      .byte.b	%11111111
    428  1d18		       ff		      .byte.b	%11111111
    429  1d19		       7f		      .byte.b	%01111111
    430  1d1a		       6a		      .byte.b	%01101010
    431  1d1b		       08		      .byte.b	%00001000
    432  1d1c		       0c		      .byte.b	%00001100
    433  1d1d		       04		      .byte.b	%00000100
    434  1d1e
    435  1d1e		       00		      .byte.b	0
    436  1d1f		       46		      .byte.b	$46
    437  1d20
    438  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1d20							; 2 - peach
    440  1d20
    441  1d20		       3c		      .byte.b	%00111100
    442  1d21		       6e		      .byte.b	%01101110
    443  1d22		       6e		      .byte.b	%01101110
    444  1d23		       df		      .byte.b	%11011111
    445  1d24		       df		      .byte.b	%11011111
    446  1d25		       bf		      .byte.b	%10111111
    447  1d26		       bf		      .byte.b	%10111111
    448  1d27		       bf		      .byte.b	%10111111
    449  1d28		       de		      .byte.b	%11011110
    450  1d29		       5e		      .byte.b	%01011110
    451  1d2a		       6c		      .byte.b	%01101100
    452  1d2b		       18		      .byte.b	%00011000
    453  1d2c		       10		      .byte.b	%00010000
    454  1d2d		       30		      .byte.b	%00110000
    455  1d2e
    456  1d2e		       00		      .byte.b	0
    457  1d2f		       3a		      .byte.b	$3A
    458  1d30
    459  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1d30							; 3 - banana
    461  1d30
    462  1d30		       38		      .byte.b	%00111000
    463  1d31		       7c		      .byte.b	%01111100
    464  1d32		       fe		      .byte.b	%11111110
    465  1d33		       fe		      .byte.b	%11111110
    466  1d34		       ff		      .byte.b	%11111111
    467  1d35		       ff		      .byte.b	%11111111
    468  1d36		       8f		      .byte.b	%10001111
    469  1d37		       07		      .byte.b	%00000111
    470  1d38		       07		      .byte.b	%00000111
    471  1d39		       03		      .byte.b	%00000011
    472  1d3a		       03		      .byte.b	%00000011
    473  1d3b		       02		      .byte.b	%00000010
    474  1d3c		       06		      .byte.b	%00000110
    475  1d3d		       06		      .byte.b	%00000110
    476  1d3e
    477  1d3e		       00		      .byte.b	0
    478  1d3f		       1e		      .byte.b	$1E
    479  1d40
    480  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1d40							; 4 - pear
    482  1d40
    483  1d40		       38		      .byte.b	%00111000
    484  1d41		       7c		      .byte.b	%01111100
    485  1d42		       fe		      .byte.b	%11111110
    486  1d43		       fe		      .byte.b	%11111110
    487  1d44		       fe		      .byte.b	%11111110
    488  1d45		       fe		      .byte.b	%11111110
    489  1d46		       7c		      .byte.b	%01111100
    490  1d47		       7c		      .byte.b	%01111100
    491  1d48		       38		      .byte.b	%00111000
    492  1d49		       38		      .byte.b	%00111000
    493  1d4a		       30		      .byte.b	%00110000
    494  1d4b		       10		      .byte.b	%00010000
    495  1d4c		       18		      .byte.b	%00011000
    496  1d4d		       08		      .byte.b	%00001000
    497  1d4e
    498  1d4e		       00		      .byte.b	0
    499  1d4f		       cc		      .byte.b	$CC
    500  1d50
    501  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1d50							; 5 - plum
    503  1d50
    504  1d50		       38		      .byte.b	%00111000
    505  1d51		       6c		      .byte.b	%01101100
    506  1d52		       6e		      .byte.b	%01101110
    507  1d53		       de		      .byte.b	%11011110
    508  1d54		       df		      .byte.b	%11011111
    509  1d55		       bf		      .byte.b	%10111111
    510  1d56		       bf		      .byte.b	%10111111
    511  1d57		       bf		      .byte.b	%10111111
    512  1d58		       de		      .byte.b	%11011110
    513  1d59		       de		      .byte.b	%11011110
    514  1d5a		       5e		      .byte.b	%01011110
    515  1d5b		       3c		      .byte.b	%00111100
    516  1d5c		       20		      .byte.b	%00100000
    517  1d5d		       60		      .byte.b	%01100000
    518  1d5e
    519  1d5e		       00		      .byte.b	0
    520  1d5f		       88		      .byte.b	$88
    521  1d60
    522  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1d60							; 6 - grapes
    524  1d60
    525  1d60		       18		      .byte.b	%00011000
    526  1d61		       08		      .byte.b	%00001000
    527  1d62		       36		      .byte.b	%00110110
    528  1d63		       12		      .byte.b	%00010010
    529  1d64		       6c		      .byte.b	%01101100
    530  1d65		       24		      .byte.b	%00100100
    531  1d66		       db		      .byte.b	%11011011
    532  1d67		       49		      .byte.b	%01001001
    533  1d68		       36		      .byte.b	%00110110
    534  1d69		       12		      .byte.b	%00010010
    535  1d6a		       6c		      .byte.b	%01101100
    536  1d6b		       34		      .byte.b	%00110100
    537  1d6c		       10		      .byte.b	%00010000
    538  1d6d		       18		      .byte.b	%00011000
    539  1d6e
    540  1d6e		       00		      .byte.b	0
    541  1d6f		       64		      .byte.b	$64
    542  1d70
    543  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1d70							; 7 - broccoli
    545  1d70
    546  1d70		       18		      .byte.b	%00011000
    547  1d71		       18		      .byte.b	%00011000
    548  1d72		       1c		      .byte.b	%00011100
    549  1d73		       3e		      .byte.b	%00111110
    550  1d74		       2a		      .byte.b	%00101010
    551  1d75		       12		      .byte.b	%00010010
    552  1d76		       2a		      .byte.b	%00101010
    553  1d77		       54		      .byte.b	%01010100
    554  1d78		       aa		      .byte.b	%10101010
    555  1d79		       55		      .byte.b	%01010101
    556  1d7a		       aa		      .byte.b	%10101010
    557  1d7b		       55		      .byte.b	%01010101
    558  1d7c		       2a		      .byte.b	%00101010
    559  1d7d		       04		      .byte.b	%00000100
    560  1d7e
    561  1d7e		       00		      .byte.b	0
    562  1d7f		       c7		      .byte.b	$C7
    563  1d80
    564  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1d80							; 8 - cabbage
    566  1d80
    567  1d80		       18		      .byte.b	%00011000
    568  1d81		       76		      .byte.b	%01110110
    569  1d82		       76		      .byte.b	%01110110
    570  1d83		       7a		      .byte.b	%01111010
    571  1d84		       f9		      .byte.b	%11111001
    572  1d85		       fb		      .byte.b	%11111011
    573  1d86		       ed		      .byte.b	%11101101
    574  1d87		       db		      .byte.b	%11011011
    575  1d88		       fb		      .byte.b	%11111011
    576  1d89		       e9		      .byte.b	%11101001
    577  1d8a		       56		      .byte.b	%01010110
    578  1d8b		       76		      .byte.b	%01110110
    579  1d8c		       6e		      .byte.b	%01101110
    580  1d8d		       18		      .byte.b	%00011000
    581  1d8e
    582  1d8e		       00		      .byte.b	0
    583  1d8f		       da		      .byte.b	$DA
    584  1d90
    585  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1d90							; 9 - celery
    587  1d90
    588  1d90		       c0		      .byte.b	%11000000
    589  1d91		       e0		      .byte.b	%11100000
    590  1d92		       70		      .byte.b	%01110000
    591  1d93		       30		      .byte.b	%00110000
    592  1d94		       18		      .byte.b	%00011000
    593  1d95		       18		      .byte.b	%00011000
    594  1d96		       0c		      .byte.b	%00001100
    595  1d97		       0c		      .byte.b	%00001100
    596  1d98		       0e		      .byte.b	%00001110
    597  1d99		       06		      .byte.b	%00000110
    598  1d9a		       0d		      .byte.b	%00001101
    599  1d9b		       0b		      .byte.b	%00001011
    600  1d9c		       0d		      .byte.b	%00001101
    601  1d9d		       06		      .byte.b	%00000110
    602  1d9e
    603  1d9e		       00		      .byte.b	0
    604  1d9f		       d6		      .byte.b	$D6
    605  1da0
    606  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1da0							; A - green pepper
    608  1da0
    609  1da0		       6c		      .byte.b	%01101100
    610  1da1		       6c		      .byte.b	%01101100
    611  1da2		       fe		      .byte.b	%11111110
    612  1da3		       fe		      .byte.b	%11111110
    613  1da4		       f6		      .byte.b	%11110110
    614  1da5		       f6		      .byte.b	%11110110
    615  1da6		       f6		      .byte.b	%11110110
    616  1da7		       f6		      .byte.b	%11110110
    617  1da8		       f6		      .byte.b	%11110110
    618  1da9		       ec		      .byte.b	%11101100
    619  1daa		       7c		      .byte.b	%01111100
    620  1dab		       10		      .byte.b	%00010000
    621  1dac		       18		      .byte.b	%00011000
    622  1dad		       08		      .byte.b	%00001000
    623  1dae
    624  1dae		       00		      .byte.b	0
    625  1daf		       c8		      .byte.b	$C8
    626  1db0
    627  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1db0							; B - pumpkin
    629  1db0
    630  1db0		       3c		      .byte.b	%00111100
    631  1db1		       56		      .byte.b	%01010110
    632  1db2		       b7		      .byte.b	%10110111
    633  1db3		       ad		      .byte.b	%10101101
    634  1db4		       ad		      .byte.b	%10101101
    635  1db5		       ad		      .byte.b	%10101101
    636  1db6		       ad		      .byte.b	%10101101
    637  1db7		       ad		      .byte.b	%10101101
    638  1db8		       b7		      .byte.b	%10110111
    639  1db9		       56		      .byte.b	%01010110
    640  1dba		       3c		      .byte.b	%00111100
    641  1dbb		       18		      .byte.b	%00011000
    642  1dbc		       0c		      .byte.b	%00001100
    643  1dbd		       0c		      .byte.b	%00001100
    644  1dbe
    645  1dbe		       00		      .byte.b	0
    646  1dbf		       2a		      .byte.b	$2A
    647  1dc0
    648  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1dc0							; C - mushroom
    650  1dc0
    651  1dc0		       18		      .byte.b	%00011000
    652  1dc1		       3c		      .byte.b	%00111100
    653  1dc2		       24		      .byte.b	%00100100
    654  1dc3		       24		      .byte.b	%00100100
    655  1dc4		       24		      .byte.b	%00100100
    656  1dc5		       66		      .byte.b	%01100110
    657  1dc6		       a5		      .byte.b	%10100101
    658  1dc7		       99		      .byte.b	%10011001
    659  1dc8		       e7		      .byte.b	%11100111
    660  1dc9		       ff		      .byte.b	%11111111
    661  1dca		       5a		      .byte.b	%01011010
    662  1dcb		       76		      .byte.b	%01110110
    663  1dcc		       3c		      .byte.b	%00111100
    664  1dcd		       18		      .byte.b	%00011000
    665  1dce
    666  1dce		       00		      .byte.b	0
    667  1dcf		       08		      .byte.b	$08
    668  1dd0
    669  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1dd0							; D - key
    671  1dd0
    672  1dd0		       10		      .byte.b	%00010000
    673  1dd1		       1e		      .byte.b	%00011110
    674  1dd2		       1e		      .byte.b	%00011110
    675  1dd3		       18		      .byte.b	%00011000
    676  1dd4		       1e		      .byte.b	%00011110
    677  1dd5		       1e		      .byte.b	%00011110
    678  1dd6		       10		      .byte.b	%00010000
    679  1dd7		       10		      .byte.b	%00010000
    680  1dd8		       10		      .byte.b	%00010000
    681  1dd9		       10		      .byte.b	%00010000
    682  1dda		       38		      .byte.b	%00111000
    683  1ddb		       6c		      .byte.b	%01101100
    684  1ddc		       6c		      .byte.b	%01101100
    685  1ddd		       38		      .byte.b	%00111000
    686  1dde
    687  1dde		       00		      .byte.b	0
    688  1ddf		       2c		      .byte.b	$2C
    689  1de0
    690  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1de0							; E - ring
    692  1de0
    693  1de0		       00		      .byte.b	%00000000
    694  1de1		       18		      .byte.b	%00011000
    695  1de2		       3c		      .byte.b	%00111100
    696  1de3		       66		      .byte.b	%01100110
    697  1de4		       42		      .byte.b	%01000010
    698  1de5		       42		      .byte.b	%01000010
    699  1de6		       42		      .byte.b	%01000010
    700  1de7		       66		      .byte.b	%01100110
    701  1de8		       3c		      .byte.b	%00111100
    702  1de9		       18		      .byte.b	%00011000
    703  1dea		       18		      .byte.b	%00011000
    704  1deb		       2c		      .byte.b	%00101100
    705  1dec		       18		      .byte.b	%00011000
    706  1ded		       00		      .byte.b	%00000000
    707  1dee
    708  1dee		       00		      .byte.b	0
    709  1def		       2c		      .byte.b	$2C
    710  1df0
    711  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1df0							; F - heart
    713  1df0
    714  1df0		       00		      .byte.b	%00000000
    715  1df1		       18		      .byte.b	%00011000
    716  1df2		       18		      .byte.b	%00011000
    717  1df3		       3c		      .byte.b	%00111100
    718  1df4		       3c		      .byte.b	%00111100
    719  1df5		       7e		      .byte.b	%01111110
    720  1df6		       7e		      .byte.b	%01111110
    721  1df7		       ff		      .byte.b	%11111111
    722  1df8		       ff		      .byte.b	%11111111
    723  1df9		       ff		      .byte.b	%11111111
    724  1dfa		       e7		      .byte.b	%11100111
    725  1dfb		       e7		      .byte.b	%11100111
    726  1dfc		       42		      .byte.b	%01000010
    727  1dfd		       00		      .byte.b	%00000000
    728  1dfe
    729  1dfe		       00		      .byte.b	0
    730  1dff		       4a		      .byte.b	$4A
    731  1e00
    732  1e00				   RainbowColors
    733  1e00
    734  1e00		       64		      .byte.b	$64
    735  1e01		       88		      .byte.b	$88
    736  1e02		       c8		      .byte.b	$C8
    737  1e03		       1e		      .byte.b	$1E
    738  1e04		       28		      .byte.b	$28
    739  1e05		       44		      .byte.b	$44
    740  1e06
    741  1e06				   CatTartGfx
    742  1e06
    743  1e06		       00 00 00 00*	      ds	18, $00
    744  1e18
    745  1e18		       00		      .byte.b	%00000000
    746  1e19		       00		      .byte.b	%00000000
    747  1e1a		       e0		      .byte.b	%11100000
    748  1e1b		       c0		      .byte.b	%11000000
    749  1e1c		       c0		      .byte.b	%11000000
    750  1e1d		       c0		      .byte.b	%11000000
    751  1e1e		       c0		      .byte.b	%11000000
    752  1e1f		       c0		      .byte.b	%11000000
    753  1e20		       c0		      .byte.b	%11000000
    754  1e21		       e0		      .byte.b	%11100000
    755  1e22		       e0		      .byte.b	%11100000
    756  1e23		       e0		      .byte.b	%11100000
    757  1e24		       e0		      .byte.b	%11100000
    758  1e25		       e0		      .byte.b	%11100000
    759  1e26		       e0		      .byte.b	%11100000
    760  1e27		       e0		      .byte.b	%11100000
    761  1e28
    762  1e28				   CatFaceGfx
    763  1e28
    764  1e28		       00 00 00 00*	      ds	18, $00
    765  1e3a
    766  1e3a		       36		      .byte.b	%00110110
    767  1e3b		       36		      .byte.b	%00110110
    768  1e3c		       00		      .byte.b	%00000000
    769  1e3d		       7e		      .byte.b	%01111110
    770  1e3e		       c1		      .byte.b	%11000001
    771  1e3f		       d5		      .byte.b	%11010101
    772  1e40		       ff		      .byte.b	%11111111
    773  1e41		       d5		      .byte.b	%11010101
    774  1e42		       dd		      .byte.b	%11011101
    775  1e43		       ff		      .byte.b	%11111111
    776  1e44		       66		      .byte.b	%01100110
    777  1e45		       66		      .byte.b	%01100110
    778  1e46		       42		      .byte.b	%01000010
    779  1e47		       00		      .byte.b	%00000000
    780  1e48
    781  1e48		       00 00 00 00*	      ds	19, $00
------- FILE main.asm
     84  1e5b
     85  1e5b		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     86  1e5c
     87  1e5c
     88  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  1e5c							; End of ROM
     90  1e5c							;
     91  1e5c							; Define the end of the cartridge
     92  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     93  1e5c
     94  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     95  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     96  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     97  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
