------- FILE main.asm LEVEL 1 PASS 2
      1  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  4000 ????						; Project - Nyan Cat Game
      3  4000 ????						; by Jeremiah Knol
      4  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  4000 ????						; 09-14-2018 Version 4.1
      6  4000 ????						;
      7  4000 ????						; Improve code structure
      8  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  4000 ????
     10  4000 ????				      PROCESSOR	6502
     11  4000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  4000 ????				      include	headers/vcs.h
      1  4000 ????						; VCS.H
      2  4000 ????						; Version 1.05, 13/November/2003
      3  4000 ????
      4  4000 ????	       00 69	   VERSION_VCS =	105
      5  4000 ????
      6  4000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  4000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  4000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  4000 ????						;
     10  4000 ????						; This file defines hardware registers and memory mapping for the
     11  4000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  4000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  4000 ????						; available at at http://www.atari2600.org/dasm
     14  4000 ????						;
     15  4000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  4000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  4000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  4000 ????						; with your views.  Please contribute, if you think you can improve this
     19  4000 ????						; file!
     20  4000 ????						;
     21  4000 ????						; Latest Revisions...
     22  4000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  4000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  4000 ????						;			    This will allow conditional code to verify VCS.H being
     25  4000 ????						;			    used for code assembly.
     26  4000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  4000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  4000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  4000 ????						;			 readability issue, and binary compatibility with disassembled
     30  4000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  4000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  4000 ????						;			 which was broken by the use of segments in this file, as
     33  4000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  4000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  4000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  4000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  4000 ????						;						   it is safe to leave it undefined, and the base address will
     38  4000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  4000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  4000 ????						;			  - register definitions are now generated through assignment
     41  4000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  4000 ????						;			    address architecture.
     43  4000 ????						; 1.0	22/MAR/2003		Initial release
     44  4000 ????
     45  4000 ????
     46  4000 ????						;-------------------------------------------------------------------------------
     47  4000 ????
     48  4000 ????						; TIA_BASE_ADDRESS
     49  4000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  4000 ????						; Normally 0, the base address should (externally, before including this file)
     51  4000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  4000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  4000 ????						; < $40 as a bankswitch.
     54  4000 ????
     55  4000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  4000 ????			  -TIA_BASE_ADDRESS =	0
     57  4000 ????				      ENDIF
     58  4000 ????
     59  4000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  4000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  4000 ????						; *OR* by declaring the label before including this file, eg:
     62  4000 ????						; TIA_BASE_ADDRESS = $40
     63  4000 ????						;   include "vcs.h"
     64  4000 ????
     65  4000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  4000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  4000 ????						; for the mirrored ROM hardware registers.
     68  4000 ????
     69  4000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  4000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  4000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  4000 ????
     73  4000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  4000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  4000 ????				      ENDIF
     76  4000 ????
     77  4000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  4000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  4000 ????				      ENDIF
     80  4000 ????
     81  4000 ????						;-------------------------------------------------------------------------------
     82  4000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????						; number of scanlines in vertical blank and overscan
     48  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     49  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     50  0000 ????
     51  0000 ????						; converted values to store to TIM64T
     52  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     53  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     54  0000 ????
     55  0000 ????						; colors
     56  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     57  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     58  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     59  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     60  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     61  0000 ????
     62  0000 ????						; luminosity values for throb line data
     63  0000 ????	       00 00	   LUM_0      equ	$0>>1
     64  0000 ????	       00 01	   LUM_2      equ	$2>>1
     65  0000 ????	       00 02	   LUM_4      equ	$4>>1
     66  0000 ????	       00 03	   LUM_6      equ	$6>>1
     67  0000 ????	       00 04	   LUM_8      equ	$8>>1
     68  0000 ????	       00 05	   LUM_A      equ	$A>>1
     69  0000 ????	       00 06	   LUM_C      equ	$C>>1
     70  0000 ????	       00 07	   LUM_E      equ	$E>>1
     71  0000 ????
     72  0000 ????						; color modes for throb line data
     73  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     74  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     75  0000 ????
     76  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     77  0000 ????
     78  0000 ????						; bankswitching hotspots
     79  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     80  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     81  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     82  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00b2 ????				      SEG.U	VARS
      6 U00b2 ????				      RORG	$80
      7 U00b2 ????
      8 U00b2 ????
      9 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10 U00b2 ????						; Global Variables
     11 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12 U00b2 ????						; These variables are used globally and cannot be shared or otherwise corrupted
     13 U00b2 ????						;
     14 U00b2 ????						; Uses 14 bytes of RAM
     15 U00b2 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16 U00b2 ????
     17 U00b2 ????			   RamGlobal
     18 U00b2 ????
     19 U00b2 ????						; Game housekeeping - 2 bytes
     20 U00b2 ????	       00	   Frame      ds	1	; current frame mod 256
     21 U00b3 ????			   Variation		; game variation options
     22 U00b3 ????	       00		      ds	1
     23 U00b4 ????						; ideas for variations :
     24 U00b4 ????
     25 U00b4 ????						; players - 1 bit
     26 U00b4 ????						;	0 = 1 player, use player 2's score RAM to keep track
     27 U00b4 ????						;	of the highest score
     28 U00b4 ????						;	1 = 2 players, keep track of both scores, erasing any
     29 U00b4 ????						;	high score previously saved (might not need to erase
     30 U00b4 ????						;	high score based on free RAM)
     31 U00b4 ????
     32 U00b4 ????						; randomness - 1 bit
     33 U00b4 ????						;	0 = leave Rand16 as-is at start of game and use player
     34 U00b4 ????						;	input to further randomize numbers
     35 U00b4 ????						;	1 = reset Rand16 at start of game and don't use
     36 U00b4 ????						;	player input to affect randomization
     37 U00b4 ????						;	(same exact game every time)
     38 U00b4 ????
     39 U00b4 ????						; multi-speed rows - 1 bit
     40 U00b4 ????						;	0 = force all rows to be the same speed
     41 U00b4 ????						;	1 = allow levels to randomize row speeds
     42 U00b4 ????
     43 U00b4 ????						; 5 bits still available
     44 U00b4 ????
     45 U00b4 ????						; Scores and current level - 7 bytes
     46 U00b4 ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     47 U00b4 ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     48 U00ba ????						; last 3 for player 2.
     49 U00ba ????			   BCDLevel		; value for the current level which will be stored as a
     50 U00ba ????	       00		      ds	1	; BCD encoded 2-digit number and used to control the
     51 U00bb ????						; level counter display
     52 U00bb ????
     53 U00bb ????						; Random Numbers - 3 bytes
     54 U00bb ????	       00 00	   Rand16     ds	2	; 16-bit random number
     55 U00bd ????	       00	   RandEor    ds	1	; value to eor with random, affected by user input
     56 U00be ????
     57 U00be ????						; Cat colors - 2 bytes
     58 U00be ????			   CatTartColor 		; color for current player's cat in the kernels
     59 U00be ????	       00		      ds	1
     60 U00bf ????			   OtherTartColor		; color for the other player's cat
     61 U00bf ????	       00		      ds	1
     62 U00c0 ????
     63 U00c0 ????
     64 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65 U00c0 ????						; Local Variables
     66 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67 U00c0 ????						; These variables are only used locally, and are redefined for each area of code
     68 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69 U00c0 ????
     70 U00c0 ????			   RamLocal
     71 U00c0 ????
     72 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73 U00c0 ????						; Menu Variables
     74 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75 U00c0 ????						; These variables are only needed in the main menu routine.
     76 U00c0 ????						;
     77 U00c0 ????						; Uses 96 bytes of RAM
     78 U00c0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U00c0 ????
     80 U00c0 ????						; Frame counters - 2 bytes
     81 U00c0 ????			   MenuCatFrame 		; animation frame for menu cat
     82 U00c0 ????	       00		      ds	1
     83 U00c1 ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     84 U00c1 ????	       00		      ds	1
     85 U00c2 ????
     86 U00c2 ????						; Pointers - 8 bytes
     87 U00c2 ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     88 U00c2 ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     89 U00c2 ????	       00 00		      ds	2
     90 U00c4 ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     91 U00c4 ????	       00 00		      ds	2
     92 U00c6 ????			   MenuCatMslPtr		; pointer used to access missile graphics
     93 U00c6 ????	       00 00		      ds	2
     94 U00c8 ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     95 U00c8 ????	       00 00		      ds	2
     96 U00ca ????
     97 U00ca ????						; Pre-load variables for within kernel - 4 bytes
     98 U00ca ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     99 U00ca ????	       00		      ds	1
    100 U00cb ????			   RamMenuCatMissile		; missile graphics in menu cat
    101 U00cb ????	       00		      ds	1
    102 U00cc ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
    103 U00cc ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
    104 U00cc ????	       00		      ds	1
    105 U00cd ????			   MenuCatShift
    106 U00cd ????	       00		      ds	1
    107 U00ce ????
    108 U00ce ????						; Data blocks - 82 bytes
    109 U00ce ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
    110 U00ce ????	       00 00 00 00*	      ds	14
    111 U00dc ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
    112 U00dc ????	       00 00 00 00*	      ds	15
    113 U00eb ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
    114 U00eb ????	       00 00 00 00*	      ds	15
    115 U00fa ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
    116 U00fa ????	       00 00 00 00*	      ds	16
    117 U010a ????	       00		      ds	1	; extra byte needed for next data block
    118 U010b ????			   RamBowColorsBk		; rainbow colors
    119 U010b ????	       00 00 00 00*	      ds	20
    120 U011f ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
    121 U011f ????	       00		      ds	1
    122 U0120 ????
    123 U0120 ????						; 18 bytes free
    124 U0120 ????
    125 U0120 ????
    126 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    127 U0120 ????						; Gameplay variables
    128 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    129 U0120 ????						; These variables are only needed in the gameplay routine
    130 U0120 ????						;
    131 U0120 ????						; Uses 63 bytes of RAM
    132 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    133 U0120 ????
    134 U0120 ????				      RORG	RamLocal
    135 U0120 ????
    136 U0120 ????			   BCDScoreAdd		; 2-byte array for the value to be added to the score
    137 U0120 ????	       00 00		      ds	2	; on the next frame (BCD, max of 9,999)
    138 U0122 ????
    139 U0122 ????						; Pointers - 14 bytes
    140 U0122 ????
    141 U0122 ????						; The unused 3 bits of the high byte in each pointer
    142 U0122 ????						; may be used for the speeds of each row
    143 U0122 ????
    144 U0122 ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
    145 U0122 ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
    146 U0122 ????	       00 00		      ds	2
    147 U0124 ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
    148 U0124 ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
    149 U0124 ????	       00 00		      ds	2
    150 U0126 ????			   TartGfxPtr1		; pointer for the tart graphics
    151 U0126 ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
    152 U0126 ????	       00 00		      ds	2
    153 U0128 ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
    154 U0128 ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
    155 U0128 ????	       00 00		      ds	2
    156 U012a ????			   TartGfxPtr2		; pointer for the tart graphics
    157 U012a ????			   HthGfxLPtr		; pointer for left half of the health graphics
    158 U012a ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
    159 U012a ????	       00 00		      ds	2
    160 U012c ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
    161 U012c ????			   HthGfxRPtr		; pointer for right half of the health graphics
    162 U012c ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
    163 U012c ????	       00 00		      ds	2
    164 U012e ????			   ThrobPtr		; pointer for loading the throb colors
    165 U012e ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
    166 U012e ????	       00 00		      ds	2
    167 U0130 ????
    168 U0130 ????						; Variable game colors - 2 bytes
    169 U0130 ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
    170 U0131 ????	       00	   PgBarColor ds	1	; color for full part of progress bar
    171 U0132 ????
    172 U0132 ????						; Variables for the progress bar and health display - 7 bytes
    173 U0132 ????			   Progress		; value for level progress, which can be
    174 U0132 ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
    175 U0133 ????			   Health		; amount of health
    176 U0133 ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
    177 U0134 ????			   ProgressBar		; array of 5 values to be written to the playfield
    178 U0134 ????	       00 00 00 00*	      ds	5	; registers when drawing progress bar
    179 U0139 ????
    180 U0139 ????						; Variables used when drawing the cat - 6 bytes
    181 U0139 ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
    182 U013a ????			   CatPosition		; data describing the cat's position
    183 U013a ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
    184 U013b ????						; bits 4-0 store the number of scanlines to skip after
    185 U013b ????						; top of the cat's row before drawing the cat, from 0-18
    186 U013b ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
    187 U013c ????			   Rainbow		; PF0 value for the rainbow graphics
    188 U013c ????			   JoyCenter		; least significant bit, true if joystick has been returned to center
    189 U013c ????	       00		      ds	1
    190 U013d ????			   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
    191 U013d ????	       00		      ds	1
    192 U013e ????			   PreCatRows		; number of rows to draw before the two "cat" rows
    193 U013e ????	       00		      ds	1
    194 U013f ????
    195 U013f ????						; Variables used for the food items - 21 bytes
    196 U013f ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
    197 U013f ????	       00 00 00 00*	      ds	7	; this frame.
    198 U0146 ????						; Lo nybble either holds the pre-loaded value of the next
    199 U0146 ????						; food item to appear in this row, or temporarily holds the
    200 U0146 ????						; 3rd food item which isn't shown this frame, based on how many
    201 U0146 ????						; food items are visible in this row (2-3), which is determined
    202 U0146 ????						; by the position of the leftmost food item.
    203 U0146 ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
    204 U0146 ????	       00 00 00 00*	      ds	7	; this frame.
    205 U014d ????						; Lo nybble holds the fractional positional value
    206 U014d ????						; for the row's position (0-15).
    207 U014d ????			   FoodPosX		; (range 0-88)
    208 U014d ????	       00 00 00 00*	      ds	7
    209 U0154 ????
    210 U0154 ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    211 U0154 ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    212 U0154 ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    213 U0157 ????			   CatRow2FoodL
    214 U0157 ????	       00		      ds	1
    215 U0158 ????			   CatRow2FoodR
    216 U0158 ????	       00		      ds	1
    217 U0159 ????			   CatRow2Color1
    218 U0159 ????	       00		      ds	1
    219 U015a ????			   CatRow2Color2
    220 U015a ????	       00		      ds	1
    221 U015b ????
    222 U015b ????						; Variables for the throbbing lines' colors - 4 bytes
    223 U015b ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    224 U015e ????						; throbbing lines. The first color is darkest,
    225 U015e ????						; the last is brightest.
    226 U015e ????	       00	   CatThrobPF ds	1
    227 U015f ????
    228 U015f ????						; Temporary variables - 2 bytes
    229 U015f ????	       00	   Temp       ds	1
    230 U0160 ????	       00	   TempLoop   ds	1
    231 U0161 ????
    232 U0161 ????						; 51 bytes free
    233 U0161 ????
    234 U0161 ????						; Variables which can be shared with the stack - 3 bytes
    235 U0161 ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    236 U0162 ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    237 U0163 ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    238 U0164 ????
    239 U0164 ????						; 7 of 15 available temporary RAM bytes used (8 left)
    240 U0164 ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    241 U0164 ????
    242 U0164 ????				      RORG	$100 - 34
    243 U0164 ????			   RamBowColors
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U0164 ????				      include	headers/macros.h
      1 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0164 ????						; Start Bank
      3 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0164 ????						; Takes an integer for the bank
      5 U0164 ????						;
      6 U0164 ????						; Placed at the start of each bank
      7 U0164 ????						; Sets the bank's ROM location, and adds the global jump table
      8 U0164 ????						;
      9 U0164 ????						; Uses 18 bytes of ROM for the jump table
     10 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U0164 ????
     12 U0164 ????				      MAC	start_bank
     13 U0164 ????				      SEG	BANK_{1}
     14 U0164 ????				      ORG	[{1} - 1] * $1000
     15 U0164 ????				      RORG	$1000
     16 U0164 ????				      SUBROUTINE
     17 U0164 ????
     18 U0164 ????			   JmpInitSystem
     19 U0164 ????				      nop	SelectBank1
     20 U0164 ????				      jmp	InitSystem
     21 U0164 ????			   JmpMenuOverScan
     22 U0164 ????				      nop	SelectBank1
     23 U0164 ????				      jmp	MenuOverScan
     24 U0164 ????			   JmpGamePlay
     25 U0164 ????				      nop	SelectBank2
     26 U0164 ????				      jmp	SystemClear
     27 U0164 ????
     28 U0164 ????				      ENDM
     29 U0164 ????
     30 U0164 ????
     31 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     32 U0164 ????						; End Bank
     33 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34 U0164 ????						; Takes an integer for the bank
     35 U0164 ????						;
     36 U0164 ????						; Placed at the end of each bank
     37 U0164 ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     38 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     39 U0164 ????
     40 U0164 ????				      MAC	end_bank
     41 U0164 ????				      ORG	[{1} - 1] * $1000 + $0FFA
     42 U0164 ????
     43 U0164 ????				      .word	JmpInitSystem	; NMI
     44 U0164 ????				      .word	JmpInitSystem	; RESET
     45 U0164 ????				      .word	JmpInitSystem	; IRQ
     46 U0164 ????
     47 U0164 ????				      ENDM
     48 U0164 ????
     49 U0164 ????
     50 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51 U0164 ????						; Set Overscan Timer
     52 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0164 ????						; Sets and starts the timer for the overscan
     54 U0164 ????						;
     55 U0164 ????						; Uses 7 bytes of ROM
     56 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57 U0164 ????
     58 U0164 ????				      MAC	set_oscan_timer
     59 U0164 ????
     60 U0164 ????				      lda	#OVERSCAN_TIMER
     61 U0164 ????				      sta	WSYNC
     62 U0164 ????				      sta	TIM64T	; set overscan timer
     63 U0164 ????
     64 U0164 ????				      ENDM
     65 U0164 ????
     66 U0164 ????
     67 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     68 U0164 ????						; Vertical Sync
     69 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     70 U0164 ????						; Performs a vertical sync, and starts the timer for vertical blanking
     71 U0164 ????						; Also clears any values in the HMOVE registers
     72 U0164 ????						;
     73 U0164 ????						; Uses 22 bytes of ROM
     74 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75 U0164 ????
     76 U0164 ????				      MAC	vert_sync
     77 U0164 ????
     78 U0164 ????				      lda	#2
     79 U0164 ????				      sta	WSYNC
     80 U0164 ????				      sta	VSYNC	; enable VSYNC
     81 U0164 ????				      sta	WSYNC
     82 U0164 ????				      ldx	#VBLANK_TIMER
     83 U0164 ????				      sta	WSYNC
     84 U0164 ????				      stx	TIM64T	; set VBLANK timer
     85 U0164 ????				      sta	HMCLR
     86 U0164 ????				      lsr
     87 U0164 ????				      sta	WSYNC
     88 U0164 ????				      sta	VSYNC	; 03 disable VSYNC
     89 U0164 ????
     90 U0164 ????						;	lda #%1110
     91 U0164 ????						;	ldx #VBLANK_TIMER
     92 U0164 ????						;.VsyncLoop
     93 U0164 ????						;	sta WSYNC
     94 U0164 ????						;	sta VSYNC		; enable VSYNC
     95 U0164 ????						;	stx TIM64T		; set VBLANK timer
     96 U0164 ????						;	lsr
     97 U0164 ????						;	bne .VsyncLoop
     98 U0164 ????
     99 U0164 ????				      ENDM
    100 U0164 ????
    101 U0164 ????
    102 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103 U0164 ????						; Timer Loop
    104 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    105 U0164 ????						; Loops until the timer runs down
    106 U0164 ????						; Used to finish vertical blanking and overscan
    107 U0164 ????						;
    108 U0164 ????						; Uses 5 bytes of ROM
    109 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    110 U0164 ????
    111 U0164 ????				      MAC	timer_loop
    112 U0164 ????				      SUBROUTINE
    113 U0164 ????
    114 U0164 ????			   .TimerLoop
    115 U0164 ????				      lda	INTIM
    116 U0164 ????				      bne	.TimerLoop	; loop until end of vertical blanking
    117 U0164 ????
    118 U0164 ????				      ENDM
    119 U0164 ????
    120 U0164 ????
    121 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122 U0164 ????						; Throb Rainbow Background
    123 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    124 U0164 ????						; Checks the background color, and if black, the throb color is used instead
    125 U0164 ????						; The throb color must be pre-loaded into the X register
    126 U0164 ????						;
    127 U0164 ????						; Uses 11 bytes of ROM
    128 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    129 U0164 ????
    130 U0164 ????				      MAC	throb_rainbow_bk
    131 U0164 ????				      SUBROUTINE
    132 U0164 ????			   .X	      SET	{1}
    133 U0164 ????
    134 U0164 ????				      lda	RamBowColors+.X	; 3
    135 U0164 ????				      bne	.Rainbow	; 5/6
    136 U0164 ????				      stx	COLUBK	; 8
    137 U0164 ????				      beq	.End	; 11
    138 U0164 ????			   .Rainbow
    139 U0164 ????				      sta	COLUBK	; 9
    140 U0164 ????				      nop		; 11
    141 U0164 ????			   .End
    142 U0164 ????				      ENDM
    143 U0164 ????
    144 U0164 ????
    145 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    146 U0164 ????						; Throb Rainbow Playfield
    147 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148 U0164 ????						; Checks the playfield color, and if black, the throb color is used instead
    149 U0164 ????						; The throb color must be pre-loaded into the X register
    150 U0164 ????						;
    151 U0164 ????						; Uses 11 bytes of ROM
    152 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    153 U0164 ????
    154 U0164 ????				      MAC	throb_rainbow_pf
    155 U0164 ????				      SUBROUTINE
    156 U0164 ????			   .X	      SET	{1}
    157 U0164 ????
    158 U0164 ????				      lda	RamBowColors+.X	; 3
    159 U0164 ????				      bne	.Rainbow	; 5/6
    160 U0164 ????				      stx	COLUPF	; 8
    161 U0164 ????				      beq	.End	; 11
    162 U0164 ????			   .Rainbow
    163 U0164 ????				      sta	COLUPF	; 9
    164 U0164 ????				      nop		; 11
    165 U0164 ????			   .End
    166 U0164 ????				      ENDM
    167 U0164 ????
    168 U0164 ????
    169 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    170 U0164 ????						; Jump to Next Page
    171 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U0164 ????						; Jumps to the beginning of the next page, padding the end of the current one
    173 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174 U0164 ????
    175 U0164 ????				      MAC	next_page
    176 U0164 ????				      SUBROUTINE
    177 U0164 ????
    178 U0164 ????				      jmp	.NextPage
    179 U0164 ????				      ALIGN	$100
    180 U0164 ????			   .NextPage
    181 U0164 ????
    182 U0164 ????				      ENDM
    183 U0164 ????
    184 U0164 ????
    185 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186 U0164 ????						; Skip Word
    187 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    188 U0164 ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    189 U0164 ????						; skipping the next two bytes of ROM.
    190 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191 U0164 ????
    192 U0164 ????				      MAC	skip_word
    193 U0164 ????				      HEX	0C
    194 U0164 ????				      ENDM
------- FILE main.asm
     18 U0164 ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U0164 ????				      include	bank1.asm
      1 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0164 ????						; Bank 1
      3 U0164 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0164 ????
      0 U0164 ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 12 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c 1d 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c		       0c f7 1f 	      nop	SelectBank2
     14  000f		       4c 12 10 	      jmp	SystemClear
     15  0012
      6  0012
------- FILE init.asm LEVEL 3 PASS 2
      0  0012					      include	init.asm
      1  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0012							; Clear system registers and RAM
      3  0012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0012
      5  0012				   InitSystem
      0  0012					      CLEAN_START
      1  0012		       78		      sei
      2  0013		       d8		      cld
      3  0014
      4  0014		       a2 00		      ldx	#0
      5  0016		       8a		      txa
      6  0017		       a8		      tay
      7  0018		       ca	   .CLEAR_STACK dex
      8  0019		       9a		      txs
      9  001a		       48		      pha
     10  001b		       d0 fb		      bne	.CLEAR_STACK
     11  001d
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  001d					      include	bank1/code/oscan_logic.asm
      1  001d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  001d							; Overscan logic for menu
      3  001d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  001d
      5  001d				   MenuOverScan
      0  001d					      SET_OSCAN_TIMER
      1  001d
      2  001d		       a9 23		      lda	#OVERSCAN_TIMER
      3  001f		       85 02		      sta	WSYNC
      4  0021		       8d 96 02 	      sta	TIM64T
      5  0024
      7  0024
      8  0024		       a9 01		      lda	#1	; temp menu bypass
      9  0026		       2c 82 02 	      bit	SWCHB
     10  0029		       d0 03		      bne	.NoResetPress
     11  002b		       4c 0c 10 	      jmp	JmpGamePlay
     12  002e				   .NoResetPress
     13  002e
     14  002e		       a9 08		      lda	#%00001000
     15  0030		       2c 82 02 	      bit	SWCHB
     16  0033		       f0 13		      beq	.NoFrameInc	; temp animation pause
     17  0035
     18  0035		       e6 80		      inc	Frame	; next frame
     19  0037		       a5 80		      lda	Frame
     20  0039		       29 03		      and	#%00000011	; update animation every 4 frames
     21  003b		       d0 0b		      bne	.NoFrameInc
     22  003d		       a6 8e		      ldx	MenuCatFrame
     23  003f		       e8		      inx
     24  0040		       e0 06		      cpx	#6
     25  0042		       d0 02		      bne	.NoReset
     26  0044		       a2 00		      ldx	#0
     27  0046				   .NoReset
     28  0046		       86 8e		      stx	MenuCatFrame
     29  0048				   .NoFrameInc
     30  0048
      0  0048					      TIMER_LOOP
      1  0048					      SUBROUTINE
      2  0048
      3  0048				   .TimerLoop
      4  0048		       ad 84 02 	      lda	INTIM
      5  004b		       d0 fb		      bne	.TimerLoop
      6  004d
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  004d					      include	bank1/code/vblank_logic.asm
      1  004d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  004d							; Vertical Sync and Logic
      3  004d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  004d
      0  004d					      VERT_SYNC
      1  004d
      2  004d		       a9 02		      lda	#2
      3  004f		       85 02		      sta	WSYNC
      4  0051		       85 00		      sta	VSYNC
      5  0053		       85 02		      sta	WSYNC
      6  0055		       a2 2d		      ldx	#VBLANK_TIMER
      7  0057		       85 02		      sta	WSYNC
      8  0059		       8e 96 02 	      stx	TIM64T
      9  005c		       85 2b		      sta	HMCLR
     10  005e		       4a		      lsr
     11  005f		       85 02		      sta	WSYNC
     12  0061		       85 00		      sta	VSYNC
     13  0063
     14  0063
     15  0063
     16  0063
     17  0063
     18  0063
     19  0063
     20  0063
     21  0063
     22  0063
      6  0063
      7  0063		       a9 a4		      lda	#$A4	; 05
      8  0065		       85 ed		      sta	MenuBgColor	; 08
      9  0067		       a9 5a		      lda	#$5A	; 10
     10  0069		       85 8c		      sta	CatTartColor	; 13
     11  006b		       a9 07		      lda	#QUAD_SIZE	; 15
     12  006d		       85 04		      sta	NUSIZ0	; 18
     13  006f		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2	; 20
     14  0071		       85 05		      sta	NUSIZ1	; 23
     15  0073
     16  0073		       a9 31		      lda	#$31	; 25
     17  0075		       85 0a		      sta	CTRLPF	; 28
     18  0077		       85 25		      sta	VDELP0	; 31
     19  0079		       0a		      asl		; 33
     20  007a		       85 14		      sta	RESBL
      0  007c					      SLEEP	3
      1  007c				   .CYCLES    SET	3
      2  007c
      3  007c				  -	      IF	.CYCLES < 2
      4  007c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  007c				  -	      ERR
      6  007c					      ENDIF
      7  007c
      8  007c					      IF	.CYCLES & 1
      9  007c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  007c		       04 00		      nop	0
     11  007e				  -	      ELSE
     12  007e				  -	      bit	VSYNC
     13  007e					      ENDIF
     14  007e				   .CYCLES    SET	.CYCLES - 3
     15  007e					      ENDIF
     16  007e
     17  007e				  -	      REPEAT	.CYCLES / 2
     18  007e				  -	      nop
     19  007e					      REPEND
     22  007e		       8d 10 00 	      sta.w	RESP0
     23  0081		       85 13		      sta	RESM1
     24  0083		       85 12		      sta	RESM0
     25  0085		       85 11		      sta	RESP1
     26  0087
     27  0087		       a9 40		      lda	#$40
     28  0089		       85 24		      sta	HMBL
     29  008b		       a9 d0		      lda	#$D0
     30  008d		       85 20		      sta	HMP0
     31  008f		       a9 e0		      lda	#$E0
     32  0091		       85 23		      sta	HMM1
     33  0093		       a9 70		      lda	#$70
     34  0095		       85 22		      sta	HMM0
     35  0097		       a9 60		      lda	#$60
     36  0099		       85 21		      sta	HMP1
     37  009b
     38  009b		       85 02		      sta	WSYNC
     39  009d		       85 2a		      sta	HMOVE
     40  009f		       85 02		      sta	WSYNC
     41  00a1		       85 2b		      sta	HMCLR
     42  00a3
     43  00a3		       a9 60		      lda	#$60
     44  00a5		       85 20		      sta	HMP0
     45  00a7		       a9 e0		      lda	#$E0
     46  00a9		       85 22		      sta	HMM0
     47  00ab		       85 21		      sta	HMP1
     48  00ad		       85 23		      sta	HMM1
     49  00af		       a9 80		      lda	#$80
     50  00b1		       85 24		      sta	HMBL
     51  00b3
     52  00b3		       a2 ec		      ldx	#RamBowColorsBk+19
     53  00b5		       a5 80		      lda	Frame
     54  00b7		       29 08		      and	#%00001000
     55  00b9		       d0 0f		      bne	.Rainbow1
     56  00bb		       a9 e0		      lda	#%11100000
     57  00bd		       85 0d		      sta	PF0
     58  00bf		       a9 c1		      lda	#%11000001
     59  00c1		       85 0e		      sta	PF1
     60  00c3		       a9 ea		      lda	#RamBowColorsBk+17
     61  00c5		       85 96		      sta	BowColorsPfPtr
     62  00c7		       4c d7 10 	      jmp	.Rainbow2
     63  00ca				   .Rainbow1
     64  00ca		       ca		      dex
     65  00cb		       a9 c0		      lda	#%11000000
     66  00cd		       85 0d		      sta	PF0
     67  00cf		       a9 e0		      lda	#%11100000
     68  00d1		       85 0e		      sta	PF1
     69  00d3		       a9 e8		      lda	#RamBowColorsBk+15
     70  00d5		       85 96		      sta	BowColorsPfPtr
     71  00d7				   .Rainbow2
     72  00d7		       a9 00		      lda	#0
     73  00d9		       85 97		      sta	BowColorsPfPtr+1
     74  00db
     75  00db		       a5 ed		      lda	MenuBgColor
     76  00dd		       85 d8		      sta	RamBowColorsBk-1
     77  00df		       85 d9		      sta	RamBowColorsBk
     78  00e1		       85 da		      sta	RamBowColorsBk+1
     79  00e3		       85 eb		      sta	RamBowColorsBk+18
     80  00e5		       85 ec		      sta	RamBowColorsBk+19
     81  00e7		       85 ed		      sta	RamBowColorsBk+20
     82  00e9
     83  00e9		       a5 8e		      lda	MenuCatFrame
     84  00eb		       c9 02		      cmp	#2
     85  00ed		       10 01		      bpl	.Jmp2
     86  00ef		       ca		      dex
     87  00f0				   .Jmp2
     88  00f0		       9a		      txs
     89  00f1
     90  00f1		       a9 44		      lda	#$44
     91  00f3		       48		      pha
     92  00f4		       48		      pha
     93  00f5		       48		      pha
     94  00f6		       a9 38		      lda	#$38
     95  00f8		       48		      pha
     96  00f9		       48		      pha
     97  00fa		       48		      pha
     98  00fb		       a9 1c		      lda	#$1C
     99  00fd		       48		      pha
    100  00fe		       48		      pha
    101  00ff		       48		      pha
    102  0100		       a9 ca		      lda	#$CA
    103  0102		       48		      pha
    104  0103		       48		      pha
    105  0104		       48		      pha
    106  0105		       a9 a8		      lda	#$A8
    107  0107		       48		      pha
    108  0108		       48		      pha
    109  0109		       48		      pha
    110  010a		       a9 76		      lda	#$76
    111  010c		       48		      pha
    112  010d		       48		      pha
    113  010e		       48		      pha
    114  010f
    115  010f		       a2 d7		      ldx	#RamMenuCatGfxR+15
    116  0111		       9a		      txs
    117  0112
    118  0112							; push graphics for GRP1
    119  0112		       a9 16		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
    120  0114		       85 91		      sta	MenuCatRamPtr+1	; and set pointer to this page
    121  0116		       a6 8e		      ldx	MenuCatFrame	; get animation frame
    122  0118		       bd ad 17 	      lda	MenuCatOffsetGfx,x	; get offset within page
    123  011b		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    124  011d
    125  011d		       a0 0d		      ldy	#13
    126  011f				   .LoopGfxR
    127  011f		       b1 90		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    128  0121		       48		      pha		; and push to RAM
    129  0122		       88		      dey
    130  0123		       10 fa		      bpl	.LoopGfxR
    131  0125
    132  0125		       8a		      txa		; get animation frame
    133  0126		       0a		      asl		; multiply by 2
    134  0127		       a8		      tay
    135  0128		       b9 54 17 	      lda	MenuCatLowGfxR,y
    136  012b		       48		      pha
    137  012c		       c8		      iny
    138  012d		       b9 54 17 	      lda	MenuCatLowGfxR,y
    139  0130		       48		      pha
    140  0131
    141  0131							; push graphics for right copies of PF2
    142  0131		       bd b3 17 	      lda	MenuCatOffsetPf,x
    143  0134		       85 90		      sta	MenuCatRamPtr
    144  0136
    145  0136		       a0 0c		      ldy	#12
    146  0138				   .LoopPfR
    147  0138		       b1 90		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    148  013a		       48		      pha		; and push to RAM
    149  013b		       88		      dey
    150  013c		       10 fa		      bpl	.LoopPfR
    151  013e
    152  013e		       8a		      txa		; get animation frame
    153  013f		       0a		      asl		; multiply by 2
    154  0140		       a8		      tay
    155  0141		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    156  0144		       48		      pha
    157  0145		       c8		      iny
    158  0146		       b9 60 17 	      lda	MenuCatLowPfGfxR,y
    159  0149		       48		      pha
    160  014a		       85 9b		      sta	MenuCatShift	; use highest bit for cat face shift
    161  014c
    162  014c							; push graphics for left copies of PF2
    163  014c		       8a		      txa		; get animation frame
    164  014d		       0a		      asl
    165  014e		       0a		      asl
    166  014f		       0a		      asl
    167  0150		       38		      sec
    168  0151		       e5 8e		      sbc	MenuCatFrame
    169  0153		       0a		      asl		; multiply by 14 (clears carry flag)
    170  0154		       85 8f		      sta	MenuCatFrameX14	; save to reuse later
    171  0156		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    172  0158		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    173  015a
    174  015a		       a0 0e		      ldy	#14
    175  015c				   .LoopPfL
    176  015c		       b1 90		      lda	(MenuCatRamPtr),y
    177  015e		       48		      pha
    178  015f		       88		      dey
    179  0160		       10 fa		      bpl	.LoopPfL
    180  0162
    181  0162							; push graphics for GRP0
    182  0162		       a9 17		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    183  0164		       85 91		      sta	MenuCatRamPtr+1	; and set pointer to this page
    184  0166		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    185  0168		       85 90		      sta	MenuCatRamPtr	; and set pointer address
    186  016a
    187  016a		       a0 0d		      ldy	#13
    188  016c				   .LoopGfxL
    189  016c		       b1 90		      lda	(MenuCatRamPtr),y
    190  016e		       48		      pha
    191  016f		       88		      dey
    192  0170		       10 fa		      bpl	.LoopGfxL
    193  0172
    194  0172							; prepare graphics pointers for kernel
    195  0172		       a9 16		      lda	#>MenuCatGfxPage1
    196  0174		       85 93		      sta	MenuCatHmvPtrP+1
    197  0176		       85 95		      sta	MenuCatMslPtr+1
    198  0178		       a9 17		      lda	#>MenuCatGfxPage2
    199  017a		       85 91		      sta	MenuCatHmvPtrM+1
    200  017c
    201  017c		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    202  017e		       e0 05		      cpx	#5
    203  0180		       d0 03		      bne	.NotFrame5
    204  0182		       38		      sec
    205  0183		       e9 0e		      sbc	#14
    206  0185				   .NotFrame5
    207  0185		       18		      clc
    208  0186		       69 ad		      adc	#<MenuCatHmoveP
    209  0188		       85 92		      sta	MenuCatHmvPtrP
    210  018a		       a5 8f		      lda	MenuCatFrameX14	; get animation frame times 14
    211  018c		       38		      sec
    212  018d		       e5 8e		      sbc	MenuCatFrame	; adjust to times 13
    213  018f		       e0 00		      cpx	#0
    214  0191		       f0 03		      beq	.Frame0
    215  0193		       38		      sec
    216  0194		       e9 0d		      sbc	#13
    217  0196				   .Frame0
    218  0196		       18		      clc
    219  0197		       69 6c		      adc	#<MenuCatHmoveM
    220  0199		       85 90		      sta	MenuCatHmvPtrM
    221  019b		       a0 f3		      ldy	#<MenuCatMslGfx
    222  019d		       e0 05		      cpx	#5
    223  019f		       d0 01		      bne	.Not5
    224  01a1		       88		      dey
    225  01a2				   .Not5
    226  01a2		       84 94		      sty	MenuCatMslPtr
    227  01a4
      0  01a4					      TIMER_LOOP
      1  01a4					      SUBROUTINE
      2  01a4
      3  01a4				   .TimerLoop
      4  01a4		       ad 84 02 	      lda	INTIM
      5  01a7		       d0 fb		      bne	.TimerLoop
      6  01a9
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  01a9					      include	bank1/code/kernel.asm
      1  01a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01a9							; Kernel
      3  01a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01a9
      5  01a9		       a9 00		      lda	#0
      6  01ab		       85 02		      sta	WSYNC
      7  01ad		       85 01		      sta	VBLANK	; enable display
      8  01af
      9  01af		       a0 3f		      ldy	#63
     10  01b1				   .Loop1
     11  01b1		       88		      dey
     12  01b2		       85 02		      sta	WSYNC
     13  01b4		       d0 fb		      bne	.Loop1
     14  01b6
     15  01b6		       a5 8e		      lda	MenuCatFrame
     16  01b8		       c9 02		      cmp	#2
     17  01ba		       30 06		      bmi	.HiCat
     18  01bc		       85 02		      sta	WSYNC
     19  01be		       85 02		      sta	WSYNC
     20  01c0		       85 02		      sta	WSYNC
     21  01c2		       85 02	   .HiCat     sta	WSYNC
     22  01c4		       ea		      nop		; 02
     23  01c5
     24  01c5		       4c 00 12 	      jmp	.Align1
     25  0200		       00 00 00 00*.Align1    ALIGN	$100
     26  0200
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0200					      include	bank1/code/menucat1_4.asm
      1  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0200							; Menu Cat Kernel (Blocks 1-3)
      3  0200							;
      4  0200							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0200							;
      6  0200							; 70 bytes
      7  0200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0200
      9  0200							; 16 bytes
     10  0200		       85 02		      sta	WSYNC	;	2
     11  0202		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0204		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0207		       a0 0b		      ldy	#11	; 08	2
     14  0209		       88	   .LP	      dey		; 59	1
     15  020a		       c0 03		      cpy	#3	; 61	2
     16  020c		       d0 fb		      bne	.LP	; 63	2
      0  020e					      SLEEP	2	; 65	1
      1  020e				   .CYCLES    SET	2
      2  020e
      3  020e				  -	      IF	.CYCLES < 2
      4  020e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  020e				  -	      ERR
      6  020e					      ENDIF
      7  020e
      8  020e				  -	      IF	.CYCLES & 1
      9  020e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  020e				  -	      nop	0
     11  020e				  -	      ELSE
     12  020e				  -	      bit	VSYNC
     13  020e				  -	      ENDIF
     14  020e				  -.CYCLES    SET	.CYCLES - 3
     15  020e					      ENDIF
     16  020e
     17  020e					      REPEAT	.CYCLES / 2
     18  020e		       ea		      nop
     19  020f					      REPEND
     18  020f		       4c 1c 12 	      jmp	.Enter1_3	; 68	2
     19  0212
     20  0212				   .Loop
     21  0212
     22  0212		       85 09		      sta	COLUBK	; 56	2
     23  0214		       85 02		      sta	WSYNC	; 00	2
     24  0216
      0  0216					      SLEEP	4	; 04	2
      1  0216				   .CYCLES    SET	4
      2  0216
      3  0216				  -	      IF	.CYCLES < 2
      4  0216				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0216				  -	      ERR
      6  0216					      ENDIF
      7  0216
      8  0216				  -	      IF	.CYCLES & 1
      9  0216				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0216				  -	      nop	0
     11  0216				  -	      ELSE
     12  0216				  -	      bit	VSYNC
     13  0216				  -	      ENDIF
     14  0216				  -.CYCLES    SET	.CYCLES - 3
     15  0216					      ENDIF
     16  0216
     17  0216					      REPEAT	.CYCLES / 2
     18  0216		       ea		      nop
     17  0216					      REPEND
     18  0217		       ea		      nop
     19  0218					      REPEND
     26  0218		       d0 0d		      bne	.Skip	; 07	2
     27  021a
     28  021a				   MenuCatKernel1_3
     29  021a
     30  021a							; 10 bytes
      0  021a					      SLEEP	3	; 68	2
      1  021a				   .CYCLES    SET	3
      2  021a
      3  021a				  -	      IF	.CYCLES < 2
      4  021a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  021a				  -	      ERR
      6  021a					      ENDIF
      7  021a
      8  021a					      IF	.CYCLES & 1
      9  021a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  021a		       04 00		      nop	0
     11  021c				  -	      ELSE
     12  021c				  -	      bit	VSYNC
     13  021c					      ENDIF
     14  021c				   .CYCLES    SET	.CYCLES - 3
     15  021c					      ENDIF
     16  021c
     17  021c				  -	      REPEAT	.CYCLES / 2
     18  021c				  -	      nop
     19  021c					      REPEND
     32  021c				   .Enter1_3
     33  021c		       84 1f		      sty	ENABL	; 71	2
     34  021e		       a2 03		      ldx	#3	; 73	2
     35  0220		       85 2a		      sta	HMOVE	; 00	2
     36  0222
     37  0222							; 4 bytes
     38  0222		       b9 31 16 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0225		       85 1b		      sta	GRP0	; 07	2
     40  0227
     41  0227				   .Skip
     42  0227
     43  0227							; 8 bytes
     44  0227		       b9 e9 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  022a		       85 09		      sta	COLUBK	; 14	2
     46  022c		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     47  022e		       85 08		      sta	COLUPF	; 22	2
     48  0230
     49  0230							; 8 bytes
     50  0230		       b9 2d 16 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0233		       85 1c		      sta	GRP1	; 29	2
     52  0235		       b9 00 16 	      lda	MenuCatTopPf,y	; 33	2
     53  0238		       85 0f		      sta	PF2	; 36	2
     54  023a
     55  023a							; 17 bytes
     56  023a		       a5 8c		      lda	CatTartColor	; 39	2
     57  023c		       85 09		      sta	COLUBK	; 42	2
     58  023e		       a5 ed		      lda	MenuBgColor	; 45	2
     59  0240		       85 08		      sta	COLUPF	; 48	2
     60  0242		       ca		      dex		; 50	1
     61  0243		       d0 cd		      bne	.Loop	; 53/52	2
     62  0245		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0247							; 54	2
     64  0247		       85 09		      sta	COLUBK	; 57	2
     65  0249		       86 04		      stx	NUSIZ0	; 60	2
     66  024b
     67  024b							; 5 bytes
     68  024b		       88		      dey		; 62	1
     69  024c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  024e
     71  024e
     72  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  024e							; Menu Cat Kernel (Block 4)
     74  024e							;
     75  024e							; This kernel draws block 4 of the cat in the menu display.
     76  024e							;
     77  024e							; ? bytes
     78  024e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  024e
     80  024e		       a2 03		      ldx	#3	; 66	2
     81  0250
     82  0250		       ad 31 16 	      lda	MenuCatTopGfxL	; 69	2
     83  0253		       85 1b		      sta	GRP0	; 72	2
     84  0255		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0258
      0  0258					      SLEEP	3	; 03	2
      1  0258				   .CYCLES    SET	3
      2  0258
      3  0258				  -	      IF	.CYCLES < 2
      4  0258				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0258				  -	      ERR
      6  0258					      ENDIF
      7  0258
      8  0258					      IF	.CYCLES & 1
      9  0258					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0258		       04 00		      nop	0
     11  025a				  -	      ELSE
     12  025a				  -	      bit	VSYNC
     13  025a					      ENDIF
     14  025a				   .CYCLES    SET	.CYCLES - 3
     15  025a					      ENDIF
     16  025a
     17  025a				  -	      REPEAT	.CYCLES / 2
     18  025a				  -	      nop
     19  025a					      REPEND
     87  025a				   .Loop4
     88  025a		       a5 e9		      lda	RamBowColorsBk+16	; 06	2
     89  025c		       85 09		      sta	COLUBK	; 09	2
     90  025e		       b1 96		      lda	(BowColorsPfPtr),y	; 14	2
     91  0260		       85 08		      sta	COLUPF	; 17	2
     92  0262
     93  0262		       ad 2d 16 	      lda	MenuCatTopGfxR	; 20	2
     94  0265		       85 1c		      sta	GRP1	; 23	2
     95  0267
     96  0267		       86 20		      stx	HMP0	; 26	2
     97  0269		       86 24		      stx	HMBL	; 29	2
     98  026b
      0  026b					      SLEEP	6	; 36	4
      1  026b				   .CYCLES    SET	6
      2  026b
      3  026b				  -	      IF	.CYCLES < 2
      4  026b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  026b				  -	      ERR
      6  026b					      ENDIF
      7  026b
      8  026b				  -	      IF	.CYCLES & 1
      9  026b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  026b				  -	      nop	0
     11  026b				  -	      ELSE
     12  026b				  -	      bit	VSYNC
     13  026b				  -	      ENDIF
     14  026b				  -.CYCLES    SET	.CYCLES - 3
     15  026b					      ENDIF
     16  026b
     17  026b					      REPEAT	.CYCLES / 2
     18  026b		       ea		      nop
     17  026b					      REPEND
     18  026c		       ea		      nop
     17  026c					      REPEND
     18  026d		       ea		      nop
     19  026e					      REPEND
    100  026e
    101  026e		       a5 8c		      lda	CatTartColor	; 39	2
    102  0270		       85 09		      sta	COLUBK	; 42	2
    103  0272		       a5 ed		      lda	MenuBgColor	; 45	2
    104  0274		       85 08		      sta	COLUPF	; 48	2
    105  0276
    106  0276		       38		      sec		; 50	1
    107  0277		       ca		      dex		; 52	1
    108  0278
    109  0278		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  027b
    111  027b		       f0 04		      beq	.Exit4	; 59/58	2
    112  027d		       85 02		      sta	WSYNC	; 00	2
    113  027f		       d0 d9		      bne	.Loop4	; 03	2
    114  0281
    115  0281				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0281					      include	bank1/code/menucat5.asm
      1  0281							;
      2  0281
      3  0281		       a5 9b		      lda	MenuCatShift	; 62	2
      4  0283		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0285					      SKIP_WORD		; 68	1
      1  0285		       0c		      HEX	0C
      6  0286				   .ClearHmove
      7  0286		       85 2b		      sta	HMCLR	; 68	2
      8  0288
      9  0288		       a5 96		      lda	BowColorsPfPtr	; 71	2
     10  028a		       e9 0d		      sbc	#13	; 73	2
     11  028c		       85 96		      sta	BowColorsPfPtr	; 00	2
     12  028e
     13  028e		       85 2a		      sta	HMOVE	; 03	2
     14  0290		       85 96		      sta	BowColorsPfPtr	; 06	2
     15  0292		       a0 0c		      ldy	#12	; 08	2
     16  0294
     17  0294							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0294
     19  0294							; 10 bytes
     20  0294		       a5 e8		      lda	RamBowColorsBk+15	; 11	2
     21  0296		       85 09		      sta	COLUBK	; 14	2
     22  0298		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     23  029a		       85 08		      sta	COLUPF	; 22	2
     24  029c		       85 9a		      sta	RainbowColorPf	; 25	2
     25  029e
     26  029e							; 7 bytes
     27  029e		       a5 d7		      lda	RamMenuCatGfxR+15	; 28	2
     28  02a0		       85 1c		      sta	GRP1	; 31	2
     29  02a2		       4a		      lsr		; 33	1
     30  02a3		       85 1d		      sta	ENAM0	; 36	2
     31  02a5
     32  02a5							; 4 bytes
     33  02a5		       a5 8c		      lda	CatTartColor	; 39	2
     34  02a7		       85 09		      sta	COLUBK	; 42	2
     35  02a9
     36  02a9							; 5 bytes
     37  02a9		       a5 d6		      lda	RamMenuCatGfxR+14	; 45	2
     38  02ab		       85 98		      sta	RamMenuCatGfx	; 48	2
     39  02ad
     40  02ad							; 10 bytes
     41  02ad		       a5 ed		      lda	MenuBgColor	; 51	2
     42  02af		       85 08		      sta	COLUPF	; 54	2
     43  02b1		       85 09		      sta	COLUBK	; 57	2
     44  02b3		       85 2b		      sta	HMCLR	; 60	2
     45  02b5		       85 02		      sta	WSYNC	; 00	2
     46  02b7
     47  02b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  02b7
     49  02b7							; 8 bytes
     50  02b7		       a5 e8		      lda	RamBowColorsBk+15	; 03	2
     51  02b9		       85 09		      sta	COLUBK	; 06	2
     52  02bb		       a5 9a		      lda	RainbowColorPf	; 09	2
     53  02bd		       85 08		      sta	COLUPF	; 12	2
     54  02bf
     55  02bf							; 8 bytes
     56  02bf		       b1 90		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  02c1		       85 22		      sta	HMM0	; 20	2
     58  02c3		       0a		      asl		; 22	1
     59  02c4		       0a		      asl		; 24	1
     60  02c5		       0a		      asl		; 26	1
     61  02c6		       0a		      asl		; 28	1
     62  02c7		       85 23		      sta	HMM1	; 31
     63  02c9
     64  02c9							; 11 bytes
      0  02c9					      SLEEP	2	; 33	3
      1  02c9				   .CYCLES    SET	2
      2  02c9
      3  02c9				  -	      IF	.CYCLES < 2
      4  02c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02c9				  -	      ERR
      6  02c9					      ENDIF
      7  02c9
      8  02c9				  -	      IF	.CYCLES & 1
      9  02c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02c9				  -	      nop	0
     11  02c9				  -	      ELSE
     12  02c9				  -	      bit	VSYNC
     13  02c9				  -	      ENDIF
     14  02c9				  -.CYCLES    SET	.CYCLES - 3
     15  02c9					      ENDIF
     16  02c9
     17  02c9					      REPEAT	.CYCLES / 2
     18  02c9		       ea		      nop
     19  02ca					      REPEND
     66  02ca		       a5 8c		      lda	CatTartColor	; 36	2
     67  02cc		       85 09		      sta	COLUBK	; 39	2
     68  02ce
     69  02ce		       b1 94		      lda	(MenuCatMslPtr),y	; 44	2
     70  02d0		       85 99		      sta	RamMenuCatMissile	; 47	2
     71  02d2
     72  02d2							; 8 bytes
     73  02d2		       a5 ed		      lda	MenuBgColor	; 50	2
     74  02d4		       85 08		      sta	COLUPF	; 53	2
     75  02d6		       85 09		      sta	COLUBK	; 56	2
     76  02d8		       85 02		      sta	WSYNC	; 00	2
     77  02da
     78  02da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  02da
     80  02da							; 8 bytes
     81  02da		       a5 e8		      lda	RamBowColorsBk+15	; 03	2
     82  02dc		       85 09		      sta	COLUBK	; 06	2
     83  02de		       a5 9a		      lda	RainbowColorPf	; 09	2
     84  02e0		       85 08		      sta	COLUPF	; 12	2
     85  02e2
     86  02e2							; 11 bytes
      0  02e2					      SLEEP	20	; 32	10
      1  02e2				   .CYCLES    SET	20
      2  02e2
      3  02e2				  -	      IF	.CYCLES < 2
      4  02e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  02e2				  -	      ERR
      6  02e2					      ENDIF
      7  02e2
      8  02e2				  -	      IF	.CYCLES & 1
      9  02e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  02e2				  -	      nop	0
     11  02e2				  -	      ELSE
     12  02e2				  -	      bit	VSYNC
     13  02e2				  -	      ENDIF
     14  02e2				  -.CYCLES    SET	.CYCLES - 3
     15  02e2					      ENDIF
     16  02e2
     17  02e2					      REPEAT	.CYCLES / 2
     18  02e2		       ea		      nop
     17  02e2					      REPEND
     18  02e3		       ea		      nop
     17  02e3					      REPEND
     18  02e4		       ea		      nop
     17  02e4					      REPEND
     18  02e5		       ea		      nop
     17  02e5					      REPEND
     18  02e6		       ea		      nop
     17  02e6					      REPEND
     18  02e7		       ea		      nop
     17  02e7					      REPEND
     18  02e8		       ea		      nop
     17  02e8					      REPEND
     18  02e9		       ea		      nop
     17  02e9					      REPEND
     18  02ea		       ea		      nop
     17  02ea					      REPEND
     18  02eb		       ea		      nop
     19  02ec					      REPEND
     88  02ec		       88		      dey		; 34	1
     89  02ed
     90  02ed							; 6 bytes
     91  02ed		       a5 8c		      lda	CatTartColor	; 37	2
     92  02ef		       85 09		      sta	COLUBK	; 40	2
     93  02f1
     94  02f1							; 12 bytes
     95  02f1		       a2 ff		      ldx	#$FF	; 42	2
     96  02f3		       a5 ed		      lda	MenuBgColor	; 45	3
     97  02f5		       85 08		      sta	COLUPF	; 48	2
     98  02f7		       86 1f		      stx	ENABL	; 51	2
     99  02f9		       86 1e		      stx	ENAM1	; 54	2
    100  02fb		       85 09		      sta	COLUBK	; 57	2
    101  02fd		       4c 1a 13 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0300					      include	bank1/code/menucat6_17.asm
      1  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0300							; Menu Cat Kernel (Blocks 6-17)
      3  0300							;
      4  0300							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0300							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0300							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0300							;
      8  0300							; 179 bytes
      9  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0300
     11  0300					      ALIGN	$100
     12  0300
     13  0300				   MenuCatKernel6_17
     14  0300
     15  0300							; 24 bytes
     16  0300		       b9 ae 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0303		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0305		       a9 09		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0307		       a6 8c		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0309		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  030b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  030e		       b9 bd 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0311		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0313		       a5 ed		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0315		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0317		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  031a
     28  031a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  031a
     30  031a				   .Enter6_17		; enter sandman
     31  031a
     32  031a							; 14 bytes
     33  031a		       a5 98		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  031c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  031e		       a5 99		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0320		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0322		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0324		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0326		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0328
     41  0328							; 12 bytes
     42  0328		       b9 dc 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  032b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  032d		       85 9a		      sta	RainbowColorBk	; 14	2 - save for later
     45  032f		       b3 96		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0331		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0333		       9a		      txs		; 24	1 - save for later
     48  0334
     49  0334							; 26 bytes
     50  0334		       b9 ad 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0337		       85 0f		      sta	PF2	; 31	2
     52  0339		       a9 09		      lda	#COL_CAT_FACE	; 33	2
     53  033b		       a6 8c		      ldx	CatTartColor	; 36	2
     54  033d		       85 09		      sta	COLUBK	; 39	2
     55  033f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0342		       b9 bc 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0345		       85 0f		      sta	PF2	; 50	2
     58  0347		       a5 ed		      lda	MenuBgColor	; 53	2
     59  0349		       85 08		      sta	COLUPF	; 56	2
     60  034b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  034e
     62  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  034e
     64  034e							; 10 bytes
     65  034e		       b1 90		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0350		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0352		       0a		      asl		; 70	1
     68  0353		       0a		      asl		; 72	1
     69  0354		       0a		      asl		; 74	1
     70  0355		       0a		      asl		; 00	1
     71  0356		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0358
     73  0358							; 7 bytes
     74  0358		       a5 9a		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  035a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  035c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  035d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  035f
     79  035f							; 5 bytes
     80  035f		       b1 92		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0361		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0363		       ea		      nop		; 24	1
     83  0364
     84  0364							; 26 bytes
     85  0364		       b9 ad 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0367		       85 0f		      sta	PF2	; 31	2
     87  0369		       a9 09		      lda	#COL_CAT_FACE	; 33	2
     88  036b		       a6 8c		      ldx	CatTartColor	; 36	2
     89  036d		       85 09		      sta	COLUBK	; 39	2
     90  036f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0372		       b9 bc 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0375		       85 0f		      sta	PF2	; 50	2
     93  0377		       a5 ed		      lda	MenuBgColor	; 53	2
     94  0379		       85 08		      sta	COLUPF	; 56	2
     95  037b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  037e
     97  037e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  037e
     99  037e							; 14 bytes
    100  037e		       b9 9e 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0381		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0383		       b9 ca 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0386		       85 98		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0388		       b1 94		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  038a		       85 99		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  038c
    107  038c							; 7 bytes
    108  038c		       a5 9a		      lda	RainbowColorBk	; 09	2
    109  038e		       85 09		      sta	COLUBK	; 12	2
    110  0390		       ba		      tsx		; 14	1
    111  0391		       86 08		      stx	COLUPF	; 17	2
    112  0393
    113  0393							; 6 bytes
    114  0393		       88		      dey		; 19	1 - dec y for next kernel block
    115  0394		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0396		       4c 00 13 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0399
    118  0399				   .Exit
    119  0399
    120  0399							; 25 bytes
    121  0399		       4c 00 14 	      jmp	.Align6_17	; 25	2
    122  039c
    123  0400		       00 00 00 00*	      ALIGN	$100
    124  0400				   .Align6_17
    125  0400
    126  0400		       a5 ad		      lda	RamMenuCatPfL+3	; 28	2
    127  0402		       85 0f		      sta	PF2	; 31	2
    128  0404		       a9 09		      lda	#COL_CAT_FACE	; 33	2
    129  0406		       a6 8c		      ldx	CatTartColor	; 36	2
    130  0408		       85 09		      sta	COLUBK	; 39	2
    131  040a		       ea		      nop		; 41	1
    132  040b		       86 08		      stx	COLUPF	; 44	2
    133  040d		       a5 bc		      lda	RamMenuCatPfR+3	; 47	2
    134  040f		       85 0f		      sta	PF2	; 50	2
    135  0411		       a5 ed		      lda	MenuBgColor	; 53	2
    136  0413		       85 08		      sta	COLUPF	; 56	2
    137  0415		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0417					      include	bank1/code/menucat18.asm
      1  0417							; 59
      2  0417
      3  0417		       84 1d		      sty	ENAM0	; 62	2
      4  0419		       a5 98		      lda	RamMenuCatGfx	; 65	2
      5  041b		       85 1c		      sta	GRP1	; 68	2
      6  041d		       a9 60		      lda	#$60	; 70	2
      7  041f		       85 21		      sta	HMP1	; 73	2
      8  0421		       85 2a		      sta	HMOVE	; 00	2
      9  0423
     10  0423		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0425							; 02	2
     12  0425		       85 04		      sta	NUSIZ0	; 05	2
     13  0427
     14  0427		       a5 db		      lda	RamBowColorsBk+2	; 08	2
     15  0429		       85 09		      sta	COLUBK	; 11	2
     16  042b		       85 08		      sta	COLUPF	; 14	2
     17  042d
     18  042d		       a0 02		      ldy	#2	; 16	2
     19  042f		       ea		      nop		; 18	1
     20  0430		       a6 ed		      ldx	MenuBgColor	; 21	2
     21  0432		       9a		      txs		; 23	1
     22  0433
     23  0433				   .Loop18
     24  0433
     25  0433		       a5 ac		      lda	RamMenuCatPfL+2	; 26	2
     26  0435		       85 0f		      sta	PF2	; 29	2
     27  0437
     28  0437		       a9 09		      lda	#COL_CAT_FACE	; 31	2
     29  0439		       a2 00		      ldx	#0	; 33	2
     30  043b		       86 1f		      stx	ENABL	; 36	2
     31  043d		       85 09		      sta	COLUBK	; 39	2
     32  043f		       86 08		      stx	COLUPF	; 42	2
     33  0441		       85 12		      sta	RESM0	; 45	2
     34  0443		       a5 bb		      lda	RamMenuCatPfR+2	; 48	2
     35  0445		       85 0f		      sta	PF2	; 51	2
     36  0447		       ba		      tsx		; 53	1
     37  0448		       86 08		      stx	COLUPF	; 56	2
     38  044a		       86 09		      stx	COLUBK	; 59	2
     39  044c		       88		      dey		; 61	1
     40  044d		       f0 16		      beq	.Exit18	; 64/63	2
     41  044f
      0  044f					      SLEEP	8	; 71	2
      1  044f				   .CYCLES    SET	8
      2  044f
      3  044f				  -	      IF	.CYCLES < 2
      4  044f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  044f				  -	      ERR
      6  044f					      ENDIF
      7  044f
      8  044f				  -	      IF	.CYCLES & 1
      9  044f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  044f				  -	      nop	0
     11  044f				  -	      ELSE
     12  044f				  -	      bit	VSYNC
     13  044f				  -	      ENDIF
     14  044f				  -.CYCLES    SET	.CYCLES - 3
     15  044f					      ENDIF
     16  044f
     17  044f					      REPEAT	.CYCLES / 2
     18  044f		       ea		      nop
     17  044f					      REPEND
     18  0450		       ea		      nop
     17  0450					      REPEND
     18  0451		       ea		      nop
     17  0451					      REPEND
     18  0452		       ea		      nop
     19  0453					      REPEND
     43  0453
     44  0453		       a5 db		      lda	RamBowColorsBk+2	; 74	2
     45  0455		       85 09		      sta	COLUBK	; 01	2
     46  0457		       85 08		      sta	COLUPF	; 04	2
     47  0459
     48  0459		       84 9a		      sty	RainbowColorBk	; 07
     49  045b		       a0 0d		      ldy	#13	; 09
     50  045d		       b1 92		      lda	(MenuCatHmvPtrP),y	; 14
     51  045f		       85 21		      sta	HMP1	; 17
     52  0461		       a4 9a		      ldy	RainbowColorBk	; 20
     53  0463
     54  0463		       d0 ce		      bne	.Loop18	; 23	2
     55  0465
     56  0465				   .Exit18		; 64
     57  0465
     58  0465		       85 02		      sta	WSYNC	; 00
     59  0467
     60  0467		       a5 db		      lda	RamBowColorsBk+2	; 03
     61  0469		       85 09		      sta	COLUBK	; 06
     62  046b		       85 08		      sta	COLUPF	; 09
     63  046d
     64  046d		       a5 96		      lda	BowColorsPfPtr	; 12
     65  046f		       38		      sec		; 14
     66  0470		       e9 03		      sbc	#3	; 16
     67  0472		       85 96		      sta	BowColorsPfPtr	; 19
      0  0474					      SLEEP	4	; 23
      1  0474				   .CYCLES    SET	4
      2  0474
      3  0474				  -	      IF	.CYCLES < 2
      4  0474				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0474				  -	      ERR
      6  0474					      ENDIF
      7  0474
      8  0474				  -	      IF	.CYCLES & 1
      9  0474				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0474				  -	      nop	0
     11  0474				  -	      ELSE
     12  0474				  -	      bit	VSYNC
     13  0474				  -	      ENDIF
     14  0474				  -.CYCLES    SET	.CYCLES - 3
     15  0474					      ENDIF
     16  0474
     17  0474					      REPEAT	.CYCLES / 2
     18  0474		       ea		      nop
     17  0474					      REPEND
     18  0475		       ea		      nop
     19  0476					      REPEND
     69  0476
     70  0476		       a5 ac		      lda	RamMenuCatPfL+2	; 26	2
     71  0478		       85 0f		      sta	PF2	; 29	2
     72  047a
     73  047a		       a9 09		      lda	#COL_CAT_FACE	; 31	2
     74  047c		       a2 00		      ldx	#0	; 33	2
     75  047e		       86 1f		      stx	ENABL	; 36	2
     76  0480		       85 09		      sta	COLUBK	; 39	2
     77  0482		       86 08		      stx	COLUPF	; 42	2
     78  0484		       85 12		      sta	RESM0	; 45	2
     79  0486		       a5 bb		      lda	RamMenuCatPfR+2	; 48	2
     80  0488		       85 0f		      sta	PF2	; 51	2
     81  048a		       ba		      tsx		; 53	1
     82  048b		       86 08		      stx	COLUPF	; 56	2
     83  048d		       86 09		      stx	COLUBK	; 59	2
     84  048f
      0  048f					      SLEEP	5	; 64
      1  048f				   .CYCLES    SET	5
      2  048f
      3  048f				  -	      IF	.CYCLES < 2
      4  048f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  048f				  -	      ERR
      6  048f					      ENDIF
      7  048f
      8  048f					      IF	.CYCLES & 1
      9  048f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  048f		       04 00		      nop	0
     11  0491				  -	      ELSE
     12  0491				  -	      bit	VSYNC
     13  0491					      ENDIF
     14  0491				   .CYCLES    SET	.CYCLES - 3
     15  0491					      ENDIF
     16  0491
     17  0491					      REPEAT	.CYCLES / 2
     18  0491		       ea		      nop
     19  0492					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0492					      include	bank1/code/menucat19_20.asm
      1  0492							;
      2  0492
      3  0492		       a0 01		      ldy	#1	; 66	2
      4  0494
      5  0494				   MenuCatKernel19_20
      6  0494
      7  0494		       b9 9c 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0497		       85 1b		      sta	GRP0	; 73	2
      9  0499		       85 2a		      sta	HMOVE	; 00	2
     10  049b		       b9 c8 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  049e		       85 1c		      sta	GRP1	; 07	2
     12  04a0
     13  04a0		       b9 d9 00 	      lda	RamBowColorsBk,y	; 11	3
     14  04a3		       85 09		      sta	COLUBK	; 14	2
     15  04a5		       b1 96		      lda	(BowColorsPfPtr),y	; 19	2
     16  04a7		       85 08		      sta	COLUPF	; 22	2
     17  04a9		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  04ac		       85 0f		      sta	PF2	; 29	2
      0  04ae					      SLEEP	2	; 31	1
      1  04ae				   .CYCLES    SET	2
      2  04ae
      3  04ae				  -	      IF	.CYCLES < 2
      4  04ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04ae				  -	      ERR
      6  04ae					      ENDIF
      7  04ae
      8  04ae				  -	      IF	.CYCLES & 1
      9  04ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04ae				  -	      nop	0
     11  04ae				  -	      ELSE
     12  04ae				  -	      bit	VSYNC
     13  04ae				  -	      ENDIF
     14  04ae				  -.CYCLES    SET	.CYCLES - 3
     15  04ae					      ENDIF
     16  04ae
     17  04ae					      REPEAT	.CYCLES / 2
     18  04ae		       ea		      nop
     19  04af					      REPEND
     20  04af
     21  04af		       a9 09		      lda	#COL_CAT_FACE	; 33	2
     22  04b1		       a6 ed		      ldx	MenuBgColor	; 36	2
     23  04b3		       85 09		      sta	COLUBK	; 39	2
     24  04b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  04b8		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  04bb		       85 0f		      sta	PF2	; 50	2
     27  04bd
     28  04bd		       85 2b		      sta	HMCLR	; 53	2
      0  04bf					      SLEEP	2	; 55	1
      1  04bf				   .CYCLES    SET	2
      2  04bf
      3  04bf				  -	      IF	.CYCLES < 2
      4  04bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  04bf				  -	      ERR
      6  04bf					      ENDIF
      7  04bf
      8  04bf				  -	      IF	.CYCLES & 1
      9  04bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  04bf				  -	      nop	0
     11  04bf				  -	      ELSE
     12  04bf				  -	      bit	VSYNC
     13  04bf				  -	      ENDIF
     14  04bf				  -.CYCLES    SET	.CYCLES - 3
     15  04bf					      ENDIF
     16  04bf
     17  04bf					      REPEAT	.CYCLES / 2
     18  04bf		       ea		      nop
     19  04c0					      REPEND
     30  04c0
     31  04c0		       86 09		      stx	COLUBK	; 58	2
     32  04c2		       85 02		      sta	WSYNC	; 00	2
     33  04c4
     34  04c4		       b9 d9 00 	      lda	RamBowColorsBk,y	; 04	3
     35  04c7		       85 09		      sta	COLUBK	; 07	2
     36  04c9		       b1 96		      lda	(BowColorsPfPtr),y	; 12	2
     37  04cb		       85 08		      sta	COLUPF	; 15	2
     38  04cd		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  04d0		       85 0f		      sta	PF2	; 22	2
     40  04d2
     41  04d2		       a9 00		      lda	#$00	; 24	2
     42  04d4		       85 20		      sta	HMP0	; 27	2
     43  04d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  04d9
     45  04d9		       a9 09		      lda	#COL_CAT_FACE	; 33	2
     46  04db		       a6 ed		      ldx	MenuBgColor	; 36	2
     47  04dd		       85 09		      sta	COLUBK	; 39	2
     48  04df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  04e2		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  04e5		       85 0f		      sta	PF2	; 50	2
     51  04e7
     52  04e7		       a9 20		      lda	#$20	; 52	2
     53  04e9		       85 22		      sta	HMM0	; 55	2
     54  04eb
     55  04eb		       86 09		      stx	COLUBK	; 58	2
     56  04ed		       85 02		      sta	WSYNC	; 00	2
     57  04ef
     58  04ef		       b9 d9 00 	      lda	RamBowColorsBk,y	; 04	3
     59  04f2		       85 09		      sta	COLUBK	; 07	2
     60  04f4		       b1 96		      lda	(BowColorsPfPtr),y	; 12	2
     61  04f6		       85 08		      sta	COLUPF	; 15	2
     62  04f8		       b9 aa 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  04fb		       85 0f		      sta	PF2	; 22	2
     64  04fd
     65  04fd		       a9 e0		      lda	#$E0	; 24	2
     66  04ff		       85 23		      sta	HMM1	; 27	2
      0  0501					      SLEEP	4	; 31	5
      1  0501				   .CYCLES    SET	4
      2  0501
      3  0501				  -	      IF	.CYCLES < 2
      4  0501				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0501				  -	      ERR
      6  0501					      ENDIF
      7  0501
      8  0501				  -	      IF	.CYCLES & 1
      9  0501				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0501				  -	      nop	0
     11  0501				  -	      ELSE
     12  0501				  -	      bit	VSYNC
     13  0501				  -	      ENDIF
     14  0501				  -.CYCLES    SET	.CYCLES - 3
     15  0501					      ENDIF
     16  0501
     17  0501					      REPEAT	.CYCLES / 2
     18  0501		       ea		      nop
     17  0501					      REPEND
     18  0502		       ea		      nop
     19  0503					      REPEND
     68  0503
     69  0503		       a9 09		      lda	#COL_CAT_FACE	; 33	2
     70  0505		       a6 ed		      ldx	MenuBgColor	; 36	2
     71  0507		       85 09		      sta	COLUBK	; 39	2
     72  0509		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  050c		       b9 b9 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  050f		       85 0f		      sta	PF2	; 50	2
     75  0511
      0  0511					      SLEEP	5	; 55	3
      1  0511				   .CYCLES    SET	5
      2  0511
      3  0511				  -	      IF	.CYCLES < 2
      4  0511				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0511				  -	      ERR
      6  0511					      ENDIF
      7  0511
      8  0511					      IF	.CYCLES & 1
      9  0511					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0511		       04 00		      nop	0
     11  0513				  -	      ELSE
     12  0513				  -	      bit	VSYNC
     13  0513					      ENDIF
     14  0513				   .CYCLES    SET	.CYCLES - 3
     15  0513					      ENDIF
     16  0513
     17  0513					      REPEAT	.CYCLES / 2
     18  0513		       ea		      nop
     19  0514					      REPEND
     77  0514
     78  0514		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0517
     80  0517		       88		      dey		; 61	1
     81  0518		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  051a		       4c 94 14 	      jmp	MenuCatKernel19_20	; 66	2
     83  051d
     84  051d				   .Exit19_20
     85  051d
     86  051d		       a9 00		      lda	#0
     87  051f		       85 1b		      sta	GRP0
     88  0521		       85 1c		      sta	GRP1
     89  0523		       85 1d		      sta	ENAM0
     90  0525		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     32  0527
     33  0527		       a5 8e		      lda	MenuCatFrame
     34  0529		       c9 02		      cmp	#2
     35  052b		       10 06		      bpl	.LoCat
     36  052d		       85 02		      sta	WSYNC
     37  052f		       85 02		      sta	WSYNC
     38  0531		       85 02		      sta	WSYNC
     39  0533		       85 02	   .LoCat     sta	WSYNC
     40  0535
     41  0535		       a0 3e		      ldy	#62
     42  0537				   .Loop2
     43  0537		       88		      dey
     44  0538		       85 02		      sta	WSYNC
     45  053a		       d0 fb		      bne	.Loop2
     46  053c
     47  053c		       a9 02		      lda	#2
     48  053e		       85 01		      sta	VBLANK	; disable display
     49  0540
     50  0540		       4c 1d 10 	      jmp	MenuOverScan
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  0543					      include	bank1/data/menucatgfx.asm
      1  0543							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0543							; Menu Cat Graphics
      3  0543							;
      4  0543							; Graphics for drawing the menu cat display
      5  0543							;
      6  0543							; Uses 1 page + 173 bytes of ROM
      7  0543							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0543
      9  0600		       00 00 00 00*	      ALIGN	$100
     10  0600
     11  0600				   MenuCatGfxPage1
     12  0600
     13  0600
     14  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0600							; Menu Cat Top Playfield Graphics
     16  0600							;
     17  0600							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0600							;
     19  0600							; 3 bytes of ROM
     20  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0600
     22  0600				   MenuCatTopPf
     23  0600
     24  0600		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0601		       07		      .byte.b	%00000111
     26  0602		       07		      .byte.b	%00000111
     27  0603							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0603
     29  0603							; 3 bytes used in page
     30  0603
     31  0603
     32  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0603							; Menu Cat Right Player Graphics
     34  0603							;
     35  0603							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0603							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0603							;
     38  0603							; 42 bytes of ROM (14 per frame)
     39  0603							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0603
     41  0603				   MenuCatGfxR
     42  0603
     43  0603							; frames 1/5
     44  0603		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0604		       04		      .byte.b	%00000100
     46  0605		       f2		      .byte.b	%11110010
     47  0606		       91		      .byte.b	%10010001
     48  0607		       01		      .byte.b	%00000001
     49  0608		       59		      .byte.b	%01011001
     50  0609		       09		      .byte.b	%00001001
     51  060a		       01		      .byte.b	%00000001
     52  060b		       02		      .byte.b	%00000010
     53  060c		       c2		      .byte.b	%11000010
     54  060d		       22		      .byte.b	%00100010
     55  060e		       32		      .byte.b	%00110010
     56  060f		       2c		      .byte.b	%00101100
     57  0610		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0611
     59  0611							; frames 2/3/4
     60  0611		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0612		       04		      .byte.b	%00000100
     62  0613		       f2		      .byte.b	%11110010
     63  0614		       91		      .byte.b	%10010001
     64  0615		       01		      .byte.b	%00000001
     65  0616		       59		      .byte.b	%01011001
     66  0617		       09		      .byte.b	%00001001
     67  0618		       01		      .byte.b	%00000001
     68  0619		       02		      .byte.b	%00000010
     69  061a		       c2		      .byte.b	%11000010
     70  061b		       62		      .byte.b	%01100010
     71  061c		       52		      .byte.b	%01010010
     72  061d		       4c		      .byte.b	%01001100
     73  061e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  061f
     75  061f							; frame 6
     76  061f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0620		       f8		      .byte.b	%11111000
     78  0621		       04		      .byte.b	%00000100
     79  0622		       f2		      .byte.b	%11110010
     80  0623		       91		      .byte.b	%10010001
     81  0624		       01		      .byte.b	%00000001
     82  0625		       59		      .byte.b	%01011001
     83  0626		       09		      .byte.b	%00001001
     84  0627		       01		      .byte.b	%00000001
     85  0628		       02		      .byte.b	%00000010
     86  0629		       c2		      .byte.b	%11000010
     87  062a		       22		      .byte.b	%00100010
     88  062b		       32		      .byte.b	%00110010
     89  062c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  062d
     91  062d							; 45 bytes used in page
     92  062d
     93  062d
     94  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  062d							; Menu Cat Top Right Player Graphics
     96  062d							;
     97  062d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  062d							;
     99  062d							; 4 bytes of ROM
    100  062d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  062d
    102  062d				   MenuCatTopGfxR
    103  062d
    104  062d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  062e		       10		      .byte.b	%00010000
    106  062f		       10		      .byte.b	%00010000
    107  0630		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0631
    109  0631							; 49 bytes used in page
    110  0631
    111  0631
    112  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0631							; Menu Cat Top Left Player Graphics
    114  0631							;
    115  0631							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0631							;
    117  0631							; 3 bytes of ROM
    118  0631							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0631
    120  0631				   MenuCatTopGfxL
    121  0631
    122  0631		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0632		       08		      .byte.b	%00001000
    124  0633		       20		      .byte.b	%00100000
    125  0634							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0634
    127  0634							; 52 bytes used in page
    128  0634
    129  0634
    130  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0634							; Menu Cat Left Playfield Graphics
    132  0634							;
    133  0634							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0634							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0634							;
    136  0634							; 84 bytes of ROM (14 per frame)
    137  0634							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0634
    139  0634				   MenuCatPfL
    140  0634
    141  0634							; frame 1
    142  0634		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0635		       93		      .byte.b	%10010011
    144  0636		       f3		      .byte.b	%11110011
    145  0637		       ff		      .byte.b	%11111111
    146  0638		       ff		      .byte.b	%11111111
    147  0639		       7f		      .byte.b	%01111111
    148  063a		       7f		      .byte.b	%01111111
    149  063b		       7f		      .byte.b	%01111111
    150  063c		       7b		      .byte.b	%01111011
    151  063d		       79		      .byte.b	%01111001
    152  063e		       fd		      .byte.b	%11111101
    153  063f		       fc		      .byte.b	%11111100
    154  0640		       ff		      .byte.b	%11111111
    155  0641		       ff		      .byte.b	%11111111
    156  0642		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0643
    158  0643							; frame 2
    159  0643							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0643		       97		      .byte.b	%10010111
    161  0644		       f7		      .byte.b	%11110111
    162  0645		       ff		      .byte.b	%11111111
    163  0646		       ff		      .byte.b	%11111111
    164  0647		       ff		      .byte.b	%11111111
    165  0648		       ff		      .byte.b	%11111111
    166  0649		       fb		      .byte.b	%11111011
    167  064a		       f9		      .byte.b	%11111001
    168  064b		       fc		      .byte.b	%11111100
    169  064c		       fc		      .byte.b	%11111100
    170  064d		       ff		      .byte.b	%11111111
    171  064e		       ff		      .byte.b	%11111111
    172  064f		       ff		      .byte.b	%11111111
    173  0650		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0651
    175  0651							; frame 3
    176  0651							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0651		       a7		      .byte.b	%10100111
    178  0652		       f7		      .byte.b	%11110111
    179  0653		       ff		      .byte.b	%11111111
    180  0654		       ff		      .byte.b	%11111111
    181  0655		       ff		      .byte.b	%11111111
    182  0656		       fc		      .byte.b	%11111100
    183  0657		       f9		      .byte.b	%11111001
    184  0658		       ff		      .byte.b	%11111111
    185  0659		       ff		      .byte.b	%11111111
    186  065a		       ff		      .byte.b	%11111111
    187  065b		       ff		      .byte.b	%11111111
    188  065c		       ff		      .byte.b	%11111111
    189  065d		       ff		      .byte.b	%11111111
    190  065e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  065f
    192  065f							; frame 4
    193  065f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  065f		       97		      .byte.b	%10010111
    195  0660		       f7		      .byte.b	%11110111
    196  0661		       ff		      .byte.b	%11111111
    197  0662		       ff		      .byte.b	%11111111
    198  0663		       fc		      .byte.b	%11111100
    199  0664		       fc		      .byte.b	%11111100
    200  0665		       f9		      .byte.b	%11111001
    201  0666		       fb		      .byte.b	%11111011
    202  0667		       ff		      .byte.b	%11111111
    203  0668		       ff		      .byte.b	%11111111
    204  0669		       ff		      .byte.b	%11111111
    205  066a		       ff		      .byte.b	%11111111
    206  066b		       ff		      .byte.b	%11111111
    207  066c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  066d
    209  066d							; frame 5
    210  066d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  066d		       cb		      .byte.b	%11001011
    212  066e		       f3		      .byte.b	%11110011
    213  066f		       ff		      .byte.b	%11111111
    214  0670		       ff		      .byte.b	%11111111
    215  0671		       7f		      .byte.b	%01111111
    216  0672		       7f		      .byte.b	%01111111
    217  0673		       7f		      .byte.b	%01111111
    218  0674		       7b		      .byte.b	%01111011
    219  0675		       78		      .byte.b	%01111000
    220  0676		       fc		      .byte.b	%11111100
    221  0677		       ff		      .byte.b	%11111111
    222  0678		       ff		      .byte.b	%11111111
    223  0679		       ff		      .byte.b	%11111111
    224  067a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  067b
    226  067b							; frame 6
    227  067b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  067b		       cb		      .byte.b	%11001011
    229  067c		       f3		      .byte.b	%11110011
    230  067d		       fb		      .byte.b	%11111011
    231  067e		       ff		      .byte.b	%11111111
    232  067f		       ff		      .byte.b	%11111111
    233  0680		       7f		      .byte.b	%01111111
    234  0681		       7f		      .byte.b	%01111111
    235  0682		       7b		      .byte.b	%01111011
    236  0683		       79		      .byte.b	%01111001
    237  0684		       7c		      .byte.b	%01111100
    238  0685		       fc		      .byte.b	%11111100
    239  0686		       ff		      .byte.b	%11111111
    240  0687		       ff		      .byte.b	%11111111
    241  0688							;	.byte %11111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0688
    243  0688							; 136 bytes used in page
    244  0688
    245  0688
    246  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0688							; Menu Cat Right Playfield Graphics
    248  0688							;
    249  0688							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0688							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0688							;
    252  0688							; 37 bytes of ROM (12 per frame + 1)
    253  0688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0688
    255  0688				   MenuCatPfR
    256  0688
    257  0688							; frames 1/5
    258  0688		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    259  0689		       81		      .byte.b	%10000001
    260  068a		       81		      .byte.b	%10000001
    261  068b		       80		      .byte.b	%10000000
    262  068c		       80		      .byte.b	%10000000
    263  068d		       80		      .byte.b	%10000000
    264  068e		       80		      .byte.b	%10000000
    265  068f		       80		      .byte.b	%10000000
    266  0690		       81		      .byte.b	%10000001
    267  0691		       99		      .byte.b	%10011001
    268  0692		       99		      .byte.b	%10011001
    269  0693		       bd		      .byte.b	%10111101
    270  0694							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0694
    272  0694							; frames 2/3/4
    273  0694		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0695		       c1		      .byte.b	%11000001
    275  0696		       80		      .byte.b	%10000000
    276  0697		       80		      .byte.b	%10000000
    277  0698		       80		      .byte.b	%10000000
    278  0699		       80		      .byte.b	%10000000
    279  069a		       80		      .byte.b	%10000000
    280  069b		       80		      .byte.b	%10000000
    281  069c		       80		      .byte.b	%10000000
    282  069d		       88		      .byte.b	%10001000
    283  069e		       9c		      .byte.b	%10011100
    284  069f		       9c		      .byte.b	%10011100
    285  06a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  06a0
    287  06a0							; frame 6
    288  06a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  06a1		       ff		      .byte.b	%11111111
    290  06a2		       81		      .byte.b	%10000001
    291  06a3		       81		      .byte.b	%10000001
    292  06a4		       80		      .byte.b	%10000000
    293  06a5		       80		      .byte.b	%10000000
    294  06a6		       80		      .byte.b	%10000000
    295  06a7		       80		      .byte.b	%10000000
    296  06a8		       80		      .byte.b	%10000000
    297  06a9		       81		      .byte.b	%10000001
    298  06aa		       99		      .byte.b	%10011001
    299  06ab		       99		      .byte.b	%10011001
    300  06ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  06ad							; 173 bytes used in page
    302  06ad
    303  06ad
    304  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  06ad							; Menu Cat Player Hmove Graphics
    306  06ad							;
    307  06ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  06ad							; The frame's graphics will be accessed through a pointer.
    309  06ad							;
    310  06ad							; 70 bytes of ROM (14 per frame)
    311  06ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  06ad
    313  06ad				   MenuCatHmoveP
    314  06ad
    315  06ad							; frame 1
    316  06ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  06ae		       a0		      .byte.b	$A0
    318  06af		       c0		      .byte.b	$C0
    319  06b0		       00		      .byte.b	$00
    320  06b1		       00		      .byte.b	$00
    321  06b2		       00		      .byte.b	$00
    322  06b3		       00		      .byte.b	$00
    323  06b4		       00		      .byte.b	$00
    324  06b5		       00		      .byte.b	$00
    325  06b6		       00		      .byte.b	$00
    326  06b7		       00		      .byte.b	$00
    327  06b8		       00		      .byte.b	$00
    328  06b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  06ba
    330  06ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  06bb
    332  06bb							; frame 2
    333  06bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  06bc		       a0		      .byte.b	$A0
    335  06bd		       a0		      .byte.b	$A0
    336  06be		       00		      .byte.b	$00
    337  06bf		       00		      .byte.b	$00
    338  06c0		       00		      .byte.b	$00
    339  06c1		       00		      .byte.b	$00
    340  06c2		       00		      .byte.b	$00
    341  06c3		       00		      .byte.b	$00
    342  06c4		       00		      .byte.b	$00
    343  06c5		       00		      .byte.b	$00
    344  06c6		       00		      .byte.b	$00
    345  06c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  06c8
    347  06c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  06c9
    349  06c9							; frame 3
    350  06c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  06ca		       80		      .byte.b	$80
    352  06cb		       a0		      .byte.b	$A0
    353  06cc		       00		      .byte.b	$00
    354  06cd		       00		      .byte.b	$00
    355  06ce		       00		      .byte.b	$00
    356  06cf		       00		      .byte.b	$00
    357  06d0		       00		      .byte.b	$00
    358  06d1		       00		      .byte.b	$00
    359  06d2		       00		      .byte.b	$00
    360  06d3		       00		      .byte.b	$00
    361  06d4		       00		      .byte.b	$00
    362  06d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  06d6
    364  06d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  06d7
    366  06d7							; frame 4
    367  06d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  06d8		       80		      .byte.b	$80
    369  06d9		       c0		      .byte.b	$C0
    370  06da		       00		      .byte.b	$00
    371  06db		       00		      .byte.b	$00
    372  06dc		       00		      .byte.b	$00
    373  06dd		       00		      .byte.b	$00
    374  06de		       00		      .byte.b	$00
    375  06df		       00		      .byte.b	$00
    376  06e0		       00		      .byte.b	$00
    377  06e1		       00		      .byte.b	$00
    378  06e2		       00		      .byte.b	$00
    379  06e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  06e4
    381  06e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  06e5
    383  06e5							; frames 5/6
    384  06e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  06e6		       c0		      .byte.b	$C0
    386  06e7		       c0		      .byte.b	$C0
    387  06e8		       00		      .byte.b	$00
    388  06e9		       00		      .byte.b	$00
    389  06ea		       00		      .byte.b	$00
    390  06eb		       00		      .byte.b	$00
    391  06ec		       00		      .byte.b	$00
    392  06ed		       00		      .byte.b	$00
    393  06ee		       00		      .byte.b	$00
    394  06ef		       00		      .byte.b	$00
    395  06f0		       00		      .byte.b	$00
    396  06f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  06f2
    398  06f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  06f3
    400  06f3							; 243 bytes used in page
    401  06f3
    402  06f3
    403  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  06f3							; Menu Cat Missile Graphics
    405  06f3							;
    406  06f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  06f3							; menu cat display.
    408  06f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  06f3							; Because of that, this table cannot be at the start of a page.
    410  06f3							;
    411  06f3							; 13 bytes of ROM
    412  06f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  06f3
    414  06f3				   MenuCatMslGfx
    415  06f3
    416  06f3							; frame 6
    417  06f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  06f4
    419  06f4							; frames 5/4/3/2/1
    420  06f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  06f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  06f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  06f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  06f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  06f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  06fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  06fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  06fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  06fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  06fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  06ff
    432  06ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0700
    434  0700							; all 256 bytes used in page
    435  0700
    436  0700
    437  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0700							; PAGE BOUNDARY
    439  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0700
    441  0700				   MenuCatGfxPage2
    442  0700
    443  0700
    444  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0700							; Menu Cat Left Player Graphics
    446  0700							;
    447  0700							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0700							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0700							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0700							;
    451  0700							; 84 bytes of ROM (14 per frame)
    452  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0700
    454  0700				   MenuCatGfxL
    455  0700
    456  0700							; frame 1
    457  0700		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0701		       9a		      .byte.b	%10011010
    459  0702		       8f		      .byte.b	%10001111
    460  0703		       70		      .byte.b	%01110000
    461  0704		       04		      .byte.b	%00000100
    462  0705		       01		      .byte.b	%00000001
    463  0706		       03		      .byte.b	%00000011
    464  0707		       0f		      .byte.b	%00001111
    465  0708		       19		      .byte.b	%00011001
    466  0709		       33		      .byte.b	%00110011
    467  070a		       67		      .byte.b	%01100111
    468  070b		       4d		      .byte.b	%01001101
    469  070c		       79		      .byte.b	%01111001
    470  070d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  070e
    472  070e							; frame 2
    473  070e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  070f		       94		      .byte.b	%10010100
    475  0710		       9f		      .byte.b	%10011111
    476  0711		       60		      .byte.b	%01100000
    477  0712		       08		      .byte.b	%00001000
    478  0713		       01		      .byte.b	%00000001
    479  0714		       07		      .byte.b	%00000111
    480  0715		       19		      .byte.b	%00011001
    481  0716		       21		      .byte.b	%00100001
    482  0717		       4f		      .byte.b	%01001111
    483  0718		       49		      .byte.b	%01001001
    484  0719		       31		      .byte.b	%00110001
    485  071a		       01		      .byte.b	%00000001
    486  071b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  071c
    488  071c							; frame 3
    489  071c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  071d		       94		      .byte.b	%10010100
    491  071e		       bf		      .byte.b	%10111111
    492  071f		       c0		      .byte.b	%11000000
    493  0720		       08		      .byte.b	%00001000
    494  0721		       3d		      .byte.b	%00111101
    495  0722		       47		      .byte.b	%01000111
    496  0723		       61		      .byte.b	%01100001
    497  0724		       1f		      .byte.b	%00011111
    498  0725		       03		      .byte.b	%00000011
    499  0726		       01		      .byte.b	%00000001
    500  0727		       01		      .byte.b	%00000001
    501  0728		       01		      .byte.b	%00000001
    502  0729		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  072a
    504  072a							; frame 4
    505  072a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  072b		       94		      .byte.b	%10010100
    507  072c		       9f		      .byte.b	%10011111
    508  072d		       60		      .byte.b	%01100000
    509  072e		       c4		      .byte.b	%11000100
    510  072f		       49		      .byte.b	%01001001
    511  0730		       4f		      .byte.b	%01001111
    512  0731		       21		      .byte.b	%00100001
    513  0732		       19		      .byte.b	%00011001
    514  0733		       07		      .byte.b	%00000111
    515  0734		       01		      .byte.b	%00000001
    516  0735		       01		      .byte.b	%00000001
    517  0736		       01		      .byte.b	%00000001
    518  0737		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0738
    520  0738							; frame 5
    521  0738		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0739		       94		      .byte.b	%10010100
    523  073a		       8f		      .byte.b	%10001111
    524  073b		       78		      .byte.b	%01111000
    525  073c		       0c		      .byte.b	%00001100
    526  073d		       01		      .byte.b	%00000001
    527  073e		       01		      .byte.b	%00000001
    528  073f		       07		      .byte.b	%00000111
    529  0740		       3d		      .byte.b	%00111101
    530  0741		       c3		      .byte.b	%11000011
    531  0742		       8f		      .byte.b	%10001111
    532  0743		       79		      .byte.b	%01111001
    533  0744		       01		      .byte.b	%00000001
    534  0745		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0746
    536  0746							; frame 6
    537  0746		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0747		       94		      .byte.b	%10010100
    539  0748		       8f		      .byte.b	%10001111
    540  0749		       58		      .byte.b	%01011000
    541  074a		       0c		      .byte.b	%00001100
    542  074b		       01		      .byte.b	%00000001
    543  074c		       01		      .byte.b	%00000001
    544  074d		       07		      .byte.b	%00000111
    545  074e		       19		      .byte.b	%00011001
    546  074f		       21		      .byte.b	%00100001
    547  0750		       4f		      .byte.b	%01001111
    548  0751		       49		      .byte.b	%01001001
    549  0752		       31		      .byte.b	%00110001
    550  0753		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0754
    552  0754							; 84 bytes used in page
    553  0754
    554  0754
    555  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0754							; Menu Cat Lower Right Player Graphics
    557  0754							;
    558  0754							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0754							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0754							;
    561  0754							; 12 bytes of ROM (2 per frame)
    562  0754							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0754
    564  0754				   MenuCatLowGfxR
    565  0754
    566  0754							; frame 1
    567  0754		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0755		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0756
    570  0756							; frame 2
    571  0756		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0757		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0758
    574  0758							; frame 3
    575  0758		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0759		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  075a
    578  075a							; frame 4
    579  075a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  075b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  075c
    582  075c							; frame 5
    583  075c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  075d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  075e
    586  075e							; frame 6
    587  075e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  075f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0760
    590  0760							; 96 bytes used in page
    591  0760
    592  0760
    593  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0760							; Menu Cat Lower Right Playfield Graphics
    595  0760							;
    596  0760							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0760							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0760							;
    599  0760							; 12 bytes of ROM (2 per frame)
    600  0760							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0760
    602  0760				   MenuCatLowPfGfxR
    603  0760
    604  0760							; frame 1
    605  0760		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0761		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0762
    608  0762							; frame 2
    609  0762		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0763		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0764
    612  0764							; frame 3
    613  0764		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0765		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0766
    616  0766							; frame 4
    617  0766		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0767		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0768
    620  0768							; frame 5
    621  0768		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0769		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  076a
    624  076a							; frame 6
    625  076a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  076b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  076c
    628  076c							; 108 bytes used in page
    629  076c
    630  076c
    631  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  076c							; Menu Cat Missile Hmove Graphics
    633  076c							;
    634  076c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  076c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  076c							; The frame's graphics will be accessed through a pointer.
    637  076c							;
    638  076c							; 65 bytes of ROM (13 per frame)
    639  076c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  076c
    641  076c				   MenuCatHmoveM
    642  076c
    643  076c							; frames 1/2
    644  076c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  076d		       0e		      .byte.b	$0E
    646  076e		       0e		      .byte.b	$0E
    647  076f		       e0		      .byte.b	$E0
    648  0770		       00		      .byte.b	$00
    649  0771		       20		      .byte.b	$20
    650  0772		       20		      .byte.b	$20
    651  0773		       02		      .byte.b	$02
    652  0774		       00		      .byte.b	$00
    653  0775		       e0		      .byte.b	$E0
    654  0776		       e0		      .byte.b	$E0
    655  0777		       c2		      .byte.b	$C2
    656  0778		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0779
    658  0779							; frame 3
    659  0779		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  077a		       0e		      .byte.b	$0E
    661  077b		       0e		      .byte.b	$0E
    662  077c		       e0		      .byte.b	$E0
    663  077d		       00		      .byte.b	$00
    664  077e		       20		      .byte.b	$20
    665  077f		       20		      .byte.b	$20
    666  0780		       02		      .byte.b	$02
    667  0781		       00		      .byte.b	$00
    668  0782		       e0		      .byte.b	$E0
    669  0783		       e0		      .byte.b	$E0
    670  0784		       c2		      .byte.b	$C2
    671  0785		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0786
    673  0786							; frame 4
    674  0786		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0787		       0e		      .byte.b	$0E
    676  0788		       0e		      .byte.b	$0E
    677  0789		       e0		      .byte.b	$E0
    678  078a		       00		      .byte.b	$00
    679  078b		       20		      .byte.b	$20
    680  078c		       20		      .byte.b	$20
    681  078d		       02		      .byte.b	$02
    682  078e		       00		      .byte.b	$00
    683  078f		       e0		      .byte.b	$E0
    684  0790		       e0		      .byte.b	$E0
    685  0791		       c2		      .byte.b	$C2
    686  0792		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0793
    688  0793							; frame 5
    689  0793		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0794		       0e		      .byte.b	$0E
    691  0795		       0e		      .byte.b	$0E
    692  0796		       e0		      .byte.b	$E0
    693  0797		       00		      .byte.b	$00
    694  0798		       20		      .byte.b	$20
    695  0799		       20		      .byte.b	$20
    696  079a		       02		      .byte.b	$02
    697  079b		       00		      .byte.b	$00
    698  079c		       e0		      .byte.b	$E0
    699  079d		       e0		      .byte.b	$E0
    700  079e		       c2		      .byte.b	$C2
    701  079f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  07a0
    703  07a0							; frame 6
    704  07a0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  07a1		       2e		      .byte.b	$2E
    706  07a2		       0e		      .byte.b	$0E
    707  07a3		       0e		      .byte.b	$0E
    708  07a4		       e0		      .byte.b	$E0
    709  07a5		       00		      .byte.b	$00
    710  07a6		       20		      .byte.b	$20
    711  07a7		       20		      .byte.b	$20
    712  07a8		       02		      .byte.b	$02
    713  07a9		       00		      .byte.b	$00
    714  07aa		       e0		      .byte.b	$E0
    715  07ab		       e0		      .byte.b	$E0
    716  07ac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  07ad
    718  07ad							; 173 bytes used in page
    719  07ad
    720  07ad
    721  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  07ad							; Offset Tables
    723  07ad							;
    724  07ad							; Tables of offsets to the correct data for frames that can share graphics.
    725  07ad							;
    726  07ad							; 12 bytes of ROM (6 bytes per table)
    727  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  07ad
    729  07ad				   MenuCatOffsetGfx
    730  07ad		       03		      .byte.b	<MenuCatGfxR+0
    731  07ae		       11		      .byte.b	<MenuCatGfxR+14
    732  07af		       11		      .byte.b	<MenuCatGfxR+14
    733  07b0		       11		      .byte.b	<MenuCatGfxR+14
    734  07b1		       03		      .byte.b	<MenuCatGfxR+0
    735  07b2		       1f		      .byte.b	<MenuCatGfxR+28
    736  07b3
    737  07b3				   MenuCatOffsetPf
    738  07b3		       88		      .byte.b	<MenuCatPfR+0
    739  07b4		       94		      .byte.b	<MenuCatPfR+12
    740  07b5		       94		      .byte.b	<MenuCatPfR+12
    741  07b6		       94		      .byte.b	<MenuCatPfR+12
    742  07b7		       88		      .byte.b	<MenuCatPfR+0
    743  07b8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
     12  07b9
      0  07b9					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
------- FILE main.asm
------- FILE bank2.asm LEVEL 2 PASS 2
      0  1000					      include	bank2.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Bank 2
      3  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1000
      0  1000					      START_BANK	2
      1  2000 ????				      SEG	BANK_2
      2  1000					      ORG	[2 - 1] * $1000
      3  1000					      RORG	$1000
      4  1000					      SUBROUTINE
      5  1000
      6  1000				   JmpInitSystem
      7  1000		       0c f6 1f 	      nop	SelectBank1
      8  1003		       4c 12 10 	      jmp	InitSystem
      9  1006				   JmpMenuOverScan
     10  1006		       0c f6 1f 	      nop	SelectBank1
     11  1009		       4c 1d 10 	      jmp	MenuOverScan
     12  100c				   JmpGamePlay
     13  100c		       0c f7 1f 	      nop	SelectBank2
     14  100f		       4c 12 10 	      jmp	SystemClear
     15  1012
      6  1012
------- FILE bank2/init.asm LEVEL 3 PASS 2
      0  1012					      include	bank2/init.asm
      1  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1012							; Full System Clear
      3  1012							;
      4  1012							; Clear all system registers and RAM at startup
      5  1012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1012
      7  1012					      SUBROUTINE
      8  1012
      9  1012				   SystemClear
      0  1012					      CLEAN_START
      1  1012		       78		      sei
      2  1013		       d8		      cld
      3  1014
      4  1014		       a2 00		      ldx	#0
      5  1016		       8a		      txa
      6  1017		       a8		      tay
      7  1018		       ca	   .CLEAR_STACK dex
      8  1019		       9a		      txs
      9  101a		       48		      pha
     10  101b		       d0 fb		      bne	.CLEAR_STACK
     11  101d
     11  101d
     12  101d
     13  101d
     14  101d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  101d							; Set the food items (temporary demo code)
     16  101d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     17  101d
     18  101d		       a9 10		      lda	#$10
     19  101f		       85 ad		      sta	FoodItemL+0
     20  1021		       a9 70		      lda	#$70
     21  1023		       85 b4		      sta	FoodItemR+0
     22  1025
     23  1025		       a9 20		      lda	#$20
     24  1027		       85 ae		      sta	FoodItemL+1
     25  1029		       a9 80		      lda	#$80
     26  102b		       85 b5		      sta	FoodItemR+1
     27  102d
     28  102d		       a9 30		      lda	#$30
     29  102f		       85 af		      sta	FoodItemL+2
     30  1031		       a9 90		      lda	#$90
     31  1033		       85 b6		      sta	FoodItemR+2
     32  1035
     33  1035		       a9 40		      lda	#$40
     34  1037		       85 b0		      sta	FoodItemL+3
     35  1039		       a9 a0		      lda	#$A0
     36  103b		       85 b7		      sta	FoodItemR+3
     37  103d
     38  103d		       a9 50		      lda	#$50
     39  103f		       85 b1		      sta	FoodItemL+4
     40  1041		       a9 b0		      lda	#$B0
     41  1043		       85 b8		      sta	FoodItemR+4
     42  1045
     43  1045		       a9 60		      lda	#$60
     44  1047		       85 b2		      sta	FoodItemL+5
     45  1049		       a9 c0		      lda	#$C0
     46  104b		       85 b9		      sta	FoodItemR+5
     47  104d
     48  104d		       a9 d0		      lda	#$D0
     49  104f		       85 b3		      sta	FoodItemL+6
     50  1051		       a9 e0		      lda	#$E0
     51  1053		       85 ba		      sta	FoodItemR+6
------- FILE bank2.asm
------- FILE bank2/code/oscan_logic.asm LEVEL 3 PASS 2
      0  1055					      include	bank2/code/oscan_logic.asm
      1  1055							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1055							; Overscan
      3  1055							;
      4  1055							; Start the overscan timer and do game logic
      5  1055							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1055
      7  1055				   Overscan
      8  1055		       e6 80		      inc	Frame	; increment the frame number
      0  1057					      SET_OSCAN_TIMER
      1  1057
      2  1057		       a9 23		      lda	#OVERSCAN_TIMER
      3  1059		       85 02		      sta	WSYNC
      4  105b		       8d 96 02 	      sta	TIM64T
      5  105e
     10  105e
     11  105e
     12  105e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     13  105e							; Update Score
     14  105e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  105e
     16  105e		       a5 8f		      lda	BCDScoreAdd+1
     17  1060		       a6 8e		      ldx	BCDScoreAdd
     18  1062		       f8		      sed
     19  1063		       18		      clc
     20  1064		       85 cd		      sta	Temp
     21  1066		       a5 84		      lda	BCDScore+2
     22  1068		       65 cd		      adc	Temp
     23  106a		       85 84		      sta	BCDScore+2
     24  106c		       86 cd		      stx	Temp
     25  106e		       a5 83		      lda	BCDScore+1
     26  1070		       65 cd		      adc	Temp
     27  1072		       85 83		      sta	BCDScore+1
     28  1074		       a9 00		      lda	#$00
     29  1076		       85 cd		      sta	Temp
     30  1078		       a5 82		      lda	BCDScore+0
     31  107a		       65 cd		      adc	Temp
     32  107c		       85 82		      sta	BCDScore+0
     33  107e		       d8		      cld
     34  107f
     35  107f
     36  107f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     37  107f							; Proccess Joysticks
     38  107f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     39  107f
     40  107f		       a9 00		      lda	#0
     41  1081		       8d 81 02 	      sta	SWACNT	; set all I/O pins to input for joystick reading
     42  1084		       ad 80 02 	      lda	SWCHA	; get joystick position for this frame ONLY ONCE
     43  1087		       85 cd		      sta	Temp	; save joystick position for consistency
     44  1089		       29 30		      and	#$30	; check left stick's up/down bit states
     45  108b		       c9 30		      cmp	#$30	; to see if they are both HI (joystick centered)
     46  108d		       d0 06		      bne	.NotCenter	; if not, skip ahead
     47  108f		       a5 aa		      lda	JoyCenter	; otherwise set rightmost bit of JoyCenter
     48  1091		       09 01		      ora	#1	; (to signify that the joystick HAS been re-centered
     49  1093		       85 aa		      sta	JoyCenter	; before the cat's next movement)
     50  1095				   .NotCenter
     51  1095		       a5 0c		      lda	INPT4	; if the left fire button is pressed,
     52  1097		       10 06		      bpl	.CheckPos	; skip the check for a previously centered joystick
     53  1099		       a5 aa		      lda	JoyCenter	; otherwise, check if the joystick has been centered
     54  109b		       29 01		      and	#1
     55  109d		       f0 2a		      beq	.Skip	; if it hasn't, don't make a movement
     56  109f				   .CheckPos
     57  109f		       a5 a8		      lda	CatPosition	; get cat's position
     58  10a1		       29 1f		      and	#$1F	; check right 5 bits only
     59  10a3		       f0 04		      beq	.ReadJoy	; if zero, we are centered on a row (read joystick)
     60  10a5		       c9 13		      cmp	#19	; or if 19, we are centered on the bottom row
     61  10a7		       d0 20		      bne	.Skip	; if not centered, skip reading joystick
     62  10a9				   .ReadJoy
     63  10a9		       a5 cd		      lda	Temp
     64  10ab		       0a		      asl		; ignore joystick right
     65  10ac		       0a		      asl		; ignore joystick left
     66  10ad		       0a		      asl		; check joystick down
     67  10ae		       b0 09		      bcs	.NoDown
     68  10b0
     69  10b0							; Now that we know the player is pressing the joystick down, we need to
     70  10b0							; decide if the cat should be moved down a row.
     71  10b0
     72  10b0		       a6 a9		      ldx	CatRow
     73  10b2		       e0 06		      cpx	#6
     74  10b4		       f0 13		      beq	.Skip	; If already at the bottom row, don't move down
     75  10b6		       e8		      inx
     76  10b7		       d0 08		      bne	.ChangeRow
     77  10b9
     78  10b9				   .NoDown
     79  10b9		       0a		      asl		; check joystick up
     80  10ba		       b0 0d		      bcs	.Skip
     81  10bc		       a6 a9		      ldx	CatRow
     82  10be		       f0 09		      beq	.Skip	; If already at the top row, don't move up
     83  10c0		       ca		      dex
     84  10c1				   .ChangeRow
     85  10c1		       86 a9		      stx	CatRow
     86  10c3		       a5 aa		      lda	JoyCenter
     87  10c5		       29 fe		      and	#$FE
     88  10c7		       85 aa		      sta	JoyCenter	; clear rightmost bit in JoyCenter
     89  10c9				   .Skip
     90  10c9
     91  10c9
     92  10c9							; Caclulate cat's position data
     93  10c9					      SUBROUTINE
     94  10c9
     95  10c9		       a5 a9		      lda	CatRow
     96  10cb		       29 07		      and	#$07
     97  10cd		       aa		      tax
     98  10ce		       bd 5b 1f 	      lda	RowPosition,x
     99  10d1		       c5 a7		      cmp	CatPosY
    100  10d3		       f0 17		      beq	.NoMove
    101  10d5		       30 08		      bmi	.MoveUp
    102  10d7				   .MoveDown
    103  10d7		       38		      sec
    104  10d8		       e5 a7		      sbc	CatPosY
    105  10da		       4a		      lsr
    106  10db		       65 a7		      adc	CatPosY
    107  10dd		       d0 0b		      bne	.UpdatePos
    108  10df				   .MoveUp
    109  10df		       a5 a7		      lda	CatPosY
    110  10e1		       38		      sec
    111  10e2		       fd 5b 1f 	      sbc	RowPosition,x
    112  10e5		       4a		      lsr
    113  10e6		       18		      clc
    114  10e7		       7d 5b 1f 	      adc	RowPosition,x
    115  10ea				   .UpdatePos
    116  10ea		       85 a7		      sta	CatPosY
    117  10ec				   .NoMove
    118  10ec		       a2 00		      ldx	#0
    119  10ee				   .DivideLoop
    120  10ee		       38		      sec
    121  10ef		       e8		      inx
    122  10f0		       e9 13		      sbc	#19
    123  10f2		       90 07		      bcc	.AddBack
    124  10f4
    125  10f4		       e0 05		      cpx	#5
    126  10f6		       d0 f6		      bne	.DivideLoop
    127  10f8		       e8		      inx
    128  10f9		       d0 02		      bne	.SetCatPos
    129  10fb				   .AddBack
    130  10fb		       69 13		      adc	#19
    131  10fd				   .SetCatPos
    132  10fd		       85 a8		      sta	CatPosition
    133  10ff		       8a		      txa
    134  1100		       0a		      asl
    135  1101		       0a		      asl
    136  1102		       0a		      asl
    137  1103		       0a		      asl
    138  1104		       0a		      asl
    139  1105		       65 a8		      adc	CatPosition
    140  1107		       85 a8		      sta	CatPosition
    141  1109		       ca		      dex
    142  110a		       86 ac		      stx	PreCatRows
    143  110c
    144  110c
    145  110c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    146  110c							; Finish Overscan
    147  110c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  110c
      0  110c					      TIMER_LOOP
      1  110c					      SUBROUTINE
      2  110c
      3  110c				   .TimerLoop
      4  110c		       ad 84 02 	      lda	INTIM
      5  110f		       d0 fb		      bne	.TimerLoop
      6  1111
------- FILE bank2.asm
------- FILE bank2/code/vblank_logic.asm LEVEL 3 PASS 2
      0  1111					      include	bank2/code/vblank_logic.asm
      1  1111							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1111							; Vertical Blank
      3  1111							;
      4  1111							; Do the vertical blanking and game logic
      5  1111							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1111
      0  1111					      VERT_SYNC
      1  1111
      2  1111		       a9 02		      lda	#2
      3  1113		       85 02		      sta	WSYNC
      4  1115		       85 00		      sta	VSYNC
      5  1117		       85 02		      sta	WSYNC
      6  1119		       a2 2d		      ldx	#VBLANK_TIMER
      7  111b		       85 02		      sta	WSYNC
      8  111d		       8e 96 02 	      stx	TIM64T
      9  1120		       85 2b		      sta	HMCLR
     10  1122		       4a		      lsr
     11  1123		       85 02		      sta	WSYNC
     12  1125		       85 00		      sta	VSYNC
     13  1127
     14  1127
     15  1127
     16  1127
     17  1127
     18  1127
     19  1127
     20  1127
     21  1127
     22  1127
      8  1127
      9  1127		       85 2b		      sta	HMCLR
     10  1129		       85 02		      sta	WSYNC
     11  112b
     12  112b		       a9 ff		      lda	#$FF	; 02
     13  112d		       85 23		      sta	HMM1	; 05
     14  112f		       85 a3		      sta	ProgressBar+1	; 08 - reset progress bar byte 1 to %11111111
     15  1131
     16  1131		       a2 10		      ldx	#$10	; 10
     17  1133		       86 21		      stx	HMP1	; 13
     18  1135		       a2 80		      ldx	#$80	; 15
     19  1137		       86 22		      stx	HMM0	; 18
     20  1139		       a2 e0		      ldx	#$E0	; 20
     21  113b		       85 13		      sta	RESM1	; 23
     22  113d		       86 a2		      stx	ProgressBar+0	; 26 - reset progress bar byte 0 to %11100000
     23  113f		       85 14		      sta	RESBL	; 29
     24  1141
     25  1141		       85 a4		      sta	ProgressBar+2	; 32 - reset progress bar byte 2 to %11111111
     26  1143		       85 a5		      sta	ProgressBar+3	; 35 - reset progress bar byte 3 to %11111111
     27  1145		       a9 fe		      lda	#$FE	; 37
     28  1147		       85 a6		      sta	ProgressBar+4	; 40 - reset byte 4 for the progress bar
     29  1149
     30  1149		       20 24 19 	      jsr	Sleep12	; 52
     31  114c		       85 10		      sta	RESP0	; 55
     32  114e		       85 11		      sta	RESP1	; 58
      0  1150					      SLEEP	9	; 67
      1  1150				   .CYCLES    SET	9
      2  1150
      3  1150				  -	      IF	.CYCLES < 2
      4  1150				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1150				  -	      ERR
      6  1150					      ENDIF
      7  1150
      8  1150					      IF	.CYCLES & 1
      9  1150					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1150		       04 00		      nop	0
     11  1152				  -	      ELSE
     12  1152				  -	      bit	VSYNC
     13  1152					      ENDIF
     14  1152				   .CYCLES    SET	.CYCLES - 3
     15  1152					      ENDIF
     16  1152
     17  1152					      REPEAT	.CYCLES / 2
     18  1152		       ea		      nop
     17  1152					      REPEND
     18  1153		       ea		      nop
     17  1153					      REPEND
     18  1154		       ea		      nop
     19  1155					      REPEND
     34  1155		       85 12		      sta	RESM0	; 70
     35  1157
     36  1157		       85 02		      sta	WSYNC
     37  1159		       85 2a		      sta	HMOVE
     38  115b
     39  115b
     40  115b
     41  115b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  115b							; Prepare HMOVE offsets for all scoreboard objects, and
     43  115b							; reset the progress bar's RAM values to empty. (39 cycles)
     44  115b
     45  115b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  115b							; Prepare for throbbing lines - 43 cycles
     47  115b
     48  115b		       a5 80		      lda	Frame	; get the current frame number
     49  115d		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     50  115f		       4a		      lsr
     51  1160		       4a		      lsr		; shift to get a value from 0-7
     52  1161		       85 cd		      sta	Temp
     53  1163		       0a		      asl		; carry flag will always be clear after this
     54  1164		       65 cd		      adc	Temp	; multiply by 3
     55  1166		       a8		      tay
     56  1167
     57  1167		       a5 9e		      lda	ScoreColor
     58  1169		       29 f0		      and	#$F0
     59  116b		       85 cd		      sta	Temp
     60  116d		       b9 57 1c 	      lda	ThrobGfx+0,y
     61  1170		       0a		      asl
     62  1171		       90 01		      bcc	.Color0
      0  1173					      SKIP_WORD
      1  1173		       0c		      HEX	0C
     64  1174				   .Color0
     65  1174		       65 cd		      adc	Temp
     66  1176		       85 c9		      sta	ThrobColor+0
     67  1178		       b9 58 1c 	      lda	ThrobGfx+1,y
     68  117b		       0a		      asl
     69  117c		       90 01		      bcc	.Color1
      0  117e					      SKIP_WORD
      1  117e		       0c		      HEX	0C
     71  117f				   .Color1
     72  117f		       65 cd		      adc	Temp
     73  1181		       85 ca		      sta	ThrobColor+1
     74  1183		       b9 59 1c 	      lda	ThrobGfx+2,y
     75  1186		       0a		      asl
     76  1187		       90 01		      bcc	.Color2
      0  1189					      SKIP_WORD
      1  1189		       0c		      HEX	0C
     78  118a				   .Color2
     79  118a		       65 cd		      adc	Temp
     80  118c		       85 cb		      sta	ThrobColor+2
     81  118e
     82  118e
     83  118e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  118e							; Load Scoreboard
     85  118e							;
     86  118e							; Get graphics data for the scoreboard and push it onto the stack
     87  118e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88  118e
     89  118e					      SUBROUTINE
     90  118e
     91  118e							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
     92  118e		       a9 1c		      lda	#>ScoreGfx
     93  1190		       85 91		      sta	LvlLoadPtr+1
     94  1192		       85 93		      sta	ScrLoadPtr0+1
     95  1194		       85 95		      sta	ScrLoadPtr1+1
     96  1196		       85 97		      sta	ScrLoadPtr2+1
     97  1198		       85 99		      sta	ScrLoadPtr3+1
     98  119a		       85 9b		      sta	ScrLoadPtr4+1
     99  119c		       85 9d		      sta	ScrLoadPtr5+1
    100  119e
    101  119e							; Prepare pointer for level digit graphics - 14 cycles
    102  119e		       a5 88		      lda	BCDLevel
    103  11a0		       29 0f		      and	#$0F
    104  11a2		       0a		      asl
    105  11a3		       0a		      asl
    106  11a4		       0a		      asl
    107  11a5		       85 90		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
    108  11a7
    109  11a7							; Prepare pointers for score digit graphics - 69 cycles
    110  11a7
    111  11a7		       a7 82		      lax	BCDScore+0
    112  11a9		       29 f0		      and	#$F0
    113  11ab		       4a		      lsr
    114  11ac		       85 92		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
    115  11ae
    116  11ae		       8a		      txa
    117  11af		       29 0f		      and	#$0F
    118  11b1		       0a		      asl
    119  11b2		       0a		      asl
    120  11b3		       0a		      asl
    121  11b4		       85 94		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    122  11b6
    123  11b6		       a7 83		      lax	BCDScore+1
    124  11b8		       29 f0		      and	#$F0
    125  11ba		       4a		      lsr
    126  11bb		       85 96		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    127  11bd
    128  11bd		       8a		      txa
    129  11be		       29 0f		      and	#$0F
    130  11c0		       0a		      asl
    131  11c1		       0a		      asl
    132  11c2		       0a		      asl
    133  11c3		       85 98		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    134  11c5
    135  11c5		       a7 84		      lax	BCDScore+2
    136  11c7		       29 f0		      and	#$F0
    137  11c9		       4a		      lsr
    138  11ca		       85 9a		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    139  11cc
    140  11cc		       8a		      txa
    141  11cd		       29 0f		      and	#$0F
    142  11cf		       0a		      asl
    143  11d0		       0a		      asl
    144  11d1		       0a		      asl
    145  11d2		       85 9c		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    146  11d4
    147  11d4							; Load the stack with the graphics for the scoreboard - 428 cycles
    148  11d4		       a0 06		      ldy	#6
    149  11d6				   .LoadScoreboard
    150  11d6		       b1 9c		      lda	(ScrLoadPtr5),y
    151  11d8		       48		      pha
    152  11d9		       b1 9a		      lda	(ScrLoadPtr4),y
    153  11db		       48		      pha
    154  11dc		       b1 98		      lda	(ScrLoadPtr3),y
    155  11de		       48		      pha
    156  11df		       b1 96		      lda	(ScrLoadPtr2),y
    157  11e1		       48		      pha
    158  11e2		       b1 94		      lda	(ScrLoadPtr1),y
    159  11e4		       48		      pha
    160  11e5		       b1 92		      lda	(ScrLoadPtr0),y
    161  11e7		       48		      pha
    162  11e8		       b1 90		      lda	(LvlLoadPtr),y
    163  11ea		       48		      pha
    164  11eb		       88		      dey
    165  11ec		       10 e8		      bpl	.LoadScoreboard
    166  11ee
    167  11ee
    168  11ee							; Load RAM for progress bar display (28-53 cycles)
    169  11ee		       a5 a0		      lda	Progress	; 3 - get amount of progress
    170  11f0
    171  11f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172  11f0							; The level progress bar uses the following playfield bits:
    173  11f0							; (note that PF0 and PF2 are NOT reversed in this diagram)
    174  11f0							;
    175  11f0							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    176  11f0							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    177  11f0							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    178  11f0							;
    179  11f0							; When the progress bar is empty, every bit labeled "X" above should be
    180  11f0							; set (1), and when it is full, every "X" bit should be cleared (0).
    181  11f0							; The bits labeled "o" must ALWAYS be cleared.
    182  11f0							;
    183  11f0							; The leftmost playfield value (the 1st PF0) will be calculated first,
    184  11f0							; and then each playfield value to the right until the 2nd PF1
    185  11f0							; will be calculated.
    186  11f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187  11f0
    188  11f0		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    189  11f2
    190  11f2		       38		      sec		; 2
    191  11f3		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    192  11f5		       30 1e		      bmi	.Underflow1	; 2/3
    193  11f7		       84 a2		      sty	ProgressBar	; 3 - this playfield byte is full
    194  11f9
    195  11f9		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    196  11fb		       30 23		      bmi	.Underflow2	; 2/3
    197  11fd		       84 a3		      sty	ProgressBar+1	; 3 - this playfield byte is full
    198  11ff
    199  11ff		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    200  1201		       30 28		      bmi	.Underflow3	; 2/3
    201  1203		       84 a4		      sty	ProgressBar+2	; 3 - this playfield byte is full
    202  1205
    203  1205		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    204  1207		       30 2d		      bmi	.Underflow4	; 2/3
    205  1209		       84 a5		      sty	ProgressBar+3	; 3 - this playfield byte is full
    206  120b
    207  120b		       aa		      tax		; 2
    208  120c		       bd 0e 1d 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    209  120f		       0a		      asl		; 2
    210  1210		       85 a6		      sta	ProgressBar+4	; 3
    211  1212		       4c 3e 12 	      jmp	.Finish	; 3
    212  1215
    213  1215				   .Underflow1		; for 1st PF0
    214  1215		       69 03		      adc	#3	; 3 - add back the 3
    215  1217		       aa		      tax		; 2
    216  1218		       bd 1b 1d 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    217  121b		       85 a2		      sta	ProgressBar	; 3
    218  121d		       4c 3e 12 	      jmp	.Finish	; 3
    219  1220
    220  1220				   .Underflow2		; for 1st PF1
    221  1220		       69 08		      adc	#8	; 3 - add back the 8
    222  1222		       aa		      tax		; 2
    223  1223		       bd 0d 1d 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    224  1226		       85 a3		      sta	ProgressBar+1	; 3
    225  1228		       4c 3e 12 	      jmp	.Finish	; 3
    226  122b
    227  122b				   .Underflow3		; for PF2
    228  122b		       69 08		      adc	#8	; 3 - add back the 8
    229  122d		       aa		      tax		; 2
    230  122e		       bd 16 1d 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    231  1231		       85 a4		      sta	ProgressBar+2	; 3
    232  1233		       4c 3e 12 	      jmp	.Finish	; 3
    233  1236
    234  1236				   .Underflow4		; for 2nd PF0
    235  1236		       69 04		      adc	#4	; 3 - add back the 4
    236  1238		       aa		      tax		; 2
    237  1239		       bd 1a 1d 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    238  123c		       85 a5		      sta	ProgressBar+3	; 3
    239  123e
    240  123e				   .Finish
    241  123e		       85 2b		      sta	HMCLR
    242  1240		       a6 bb		      ldx	FoodPosX
    243  1242		       ca		      dex
    244  1243		       10 02		      bpl	.NoReset0
    245  1245		       a2 58		      ldx	#88
    246  1247				   .NoReset0
    247  1247		       86 bb		      stx	FoodPosX+0
    248  1249
    249  1249		       8a		      txa
    250  124a		       38		      sec
    251  124b		       e9 12		      sbc	#18
    252  124d		       b0 02		      bcs	.NoReset1
    253  124f		       69 59		      adc	#89
    254  1251				   .NoReset1
    255  1251		       85 bc		      sta	FoodPosX+1
    256  1253
    257  1253		       e9 34		      sbc	#52
    258  1255		       b0 02		      bcs	.NoReset2
    259  1257		       69 59		      adc	#89
    260  1259				   .NoReset2
    261  1259		       85 bd		      sta	FoodPosX+2
    262  125b
    263  125b		       e9 1b		      sbc	#27
    264  125d		       b0 02		      bcs	.NoReset3
    265  125f		       69 59		      adc	#89
    266  1261				   .NoReset3
    267  1261		       85 be		      sta	FoodPosX+3
    268  1263
    269  1263		       e9 3f		      sbc	#63
    270  1265		       b0 02		      bcs	.NoReset4
    271  1267		       69 59		      adc	#89
    272  1269				   .NoReset4
    273  1269		       85 bf		      sta	FoodPosX+4
    274  126b
    275  126b		       e9 29		      sbc	#41
    276  126d		       b0 02		      bcs	.NoReset5
    277  126f		       69 59		      adc	#89
    278  1271				   .NoReset5
    279  1271		       85 c0		      sta	FoodPosX+5
    280  1273
    281  1273		       e9 11		      sbc	#17
    282  1275		       b0 02		      bcs	.NoReset6
    283  1277		       69 59		      adc	#89
    284  1279				   .NoReset6
    285  1279		       85 c1		      sta	FoodPosX+6
    286  127b
    287  127b
    288  127b							; Calculate Hmove offsets for 2nd cat row's food items
    289  127b		       a9 05		      lda	#5
    290  127d		       38		      sec
    291  127e		       e5 ac		      sbc	PreCatRows
    292  1280		       a8		      tay
    293  1281
    294  1281		       b9 ad 00 	      lda	FoodItemL,y
    295  1284		       29 f0		      and	#$F0
    296  1286		       85 c5		      sta	CatRow2FoodL
    297  1288		       aa		      tax
    298  1289		       bd 0f 1e 	      lda	FoodGfx+15,x
    299  128c		       85 c7		      sta	CatRow2Color1
    300  128e
    301  128e		       b9 b4 00 	      lda	FoodItemR,y
    302  1291		       29 f0		      and	#$F0
    303  1293		       85 c6		      sta	CatRow2FoodR
    304  1295		       aa		      tax
    305  1296		       bd 0f 1e 	      lda	FoodGfx+15,x
    306  1299		       85 c8		      sta	CatRow2Color2
    307  129b
    308  129b		       b9 bb 00 	      lda	FoodPosX,y
    309  129e		       e9 2c		      sbc	#44
    310  12a0		       f0 04		      beq	.Prepare
    311  12a2		       90 02		      bcc	.Prepare
    312  12a4		       e9 2d		      sbc	#45
    313  12a6				   .Prepare
    314  12a6		       38		      sec
    315  12a7		       e9 01		      sbc	#1
    316  12a9		       a2 70		      ldx	#$70
    317  12ab		       a0 02		      ldy	#2
    318  12ad				   .OffsetLoop
    319  12ad		       18		      clc
    320  12ae		       69 0f		      adc	#15
    321  12b0		       f0 02		      beq	.CalcOffset
    322  12b2		       30 0d		      bmi	.MaxOffset
    323  12b4				   .CalcOffset
    324  12b4		       49 07		      eor	#7
    325  12b6		       0a		      asl
    326  12b7		       0a		      asl
    327  12b8		       0a		      asl
    328  12b9		       0a		      asl
    329  12ba		       99 c2 00 	      sta	CatRowHmove,y
    330  12bd		       a9 00		      lda	#0
    331  12bf		       f0 02		      beq	.NextOffset
    332  12c1				   .MaxOffset
    333  12c1		       96 c2		      stx	CatRowHmove,y
    334  12c3				   .NextOffset
    335  12c3		       88		      dey
    336  12c4		       10 e7		      bpl	.OffsetLoop
    337  12c6
    338  12c6
    339  12c6					      SUBROUTINE
    340  12c6
    341  12c6		       a9 7a		      lda	#COL_SCORE	; 2
    342  12c8		       85 9e		      sta	ScoreColor	; 3
    343  12ca
    344  12ca		       a5 9e		      lda	ScoreColor	; 3
    345  12cc		       85 06		      sta	COLUP0	; 3 - set color registers
    346  12ce		       85 07		      sta	COLUP1	; 3
    347  12d0		       85 08		      sta	COLUPF	; 3
    348  12d2		       85 09		      sta	COLUBK	; 3
    349  12d4
    350  12d4		       a5 80		      lda	Frame
    351  12d6		       29 0f		      and	#%00001111
    352  12d8		       f0 04		      beq	.IncScore
    353  12da		       a9 00		      lda	#0
    354  12dc		       f0 02		      beq	.IncSkip
    355  12de				   .IncScore
    356  12de		       a9 89		      lda	#$89
    357  12e0				   .IncSkip
    358  12e0		       85 8f		      sta	BCDScoreAdd+1
    359  12e2		       a9 19		      lda	#$19
    360  12e4		       85 88		      sta	BCDLevel
    361  12e6
    362  12e6
    363  12e6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    364  12e6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    365  12e6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  12e6
    367  12e6		       a9 1e		      lda	#>FoodGfx
    368  12e8		       85 91		      sta	FoodGfxPtr1+1
    369  12ea		       85 93		      sta	FoodGfxPtr2+1
    370  12ec
    371  12ec		       a9 1f		      lda	#>CatTartGfx
    372  12ee		       85 95		      sta	TartGfxPtr1+1
    373  12f0		       85 99		      sta	TartGfxPtr2+1
    374  12f2
    375  12f2		       a9 1f		      lda	#>CatFaceGfx
    376  12f4		       85 97		      sta	CatGfxPtr1+1
    377  12f6		       85 9b		      sta	CatGfxPtr2+1
    378  12f8
    379  12f8		       a5 a8		      lda	CatPosition
    380  12fa		       29 1f		      and	#%00011111
    381  12fc		       aa		      tax
    382  12fd		       18		      clc
    383  12fe		       69 06		      adc	#<CatTartGfx
    384  1300		       85 98		      sta	TartGfxPtr2
    385  1302		       69 13		      adc	#19
    386  1304		       85 94		      sta	TartGfxPtr1
    387  1306
    388  1306		       8a		      txa
    389  1307		       69 28		      adc	#<CatFaceGfx
    390  1309		       85 9a		      sta	CatGfxPtr2
    391  130b		       69 13		      adc	#19
    392  130d		       85 96		      sta	CatGfxPtr1
    393  130f
    394  130f		       a9 56		      lda	#$56
    395  1311		       85 9f		      sta	PgBarColor
    396  1313		       a9 4a		      lda	#COL_CAT_TART
    397  1315		       85 8c		      sta	CatTartColor
    398  1317
    399  1317		       a5 80		      lda	Frame
    400  1319		       29 08		      and	#%00001000
    401  131b		       4a		      lsr
    402  131c		       4a		      lsr
    403  131d		       4a		      lsr
    404  131e		       a8		      tay
    405  131f		       a5 aa		      lda	Rainbow
    406  1321		       29 0f		      and	#$0F
    407  1323		       59 1e 1d 	      eor	RainbowGfx,y
    408  1326		       85 aa		      sta	Rainbow
    409  1328
    410  1328
    411  1328							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    412  1328							; Prepare for Main Gameplay Kernel
    413  1328							;
    414  1328							; Figure out how many rows to draw before and after the two cat rows
    415  1328							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    416  1328
    417  1328
    418  1328							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    419  1328							; Finish Vertical Blanking
    420  1328							;
    421  1328							; Loop until the end of vertical blanking
    422  1328							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  1328
      0  1328					      NEXT_PAGE
      1  1328					      SUBROUTINE
      2  1328
      3  1328		       4c 00 14 	      jmp	.NextPage
      4  1400		       00 00 00 00*	      ALIGN	$100
      5  1400				   .NextPage
      6  1400
      0  1400					      TIMER_LOOP
      1  1400					      SUBROUTINE
      2  1400
      3  1400				   .TimerLoop
      4  1400		       ad 84 02 	      lda	INTIM
      5  1403		       d0 fb		      bne	.TimerLoop
      6  1405
------- FILE bank2.asm
------- FILE bank2/code/kernel.asm LEVEL 3 PASS 2
      0  1405					      include	bank2/code/kernel.asm
      1  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1405							; Kernel
      3  1405							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1405
      5  1405		       a9 00		      lda	#0
      6  1407		       85 02		      sta	WSYNC
      7  1409		       85 01		      sta	VBLANK	; enable display
      8  140b
      9  140b							; Include kernel routines
------- FILE bank2/code/kernel_score.asm LEVEL 4 PASS 2
      0  140b					      include	bank2/code/kernel_score.asm
      1  140b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  140b							; Scoreboard Display
      3  140b							;
      4  140b							; Draw the 6-digit score and level counter.
      5  140b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  140b
      7  140b					      SUBROUTINE
      8  140b
      9  140b		       a9 13		      lda	#$13
     10  140d		       85 04		      sta	NUSIZ0
     11  140f		       a9 20		      lda	#%00100000
     12  1411		       85 0d		      sta	PF0
     13  1413		       a9 35		      lda	#%00110101
     14  1415		       85 0a		      sta	CTRLPF
     15  1417
     16  1417		       a5 88		      lda	BCDLevel
     17  1419		       4a		      lsr
     18  141a		       4a		      lsr
     19  141b		       4a		      lsr
     20  141c		       85 1e		      sta	ENAM1
     21  141e		       85 1d		      sta	ENAM0
     22  1420
     23  1420		       a9 00		      lda	#0
     24  1422		       85 06		      sta	COLUP0
     25  1424		       85 07		      sta	COLUP1
     26  1426		       85 1b		      sta	GRP0
     27  1428
     28  1428		       a9 ff		      lda	#$FF
     29  142a		       85 1d		      sta	ENAM0
     30  142c		       85 1f		      sta	ENABL
     31  142e		       85 25		      sta	VDELP0
     32  1430		       85 26		      sta	VDELP1
     33  1432
     34  1432		       a9 08		      lda	#8
     35  1434		       8d 96 02 	      sta	TIM64T
     36  1437		       a0 05		      ldy	#5
     37  1439
     38  1439		       85 02		      sta	WSYNC
     39  143b
     40  143b				   ScoreboardLoop
     41  143b		       b9 50 1c 	      lda	LevelGfx,y	; 04
     42  143e		       8d 05 00 	      sta.w	NUSIZ1	; 08
     43  1441
     44  1441		       68		      pla		; 12
     45  1442		       85 1c		      sta	GRP1	; 15
     46  1444		       68		      pla		; 19
     47  1445		       85 1b		      sta	GRP0	; 22
     48  1447
     49  1447		       68		      pla		; 26
     50  1448		       85 1c		      sta	GRP1	; 29
     51  144a		       68		      pla		; 33
     52  144b		       85 1b		      sta	GRP0	; 36
     53  144d
     54  144d		       a9 03		      lda	#3	; 38
     55  144f		       85 05		      sta	NUSIZ1	; 41
     56  1451
     57  1451		       68		      pla		; 45
     58  1452		       aa		      tax		; 47
     59  1453		       68		      pla		; 51
     60  1454		       a8		      tay		; 53
     61  1455		       68		      pla		; 57
     62  1456
     63  1456		       86 1c		      stx	GRP1	; 60
     64  1458		       84 1b		      sty	GRP0	; 63
     65  145a		       85 1c		      sta	GRP1	; 66
     66  145c		       85 1b		      sta	GRP0	; 69
     67  145e
     68  145e		       ac 84 02 	      ldy	INTIM	; 73
     69  1461		       10 d8		      bpl	ScoreboardLoop	; 00/75
     70  1463
     71  1463		       a9 00		      lda	#0	; 01
     72  1465		       85 1b		      sta	GRP0	; 04
     73  1467		       85 1c		      sta	GRP1	; 07
     74  1469		       85 26		      sta	VDELP1	; 10
     75  146b		       85 25		      sta	VDELP0	; 13
     76  146d		       85 1f		      sta	ENABL	; 16
     77  146f		       85 1d		      sta	ENAM0	; 19
     78  1471		       85 1e		      sta	ENAM1	; 22
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_gameplay.asm LEVEL 4 PASS 2
      0  1473					      include	bank2/code/kernel_gameplay.asm
      1  1473							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1473							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1473							; CPU is at cycle 33
      4  1473							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  1473
      6  1473							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1473		       a2 ff		      ldx	#$FF
      8  1475		       9a		      txs
      9  1476
     10  1476		       a0 11		      ldy	#17
     11  1478				   .ClearRainbow
     12  1478		       48		      pha
     13  1479		       48		      pha
     14  147a		       88		      dey
     15  147b		       d0 fb		      bne	.ClearRainbow
     16  147d
     17  147d							; Load rainbow colors into RAM - 65 cycles
     18  147d		       a9 14		      lda	#20
     19  147f		       e5 a8		      sbc	CatPosition	; carry is assumed to be set
     20  1481		       29 1f		      and	#%00011111
     21  1483		       18		      clc
     22  1484		       69 eb		      adc	#RamBowColors+13
     23  1486		       aa		      tax
     24  1487		       9a		      txs
     25  1488
     26  1488		       a0 05		      ldy	#5
     27  148a				   .LoadRainbow
     28  148a		       b9 00 1f 	      lda	RainbowColors,y
     29  148d		       48		      pha
     30  148e		       48		      pha
     31  148f		       88		      dey
     32  1490		       10 f8		      bpl	.LoadRainbow
     33  1492
     34  1492		       a9 00		      lda	#ONE_COPY
     35  1494		       85 04		      sta	NUSIZ0
     36  1496		       a9 04		      lda	#TWO_WIDE
     37  1498		       85 05		      sta	NUSIZ1
     38  149a		       a9 06		      lda	#6
     39  149c		       85 cf		      sta	CurrentRow
     40  149e		       85 02		      sta	WSYNC
     41  14a0
     42  14a0		       a5 9e		      lda	ScoreColor
     43  14a2		       85 09		      sta	COLUBK
     44  14a4		       a2 dd		      ldx	#GAMEPLAY_STACK
     45  14a6		       9a		      txs
     46  14a7		       20 50 15 	      jsr	SetFoodPosition
     47  14aa		       85 02		      sta	WSYNC
     48  14ac
      0  14ac					      NEXT_PAGE
      1  14ac					      SUBROUTINE
      2  14ac
      3  14ac		       4c 00 15 	      jmp	.NextPage
      4  1500		       00 00 00 00*	      ALIGN	$100
      5  1500				   .NextPage
      6  1500
     50  1500
     51  1500				   PreKernel
     52  1500		       85 02		      sta	WSYNC
     53  1502
     54  1502		       a5 f1		      lda	RamBowColors+19
     55  1504		       d0 02		      bne	.SetCatThrobPF
     56  1506		       a5 c9		      lda	ThrobColor+0
     57  1508				   .SetCatThrobPF
     58  1508		       85 cc		      sta	CatThrobPF
     59  150a		       85 02		      sta	WSYNC
     60  150c
      0  150c					      SLEEP	2
      1  150c				   .CYCLES    SET	2
      2  150c
      3  150c				  -	      IF	.CYCLES < 2
      4  150c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  150c				  -	      ERR
      6  150c					      ENDIF
      7  150c
      8  150c				  -	      IF	.CYCLES & 1
      9  150c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  150c				  -	      nop	0
     11  150c				  -	      ELSE
     12  150c				  -	      bit	VSYNC
     13  150c				  -	      ENDIF
     14  150c				  -.CYCLES    SET	.CYCLES - 3
     15  150c					      ENDIF
     16  150c
     17  150c					      REPEAT	.CYCLES / 2
     18  150c		       ea		      nop
     19  150d					      REPEND
     62  150d		       a9 90		      lda	#$90	; 04
     63  150f		       85 20		      sta	HMP0	; 07
     64  1511		       a9 01		      lda	#PF_REFLECT	; 09
     65  1513		       85 0a		      sta	CTRLPF	; 12
     66  1515		       a5 aa		      lda	Rainbow	; 15
     67  1517		       85 0d		      sta	PF0	; 18
     68  1519		       a9 09		      lda	#COL_CAT_FACE	; 20
     69  151b		       85 06		      sta	COLUP0	; 23
     70  151d
     71  151d		       a5 b3		      lda	FoodItemL+6	; 26
     72  151f		       85 10		      sta	RESP0	; 29
     73  1521		       29 f0		      and	#$F0	; 31
     74  1523		       85 90		      sta	FoodGfxPtr1	; 34
     75  1525		       aa		      tax		; 36
     76  1526		       bd 0f 1e 	      lda	FoodGfx+15,x	; 40
     77  1529		       85 d0		      sta	FoodColor1	; 43
     78  152b
     79  152b		       a5 ba		      lda	FoodItemR+6	; 46
     80  152d		       29 f0		      and	#$F0	; 48
     81  152f		       85 92		      sta	FoodGfxPtr2	; 51
     82  1531		       aa		      tax		; 53
     83  1532		       bd 0f 1e 	      lda	FoodGfx+15,x	; 57
     84  1535		       85 d1		      sta	FoodColor2	; 60
     85  1537
     86  1537		       a5 c1		      lda	FoodPosX+6	; 63
     87  1539		       85 cd		      sta	Temp	; 66
      0  153b					      SLEEP	4	; 70
      1  153b				   .CYCLES    SET	4
      2  153b
      3  153b				  -	      IF	.CYCLES < 2
      4  153b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  153b				  -	      ERR
      6  153b					      ENDIF
      7  153b
      8  153b				  -	      IF	.CYCLES & 1
      9  153b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  153b				  -	      nop	0
     11  153b				  -	      ELSE
     12  153b				  -	      bit	VSYNC
     13  153b				  -	      ENDIF
     14  153b				  -.CYCLES    SET	.CYCLES - 3
     15  153b					      ENDIF
     16  153b
     17  153b					      REPEAT	.CYCLES / 2
     18  153b		       ea		      nop
     17  153b					      REPEND
     18  153c		       ea		      nop
     19  153d					      REPEND
     89  153d		       85 2a		      sta	HMOVE	; 73
     90  153f
     91  153f		       a5 ca		      lda	ThrobColor+1	; 03
     92  1541		       85 09		      sta	COLUBK	; 06
     93  1543		       85 08		      sta	COLUPF	; 09
     94  1545		       a9 80		      lda	#$80	; 11
     95  1547		       85 20		      sta	HMP0	; 14
     96  1549
     97  1549		       a5 ac		      lda	PreCatRows
     98  154b		       d0 22		      bne	HiRows
     99  154d		       4c d4 15 	      jmp	CatRows
    100  1550
    101  1550							; If any part of the cat needs to be drawn in the top row,
    102  1550							; skip straight to CatRows.
    103  1550
------- FILE bank2/code/kernel_hi_rows.asm LEVEL 5 PASS 2
      0  1550					      include	bank2/code/kernel_hi_rows.asm
      1  1550							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1550							; Draw all the rows above the cat's two rows
      3  1550							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1550
------- FILE bank2/subroutines/set_food_pos.asm LEVEL 6 PASS 2
      0  1550					      include	bank2/subroutines/set_food_pos.asm
      1  1550				   SetFoodPosition
      2  1550
      3  1550		       85 02		      sta	WSYNC	; 00
      4  1552
      5  1552		       85 09		      sta	COLUBK	; 03
      6  1554		       85 08		      sta	COLUPF	; 06
      7  1556
      0  1556					      SLEEP	4	; 10
      1  1556				   .CYCLES    SET	4
      2  1556
      3  1556				  -	      IF	.CYCLES < 2
      4  1556				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1556				  -	      ERR
      6  1556					      ENDIF
      7  1556
      8  1556				  -	      IF	.CYCLES & 1
      9  1556				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1556				  -	      nop	0
     11  1556				  -	      ELSE
     12  1556				  -	      bit	VSYNC
     13  1556				  -	      ENDIF
     14  1556				  -.CYCLES    SET	.CYCLES - 3
     15  1556					      ENDIF
     16  1556
     17  1556					      REPEAT	.CYCLES / 2
     18  1556		       ea		      nop
     17  1556					      REPEND
     18  1557		       ea		      nop
     19  1558					      REPEND
      9  1558
     10  1558		       a4 cf		      ldy	CurrentRow	; 13
     11  155a		       b9 bb 00 	      lda	FoodPosX,y	; 17
     12  155d
     13  155d		       38		      sec		; 19
     14  155e				   .DivideLoop
     15  155e		       e9 0f		      sbc	#15	; 21
     16  1560		       b0 fc		      bcs	.DivideLoop	; 23
     17  1562
     18  1562		       85 11		      sta	RESP1	; 26
     19  1564
     20  1564		       49 07		      eor	#7
     21  1566		       69 01		      adc	#1
     22  1568		       0a		      asl
     23  1569		       0a		      asl
     24  156a		       0a		      asl
     25  156b		       0a		      asl
     26  156c		       85 21		      sta	HMP1	; 41/66
     27  156e
     28  156e		       60		      rts		; 47/72
------- FILE bank2/code/kernel_hi_rows.asm
      6  156f
      7  156f				   HiRows
      8  156f					      SUBROUTINE
      9  156f
     10  156f		       85 02		      sta	WSYNC
     11  1571		       a5 c9		      lda	ThrobColor+0
     12  1573		       85 09		      sta	COLUBK
     13  1575		       85 08		      sta	COLUPF
     14  1577
     15  1577							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1577							; This will probably be a good time to prepare the pointers for the
     17  1577							; food items' graphics, as well as loading the colors for the food items.
     18  1577
     19  1577							; After that, output 14 lines to draw a single row with food items,
     20  1577							; but without drawing the cat. The food graphics will be updated every line,
     21  1577							; but there will probably not be enough time to also update the food colors
     22  1577							; every line throughout the kernel.
     23  1577
     24  1577		       20 00 19 	      jsr	DrawFoodRow
     25  157a		       c6 cf		      dec	CurrentRow	; 73
     26  157c		       85 02		      sta	WSYNC
     27  157e
     28  157e							; Lastly, output four single-color lines to draw most of a "throb" line,
     29  157e							; while setting the position of player 1 to draw the next set of food items.
     30  157e
     31  157e		       a5 c9		      lda	ThrobColor+0
     32  1580		       85 09		      sta	COLUBK
     33  1582		       85 08		      sta	COLUPF
     34  1584		       a9 00		      lda	#0
     35  1586		       85 1b		      sta	GRP0
     36  1588		       85 1c		      sta	GRP1
     37  158a		       a5 ca		      lda	ThrobColor+1
     38  158c		       20 50 15 	      jsr	SetFoodPosition
     39  158f		       85 02		      sta	WSYNC
     40  1591
     41  1591		       a5 cb		      lda	ThrobColor+2	; 03
     42  1593		       85 09		      sta	COLUBK	; 06
     43  1595		       85 08		      sta	COLUPF	; 09
     44  1597		       20 24 19 	      jsr	Sleep12
     45  159a		       20 24 19 	      jsr	Sleep12
     46  159d		       20 24 19 	      jsr	Sleep12
     47  15a0		       20 24 19 	      jsr	Sleep12
     48  15a3		       20 24 19 	      jsr	Sleep12	; 69
     49  15a6		       8d 2a 00 	      sta.w	HMOVE	; 73
     50  15a9		       85 02		      sta	WSYNC
     51  15ab
     52  15ab		       a5 ca		      lda	ThrobColor+1	; 03
     53  15ad		       85 09		      sta	COLUBK	; 06
     54  15af		       85 08		      sta	COLUPF	; 09
     55  15b1
     56  15b1		       b9 ad 00 	      lda	FoodItemL,y	; 13
     57  15b4		       29 f0		      and	#$F0	; 15
     58  15b6		       85 90		      sta	FoodGfxPtr1	; 18
     59  15b8		       aa		      tax		; 20
     60  15b9		       bd 0f 1e 	      lda	FoodGfx+15,x	; 24
     61  15bc		       85 d0		      sta	FoodColor1	; 27
     62  15be
     63  15be		       b9 b4 00 	      lda	FoodItemR,y	; 31
     64  15c1		       29 f0		      and	#$F0	; 33
     65  15c3		       85 92		      sta	FoodGfxPtr2	; 36
     66  15c5		       aa		      tax		; 38
     67  15c6		       bd 0f 1e 	      lda	FoodGfx+15,x	; 42
     68  15c9		       85 d1		      sta	FoodColor2	; 45
     69  15cb
     70  15cb		       b9 bb 00 	      lda	FoodPosX,y	; 49
     71  15ce		       85 cd		      sta	Temp	; 52
     72  15d0		       c6 ac		      dec	PreCatRows
     73  15d2		       d0 9b		      bne	HiRows
     74  15d4
     75  15d4							; If this is not the last row before drawing the cat's rows,
     76  15d4							; loop back to HiRows to draw the next row.
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_cat_rows.asm LEVEL 5 PASS 2
      0  15d4					      include	bank2/code/kernel_cat_rows.asm
      1  15d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  15d4							; Cat Row Kernel
      3  15d4							;
      4  15d4							; This is the kernel that is used to draw the two rows containing the cat.
      5  15d4							; It also draw the throbbing line between the cat's rows.
      6  15d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  15d4
      8  15d4				   CatRows
      9  15d4					      SUBROUTINE
     10  15d4
     11  15d4		       85 02		      sta	WSYNC
     12  15d6
     13  15d6							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     14  15d6		       a6 c9		      ldx	ThrobColor+0	; 03
     15  15d8		       86 09		      stx	COLUBK	; 06
     16  15da		       86 08		      stx	COLUPF	; 09
     17  15dc		       a0 0d		      ldy	#13	; 11
     18  15de		       b1 94		      lda	(TartGfxPtr1),y	; 16
     19  15e0		       85 0e		      sta	PF1	; 19
      0  15e2					      SLEEP	3	; 22
      1  15e2				   .CYCLES    SET	3
      2  15e2
      3  15e2				  -	      IF	.CYCLES < 2
      4  15e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15e2				  -	      ERR
      6  15e2					      ENDIF
      7  15e2
      8  15e2					      IF	.CYCLES & 1
      9  15e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15e2		       04 00		      nop	0
     11  15e4				  -	      ELSE
     12  15e4				  -	      bit	VSYNC
     13  15e4					      ENDIF
     14  15e4				   .CYCLES    SET	.CYCLES - 3
     15  15e4					      ENDIF
     16  15e4
     17  15e4				  -	      REPEAT	.CYCLES / 2
     18  15e4				  -	      nop
     19  15e4					      REPEND
     21  15e4		       a5 8c		      lda	CatTartColor	; 25
     22  15e6		       85 08		      sta	COLUPF	; 28
      0  15e8					      SLEEP	2	; 30
      1  15e8				   .CYCLES    SET	2
      2  15e8
      3  15e8				  -	      IF	.CYCLES < 2
      4  15e8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15e8				  -	      ERR
      6  15e8					      ENDIF
      7  15e8
      8  15e8				  -	      IF	.CYCLES & 1
      9  15e8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15e8				  -	      nop	0
     11  15e8				  -	      ELSE
     12  15e8				  -	      bit	VSYNC
     13  15e8				  -	      ENDIF
     14  15e8				  -.CYCLES    SET	.CYCLES - 3
     15  15e8					      ENDIF
     16  15e8
     17  15e8					      REPEAT	.CYCLES / 2
     18  15e8		       ea		      nop
     19  15e9					      REPEND
     24  15e9		       86 08		      stx	COLUPF	; 33
     25  15eb
     26  15eb					      SUBROUTINE
     27  15eb
     28  15eb		       a6 cf		      ldx	CurrentRow	; 36
     29  15ed		       b5 bb		      lda	FoodPosX,x	; 40
     30  15ef
      0  15ef					      NEXT_PAGE
      1  15ef					      SUBROUTINE
      2  15ef
      3  15ef		       4c 00 16 	      jmp	.NextPage
      4  1600		       00 00 00 00*	      ALIGN	$100
      5  1600				   .NextPage
      6  1600
     32  1600
      0  1600					      SLEEP	5	; 48
      1  1600				   .CYCLES    SET	5
      2  1600
      3  1600				  -	      IF	.CYCLES < 2
      4  1600				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1600				  -	      ERR
      6  1600					      ENDIF
      7  1600
      8  1600					      IF	.CYCLES & 1
      9  1600					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1600		       04 00		      nop	0
     11  1602				  -	      ELSE
     12  1602				  -	      bit	VSYNC
     13  1602					      ENDIF
     14  1602				   .CYCLES    SET	.CYCLES - 3
     15  1602					      ENDIF
     16  1602
     17  1602					      REPEAT	.CYCLES / 2
     18  1602		       ea		      nop
     19  1603					      REPEND
     34  1603		       a6 d1		      ldx	FoodColor2	; 51
     35  1605		       9a		      txs		; 53
     36  1606		       c9 30		      cmp	#48	; 55
     37  1608		       a2 00		      ldx	#0	; 57
     38  160a
     39  160a							; Then output the 14 lines to draw a single row. This will include drawing
     40  160a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  160a							; All graphics will be updated every line.
     42  160a
     43  160a		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  160c		       90 42		      bcc	.LeftEntrance	; 62
     45  160e
     46  160e							; 14 bytes into the page
     47  160e
     48  160e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  160e							; Kernel used when food items are closer to the right edge of the screen
     50  160e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  160e
     52  160e				   .RightLoop
     53  160e							; 8 cycles
     54  160e		       b1 96		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     55  1610		       85 1b		      sta	GRP0	; 52
     56  1612
     57  1612							; 9 cycles
     58  1612		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     59  1614		       ba		      tsx		; 57 - load 2nd food item's color
     60  1615		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     61  1617
     62  1617				   .RightEntrance		; enter loop here
     63  1617							; 2 cycles
     64  1617		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     65  1619
     66  1619							; 8 cycles
     67  1619		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     68  161b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     69  161d
     70  161d							; 8 cycles
     71  161d		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     72  161f		       85 1c		      sta	GRP1	; 02
     73  1621
     74  1621							; 7 cycles
     75  1621		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     76  1624		       85 09		      sta	COLUBK	; 09
     77  1626
     78  1626							; 7 cycles
     79  1626		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     80  1629		       85 08		      sta	COLUPF	; 16
     81  162b
     82  162b							; 6 cycles
     83  162b		       a5 d0		      lda	FoodColor1	; 19 - set 1st food item's color
     84  162d		       85 07		      sta	COLUP1	; 22
     85  162f
     86  162f							; 8 cycles
     87  162f		       a5 8c		      lda	CatTartColor	; 25
     88  1631		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     89  1633		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     90  1635		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     91  1637
     92  1637							; 5 cycles
     93  1637		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     94  1639
     95  1639							; 2 cycles
     96  1639		       88		      dey		; 41
     97  163a		       10 d2		      bpl	.RightLoop	; 44/43
     98  163c
     99  163c		       a0 12		      ldy	#18	; 45
    100  163e		       b1 98		      lda	(TartGfxPtr2),y	; 50
      0  1640					      SLEEP	2	; 52
      1  1640				   .CYCLES    SET	2
      2  1640
      3  1640				  -	      IF	.CYCLES < 2
      4  1640				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1640				  -	      ERR
      6  1640					      ENDIF
      7  1640
      8  1640				  -	      IF	.CYCLES & 1
      9  1640				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1640				  -	      nop	0
     11  1640				  -	      ELSE
     12  1640				  -	      bit	VSYNC
     13  1640				  -	      ENDIF
     14  1640				  -.CYCLES    SET	.CYCLES - 3
     15  1640					      ENDIF
     16  1640
     17  1640					      REPEAT	.CYCLES / 2
     18  1640		       ea		      nop
     19  1641					      REPEND
    102  1641		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    103  1643		       ba		      tsx		; 57 - load 2nd food item's color
    104  1644		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    105  1646		       b0 38		      bcs	.End	; 63
    106  1648
    107  1648							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108  1648							; Kernel used when food items are closer to the left edge of the screen
    109  1648							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    110  1648
    111  1648				   .LeftLoop
    112  1648							; 8 cycles
    113  1648		       b1 96		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    114  164a		       85 1b		      sta	GRP0	; 57
    115  164c
    116  164c							; 5 cycles
    117  164c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    118  164e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    119  1650
    120  1650				   .LeftEntrance		; enter loop here
    121  1650							; 8 cycles
    122  1650		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    123  1652		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    124  1654
    125  1654							; 8 cycles
    126  1654		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    127  1656		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    128  1658
    129  1658							; 7 cycles
    130  1658		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    131  165b		       85 09		      sta	COLUBK	; 09
    132  165d
    133  165d							; 7 cycles
    134  165d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    135  1660		       85 08		      sta	COLUPF	; 16
    136  1662
    137  1662							; 6 cycles
    138  1662		       a5 d0		      lda	FoodColor1	; 19 - set 1st food item's color
    139  1664		       85 07		      sta	COLUP1	; 22
    140  1666
    141  1666							; 8 cycles
    142  1666		       a5 8c		      lda	CatTartColor	; 25
    143  1668		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    144  166a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    145  166c
    146  166c							; 13 cycles
    147  166c		       b1 92		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    148  166e		       ba		      tsx		; 38 - load 2nd food item's color
    149  166f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    150  1671		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    151  1673
    152  1673							; 5 cycles
    153  1673		       88		      dey		; 46
    154  1674		       10 d2		      bpl	.LeftLoop	; 49/48
    155  1676
    156  1676		       a2 00		      ldx	#0	; 50
    157  1678		       86 08		      stx	COLUPF	; 53
    158  167a
    159  167a		       a0 12		      ldy	#18	; 55
    160  167c		       b1 98		      lda	(TartGfxPtr2),y	; 60
    161  167e
    162  167e		       86 1c		      stx	GRP1	; 63
    163  1680
    164  1680				   .End
    165  1680
    166  1680
    167  1680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1680							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    169  1680							; cat with the rainbow. In order to align player 1 for the next row's
    170  1680							; food items, it will be neccesary to have three versions of this kernel,
    171  1680							; one for each of the three 60-color-clock spaced positions to reset.
    172  1680							; HMOVE will be written to on the first four scanlines. With a maximum
    173  1680							; movement of 15 color-clocks per scanline, this will allow a movement of
    174  1680							; up to 60 color clocks. With three versions of the kernel, it should be
    175  1680							; possible to put player 1 anywhere on the screen.
    176  1680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    177  1680
    178  1680
    179  1680							; Draw throb line #1
    180  1680		       85 0e		      sta	PF1	; 66
    181  1682		       b1 9a		      lda	(CatGfxPtr2),y	; 71
    182  1684		       85 1b		      sta	GRP0	; 74
    183  1686		       a6 c9		      ldx	ThrobColor+0	; 01
    184  1688
      0  1688					      THROB_RAINBOW_BK	18	; 12
      1  1688					      SUBROUTINE
      2  1688				   .X	      SET	18
      3  1688
      4  1688		       a5 f0		      lda	RamBowColors+.X
      5  168a		       d0 04		      bne	.Rainbow
      6  168c		       86 09		      stx	COLUBK
      7  168e		       f0 03		      beq	.End
      8  1690				   .Rainbow
      9  1690		       85 09		      sta	COLUBK
     10  1692		       ea		      nop
     11  1693				   .End
    186  1693
    187  1693		       a5 cc		      lda	CatThrobPF	; 15
    188  1695		       85 08		      sta	COLUPF	; 18
    189  1697		       8e 07 00 	      stx.w	COLUP1	; 22
    190  169a		       a5 8c		      lda	CatTartColor	; 25
    191  169c		       85 08		      sta	COLUPF	; 28
    192  169e		       86 09		      stx	COLUBK	; 31
    193  16a0		       88		      dey		; 33
    194  16a1		       85 11		      sta	RESP1	; 36
    195  16a3		       86 08		      stx	COLUPF	; 39
    196  16a5		       b1 9a		      lda	(CatGfxPtr2),y	; 44
    197  16a7		       85 1b		      sta	GRP0	; 47
    198  16a9		       b1 98		      lda	(TartGfxPtr2),y	; 52
    199  16ab		       85 0e		      sta	PF1	; 55
    200  16ad		       c6 cf		      dec	CurrentRow	; 60
    201  16af		       a2 00		      ldx	#0	; 62
    202  16b1		       86 1c		      stx	GRP1	; 65
    203  16b3
    204  16b3							; Draw throb line #2
    205  16b3		       a5 c4		      lda	CatRowHmove+2	; 68
    206  16b5		       85 21		      sta	HMP1	; 71
      0  16b7					      SLEEP	2	; 73
      1  16b7				   .CYCLES    SET	2
      2  16b7
      3  16b7				  -	      IF	.CYCLES < 2
      4  16b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16b7				  -	      ERR
      6  16b7					      ENDIF
      7  16b7
      8  16b7				  -	      IF	.CYCLES & 1
      9  16b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16b7				  -	      nop	0
     11  16b7				  -	      ELSE
     12  16b7				  -	      bit	VSYNC
     13  16b7				  -	      ENDIF
     14  16b7				  -.CYCLES    SET	.CYCLES - 3
     15  16b7					      ENDIF
     16  16b7
     17  16b7					      REPEAT	.CYCLES / 2
     18  16b7		       ea		      nop
     19  16b8					      REPEND
    208  16b8		       a6 ca		      ldx	ThrobColor+1	; 00
      0  16ba					      THROB_RAINBOW_BK	17	; 11
      1  16ba					      SUBROUTINE
      2  16ba				   .X	      SET	17
      3  16ba
      4  16ba		       a5 ef		      lda	RamBowColors+.X
      5  16bc		       d0 04		      bne	.Rainbow
      6  16be		       86 09		      stx	COLUBK
      7  16c0		       f0 03		      beq	.End
      8  16c2				   .Rainbow
      9  16c2		       85 09		      sta	COLUBK
     10  16c4		       ea		      nop
     11  16c5				   .End
      0  16c5					      THROB_RAINBOW_PF	18	; 22
      1  16c5					      SUBROUTINE
      2  16c5				   .X	      SET	18
      3  16c5
      4  16c5		       a5 f0		      lda	RamBowColors+.X
      5  16c7		       d0 04		      bne	.Rainbow
      6  16c9		       86 08		      stx	COLUPF
      7  16cb		       f0 03		      beq	.End
      8  16cd				   .Rainbow
      9  16cd		       85 08		      sta	COLUPF
     10  16cf		       ea		      nop
     11  16d0				   .End
    211  16d0		       a5 8c		      lda	CatTartColor	; 25
    212  16d2		       85 08		      sta	COLUPF	; 28
    213  16d4		       86 09		      stx	COLUBK	; 31
    214  16d6		       86 08		      stx	COLUPF	; 34
    215  16d8		       88		      dey		; 36
    216  16d9		       a6 cf		      ldx	CurrentRow	; 39
    217  16db		       b5 bb		      lda	FoodPosX,x	; 43
    218  16dd		       c9 2d		      cmp	#45	; 45
    219  16df		       10 01		      bpl	.RightSide	; 48/47
      0  16e1					      SKIP_WORD		; 51
      1  16e1		       0c		      HEX	0C
    221  16e2				   .RightSide
    222  16e2		       85 11		      sta	RESP1	; 51
    223  16e4		       b1 9a		      lda	(CatGfxPtr2),y	; 56
    224  16e6		       85 1b		      sta	GRP0	; 59
    225  16e8		       b1 98		      lda	(TartGfxPtr2),y	; 64
    226  16ea		       85 0e		      sta	PF1	; 67
      0  16ec					      SLEEP	3	; 70
      1  16ec				   .CYCLES    SET	3
      2  16ec
      3  16ec				  -	      IF	.CYCLES < 2
      4  16ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16ec				  -	      ERR
      6  16ec					      ENDIF
      7  16ec
      8  16ec					      IF	.CYCLES & 1
      9  16ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  16ec		       04 00		      nop	0
     11  16ee				  -	      ELSE
     12  16ee				  -	      bit	VSYNC
     13  16ee					      ENDIF
     14  16ee				   .CYCLES    SET	.CYCLES - 3
     15  16ee					      ENDIF
     16  16ee
     17  16ee				  -	      REPEAT	.CYCLES / 2
     18  16ee				  -	      nop
     19  16ee					      REPEND
    228  16ee		       85 2a		      sta	HMOVE	; 73
    229  16f0
    230  16f0							; Draw throb line #3
    231  16f0		       a6 cb		      ldx	ThrobColor+2	; 00
      0  16f2					      THROB_RAINBOW_BK	16	; 11
      1  16f2					      SUBROUTINE
      2  16f2				   .X	      SET	16
      3  16f2
      4  16f2		       a5 ee		      lda	RamBowColors+.X
      5  16f4		       d0 04		      bne	.Rainbow
      6  16f6		       86 09		      stx	COLUBK
      7  16f8		       f0 03		      beq	.End
      8  16fa				   .Rainbow
      9  16fa		       85 09		      sta	COLUBK
     10  16fc		       ea		      nop
     11  16fd				   .End
      0  16fd					      THROB_RAINBOW_PF	17	; 22
      1  16fd					      SUBROUTINE
      2  16fd				   .X	      SET	17
      3  16fd
      4  16fd		       a5 ef		      lda	RamBowColors+.X
      5  16ff		       d0 04		      bne	.Rainbow
      6  1701		       86 08		      stx	COLUPF
      7  1703		       f0 03		      beq	.End
      8  1705				   .Rainbow
      9  1705		       85 08		      sta	COLUPF
     10  1707		       ea		      nop
     11  1708				   .End
    234  1708		       a5 8c		      lda	CatTartColor	; 25
    235  170a		       85 08		      sta	COLUPF	; 28
    236  170c		       86 09		      stx	COLUBK	; 31
    237  170e		       86 08		      stx	COLUPF	; 34
    238  1710		       88		      dey		; 36
    239  1711		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    240  1713		       85 1b		      sta	GRP0	; 44
    241  1715		       b1 98		      lda	(TartGfxPtr2),y	; 49
    242  1717		       85 0e		      sta	PF1	; 52
    243  1719		       a5 c5		      lda	CatRow2FoodL	; 55
    244  171b		       85 90		      sta	FoodGfxPtr1	; 58
    245  171d		       a5 c6		      lda	CatRow2FoodR	; 61
    246  171f		       85 92		      sta	FoodGfxPtr2	; 64
    247  1721		       a5 c3		      lda	CatRowHmove+1	; 67
    248  1723		       85 21		      sta	HMP1	; 70
    249  1725		       85 2a		      sta	HMOVE	; 73
    250  1727
    251  1727							; Draw throb line #4
    252  1727		       a6 ca		      ldx	ThrobColor+1	; 00
      0  1729					      THROB_RAINBOW_BK	15	; 11
      1  1729					      SUBROUTINE
      2  1729				   .X	      SET	15
      3  1729
      4  1729		       a5 ed		      lda	RamBowColors+.X
      5  172b		       d0 04		      bne	.Rainbow
      6  172d		       86 09		      stx	COLUBK
      7  172f		       f0 03		      beq	.End
      8  1731				   .Rainbow
      9  1731		       85 09		      sta	COLUBK
     10  1733		       ea		      nop
     11  1734				   .End
      0  1734					      THROB_RAINBOW_PF	16	; 22
      1  1734					      SUBROUTINE
      2  1734				   .X	      SET	16
      3  1734
      4  1734		       a5 ee		      lda	RamBowColors+.X
      5  1736		       d0 04		      bne	.Rainbow
      6  1738		       86 08		      stx	COLUPF
      7  173a		       f0 03		      beq	.End
      8  173c				   .Rainbow
      9  173c		       85 08		      sta	COLUPF
     10  173e		       ea		      nop
     11  173f				   .End
    255  173f		       a5 8c		      lda	CatTartColor	; 25
    256  1741		       85 08		      sta	COLUPF	; 28
    257  1743		       86 09		      stx	COLUBK	; 31
    258  1745		       86 08		      stx	COLUPF	; 34
    259  1747		       88		      dey		; 36
    260  1748		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    261  174a		       85 1b		      sta	GRP0	; 44
    262  174c		       b1 98		      lda	(TartGfxPtr2),y	; 49
    263  174e		       85 0e		      sta	PF1	; 52
    264  1750		       a5 c7		      lda	CatRow2Color1	; 55
    265  1752		       85 d0		      sta	FoodColor1	; 58
    266  1754		       ae c8 00 	      ldx.w	CatRow2Color2	; 55
    267  1757		       9a		      txs		; 58
    268  1758		       a5 c2		      lda	CatRowHmove+0	; 67
    269  175a		       85 21		      sta	HMP1	; 70
    270  175c		       85 2a		      sta	HMOVE	; 73
    271  175e
    272  175e							; Draw throb line #5
    273  175e					      SUBROUTINE
    274  175e
    275  175e		       a6 c9		      ldx	ThrobColor+0	; 00
      0  1760					      THROB_RAINBOW_BK	14	; 11
      1  1760					      SUBROUTINE
      2  1760				   .X	      SET	14
      3  1760
      4  1760		       a5 ec		      lda	RamBowColors+.X
      5  1762		       d0 04		      bne	.Rainbow
      6  1764		       86 09		      stx	COLUBK
      7  1766		       f0 03		      beq	.End
      8  1768				   .Rainbow
      9  1768		       85 09		      sta	COLUBK
     10  176a		       ea		      nop
     11  176b				   .End
      0  176b					      THROB_RAINBOW_PF	15	; 22
      1  176b					      SUBROUTINE
      2  176b				   .X	      SET	15
      3  176b
      4  176b		       a5 ed		      lda	RamBowColors+.X
      5  176d		       d0 04		      bne	.Rainbow
      6  176f		       86 08		      stx	COLUPF
      7  1771		       f0 03		      beq	.End
      8  1773				   .Rainbow
      9  1773		       85 08		      sta	COLUPF
     10  1775		       ea		      nop
     11  1776				   .End
    278  1776		       a5 8c		      lda	CatTartColor	; 25
    279  1778		       85 08		      sta	COLUPF	; 28
    280  177a		       86 09		      stx	COLUBK	; 31
    281  177c		       86 08		      stx	COLUPF	; 34
    282  177e		       88		      dey		; 36
    283  177f		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    284  1781		       85 1b		      sta	GRP0	; 44
    285  1783		       a6 cf		      ldx	CurrentRow	; 47
    286  1785		       b5 bb		      lda	FoodPosX,x	; 51
    287  1787		       c9 30		      cmp	#48	; 53
    288  1789		       a2 00		      ldx	#0	; 55
    289  178b		       ea		      nop		; 57
    290  178c
    291  178c							; Then output the 14 lines to draw a single row. This will include drawing
    292  178c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    293  178c							; All graphics will be updated every line.
    294  178c
    295  178c		       b0 0b		      bcs	.RightEntrance	; 60/59
    296  178e		       90 42		      bcc	.LeftEntrance	; 62
    297  1790
    298  1790							; 14 bytes into the page
    299  1790
    300  1790							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    301  1790							; Kernel used when food items are closer to the right edge of the screen
    302  1790							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    303  1790
    304  1790				   .RightLoop
    305  1790							; 8 cycles
    306  1790		       b1 9a		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    307  1792		       85 1b		      sta	GRP0	; 52
    308  1794
    309  1794							; 9 cycles
    310  1794		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    311  1796		       ba		      tsx		; 57 - load 2nd food item's color
    312  1797		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    313  1799
    314  1799				   .RightEntrance		; enter loop here
    315  1799							; 2 cycles
    316  1799		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    317  179b
    318  179b							; 8 cycles
    319  179b		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    320  179d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    321  179f
    322  179f							; 8 cycles
    323  179f		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    324  17a1		       85 1c		      sta	GRP1	; 02
    325  17a3
    326  17a3							; 7 cycles
    327  17a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    328  17a6		       85 09		      sta	COLUBK	; 09
    329  17a8
    330  17a8							; 7 cycles
    331  17a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    332  17ab		       85 08		      sta	COLUPF	; 16
    333  17ad
    334  17ad							; 6 cycles
    335  17ad		       a5 d0		      lda	FoodColor1	; 19 - set 1st food item's color
    336  17af		       85 07		      sta	COLUP1	; 22
    337  17b1
    338  17b1							; 8 cycles
    339  17b1		       a5 8c		      lda	CatTartColor	; 25
    340  17b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    341  17b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    342  17b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    343  17b9
    344  17b9							; 5 cycles
    345  17b9		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    346  17bb
    347  17bb							; 2 cycles
    348  17bb		       88		      dey		; 41
    349  17bc		       10 d2		      bpl	.RightLoop	; 44/43
    350  17be
    351  17be		       a0 12		      ldy	#18	; 45
    352  17c0		       b1 98		      lda	(TartGfxPtr2),y	; 50
      0  17c2					      SLEEP	2	; 52
      1  17c2				   .CYCLES    SET	2
      2  17c2
      3  17c2				  -	      IF	.CYCLES < 2
      4  17c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  17c2				  -	      ERR
      6  17c2					      ENDIF
      7  17c2
      8  17c2				  -	      IF	.CYCLES & 1
      9  17c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  17c2				  -	      nop	0
     11  17c2				  -	      ELSE
     12  17c2				  -	      bit	VSYNC
     13  17c2				  -	      ENDIF
     14  17c2				  -.CYCLES    SET	.CYCLES - 3
     15  17c2					      ENDIF
     16  17c2
     17  17c2					      REPEAT	.CYCLES / 2
     18  17c2		       ea		      nop
     19  17c3					      REPEND
    354  17c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    355  17c5		       ba		      tsx		; 57 - load 2nd food item's color
    356  17c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    357  17c8		       b0 36		      bcs	.End	; 63
    358  17ca
    359  17ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    360  17ca							; Kernel used when food items are closer to the left edge of the screen
    361  17ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    362  17ca
    363  17ca				   .LeftLoop
    364  17ca							; 8 cycles
    365  17ca		       b1 9a		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    366  17cc		       85 1b		      sta	GRP0	; 57
    367  17ce
    368  17ce							; 5 cycles
    369  17ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    370  17d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    371  17d2
    372  17d2							; enter loop here
    373  17d2				   .LeftEntrance
    374  17d2							; 8 cycles
    375  17d2		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    376  17d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    377  17d6
    378  17d6							; 8 cycles
    379  17d6		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    380  17d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    381  17da
    382  17da							; 7 cycles
    383  17da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    384  17dd		       85 09		      sta	COLUBK	; 09
    385  17df
    386  17df							; 7 cycles
    387  17df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    388  17e2		       85 08		      sta	COLUPF	; 16
    389  17e4
    390  17e4							; 6 cycles
    391  17e4		       a5 d0		      lda	FoodColor1	; 19 - set 1st food item's color
    392  17e6		       85 07		      sta	COLUP1	; 22
    393  17e8
    394  17e8							; 8 cycles
    395  17e8		       a5 8c		      lda	CatTartColor	; 25
    396  17ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    397  17ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    398  17ee
    399  17ee							; 13 cycles
    400  17ee		       b1 92		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    401  17f0		       ba		      tsx		; 38 - load 2nd food item's color
    402  17f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    403  17f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    404  17f5
    405  17f5							; 5 cycles
    406  17f5		       88		      dey		; 46
    407  17f6		       10 d2		      bpl	.LeftLoop	; 49/48
    408  17f8
    409  17f8		       a2 00		      ldx	#0	; 50
    410  17fa		       86 08		      stx	COLUPF	; 53
    411  17fc
    412  17fc		       a0 12		      ldy	#18	; 55
    413  17fe		       b1 98		      lda	(TartGfxPtr2),y	; 60
    414  1800				   .End
    415  1800
    416  1800		       a2 ff		      ldx	#$FF	; 65
    417  1802		       9a		      txs		; 67
    418  1803		       a2 00		      ldx	#0
    419  1805
    420  1805							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    421  1805							; Use this time to prepare the next row's food item pointers (unless this is
    422  1805							; the last row). If this is the last row, skip over LoRows.
    423  1805
    424  1805		       85 02		      sta	WSYNC
    425  1807		       a5 c9		      lda	ThrobColor+0
    426  1809		       85 09		      sta	COLUBK
    427  180b		       85 08		      sta	COLUPF
    428  180d		       86 1c		      stx	GRP1
      0  180f					      SLEEP	18
      1  180f				   .CYCLES    SET	18
      2  180f
      3  180f				  -	      IF	.CYCLES < 2
      4  180f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  180f				  -	      ERR
      6  180f					      ENDIF
      7  180f
      8  180f				  -	      IF	.CYCLES & 1
      9  180f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  180f				  -	      nop	0
     11  180f				  -	      ELSE
     12  180f				  -	      bit	VSYNC
     13  180f				  -	      ENDIF
     14  180f				  -.CYCLES    SET	.CYCLES - 3
     15  180f					      ENDIF
     16  180f
     17  180f					      REPEAT	.CYCLES / 2
     18  180f		       ea		      nop
     17  180f					      REPEND
     18  1810		       ea		      nop
     17  1810					      REPEND
     18  1811		       ea		      nop
     17  1811					      REPEND
     18  1812		       ea		      nop
     17  1812					      REPEND
     18  1813		       ea		      nop
     17  1813					      REPEND
     18  1814		       ea		      nop
     17  1814					      REPEND
     18  1815		       ea		      nop
     17  1815					      REPEND
     18  1816		       ea		      nop
     17  1816					      REPEND
     18  1817		       ea		      nop
     19  1818					      REPEND
    430  1818		       86 1b		      stx	GRP0
    431  181a		       c6 cf		      dec	CurrentRow
    432  181c		       30 03		      bmi	.GpEnd
    433  181e
    434  181e							; If the cat is at the very bottom of the screen, don't disable the
    435  181e							; missile/player graphics until after they are drawn, so they don't get
    436  181e							; clipped at the bottom of the screen. An easy way to do this would be to
    437  181e							; simply disable them after they would have been drawn, whether they are
    438  181e							; already disabled or not.
    439  181e
    440  181e		       4c 25 19 	      jmp	LoRows
    441  1821				   .GpEnd
    442  1821		       4c 8d 19 	      jmp	GameplayEnd
    443  1824
    444  1900		       00 00 00 00*	      ALIGN	$100
    445  1900
------- FILE bank2/subroutines/draw_food_row.asm LEVEL 6 PASS 2
      0  1900					      include	bank2/subroutines/draw_food_row.asm
      1  1900				   DrawFoodRow
      2  1900							; 69
      3  1900		       a0 0d		      ldy	#13	; 71
      4  1902
      5  1902				   .FoodLoop
      6  1902		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1904		       85 02		      sta	WSYNC	; 00
      8  1906
      9  1906				   .EnterHere
     10  1906		       85 09		      sta	COLUBK	; 03
     11  1908		       85 08		      sta	COLUPF	; 06
     12  190a
     13  190a		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     14  190c		       85 1c		      sta	GRP1	; 14
     15  190e		       a5 d0		      lda	FoodColor1	; 17
     16  1910		       85 07		      sta	COLUP1	; 20
     17  1912
     18  1912		       a5 cd		      lda	Temp	; 23
     19  1914
     20  1914		       38		      sec		; 25
     21  1915				   .WaitLoop
     22  1915		       e9 17		      sbc	#23	; 27
     23  1917		       b0 fc		      bcs	.WaitLoop	; 29
     24  1919
     25  1919		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     26  191b		       a6 d1		      ldx	FoodColor2	; 52
     27  191d		       85 1c		      sta	GRP1	; 55
     28  191f		       86 07		      stx	COLUP1	; 58
     29  1921
     30  1921		       88		      dey		; 60
     31  1922		       10 de		      bpl	.FoodLoop	; 62
     32  1924
     33  1924				   Sleep12
     34  1924		       60		      rts		; 68
------- FILE bank2/code/kernel_cat_rows.asm
    447  1925
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_lo_rows.asm LEVEL 5 PASS 2
      0  1925					      include	bank2/code/kernel_lo_rows.asm
      1  1925							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1925							; Draw all the rows below the cat's two rows.
      3  1925							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1925
      5  1925				   LoRows
      6  1925					      SUBROUTINE
      7  1925
      8  1925							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1925							; player 1 for the next row's food items.
     10  1925
     11  1925		       a5 ca		      lda	ThrobColor+1
     12  1927		       20 50 15 	      jsr	SetFoodPosition
     13  192a		       85 02		      sta	WSYNC
     14  192c
     15  192c		       a5 cb		      lda	ThrobColor+2	; 03
     16  192e		       85 09		      sta	COLUBK	; 06
     17  1930		       85 08		      sta	COLUPF	; 09
     18  1932		       20 24 19 	      jsr	Sleep12
     19  1935		       20 24 19 	      jsr	Sleep12
     20  1938		       20 24 19 	      jsr	Sleep12
     21  193b		       20 24 19 	      jsr	Sleep12
     22  193e		       20 24 19 	      jsr	Sleep12	; 69
     23  1941		       8d 2a 00 	      sta.w	HMOVE	; 73
     24  1944		       85 02		      sta	WSYNC
     25  1946
     26  1946		       a5 ca		      lda	ThrobColor+1
     27  1948		       85 09		      sta	COLUBK
     28  194a		       85 08		      sta	COLUPF
     29  194c		       85 02		      sta	WSYNC
     30  194e
     31  194e		       a5 c9		      lda	ThrobColor+0	; 3
     32  1950		       85 09		      sta	COLUBK	; 6
     33  1952		       85 08		      sta	COLUPF	; 9
     34  1954		       a4 cf		      ldy	CurrentRow	; 12
     35  1956
     36  1956		       b9 ad 00 	      lda	FoodItemL,y	; 16
     37  1959		       29 f0		      and	#$F0	; 18
     38  195b		       85 90		      sta	FoodGfxPtr1	; 21
     39  195d		       aa		      tax		; 23
     40  195e		       bd 0f 1e 	      lda	FoodGfx+15,x	; 27
     41  1961		       85 d0		      sta	FoodColor1	; 30
     42  1963
     43  1963		       b9 b4 00 	      lda	FoodItemR,y	; 34
     44  1966		       29 f0		      and	#$F0	; 37
     45  1968		       85 92		      sta	FoodGfxPtr2	; 39
     46  196a		       aa		      tax		; 41
     47  196b		       bd 0f 1e 	      lda	FoodGfx+15,x	; 45
     48  196e		       85 d1		      sta	FoodColor2	; 48
     49  1970
     50  1970		       b9 bb 00 	      lda	FoodPosX,y	; 52
     51  1973		       85 cd		      sta	Temp	; 55
     52  1975
     53  1975							; Output 14 lines to draw a row, exactly the same as in HiRows.
     54  1975							; It may be possible to code this as a subroutine to save ROM space.
     55  1975
     56  1975		       20 00 19 	      jsr	DrawFoodRow	; 61
     57  1978		       85 02		      sta	WSYNC
     58  197a
     59  197a							; Lastly, output a single line for the next "throb" line.
     60  197a							; Use this time to prepare the next row's food item pointers (unless this is
     61  197a							; the last row). If this is not the last row, loop to LoRows for the next row.
     62  197a
     63  197a		       a5 c9		      lda	ThrobColor+0
     64  197c		       85 09		      sta	COLUBK
     65  197e		       85 08		      sta	COLUPF
     66  1980		       a9 00		      lda	#0
     67  1982		       85 1b		      sta	GRP0
     68  1984		       85 1c		      sta	GRP1
     69  1986		       c6 cf		      dec	CurrentRow
     70  1988		       10 9b		      bpl	LoRows
     71  198a
     72  198a		       a2 ff		      ldx	#$FF
     73  198c		       9a		      txs
     74  198d
     75  198d				   GameplayEnd
     76  198d		       85 02		      sta	WSYNC
      0  198f					      SLEEP	2
      1  198f				   .CYCLES    SET	2
      2  198f
      3  198f				  -	      IF	.CYCLES < 2
      4  198f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  198f				  -	      ERR
      6  198f					      ENDIF
      7  198f
      8  198f				  -	      IF	.CYCLES & 1
      9  198f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  198f				  -	      nop	0
     11  198f				  -	      ELSE
     12  198f				  -	      bit	VSYNC
     13  198f				  -	      ENDIF
     14  198f				  -.CYCLES    SET	.CYCLES - 3
     15  198f					      ENDIF
     16  198f
     17  198f					      REPEAT	.CYCLES / 2
     18  198f		       ea		      nop
     19  1990					      REPEND
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_health.asm LEVEL 4 PASS 2
      0  1990					      include	bank2/code/kernel_health.asm
      1  1990
      2  1990		       a5 ca		      lda	ThrobColor+1
      3  1992		       85 09		      sta	COLUBK
      4  1994		       a9 00		      lda	#0
      5  1996		       85 0d		      sta	PF0
      6  1998		       85 0a		      sta	CTRLPF
      7  199a		       a9 09		      lda	#COL_CAT_FACE
      8  199c		       85 08		      sta	COLUPF
      9  199e
     10  199e		       20 24 19 	      jsr	Sleep12
     11  19a1		       20 24 19 	      jsr	Sleep12
      0  19a4					      SLEEP	8	; 53
      1  19a4				   .CYCLES    SET	8
      2  19a4
      3  19a4				  -	      IF	.CYCLES < 2
      4  19a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  19a4				  -	      ERR
      6  19a4					      ENDIF
      7  19a4
      8  19a4				  -	      IF	.CYCLES & 1
      9  19a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  19a4				  -	      nop	0
     11  19a4				  -	      ELSE
     12  19a4				  -	      bit	VSYNC
     13  19a4				  -	      ENDIF
     14  19a4				  -.CYCLES    SET	.CYCLES - 3
     15  19a4					      ENDIF
     16  19a4
     17  19a4					      REPEAT	.CYCLES / 2
     18  19a4		       ea		      nop
     17  19a4					      REPEND
     18  19a5		       ea		      nop
     17  19a5					      REPEND
     18  19a6		       ea		      nop
     17  19a6					      REPEND
     18  19a7		       ea		      nop
     19  19a8					      REPEND
     13  19a8		       a9 20		      lda	#$20	; 55
     14  19aa		       85 20		      sta	HMP0	; 58
     15  19ac		       a9 b0		      lda	#$B0	; 60
     16  19ae		       85 21		      sta	HMP1	; 63
     17  19b0		       85 10		      sta	RESP0	; 66
     18  19b2		       85 11		      sta	RESP1	; 69
     19  19b4		       a9 00		      lda	#$00	; 71
     20  19b6		       85 2a		      sta	HMOVE	; 74
     21  19b8
     22  19b8		       85 06		      sta	COLUP0
     23  19ba		       85 07		      sta	COLUP1
     24  19bc		       a5 9e		      lda	ScoreColor
     25  19be		       85 09		      sta	COLUBK
     26  19c0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     27  19c2		       85 04		      sta	NUSIZ0
     28  19c4		       85 05		      sta	NUSIZ1
     29  19c6		       a9 08		      lda	#REFP_TRUE
     30  19c8		       85 0c		      sta	REFP1
     31  19ca
     32  19ca					      SUBROUTINE
     33  19ca
     34  19ca		       a0 04		      ldy	#4
     35  19cc		       85 02		      sta	WSYNC
     36  19ce
     37  19ce							; draw top of health
     38  19ce				   .HealthTop
     39  19ce		       a2 03		      ldx	#3
     40  19d0				   .Loop
     41  19d0		       85 02		      sta	WSYNC
     42  19d2		       b9 6f 1c 	      lda	HealthTopGfx,y	; 04
     43  19d5		       85 1b		      sta	GRP0	; 07
     44  19d7		       85 1c		      sta	GRP1	; 10
     45  19d9		       a9 00		      lda	#$00	; 12
     46  19db		       85 0f		      sta	PF2	; 15
     47  19dd
     48  19dd							; Set the pointers for health graphics - 26 cycles
     49  19dd		       18		      clc		; 17
     50  19de		       a9 1c		      lda	#>HealthLeftGfx	; 19
     51  19e0		       85 99		      sta	HthGfxLPtr+1	; 22
     52  19e2		       85 9b		      sta	HthGfxRPtr+1	; 25
     53  19e4		       a9 74		      lda	#<HealthLeftGfx	; 27
     54  19e6		       65 a1		      adc	Health	; 30
     55  19e8		       85 98		      sta	HthGfxLPtr	; 33
     56  19ea		       a9 94		      lda	#<HealthRightGfx	; 35
     57  19ec		       65 a1		      adc	Health	; 38
     58  19ee		       85 9a		      sta	HthGfxRPtr	; 41
     59  19f0		       b9 08 1d 	      lda	HealthBgGfx+8,y	; 45
     60  19f3		       85 0f		      sta	PF2	; 48
     61  19f5
     62  19f5		       ca		      dex		; 50
     63  19f6		       d0 d8		      bne	.Loop	; 52
     64  19f8
     65  19f8		       88		      dey		; 54
     66  19f9		       10 d3		      bpl	.HealthTop	; 56
     67  19fb
     68  19fb					      SUBROUTINE
     69  19fb
     70  19fb		       a0 03		      ldy	#3	; 58
     71  19fd		       a2 03		      ldx	#3	; 60
     72  19ff		       86 cd		      stx	Temp	; 63
     73  1a01
     74  1a01		       4c 00 1b 	      jmp	.HealthMiddle	; 66
     75  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
     76  1b00
     77  1b00							; draw middle of health, with progress bar
     78  1b00				   .HealthMiddle
     79  1b00		       85 02		      sta	WSYNC
     80  1b02				   .Loop
     81  1b02		       a5 a2		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     82  1b04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     83  1b06		       a5 a3		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     84  1b08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     85  1b0a		       a5 a4		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     86  1b0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     87  1b0e		       a5 9f		      lda	PgBarColor	; 21 - get the progress bar color
     88  1b10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     89  1b12		       a5 a5		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     90  1b14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     91  1b16		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     92  1b18		       85 1b		      sta	GRP0	; 38 - for the left half of health
     93  1b1a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     94  1b1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
     95  1b1e		       a5 a6		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
     96  1b20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
     97  1b22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
     98  1b24		       85 0f		      sta	PF2	; 57 - for the health background and set it
     99  1b26		       a5 9e		      lda	ScoreColor	; 60 - get the color for the background
    100  1b28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    101  1b2b
    102  1b2b		       ca		      dex		; 66
    103  1b2c		       d0 d2		      bne	.HealthMiddle	; 68
    104  1b2e
    105  1b2e		       a6 cd		      ldx	Temp	; 71
    106  1b30		       88		      dey		; 73
    107  1b31		       10 cf		      bpl	.Loop	; 76 / 00
    108  1b33
    109  1b33					      SUBROUTINE
    110  1b33
    111  1b33		       a9 00		      lda	#0
    112  1b35		       85 0d		      sta	PF0
    113  1b37		       85 0e		      sta	PF1
    114  1b39		       a0 07		      ldy	#7
    115  1b3b
    116  1b3b							; draw bottom of health
    117  1b3b				   .HealthBottom
    118  1b3b		       a2 03		      ldx	#3
    119  1b3d				   .Loop
    120  1b3d		       b1 98		      lda	(HthGfxLPtr),y
    121  1b3f		       85 1b		      sta	GRP0
    122  1b41		       b1 9a		      lda	(HthGfxRPtr),y
    123  1b43		       85 1c		      sta	GRP1
    124  1b45		       a9 00		      lda	#$00
    125  1b47		       85 0f		      sta	PF2
      0  1b49					      SLEEP	14
      1  1b49				   .CYCLES    SET	14
      2  1b49
      3  1b49				  -	      IF	.CYCLES < 2
      4  1b49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1b49				  -	      ERR
      6  1b49					      ENDIF
      7  1b49
      8  1b49				  -	      IF	.CYCLES & 1
      9  1b49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1b49				  -	      nop	0
     11  1b49				  -	      ELSE
     12  1b49				  -	      bit	VSYNC
     13  1b49				  -	      ENDIF
     14  1b49				  -.CYCLES    SET	.CYCLES - 3
     15  1b49					      ENDIF
     16  1b49
     17  1b49					      REPEAT	.CYCLES / 2
     18  1b49		       ea		      nop
     17  1b49					      REPEND
     18  1b4a		       ea		      nop
     17  1b4a					      REPEND
     18  1b4b		       ea		      nop
     17  1b4b					      REPEND
     18  1b4c		       ea		      nop
     17  1b4c					      REPEND
     18  1b4d		       ea		      nop
     17  1b4d					      REPEND
     18  1b4e		       ea		      nop
     17  1b4e					      REPEND
     18  1b4f		       ea		      nop
     19  1b50					      REPEND
    127  1b50		       b9 fc 1c 	      lda	HealthBgGfx-4,y
    128  1b53		       85 0f		      sta	PF2
    129  1b55		       85 02		      sta	WSYNC
    130  1b57
    131  1b57		       ca		      dex
    132  1b58		       d0 e3		      bne	.Loop
    133  1b5a
    134  1b5a		       88		      dey
    135  1b5b		       c0 03		      cpy	#3
    136  1b5d		       d0 dc		      bne	.HealthBottom
    137  1b5f
    138  1b5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    139  1b5f
    140  1b5f		       a9 00		      lda	#$00
    141  1b61		       85 1b		      sta	GRP0
    142  1b63		       85 1c		      sta	GRP1
    143  1b65		       85 0b		      sta	REFP0
    144  1b67		       85 0c		      sta	REFP1
    145  1b69		       85 0f		      sta	PF2
    146  1b6b		       85 02		      sta	WSYNC
------- FILE bank2/code/kernel.asm
     13  1b6d
     14  1b6d		       a9 02		      lda	#2
     15  1b6f		       85 01		      sta	VBLANK	; disable display
     16  1b71
     17  1b71		       4c 55 10 	      jmp	Overscan
------- FILE bank2.asm
------- FILE bank2/data/graphics.asm LEVEL 3 PASS 2
      0  1b74					      include	bank2/data/graphics.asm
      1  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1b74							; Graphics Tables
      3  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1b74
      5  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1c00
      7  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1c00							; Digit graphics for the scoreboard
      9  1c00							;
     10  1c00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1c00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1c00							; to normal when it is pulled from the stack.
     13  1c00							;
     14  1c00							; Table takes up $50 (80) bytes of ROM
     15  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1c00
     17  1c00				   ScoreGfx
     18  1c00
     19  1c00		       1c		      .byte.b	%00011100	; digit 0
     20  1c01		       26		      .byte.b	%00100110
     21  1c02		       63		      .byte.b	%01100011
     22  1c03		       63		      .byte.b	%01100011
     23  1c04		       63		      .byte.b	%01100011
     24  1c05		       32		      .byte.b	%00110010
     25  1c06		       1c		      .byte.b	%00011100
     26  1c07		       00		      .byte.b	%00000000
     27  1c08
     28  1c08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1c08
     30  1c08		       18		      .byte.b	%00011000	; digit 1
     31  1c09		       78		      .byte.b	%01111000
     32  1c0a		       18		      .byte.b	%00011000
     33  1c0b		       18		      .byte.b	%00011000
     34  1c0c		       18		      .byte.b	%00011000
     35  1c0d		       18		      .byte.b	%00011000
     36  1c0e		       7e		      .byte.b	%01111110
     37  1c0f		       00		      .byte.b	%00000000
     38  1c10
     39  1c10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1c10
     41  1c10		       3e		      .byte.b	%00111110	; digit 2
     42  1c11		       63		      .byte.b	%01100011
     43  1c12		       07		      .byte.b	%00000111
     44  1c13		       1e		      .byte.b	%00011110
     45  1c14		       3c		      .byte.b	%00111100
     46  1c15		       70		      .byte.b	%01110000
     47  1c16		       7f		      .byte.b	%01111111
     48  1c17		       00		      .byte.b	%00000000
     49  1c18
     50  1c18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1c18
     52  1c18		       7f		      .byte.b	%01111111	; digit 3
     53  1c19		       06		      .byte.b	%00000110
     54  1c1a		       0c		      .byte.b	%00001100
     55  1c1b		       1e		      .byte.b	%00011110
     56  1c1c		       03		      .byte.b	%00000011
     57  1c1d		       63		      .byte.b	%01100011
     58  1c1e		       3e		      .byte.b	%00111110
     59  1c1f		       00		      .byte.b	%00000000
     60  1c20
     61  1c20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1c20
     63  1c20		       0e		      .byte.b	%00001110	; digit 4
     64  1c21		       1e		      .byte.b	%00011110
     65  1c22		       36		      .byte.b	%00110110
     66  1c23		       66		      .byte.b	%01100110
     67  1c24		       7f		      .byte.b	%01111111
     68  1c25		       06		      .byte.b	%00000110
     69  1c26		       06		      .byte.b	%00000110
     70  1c27		       00		      .byte.b	%00000000
     71  1c28
     72  1c28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1c28
     74  1c28		       7e		      .byte.b	%01111110	; digit 5
     75  1c29		       60		      .byte.b	%01100000
     76  1c2a		       7e		      .byte.b	%01111110
     77  1c2b		       03		      .byte.b	%00000011
     78  1c2c		       03		      .byte.b	%00000011
     79  1c2d		       63		      .byte.b	%01100011
     80  1c2e		       3e		      .byte.b	%00111110
     81  1c2f		       00		      .byte.b	%00000000
     82  1c30
     83  1c30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1c30
     85  1c30		       1e		      .byte.b	%00011110	; digit 6
     86  1c31		       30		      .byte.b	%00110000
     87  1c32		       60		      .byte.b	%01100000
     88  1c33		       7e		      .byte.b	%01111110
     89  1c34		       63		      .byte.b	%01100011
     90  1c35		       63		      .byte.b	%01100011
     91  1c36		       3e		      .byte.b	%00111110
     92  1c37		       00		      .byte.b	%00000000
     93  1c38
     94  1c38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1c38
     96  1c38		       7f		      .byte.b	%01111111	; digit 7
     97  1c39		       03		      .byte.b	%00000011
     98  1c3a		       06		      .byte.b	%00000110
     99  1c3b		       0c		      .byte.b	%00001100
    100  1c3c		       18		      .byte.b	%00011000
    101  1c3d		       18		      .byte.b	%00011000
    102  1c3e		       18		      .byte.b	%00011000
    103  1c3f		       00		      .byte.b	%00000000
    104  1c40
    105  1c40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1c40
    107  1c40		       3c		      .byte.b	%00111100	; digit 8
    108  1c41		       62		      .byte.b	%01100010
    109  1c42		       72		      .byte.b	%01110010
    110  1c43		       3c		      .byte.b	%00111100
    111  1c44		       43		      .byte.b	%01000011
    112  1c45		       43		      .byte.b	%01000011
    113  1c46		       3e		      .byte.b	%00111110
    114  1c47		       00		      .byte.b	%00000000
    115  1c48
    116  1c48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1c48
    118  1c48		       3e		      .byte.b	%00111110	; digit 9
    119  1c49		       63		      .byte.b	%01100011
    120  1c4a		       63		      .byte.b	%01100011
    121  1c4b		       3f		      .byte.b	%00111111
    122  1c4c		       03		      .byte.b	%00000011
    123  1c4d		       06		      .byte.b	%00000110
    124  1c4e		       3c		      .byte.b	%00111100
    125  1c4f		       00		      .byte.b	%00000000
    126  1c50
    127  1c50
    128  1c50
    129  1c50				   LevelGfx
    130  1c50
    131  1c50		       34		      .byte.b	$34
    132  1c51		       04		      .byte.b	$04
    133  1c52		       04		      .byte.b	$04
    134  1c53		       04		      .byte.b	$04
    135  1c54		       04		      .byte.b	$04
    136  1c55		       04		      .byte.b	$04
    137  1c56		       24		      .byte.b	$24
    138  1c57
    139  1c57
    140  1c57
    141  1c57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1c57							; Throbbing Line Graphics
    143  1c57							;
    144  1c57							; Graphics tables for the throbbing lines
    145  1c57							;
    146  1c57							; Table takes up $18 (24) bytes of ROM
    147  1c57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1c57
    149  1c57				   ThrobGfx
    150  1c57
    151  1c57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1c58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1c59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1c5a
    155  1c5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1c5a
    157  1c5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1c5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1c5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1c5d
    161  1c5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1c5d
    163  1c5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1c5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1c5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1c60
    167  1c60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1c60
    169  1c60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1c61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1c62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1c63
    173  1c63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1c63
    175  1c63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1c64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1c65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1c66
    179  1c66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1c66
    181  1c66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1c67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1c68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1c69
    185  1c69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1c69
    187  1c69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1c6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1c6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1c6c
    191  1c6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1c6c
    193  1c6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1c6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1c6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1c6f
    197  1c6f
    198  1c6f
    199  1c6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1c6f							; Health Graphics
    201  1c6f							;
    202  1c6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1c6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1c6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1c6f							; the graphics for the lower right are flipped.
    206  1c6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1c6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1c6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1c6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1c6f							; LOWER 4 lines of graphics (also upside-down).
    211  1c6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1c6f							; health graphics drawn with the playfield.
    213  1c6f							;
    214  1c6f							; Table takes up $45 (69) bytes of ROM
    215  1c6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1c6f
    217  1c6f				   HealthTopGfx
    218  1c6f
    219  1c6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1c70		       43		      .byte.b	%01000011
    221  1c71		       44		      .byte.b	%01000100
    222  1c72		       48		      .byte.b	%01001000
    223  1c73		       30		      .byte.b	%00110000
    224  1c74
    225  1c74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1c74				   HealthLeftGfx
    227  1c74
    228  1c74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1c75		       8c		      .byte.b	%10001100
    230  1c76		       84		      .byte.b	%10000100
    231  1c77		       80		      .byte.b	%10000000
    232  1c78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1c79		       20		      .byte.b	%00100000
    234  1c7a		       47		      .byte.b	%01000111
    235  1c7b		       84		      .byte.b	%10000100
    236  1c7c
    237  1c7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1c7c
    239  1c7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1c7d		       8c		      .byte.b	%10001100
    241  1c7e		       84		      .byte.b	%10000100
    242  1c7f		       80		      .byte.b	%10000000
    243  1c80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1c81		       20		      .byte.b	%00100000
    245  1c82		       47		      .byte.b	%01000111
    246  1c83		       80		      .byte.b	%10000000
    247  1c84
    248  1c84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1c84
    250  1c84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1c85		       8c		      .byte.b	%10001100
    252  1c86		       84		      .byte.b	%10000100
    253  1c87		       80		      .byte.b	%10000000
    254  1c88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1c89		       20		      .byte.b	%00100000
    256  1c8a		       44		      .byte.b	%01000100
    257  1c8b		       87		      .byte.b	%10000111
    258  1c8c
    259  1c8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1c8c
    261  1c8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1c8d		       9c		      .byte.b	%10011100
    263  1c8e		       80		      .byte.b	%10000000
    264  1c8f		       80		      .byte.b	%10000000
    265  1c90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1c91		       20		      .byte.b	%00100000
    267  1c92		       46		      .byte.b	%01000110
    268  1c93		       81		      .byte.b	%10000001
    269  1c94
    270  1c94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1c94				   HealthRightGfx
    272  1c94
    273  1c94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1c95		       9a		      .byte.b	%10011010
    275  1c96		       90		      .byte.b	%10010000
    276  1c97		       80		      .byte.b	%10000000
    277  1c98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1c99		       20		      .byte.b	%00100000
    279  1c9a		       4f		      .byte.b	%01001111
    280  1c9b		       89		      .byte.b	%10001001
    281  1c9c
    282  1c9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1c9c
    284  1c9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1c9d		       9a		      .byte.b	%10011010
    286  1c9e		       90		      .byte.b	%10010000
    287  1c9f		       80		      .byte.b	%10000000
    288  1ca0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ca1		       20		      .byte.b	%00100000
    290  1ca2		       4f		      .byte.b	%01001111
    291  1ca3		       80		      .byte.b	%10000000
    292  1ca4
    293  1ca4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ca4
    295  1ca4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ca5		       9a		      .byte.b	%10011010
    297  1ca6		       88		      .byte.b	%10001000
    298  1ca7		       80		      .byte.b	%10000000
    299  1ca8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ca9		       20		      .byte.b	%00100000
    301  1caa		       48		      .byte.b	%01001000
    302  1cab		       8f		      .byte.b	%10001111
    303  1cac
    304  1cac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1cac
    306  1cac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1cad		       ba		      .byte.b	%10111010
    308  1cae		       80		      .byte.b	%10000000
    309  1caf		       80		      .byte.b	%10000000
    310  1cb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1cb1		       20		      .byte.b	%00100000
    312  1cb2		       4c		      .byte.b	%01001100
    313  1cb3		       83		      .byte.b	%10000011
    314  1cb4
    315  1cb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1cb4
    317  1cb4							; 3 bytes left in this page
    318  1cb4
    319  1d00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1d00
    321  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1d00				   HealthBgGfx
    323  1d00							; 13 bytes
    324  1d00
    325  1d00		       00		      .byte.b	%00000000
    326  1d01		       3e		      .byte.b	%00111110
    327  1d02		       7f		      .byte.b	%01111111
    328  1d03		       7f		      .byte.b	%01111111
    329  1d04		       7f		      .byte.b	%01111111
    330  1d05		       7f		      .byte.b	%01111111
    331  1d06		       7f		      .byte.b	%01111111
    332  1d07		       7f		      .byte.b	%01111111
    333  1d08		       7f		      .byte.b	%01111111
    334  1d09		       7f		      .byte.b	%01111111
    335  1d0a		       63		      .byte.b	%01100011
    336  1d0b		       63		      .byte.b	%01100011
    337  1d0c		       00		      .byte.b	%00000000
    338  1d0d
    339  1d0d
    340  1d0d
    341  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1d0d							; Progress Bar Graphics
    343  1d0d							;
    344  1d0d							;
    345  1d0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1d0d
    347  1d0d				   PgBarGfx
    348  1d0d							; 9 bytes
    349  1d0d
    350  1d0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1d0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1d0f		       3f		      .byte.b	%00111111
    353  1d10		       1f		      .byte.b	%00011111
    354  1d11		       0f		      .byte.b	%00001111
    355  1d12		       07		      .byte.b	%00000111
    356  1d13		       03		      .byte.b	%00000011
    357  1d14		       01		      .byte.b	%00000001
    358  1d15		       00		      .byte.b	%00000000
    359  1d16
    360  1d16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1d16				   PgBarGfxR
    362  1d16							; 8 bytes
    363  1d16
    364  1d16		       ff		      .byte.b	%11111111	; PF2
    365  1d17		       fe		      .byte.b	%11111110
    366  1d18		       fc		      .byte.b	%11111100
    367  1d19		       f8		      .byte.b	%11111000
    368  1d1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1d1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1d1c		       c0		      .byte.b	%11000000
    371  1d1d		       80		      .byte.b	%10000000
    372  1d1e
    373  1d1e
    374  1d1e
    375  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1d1e							; Cat Rainbow Graphics
    377  1d1e							;
    378  1d1e							;
    379  1d1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1d1e
    381  1d1e				   RainbowGfx
    382  1d1e							; 4 bytes
    383  1d1e
    384  1d1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1d1f
    386  1d1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1d20
    388  1d20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1d21
    390  1d21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1d22
    392  1e00		       00 00 00 00*	      ALIGN	$100
    393  1e00
    394  1e00				   FoodGfx
    395  1e00
    396  1e00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1e00							; 0 - blank
    398  1e00
    399  1e00		       01		      .byte.b	%00000001
    400  1e01		       80		      .byte.b	%10000000
    401  1e02		       01		      .byte.b	%00000001
    402  1e03		       80		      .byte.b	%10000000
    403  1e04		       01		      .byte.b	%00000001
    404  1e05		       80		      .byte.b	%10000000
    405  1e06		       01		      .byte.b	%00000001
    406  1e07		       80		      .byte.b	%10000000
    407  1e08		       01		      .byte.b	%00000001
    408  1e09		       80		      .byte.b	%10000000
    409  1e0a		       01		      .byte.b	%00000001
    410  1e0b		       80		      .byte.b	%10000000
    411  1e0c		       01		      .byte.b	%00000001
    412  1e0d		       80		      .byte.b	%10000000
    413  1e0e
    414  1e0e		       00		      .byte.b	0
    415  1e0f		       00		      .byte.b	$00
    416  1e10
    417  1e10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1e10							; 1 - apple
    419  1e10
    420  1e10		       34		      .byte.b	%00110100
    421  1e11		       7e		      .byte.b	%01111110
    422  1e12		       7e		      .byte.b	%01111110
    423  1e13		       ff		      .byte.b	%11111111
    424  1e14		       ff		      .byte.b	%11111111
    425  1e15		       ff		      .byte.b	%11111111
    426  1e16		       ff		      .byte.b	%11111111
    427  1e17		       ff		      .byte.b	%11111111
    428  1e18		       ff		      .byte.b	%11111111
    429  1e19		       7f		      .byte.b	%01111111
    430  1e1a		       6a		      .byte.b	%01101010
    431  1e1b		       08		      .byte.b	%00001000
    432  1e1c		       0c		      .byte.b	%00001100
    433  1e1d		       04		      .byte.b	%00000100
    434  1e1e
    435  1e1e		       00		      .byte.b	0
    436  1e1f		       46		      .byte.b	$46
    437  1e20
    438  1e20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1e20							; 2 - peach
    440  1e20
    441  1e20		       3c		      .byte.b	%00111100
    442  1e21		       6e		      .byte.b	%01101110
    443  1e22		       6e		      .byte.b	%01101110
    444  1e23		       df		      .byte.b	%11011111
    445  1e24		       df		      .byte.b	%11011111
    446  1e25		       bf		      .byte.b	%10111111
    447  1e26		       bf		      .byte.b	%10111111
    448  1e27		       bf		      .byte.b	%10111111
    449  1e28		       de		      .byte.b	%11011110
    450  1e29		       5e		      .byte.b	%01011110
    451  1e2a		       6c		      .byte.b	%01101100
    452  1e2b		       18		      .byte.b	%00011000
    453  1e2c		       10		      .byte.b	%00010000
    454  1e2d		       30		      .byte.b	%00110000
    455  1e2e
    456  1e2e		       00		      .byte.b	0
    457  1e2f		       3a		      .byte.b	$3A
    458  1e30
    459  1e30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1e30							; 3 - banana
    461  1e30
    462  1e30		       38		      .byte.b	%00111000
    463  1e31		       7c		      .byte.b	%01111100
    464  1e32		       fe		      .byte.b	%11111110
    465  1e33		       fe		      .byte.b	%11111110
    466  1e34		       ff		      .byte.b	%11111111
    467  1e35		       ff		      .byte.b	%11111111
    468  1e36		       8f		      .byte.b	%10001111
    469  1e37		       07		      .byte.b	%00000111
    470  1e38		       07		      .byte.b	%00000111
    471  1e39		       03		      .byte.b	%00000011
    472  1e3a		       03		      .byte.b	%00000011
    473  1e3b		       02		      .byte.b	%00000010
    474  1e3c		       06		      .byte.b	%00000110
    475  1e3d		       06		      .byte.b	%00000110
    476  1e3e
    477  1e3e		       00		      .byte.b	0
    478  1e3f		       1e		      .byte.b	$1E
    479  1e40
    480  1e40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1e40							; 4 - pear
    482  1e40
    483  1e40		       38		      .byte.b	%00111000
    484  1e41		       7c		      .byte.b	%01111100
    485  1e42		       fe		      .byte.b	%11111110
    486  1e43		       fe		      .byte.b	%11111110
    487  1e44		       fe		      .byte.b	%11111110
    488  1e45		       fe		      .byte.b	%11111110
    489  1e46		       7c		      .byte.b	%01111100
    490  1e47		       7c		      .byte.b	%01111100
    491  1e48		       38		      .byte.b	%00111000
    492  1e49		       38		      .byte.b	%00111000
    493  1e4a		       30		      .byte.b	%00110000
    494  1e4b		       10		      .byte.b	%00010000
    495  1e4c		       18		      .byte.b	%00011000
    496  1e4d		       08		      .byte.b	%00001000
    497  1e4e
    498  1e4e		       00		      .byte.b	0
    499  1e4f		       cc		      .byte.b	$CC
    500  1e50
    501  1e50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1e50							; 5 - plum
    503  1e50
    504  1e50		       38		      .byte.b	%00111000
    505  1e51		       6c		      .byte.b	%01101100
    506  1e52		       6e		      .byte.b	%01101110
    507  1e53		       de		      .byte.b	%11011110
    508  1e54		       df		      .byte.b	%11011111
    509  1e55		       bf		      .byte.b	%10111111
    510  1e56		       bf		      .byte.b	%10111111
    511  1e57		       bf		      .byte.b	%10111111
    512  1e58		       de		      .byte.b	%11011110
    513  1e59		       de		      .byte.b	%11011110
    514  1e5a		       5e		      .byte.b	%01011110
    515  1e5b		       3c		      .byte.b	%00111100
    516  1e5c		       20		      .byte.b	%00100000
    517  1e5d		       60		      .byte.b	%01100000
    518  1e5e
    519  1e5e		       00		      .byte.b	0
    520  1e5f		       88		      .byte.b	$88
    521  1e60
    522  1e60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1e60							; 6 - grapes
    524  1e60
    525  1e60		       18		      .byte.b	%00011000
    526  1e61		       08		      .byte.b	%00001000
    527  1e62		       36		      .byte.b	%00110110
    528  1e63		       12		      .byte.b	%00010010
    529  1e64		       6c		      .byte.b	%01101100
    530  1e65		       24		      .byte.b	%00100100
    531  1e66		       db		      .byte.b	%11011011
    532  1e67		       49		      .byte.b	%01001001
    533  1e68		       36		      .byte.b	%00110110
    534  1e69		       12		      .byte.b	%00010010
    535  1e6a		       6c		      .byte.b	%01101100
    536  1e6b		       34		      .byte.b	%00110100
    537  1e6c		       10		      .byte.b	%00010000
    538  1e6d		       18		      .byte.b	%00011000
    539  1e6e
    540  1e6e		       00		      .byte.b	0
    541  1e6f		       64		      .byte.b	$64
    542  1e70
    543  1e70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1e70							; 7 - broccoli
    545  1e70
    546  1e70		       18		      .byte.b	%00011000
    547  1e71		       18		      .byte.b	%00011000
    548  1e72		       1c		      .byte.b	%00011100
    549  1e73		       3e		      .byte.b	%00111110
    550  1e74		       2a		      .byte.b	%00101010
    551  1e75		       12		      .byte.b	%00010010
    552  1e76		       2a		      .byte.b	%00101010
    553  1e77		       54		      .byte.b	%01010100
    554  1e78		       aa		      .byte.b	%10101010
    555  1e79		       55		      .byte.b	%01010101
    556  1e7a		       aa		      .byte.b	%10101010
    557  1e7b		       55		      .byte.b	%01010101
    558  1e7c		       2a		      .byte.b	%00101010
    559  1e7d		       04		      .byte.b	%00000100
    560  1e7e
    561  1e7e		       00		      .byte.b	0
    562  1e7f		       c7		      .byte.b	$C7
    563  1e80
    564  1e80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1e80							; 8 - cabbage
    566  1e80
    567  1e80		       18		      .byte.b	%00011000
    568  1e81		       76		      .byte.b	%01110110
    569  1e82		       76		      .byte.b	%01110110
    570  1e83		       7a		      .byte.b	%01111010
    571  1e84		       f9		      .byte.b	%11111001
    572  1e85		       fb		      .byte.b	%11111011
    573  1e86		       ed		      .byte.b	%11101101
    574  1e87		       db		      .byte.b	%11011011
    575  1e88		       fb		      .byte.b	%11111011
    576  1e89		       e9		      .byte.b	%11101001
    577  1e8a		       56		      .byte.b	%01010110
    578  1e8b		       76		      .byte.b	%01110110
    579  1e8c		       6e		      .byte.b	%01101110
    580  1e8d		       18		      .byte.b	%00011000
    581  1e8e
    582  1e8e		       00		      .byte.b	0
    583  1e8f		       da		      .byte.b	$DA
    584  1e90
    585  1e90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1e90							; 9 - celery
    587  1e90
    588  1e90		       c0		      .byte.b	%11000000
    589  1e91		       e0		      .byte.b	%11100000
    590  1e92		       70		      .byte.b	%01110000
    591  1e93		       30		      .byte.b	%00110000
    592  1e94		       18		      .byte.b	%00011000
    593  1e95		       18		      .byte.b	%00011000
    594  1e96		       0c		      .byte.b	%00001100
    595  1e97		       0c		      .byte.b	%00001100
    596  1e98		       0e		      .byte.b	%00001110
    597  1e99		       06		      .byte.b	%00000110
    598  1e9a		       0d		      .byte.b	%00001101
    599  1e9b		       0b		      .byte.b	%00001011
    600  1e9c		       0d		      .byte.b	%00001101
    601  1e9d		       06		      .byte.b	%00000110
    602  1e9e
    603  1e9e		       00		      .byte.b	0
    604  1e9f		       d6		      .byte.b	$D6
    605  1ea0
    606  1ea0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1ea0							; A - green pepper
    608  1ea0
    609  1ea0		       6c		      .byte.b	%01101100
    610  1ea1		       6c		      .byte.b	%01101100
    611  1ea2		       fe		      .byte.b	%11111110
    612  1ea3		       fe		      .byte.b	%11111110
    613  1ea4		       f6		      .byte.b	%11110110
    614  1ea5		       f6		      .byte.b	%11110110
    615  1ea6		       f6		      .byte.b	%11110110
    616  1ea7		       f6		      .byte.b	%11110110
    617  1ea8		       f6		      .byte.b	%11110110
    618  1ea9		       ec		      .byte.b	%11101100
    619  1eaa		       7c		      .byte.b	%01111100
    620  1eab		       10		      .byte.b	%00010000
    621  1eac		       18		      .byte.b	%00011000
    622  1ead		       08		      .byte.b	%00001000
    623  1eae
    624  1eae		       00		      .byte.b	0
    625  1eaf		       c8		      .byte.b	$C8
    626  1eb0
    627  1eb0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1eb0							; B - pumpkin
    629  1eb0
    630  1eb0		       3c		      .byte.b	%00111100
    631  1eb1		       56		      .byte.b	%01010110
    632  1eb2		       b7		      .byte.b	%10110111
    633  1eb3		       ad		      .byte.b	%10101101
    634  1eb4		       ad		      .byte.b	%10101101
    635  1eb5		       ad		      .byte.b	%10101101
    636  1eb6		       ad		      .byte.b	%10101101
    637  1eb7		       ad		      .byte.b	%10101101
    638  1eb8		       b7		      .byte.b	%10110111
    639  1eb9		       56		      .byte.b	%01010110
    640  1eba		       3c		      .byte.b	%00111100
    641  1ebb		       18		      .byte.b	%00011000
    642  1ebc		       0c		      .byte.b	%00001100
    643  1ebd		       0c		      .byte.b	%00001100
    644  1ebe
    645  1ebe		       00		      .byte.b	0
    646  1ebf		       2a		      .byte.b	$2A
    647  1ec0
    648  1ec0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1ec0							; C - mushroom
    650  1ec0
    651  1ec0		       18		      .byte.b	%00011000
    652  1ec1		       3c		      .byte.b	%00111100
    653  1ec2		       24		      .byte.b	%00100100
    654  1ec3		       24		      .byte.b	%00100100
    655  1ec4		       24		      .byte.b	%00100100
    656  1ec5		       66		      .byte.b	%01100110
    657  1ec6		       a5		      .byte.b	%10100101
    658  1ec7		       99		      .byte.b	%10011001
    659  1ec8		       e7		      .byte.b	%11100111
    660  1ec9		       ff		      .byte.b	%11111111
    661  1eca		       5a		      .byte.b	%01011010
    662  1ecb		       76		      .byte.b	%01110110
    663  1ecc		       3c		      .byte.b	%00111100
    664  1ecd		       18		      .byte.b	%00011000
    665  1ece
    666  1ece		       00		      .byte.b	0
    667  1ecf		       08		      .byte.b	$08
    668  1ed0
    669  1ed0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1ed0							; D - key
    671  1ed0
    672  1ed0		       10		      .byte.b	%00010000
    673  1ed1		       1e		      .byte.b	%00011110
    674  1ed2		       1e		      .byte.b	%00011110
    675  1ed3		       18		      .byte.b	%00011000
    676  1ed4		       1e		      .byte.b	%00011110
    677  1ed5		       1e		      .byte.b	%00011110
    678  1ed6		       10		      .byte.b	%00010000
    679  1ed7		       10		      .byte.b	%00010000
    680  1ed8		       10		      .byte.b	%00010000
    681  1ed9		       10		      .byte.b	%00010000
    682  1eda		       38		      .byte.b	%00111000
    683  1edb		       6c		      .byte.b	%01101100
    684  1edc		       6c		      .byte.b	%01101100
    685  1edd		       38		      .byte.b	%00111000
    686  1ede
    687  1ede		       00		      .byte.b	0
    688  1edf		       2c		      .byte.b	$2C
    689  1ee0
    690  1ee0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1ee0							; E - ring
    692  1ee0
    693  1ee0		       00		      .byte.b	%00000000
    694  1ee1		       18		      .byte.b	%00011000
    695  1ee2		       3c		      .byte.b	%00111100
    696  1ee3		       66		      .byte.b	%01100110
    697  1ee4		       42		      .byte.b	%01000010
    698  1ee5		       42		      .byte.b	%01000010
    699  1ee6		       42		      .byte.b	%01000010
    700  1ee7		       66		      .byte.b	%01100110
    701  1ee8		       3c		      .byte.b	%00111100
    702  1ee9		       18		      .byte.b	%00011000
    703  1eea		       18		      .byte.b	%00011000
    704  1eeb		       2c		      .byte.b	%00101100
    705  1eec		       18		      .byte.b	%00011000
    706  1eed		       00		      .byte.b	%00000000
    707  1eee
    708  1eee		       00		      .byte.b	0
    709  1eef		       2c		      .byte.b	$2C
    710  1ef0
    711  1ef0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1ef0							; F - heart
    713  1ef0
    714  1ef0		       00		      .byte.b	%00000000
    715  1ef1		       18		      .byte.b	%00011000
    716  1ef2		       18		      .byte.b	%00011000
    717  1ef3		       3c		      .byte.b	%00111100
    718  1ef4		       3c		      .byte.b	%00111100
    719  1ef5		       7e		      .byte.b	%01111110
    720  1ef6		       7e		      .byte.b	%01111110
    721  1ef7		       ff		      .byte.b	%11111111
    722  1ef8		       ff		      .byte.b	%11111111
    723  1ef9		       ff		      .byte.b	%11111111
    724  1efa		       e7		      .byte.b	%11100111
    725  1efb		       e7		      .byte.b	%11100111
    726  1efc		       42		      .byte.b	%01000010
    727  1efd		       00		      .byte.b	%00000000
    728  1efe
    729  1efe		       00		      .byte.b	0
    730  1eff		       4a		      .byte.b	$4A
    731  1f00
    732  1f00				   RainbowColors
    733  1f00
    734  1f00		       64		      .byte.b	$64
    735  1f01		       88		      .byte.b	$88
    736  1f02		       c8		      .byte.b	$C8
    737  1f03		       1e		      .byte.b	$1E
    738  1f04		       28		      .byte.b	$28
    739  1f05		       44		      .byte.b	$44
    740  1f06
    741  1f06				   CatTartGfx
    742  1f06
    743  1f06		       00 00 00 00*	      ds	18, $00
    744  1f18
    745  1f18		       00		      .byte.b	%00000000
    746  1f19		       00		      .byte.b	%00000000
    747  1f1a		       e0		      .byte.b	%11100000
    748  1f1b		       c0		      .byte.b	%11000000
    749  1f1c		       c0		      .byte.b	%11000000
    750  1f1d		       c0		      .byte.b	%11000000
    751  1f1e		       c0		      .byte.b	%11000000
    752  1f1f		       c0		      .byte.b	%11000000
    753  1f20		       c0		      .byte.b	%11000000
    754  1f21		       e0		      .byte.b	%11100000
    755  1f22		       e0		      .byte.b	%11100000
    756  1f23		       e0		      .byte.b	%11100000
    757  1f24		       e0		      .byte.b	%11100000
    758  1f25		       e0		      .byte.b	%11100000
    759  1f26		       e0		      .byte.b	%11100000
    760  1f27		       e0		      .byte.b	%11100000
    761  1f28
    762  1f28				   CatFaceGfx
    763  1f28
    764  1f28		       00 00 00 00*	      ds	18, $00
    765  1f3a
    766  1f3a		       36		      .byte.b	%00110110
    767  1f3b		       36		      .byte.b	%00110110
    768  1f3c		       00		      .byte.b	%00000000
    769  1f3d		       7e		      .byte.b	%01111110
    770  1f3e		       c1		      .byte.b	%11000001
    771  1f3f		       d5		      .byte.b	%11010101
    772  1f40		       ff		      .byte.b	%11111111
    773  1f41		       d5		      .byte.b	%11010101
    774  1f42		       dd		      .byte.b	%11011101
    775  1f43		       ff		      .byte.b	%11111111
    776  1f44		       66		      .byte.b	%01100110
    777  1f45		       66		      .byte.b	%01100110
    778  1f46		       42		      .byte.b	%01000010
    779  1f47		       00		      .byte.b	%00000000
    780  1f48
    781  1f48		       00 00 00 00*	      ds	19, $00
    782  1f5b
    783  1f5b
    784  1f5b
    785  1f5b				   RowPosition
    786  1f5b		       00		      .byte.b	0
    787  1f5c		       13		      .byte.b	19
    788  1f5d		       26		      .byte.b	38
    789  1f5e		       39		      .byte.b	57
    790  1f5f		       4c		      .byte.b	76
    791  1f60		       5f		      .byte.b	95
    792  1f61		       72		      .byte.b	114
------- FILE bank2.asm
     12  1f62
      0  1f62					      END_BANK	2
      1  1ffa					      ORG	[2 - 1] * $1000 + $0FFA
      2  1ffa
      3  1ffa		       00 10		      .word.w	JmpInitSystem
      4  1ffc		       00 10		      .word.w	JmpInitSystem
      5  1ffe		       00 10		      .word.w	JmpInitSystem
      6  2000
------- FILE main.asm
------- FILE bank3.asm LEVEL 2 PASS 2
      0  2000					      include	bank3.asm
      1  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000							; Bank 3
      3  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  2000
      0  2000					      START_BANK	3
      1  3000 ????				      SEG	BANK_3
      2  2000					      ORG	[3 - 1] * $1000
      3  2000					      RORG	$1000
      4  2000					      SUBROUTINE
      5  2000
      6  2000				   JmpInitSystem
      7  2000		       0c f6 1f 	      nop	SelectBank1
      8  2003		       4c 12 10 	      jmp	InitSystem
      9  2006				   JmpMenuOverScan
     10  2006		       0c f6 1f 	      nop	SelectBank1
     11  2009		       4c 1d 10 	      jmp	MenuOverScan
     12  200c				   JmpGamePlay
     13  200c		       0c f7 1f 	      nop	SelectBank2
     14  200f		       4c 12 10 	      jmp	SystemClear
     15  2012
      6  2012
      0  2012					      END_BANK	3
      1  2ffa					      ORG	[3 - 1] * $1000 + $0FFA
      2  2ffa
      3  2ffa		       00 10		      .word.w	JmpInitSystem
      4  2ffc		       00 10		      .word.w	JmpInitSystem
      5  2ffe		       00 10		      .word.w	JmpInitSystem
      6  3000
------- FILE main.asm
------- FILE bank4.asm LEVEL 2 PASS 2
      0  3000					      include	bank4.asm
      1  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  3000							; Bank 4
      3  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  3000
      0  3000					      START_BANK	4
      1  4000 ????				      SEG	BANK_4
      2  3000					      ORG	[4 - 1] * $1000
      3  3000					      RORG	$1000
      4  3000					      SUBROUTINE
      5  3000
      6  3000				   JmpInitSystem
      7  3000		       0c f6 1f 	      nop	SelectBank1
      8  3003		       4c 12 10 	      jmp	InitSystem
      9  3006				   JmpMenuOverScan
     10  3006		       0c f6 1f 	      nop	SelectBank1
     11  3009		       4c 1d 10 	      jmp	MenuOverScan
     12  300c				   JmpGamePlay
     13  300c		       0c f7 1f 	      nop	SelectBank2
     14  300f		       4c 12 10 	      jmp	SystemClear
     15  3012
      6  3012
      0  3012					      END_BANK	4
      1  3ffa					      ORG	[4 - 1] * $1000 + $0FFA
      2  3ffa
      3  3ffa		       00 10		      .word.w	JmpInitSystem
      4  3ffc		       00 10		      .word.w	JmpInitSystem
      5  3ffe		       00 10		      .word.w	JmpInitSystem
      6  4000
------- FILE main.asm
