------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 01-11-2018 Version 2.8
     12  2000 ????						;
     13  2000 ????						; Another code cleanup phase
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialize
     20  2000 ????						;
     21  2000 ????						; Include headers, set address of binary, and initialize game
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????
     26  2000 ????				      PROCESSOR	6502
     27  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     30  0000 ????
     31  0000 ????						; Include TIA/program equates, RAM labels, and macros
     32  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;	lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;	sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copy spacing values
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size values
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
    100  0000 ????
    101  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00de ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame modulus 256
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score and level counter - 6 bytes
     16 U0081
     17 U0081				   BCDScore		; 3-byte array for score value which will be stored as a
     18 U0081		       00 00 00 	      ds	3	; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084				   BCDScoreAdd		; 2-byte array for the value to be added to the score
     22 U0084		       00 00		      ds	2	; on the next frame (max of 9,999)
     23 U0086
     24 U0086				   BCDLevel		; value for the current level which will be stored as a
     25 U0086		       00		      ds	1	; BCD encoded 2-digit number and used to control the
     26 U0087							; level counter display
     27 U0087
     28 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29 U0087							; Variable game colors - 3 bytes
     30 U0087
     31 U0087		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     32 U0088		       00	   PgBarColor ds	1	; color for full part of progress bar
     33 U0089		       00	   CatTartColor ds	1	; color of the cat's tart body
     34 U008a
     35 U008a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     36 U008a							; Variables for the progress bar and health display - 7 bytes
     37 U008a
     38 U008a				   Progress		; value for level progress, which can be
     39 U008a		       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     40 U008b
     41 U008b				   Health		; amount of health
     42 U008b		       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     43 U008c
     44 U008c				   ProgressBar		; array of 5 values to be written to the playfield
     45 U008c		       00 00 00 00*	      ds	5	; registers when drawing progress bar
     46 U0091
     47 U0091							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48 U0091							; Pointers - 14 bytes
     49 U0091
     50 U0091				   FoodGfxPtr1		; pointer for 1st food item's graphics
     51 U0091				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     52 U0091		       00 00		      ds	2
     53 U0093
     54 U0093				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     55 U0093				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     56 U0093		       00 00		      ds	2
     57 U0095
     58 U0095				   TartGfxPtr1		; pointer for the tart graphics
     59 U0095				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     60 U0095		       00 00		      ds	2
     61 U0097
     62 U0097				   CatGfxPtr1		; pointer for the cat face/paws graphics
     63 U0097				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     64 U0097		       00 00		      ds	2
     65 U0099
     66 U0099				   TartGfxPtr2		; pointer for the tart graphics
     67 U0099				   HthGfxLPtr		; pointer for left half of the health graphics
     68 U0099				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     69 U0099		       00 00		      ds	2
     70 U009b
     71 U009b				   CatGfxPtr2		; pointer for the cat face/paws graphics
     72 U009b				   HthGfxRPtr		; pointer for right half of the health graphics
     73 U009b				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     74 U009b		       00 00		      ds	2
     75 U009d
     76 U009d				   ThrobPtr		; pointer for loading the throb colors
     77 U009d				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     78 U009d		       00 00		      ds	2
     79 U009f
     80 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     81 U009f							; Variables used when drawing the cat - 5 bytes
     82 U009f
     83 U009f				   CatPosY		; number of scanlines to skip before drawing cat
     84 U009f		       00		      ds	1
     85 U00a0				   CatPosition		; data describing the cat's position
     86 U00a0		       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     87 U00a1							; bits 4-0 store the number of scanlines to skip after
     88 U00a1							; top of the cat's row before drawing the cat, from 0-18
     89 U00a1
     90 U00a1				   Rainbow		; PF0 value for the rainbow graphics
     91 U00a1				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     92 U00a1		       00		      ds	1
     93 U00a2
     94 U00a2				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     95 U00a2				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
     96 U00a2		       00		      ds	1
     97 U00a3
     98 U00a3				   PreCatRows		; number of rows to draw before the two "cat" rows
     99 U00a3		       00		      ds	1
    100 U00a4
    101 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    102 U00a4							; Variables used for the food items - 21 bytes
    103 U00a4
    104 U00a4				   FoodItemL		; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    105 U00a4		       00 00 00 00*	      ds	7	; will be drawn on each frame. The first 7 bytes are for
    106 U00ab				   FoodItemR		; the left items, last 7 bytes are for the right items.
    107 U00ab		       00 00 00 00*	      ds	7	; Hi nybble holds the value (0-15) of the item to draw.
    108 U00b2							; Lo nybble holds the value of next frame's item.
    109 U00b2							; All nybbles are swapped at the start of each frame.
    110 U00b2
    111 U00b2				   FoodPosX		; (range 0-88)
    112 U00b2		       00 00 00 00*	      ds	7
    113 U00b9
    114 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115 U00b9							; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
    116 U00b9
    117 U00b9
    118 U00b9				   CatRowHmove		; array of 3 values to store to HMP1 before strobing
    119 U00b9		       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
    120 U00bc
    121 U00bc				   CatRow2FoodL 		;
    122 U00bc		       00		      ds	1	;
    123 U00bd				   CatRow2FoodR 		;
    124 U00bd		       00		      ds	1	;
    125 U00be
    126 U00be				   CatRow2Color1		;
    127 U00be		       00		      ds	1	;
    128 U00bf				   CatRow2Color2		;
    129 U00bf		       00		      ds	1	;
    130 U00c0
    131 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    132 U00c0							; Variables for the throbbing lines' colors - 4 bytes
    133 U00c0
    134 U00c0		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    135 U00c3							; throbbing lines. The first color is darkest,
    136 U00c3							; the last is brightest.
    137 U00c3
    138 U00c3		       00	   CatThrobPF ds	1
    139 U00c4
    140 U00c4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    141 U00c4							; Temporary variables - 2 bytes
    142 U00c4
    143 U00c4		       00	   Temp       ds	1
    144 U00c5		       00	   TempLoop   ds	1
    145 U00c6
    146 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    147 U00c6							; 69 of 79 non-temporary RAM bytes used (10 left)
    148 U00c6							; last 49 bytes of RAM are used for stack space in the scoreboard display
    149 U00c6
    150 U00c6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    151 U00c6							; Variables which can be shared with the stack - 3 bytes
    152 U00c6
    153 U00c6		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    154 U00c7
    155 U00c7		       00	   FoodColor1 ds	1	; color of the 1st food item
    156 U00c8		       00	   FoodColor2 ds	1	; color of the 2nd food item
    157 U00c9
    158 U00c9							; 7 of 15 available temporary RAM bytes used (8 left)
    159 U00c9							; last 34 bytes of RAM are used to hold the rainbow color graphics
    160 U00c9
    161 U00de					      ORG	$100 - 34
    162 U00de				   RamBowColors
------- FILE main.asm
------- FILE headers/Macros.h LEVEL 2 PASS 2
      0 U00de					      include	headers/Macros.h
      1 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00de							; This macro looks at the background's rainbow color for this scanline,
      3 U00de							; and if it is black, the throb color is instead used.
      4 U00de							; The throb color must be pre-loaded into the X register.
      5 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6 U00de
      7 U00de					      MAC	throb_rainbow_bk
      8 U00de					      SUBROUTINE
      9 U00de				   .X	      SET	{1}
     10 U00de
     11 U00de					      lda	RamBowColors+.X	; 3
     12 U00de					      bne	.Rainbow	; 5/6
     13 U00de
     14 U00de					      stx	COLUBK	; 8
     15 U00de					      beq	.End	; 11
     16 U00de
     17 U00de				   .Rainbow
     18 U00de					      sta	COLUBK	; 9
     19 U00de					      nop		; 11
     20 U00de
     21 U00de				   .End
     22 U00de					      ENDM
     23 U00de
     24 U00de
     25 U00de
     26 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U00de							; This macro looks at the playfield's rainbow color for this scanline,
     28 U00de							; and if it is black, the throb color is instead used.
     29 U00de							; The throb color must be pre-loaded into the X register.
     30 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     31 U00de
     32 U00de					      MAC	throb_rainbow_pf
     33 U00de					      SUBROUTINE
     34 U00de				   .X	      SET	{1}
     35 U00de
     36 U00de					      lda	RamBowColors+.X	; 3
     37 U00de					      bne	.Rainbow	; 5/6
     38 U00de
     39 U00de					      stx	COLUPF	; 8
     40 U00de					      beq	.End	; 11
     41 U00de
     42 U00de				   .Rainbow
     43 U00de					      sta	COLUPF	; 9
     44 U00de					      nop		; 11
     45 U00de
     46 U00de				   .End
     47 U00de					      ENDM
     48 U00de
     49 U00de
     50 U00de
     51 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52 U00de							; This macro simply gives a name to opcode $0C, which is a 4-cycle nop,
     53 U00de							; skipping the next two bytes of ROM.
     54 U00de							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55 U00de
     56 U00de					      MAC	skip_word
     57 U00de
     58 U00de					      HEX	0C
     59 U00de
     60 U00de					      ENDM
------- FILE main.asm
     36 U00de
     37 U00de							; Ensure that the code is placed in the proper place in the binary
     38 U00de
     39  2000 ????				      SEG	CODE
     40  1000					      ORG	$1000	; 4K ROM (for now)
     41  1000
     42  1000							; Clear all system RAM/registers and do any neccesary initialization
     43  1000
------- FILE code/Initialize.asm LEVEL 2 PASS 2
      0  1000					      include	code/Initialize.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Full System Clear
      3  1000							;
      4  1000							; Clear all system registers and RAM at startup
      5  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1000
      7  1000				   SystemClear
      8  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     10  100b
     11  100b
     12  100b
     13  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14  100b							; Set the food items (temporary demo code)
     15  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  100b
     17  100b		       a9 10		      lda	#$10
     18  100d		       85 a4		      sta	FoodItemL+0
     19  100f		       a9 70		      lda	#$70
     20  1011		       85 ab		      sta	FoodItemR+0
     21  1013
     22  1013		       a9 20		      lda	#$20
     23  1015		       85 a5		      sta	FoodItemL+1
     24  1017		       a9 80		      lda	#$80
     25  1019		       85 ac		      sta	FoodItemR+1
     26  101b
     27  101b		       a9 30		      lda	#$30
     28  101d		       85 a6		      sta	FoodItemL+2
     29  101f		       a9 90		      lda	#$90
     30  1021		       85 ad		      sta	FoodItemR+2
     31  1023
     32  1023		       a9 40		      lda	#$40
     33  1025		       85 a7		      sta	FoodItemL+3
     34  1027		       a9 a0		      lda	#$A0
     35  1029		       85 ae		      sta	FoodItemR+3
     36  102b
     37  102b		       a9 50		      lda	#$50
     38  102d		       85 a8		      sta	FoodItemL+4
     39  102f		       a9 b0		      lda	#$B0
     40  1031		       85 af		      sta	FoodItemR+4
     41  1033
     42  1033		       a9 60		      lda	#$60
     43  1035		       85 a9		      sta	FoodItemL+5
     44  1037		       a9 c0		      lda	#$C0
     45  1039		       85 b0		      sta	FoodItemR+5
     46  103b
     47  103b		       a9 d0		      lda	#$D0
     48  103d		       85 aa		      sta	FoodItemL+6
     49  103f		       a9 e0		      lda	#$E0
     50  1041		       85 b1		      sta	FoodItemR+6
------- FILE main.asm
     45  1043
     46  1043
     47  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  1043							; Game Logic
     49  1043							;
     50  1043							; Do the overscan, vertical sync, and vertical blanking,
     51  1043							; along with any game logic
     52  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  1043
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  1043					      include	code/Game Logic/Overscan.asm
      1  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1043							; Overscan
      3  1043							;
      4  1043							; Start the overscan timer and do game logic
      5  1043							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1043
      7  1043				   Overscan
      8  1043
      9  1043		       e6 80		      inc	Frame	; increment the frame number
     10  1045
     11  1045		       a9 23		      lda	#OVERSCAN_TIMER
     12  1047		       85 02		      sta	WSYNC
     13  1049		       8d 96 02 	      sta	TIM64T	; 3
     14  104c
     15  104c
     16  104c
     17  104c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  104c							; Update Score
     19  104c							;
     20  104c							; Add to the score
     21  104c							;
     22  104c							; Takes 45 cycles to complete
     23  104c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  104c
     25  104c		       a5 85		      lda	BCDScoreAdd+1
     26  104e		       a6 84		      ldx	BCDScoreAdd
     27  1050
     28  1050		       f8		      sed
     29  1051
     30  1051		       18		      clc
     31  1052		       85 c4		      sta	Temp
     32  1054		       a5 83		      lda	BCDScore+2
     33  1056		       65 c4		      adc	Temp
     34  1058		       85 83		      sta	BCDScore+2
     35  105a		       86 c4		      stx	Temp
     36  105c		       a5 82		      lda	BCDScore+1
     37  105e		       65 c4		      adc	Temp
     38  1060		       85 82		      sta	BCDScore+1
     39  1062		       a9 00		      lda	#$00
     40  1064		       85 c4		      sta	Temp
     41  1066		       a5 81		      lda	BCDScore+0
     42  1068		       65 c4		      adc	Temp
     43  106a		       85 81		      sta	BCDScore+0
     44  106c
     45  106c		       d8		      cld
     46  106d
     47  106d
     48  106d
     49  106d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  106d							; Finish Overscan
     51  106d							;
     52  106d							; Loop until the end of overscan
     53  106d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  106d
     55  106d				   OverscanTimerLoop
     56  106d		       ad 84 02 	      lda	INTIM
     57  1070		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  1072					      include	code/Game Logic/VerticalSync.asm
      1  1072							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1072							; Vertical Sync
      3  1072							;
      4  1072							; Do the vertical sync and start the vertical blanking timer
      5  1072							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1072
      7  1072		       a9 02		      lda	#2
      8  1074		       85 02		      sta	WSYNC
      9  1076		       85 00		      sta	VSYNC	; enable VSYNC
     10  1078
     11  1078		       85 02		      sta	WSYNC
     12  107a		       a9 2d		      lda	#VBLANK_TIMER
     13  107c		       85 02		      sta	WSYNC
     14  107e		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1081
     16  1081		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  1083		       85 2c		      sta	CXCLR	; clear collision latches
     18  1085
     19  1085		       a9 00		      lda	#0
     20  1087		       85 02		      sta	WSYNC
     21  1089		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  108b					      include	code/Game Logic/VerticalBlank.asm
      1  108b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  108b							; Vertical Blank
      3  108b							;
      4  108b							; Do the vertical blanking and game logic
      5  108b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  108b
      7  108b		       85 2b		      sta	HMCLR
      8  108d		       85 02		      sta	WSYNC
      9  108f
     10  108f		       a9 ff		      lda	#$FF	; 02
     11  1091		       85 23		      sta	HMM1	; 05
     12  1093		       85 8d		      sta	ProgressBar+1	; 08 - reset progress bar byte 1 to %11111111
     13  1095
     14  1095		       a2 10		      ldx	#$10	; 10
     15  1097		       86 21		      stx	HMP1	; 13
     16  1099
     17  1099		       a2 80		      ldx	#$80	; 15
     18  109b		       86 22		      stx	HMM0	; 18
     19  109d
     20  109d		       a2 e0		      ldx	#$E0	; 20
     21  109f		       85 13		      sta	RESM1	; 23
     22  10a1		       86 8c		      stx	ProgressBar+0	; 26 - reset progress bar byte 0 to %11100000
     23  10a3
     24  10a3		       85 14		      sta	RESBL	; 29
     25  10a5
     26  10a5		       85 8e		      sta	ProgressBar+2	; 32 - reset progress bar byte 2 to %11111111
     27  10a7		       85 8f		      sta	ProgressBar+3	; 35 - reset progress bar byte 3 to %11111111
     28  10a9
     29  10a9		       a9 fe		      lda	#$FE	; 37
     30  10ab		       85 90		      sta	ProgressBar+4	; 40 - reset byte 4 for the progress bar
     31  10ad
     32  10ad		       20 24 18 	      jsr	Sleep12	; 52
     33  10b0
     34  10b0		       85 10		      sta	RESP0	; 55
     35  10b2		       85 11		      sta	RESP1	; 58
     36  10b4
      0  10b4					      SLEEP	9	; 67
      1  10b4				   .CYCLES    SET	9
      2  10b4
      3  10b4				  -	      IF	.CYCLES < 2
      4  10b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10b4				  -	      ERR
      6  10b4					      ENDIF
      7  10b4
      8  10b4					      IF	.CYCLES & 1
      9  10b4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10b4		       04 00		      nop	0
     11  10b6				  -	      ELSE
     12  10b6				  -	      bit	VSYNC
     13  10b6					      ENDIF
     14  10b6				   .CYCLES    SET	.CYCLES - 3
     15  10b6					      ENDIF
     16  10b6
     17  10b6					      REPEAT	.CYCLES / 2
     18  10b6		       ea		      nop
     17  10b6					      REPEND
     18  10b7		       ea		      nop
     17  10b7					      REPEND
     18  10b8		       ea		      nop
     19  10b9					      REPEND
     38  10b9
     39  10b9		       85 12		      sta	RESM0	; 70
     40  10bb
     41  10bb		       85 02		      sta	WSYNC
     42  10bd		       85 2a		      sta	HMOVE
     43  10bf
     44  10bf
     45  10bf
     46  10bf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  10bf							; Prepare HMOVE offsets for all scoreboard objects, and
     48  10bf							; reset the progress bar's RAM values to empty. (39 cycles)
     49  10bf
     50  10bf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  10bf							; Prepare for throbbing lines - 43 cycles
     52  10bf
     53  10bf		       a5 80		      lda	Frame	; get the current frame number
     54  10c1		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     55  10c3		       4a		      lsr
     56  10c4		       4a		      lsr		; shift to get a value from 0-7
     57  10c5		       85 c4		      sta	Temp
     58  10c7		       0a		      asl		; carry flag will always be clear after this
     59  10c8		       65 c4		      adc	Temp	; multiply by 3
     60  10ca		       a8		      tay
     61  10cb
     62  10cb		       a5 87		      lda	ScoreColor
     63  10cd		       29 f0		      and	#$F0
     64  10cf		       85 c4		      sta	Temp
     65  10d1
     66  10d1		       b9 57 1b 	      lda	ThrobGfx+0,y
     67  10d4		       0a		      asl
     68  10d5		       90 01		      bcc	.Color0
      0  10d7					      SKIP_WORD
      1  10d7
      2  10d7		       0c		      HEX	0C
      3  10d8
     70  10d8				   .Color0
     71  10d8		       65 c4		      adc	Temp
     72  10da		       85 c0		      sta	ThrobColor+0
     73  10dc
     74  10dc		       b9 58 1b 	      lda	ThrobGfx+1,y
     75  10df		       0a		      asl
     76  10e0		       90 01		      bcc	.Color1
      0  10e2					      SKIP_WORD
      1  10e2
      2  10e2		       0c		      HEX	0C
      3  10e3
     78  10e3				   .Color1
     79  10e3		       65 c4		      adc	Temp
     80  10e5		       85 c1		      sta	ThrobColor+1
     81  10e7
     82  10e7		       b9 59 1b 	      lda	ThrobGfx+2,y
     83  10ea		       0a		      asl
     84  10eb		       90 01		      bcc	.Color2
      0  10ed					      SKIP_WORD
      1  10ed
      2  10ed		       0c		      HEX	0C
      3  10ee
     86  10ee				   .Color2
     87  10ee		       65 c4		      adc	Temp
     88  10f0		       85 c2		      sta	ThrobColor+2
     89  10f2
     90  10f2
     91  10f2
     92  10f2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     93  10f2							; Load Scoreboard
     94  10f2							;
     95  10f2							; Get graphics data for the scoreboard and push it onto the stack
     96  10f2							;
     97  10f2							; Takes 534 cycles to complete (7 full scanlines + 2 cycles)
     98  10f2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10f2
    100  10f2					      SUBROUTINE
    101  10f2
    102  10f2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103  10f2							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
    104  10f2
    105  10f2		       a9 1b		      lda	#>ScoreGfx
    106  10f4		       85 92		      sta	LvlLoadPtr+1
    107  10f6		       85 94		      sta	ScrLoadPtr0+1
    108  10f8		       85 96		      sta	ScrLoadPtr1+1
    109  10fa		       85 98		      sta	ScrLoadPtr2+1
    110  10fc		       85 9a		      sta	ScrLoadPtr3+1
    111  10fe		       85 9c		      sta	ScrLoadPtr4+1
    112  1100		       85 9e		      sta	ScrLoadPtr5+1
    113  1102
    114  1102							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115  1102							; Prepare pointer for level digit graphics - 14 cycles
    116  1102
    117  1102		       a5 86		      lda	BCDLevel
    118  1104		       29 0f		      and	#$0F
    119  1106		       0a		      asl
    120  1107		       0a		      asl
    121  1108		       0a		      asl
    122  1109		       85 91		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
    123  110b
    124  110b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    125  110b							; Prepare pointers for score digit graphics - 69 cycles
    126  110b
    127  110b		       a7 81		      lax	BCDScore+0
    128  110d		       29 f0		      and	#$F0
    129  110f		       4a		      lsr
    130  1110		       85 93		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
    131  1112
    132  1112		       8a		      txa
    133  1113		       29 0f		      and	#$0F
    134  1115		       0a		      asl
    135  1116		       0a		      asl
    136  1117		       0a		      asl
    137  1118		       85 95		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    138  111a
    139  111a		       a7 82		      lax	BCDScore+1
    140  111c		       29 f0		      and	#$F0
    141  111e		       4a		      lsr
    142  111f		       85 97		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    143  1121
    144  1121		       8a		      txa
    145  1122		       29 0f		      and	#$0F
    146  1124		       0a		      asl
    147  1125		       0a		      asl
    148  1126		       0a		      asl
    149  1127		       85 99		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    150  1129
    151  1129		       a7 83		      lax	BCDScore+2
    152  112b		       29 f0		      and	#$F0
    153  112d		       4a		      lsr
    154  112e		       85 9b		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    155  1130
    156  1130		       8a		      txa
    157  1131		       29 0f		      and	#$0F
    158  1133		       0a		      asl
    159  1134		       0a		      asl
    160  1135		       0a		      asl
    161  1136		       85 9d		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    162  1138
    163  1138							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    164  1138							; Load the stack with the graphics for the scoreboard - 428 cycles
    165  1138
    166  1138		       a0 06		      ldy	#6
    167  113a
    168  113a				   .LoadScoreboard
    169  113a
    170  113a		       b1 9d		      lda	(ScrLoadPtr5),y
    171  113c		       48		      pha
    172  113d		       b1 9b		      lda	(ScrLoadPtr4),y
    173  113f		       48		      pha
    174  1140		       b1 99		      lda	(ScrLoadPtr3),y
    175  1142		       48		      pha
    176  1143		       b1 97		      lda	(ScrLoadPtr2),y
    177  1145		       48		      pha
    178  1146		       b1 95		      lda	(ScrLoadPtr1),y
    179  1148		       48		      pha
    180  1149		       b1 93		      lda	(ScrLoadPtr0),y
    181  114b		       48		      pha
    182  114c		       b1 91		      lda	(LvlLoadPtr),y
    183  114e		       48		      pha
    184  114f
    185  114f		       88		      dey
    186  1150		       10 e8		      bpl	.LoadScoreboard
    187  1152
    188  1152
    189  1152
    190  1152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    191  1152							; Load RAM for progress bar display (28-53 cycles)
    192  1152
    193  1152		       a5 8a		      lda	Progress	; 3 - get amount of progress
    194  1154
    195  1154							; The level progress bar uses the following playfield bits:
    196  1154							; (note that PF0 and PF2 are NOT reversed in this diagram)
    197  1154							;
    198  1154							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    199  1154							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    200  1154							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    201  1154							;
    202  1154							; When the progress bar is empty, every bit labeled "X" above should be
    203  1154							; set (1), and when it is full, every "X" bit should be cleared (0).
    204  1154							; The bits labeled "o" must ALWAYS be cleared.
    205  1154							;
    206  1154							; The leftmost playfield value (the 1st PF0) will be calculated first,
    207  1154							; and then each playfield value to the right until the 2nd PF1
    208  1154							; will be calculated.
    209  1154							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    210  1154		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    211  1156
    212  1156		       38		      sec		; 2
    213  1157		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    214  1159		       30 1e		      bmi	.Underflow1	; 2/3
    215  115b		       84 8c		      sty	ProgressBar	; 3 - this playfield byte is full
    216  115d
    217  115d		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    218  115f		       30 23		      bmi	.Underflow2	; 2/3
    219  1161		       84 8d		      sty	ProgressBar+1	; 3 - this playfield byte is full
    220  1163
    221  1163		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    222  1165		       30 28		      bmi	.Underflow3	; 2/3
    223  1167		       84 8e		      sty	ProgressBar+2	; 3 - this playfield byte is full
    224  1169
    225  1169		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    226  116b		       30 2d		      bmi	.Underflow4	; 2/3
    227  116d		       84 8f		      sty	ProgressBar+3	; 3 - this playfield byte is full
    228  116f
    229  116f		       aa		      tax		; 2
    230  1170		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    231  1173		       0a		      asl		; 2
    232  1174		       85 90		      sta	ProgressBar+4	; 3
    233  1176		       4c a2 11 	      jmp	.Finish	; 3
    234  1179
    235  1179							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    236  1179				   .Underflow1		; for 1st PF0
    237  1179
    238  1179		       69 03		      adc	#3	; 3 - add back the 3
    239  117b		       aa		      tax		; 2
    240  117c		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    241  117f		       85 8c		      sta	ProgressBar	; 3
    242  1181		       4c a2 11 	      jmp	.Finish	; 3
    243  1184
    244  1184							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    245  1184				   .Underflow2		; for 1st PF1
    246  1184
    247  1184		       69 08		      adc	#8	; 3 - add back the 8
    248  1186		       aa		      tax		; 2
    249  1187		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    250  118a		       85 8d		      sta	ProgressBar+1	; 3
    251  118c		       4c a2 11 	      jmp	.Finish	; 3
    252  118f
    253  118f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  118f				   .Underflow3		; for PF2
    255  118f
    256  118f		       69 08		      adc	#8	; 3 - add back the 8
    257  1191		       aa		      tax		; 2
    258  1192		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    259  1195		       85 8e		      sta	ProgressBar+2	; 3
    260  1197		       4c a2 11 	      jmp	.Finish	; 3
    261  119a
    262  119a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    263  119a				   .Underflow4		; for 2nd PF0
    264  119a
    265  119a		       69 04		      adc	#4	; 3 - add back the 4
    266  119c		       aa		      tax		; 2
    267  119d		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    268  11a0		       85 8f		      sta	ProgressBar+3	; 3
    269  11a2
    270  11a2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  11a2				   .Finish
    272  11a2
    273  11a2		       85 2b		      sta	HMCLR
    274  11a4
    275  11a4		       a6 b2		      ldx	FoodPosX
    276  11a6		       ca		      dex
    277  11a7		       10 02		      bpl	.NoReset0
    278  11a9		       a2 58		      ldx	#88
    279  11ab				   .NoReset0
    280  11ab		       86 b2		      stx	FoodPosX+0
    281  11ad
    282  11ad		       8a		      txa
    283  11ae		       38		      sec
    284  11af
    285  11af		       e9 12		      sbc	#18
    286  11b1		       b0 02		      bcs	.NoReset1
    287  11b3		       69 59		      adc	#89
    288  11b5				   .NoReset1
    289  11b5		       85 b3		      sta	FoodPosX+1
    290  11b7
    291  11b7		       e9 34		      sbc	#52
    292  11b9		       b0 02		      bcs	.NoReset2
    293  11bb		       69 59		      adc	#89
    294  11bd				   .NoReset2
    295  11bd		       85 b4		      sta	FoodPosX+2
    296  11bf
    297  11bf		       e9 1b		      sbc	#27
    298  11c1		       b0 02		      bcs	.NoReset3
    299  11c3		       69 59		      adc	#89
    300  11c5				   .NoReset3
    301  11c5		       85 b5		      sta	FoodPosX+3
    302  11c7
    303  11c7		       e9 3f		      sbc	#63
    304  11c9		       b0 02		      bcs	.NoReset4
    305  11cb		       69 59		      adc	#89
    306  11cd				   .NoReset4
    307  11cd		       85 b6		      sta	FoodPosX+4
    308  11cf
    309  11cf		       e9 29		      sbc	#41
    310  11d1		       b0 02		      bcs	.NoReset5
    311  11d3		       69 59		      adc	#89
    312  11d5				   .NoReset5
    313  11d5		       85 b7		      sta	FoodPosX+5
    314  11d7
    315  11d7		       e9 11		      sbc	#17
    316  11d9		       b0 02		      bcs	.NoReset6
    317  11db		       69 59		      adc	#89
    318  11dd				   .NoReset6
    319  11dd		       85 b8		      sta	FoodPosX+6
    320  11df
    321  11df
    322  11df							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    323  11df							; Caclulate cat's position data
    324  11df
    325  11df					      SUBROUTINE
    326  11df
    327  11df		       a6 9f		      ldx	CatPosY
    328  11e1		       e8		      inx
    329  11e2		       e0 73		      cpx	#115
    330  11e4		       d0 02		      bne	.CatY
    331  11e6		       a2 00		      ldx	#0
    332  11e8				   .CatY
    333  11e8		       86 9f		      stx	CatPosY
    334  11ea
    335  11ea		       8a		      txa
    336  11eb
    337  11eb		       a2 00		      ldx	#0
    338  11ed				   .DivideLoop
    339  11ed		       38		      sec
    340  11ee		       e8		      inx
    341  11ef		       e9 13		      sbc	#19
    342  11f1		       90 07		      bcc	.AddBack
    343  11f3
    344  11f3		       e0 05		      cpx	#5
    345  11f5		       d0 f6		      bne	.DivideLoop
    346  11f7		       e8		      inx
    347  11f8		       d0 02		      bne	.SetCatPos
    348  11fa
    349  11fa				   .AddBack
    350  11fa		       69 13		      adc	#19
    351  11fc
    352  11fc				   .SetCatPos
    353  11fc		       85 a0		      sta	CatPosition
    354  11fe
    355  11fe		       8a		      txa
    356  11ff		       0a		      asl
    357  1200		       0a		      asl
    358  1201		       0a		      asl
    359  1202		       0a		      asl
    360  1203		       0a		      asl
    361  1204		       65 a0		      adc	CatPosition
    362  1206		       85 a0		      sta	CatPosition
    363  1208
    364  1208		       ca		      dex
    365  1209		       86 a3		      stx	PreCatRows
    366  120b
    367  120b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    368  120b							; Calculate Hmove offsets for 2nd cat row's food items
    369  120b
    370  120b		       a9 05		      lda	#5
    371  120d		       38		      sec
    372  120e		       e5 a3		      sbc	PreCatRows
    373  1210		       a8		      tay
    374  1211
    375  1211		       b9 a4 00 	      lda	FoodItemL,y
    376  1214		       29 f0		      and	#$F0
    377  1216		       85 bc		      sta	CatRow2FoodL
    378  1218		       aa		      tax
    379  1219		       bd 0f 1d 	      lda	FoodGfx+15,x
    380  121c		       85 be		      sta	CatRow2Color1
    381  121e
    382  121e		       b9 ab 00 	      lda	FoodItemR,y
    383  1221		       29 f0		      and	#$F0
    384  1223		       85 bd		      sta	CatRow2FoodR
    385  1225		       aa		      tax
    386  1226		       bd 0f 1d 	      lda	FoodGfx+15,x
    387  1229		       85 bf		      sta	CatRow2Color2
    388  122b
    389  122b		       b9 b2 00 	      lda	FoodPosX,y
    390  122e		       e9 2c		      sbc	#44
    391  1230		       f0 04		      beq	.Prepare
    392  1232		       90 02		      bcc	.Prepare
    393  1234		       e9 2d		      sbc	#45
    394  1236
    395  1236				   .Prepare
    396  1236		       38		      sec
    397  1237		       e9 01		      sbc	#1
    398  1239
    399  1239		       a2 70		      ldx	#$70
    400  123b		       a0 02		      ldy	#2
    401  123d
    402  123d				   .OffsetLoop
    403  123d		       18		      clc
    404  123e		       69 0f		      adc	#15
    405  1240		       f0 02		      beq	.CalcOffset
    406  1242		       30 0d		      bmi	.MaxOffset
    407  1244
    408  1244				   .CalcOffset
    409  1244		       49 07		      eor	#7
    410  1246		       0a		      asl
    411  1247		       0a		      asl
    412  1248		       0a		      asl
    413  1249		       0a		      asl
    414  124a
    415  124a		       99 b9 00 	      sta	CatRowHmove,y
    416  124d		       a9 00		      lda	#0
    417  124f		       f0 02		      beq	.NextOffset
    418  1251
    419  1251				   .MaxOffset
    420  1251		       96 b9		      stx	CatRowHmove,y
    421  1253
    422  1253				   .NextOffset
    423  1253		       88		      dey
    424  1254		       10 e7		      bpl	.OffsetLoop
    425  1256
    426  1256
    427  1256
    428  1256
    429  1256
    430  1256					      SUBROUTINE
    431  1256
    432  1256
    433  1256
    434  1256
    435  1256
    436  1256
    437  1256		       a9 7a		      lda	#COL_SCORE	; 2
    438  1258		       85 87		      sta	ScoreColor	; 3
    439  125a
    440  125a		       a5 87		      lda	ScoreColor	; 3
    441  125c		       85 06		      sta	COLUP0	; 3 - set color registers
    442  125e		       85 07		      sta	COLUP1	; 3
    443  1260		       85 08		      sta	COLUPF	; 3
    444  1262		       85 09		      sta	COLUBK	; 3
    445  1264
    446  1264		       a5 80		      lda	Frame
    447  1266		       29 0f		      and	#%00001111
    448  1268		       f0 04		      beq	.IncScore
    449  126a		       a9 00		      lda	#0
    450  126c		       f0 02		      beq	.IncSkip
    451  126e				   .IncScore
    452  126e		       a9 89		      lda	#$89
    453  1270				   .IncSkip
    454  1270		       85 85		      sta	BCDScoreAdd+1
    455  1272
    456  1272		       a9 19		      lda	#$19
    457  1274		       85 86		      sta	BCDLevel
    458  1276
    459  1276
    460  1276
    461  1276
    462  1276							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    463  1276							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    464  1276							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    465  1276
    466  1276		       a9 1d		      lda	#>FoodGfx
    467  1278		       85 92		      sta	FoodGfxPtr1+1
    468  127a		       85 94		      sta	FoodGfxPtr2+1
    469  127c
    470  127c		       a9 1e		      lda	#>CatTartGfx
    471  127e		       85 96		      sta	TartGfxPtr1+1
    472  1280		       85 9a		      sta	TartGfxPtr2+1
    473  1282
    474  1282		       a9 1e		      lda	#>CatFaceGfx
    475  1284		       85 98		      sta	CatGfxPtr1+1
    476  1286		       85 9c		      sta	CatGfxPtr2+1
    477  1288
    478  1288		       a5 a0		      lda	CatPosition
    479  128a		       29 1f		      and	#%00011111
    480  128c		       aa		      tax
    481  128d
    482  128d		       18		      clc
    483  128e
    484  128e		       69 06		      adc	#<CatTartGfx
    485  1290		       85 99		      sta	TartGfxPtr2
    486  1292		       69 13		      adc	#19
    487  1294		       85 95		      sta	TartGfxPtr1
    488  1296
    489  1296		       8a		      txa
    490  1297		       69 28		      adc	#<CatFaceGfx
    491  1299		       85 9b		      sta	CatGfxPtr2
    492  129b		       69 13		      adc	#19
    493  129d		       85 97		      sta	CatGfxPtr1
    494  129f
    495  129f		       a9 56		      lda	#$56
    496  12a1		       85 88		      sta	PgBarColor
    497  12a3
    498  12a3		       a9 4a		      lda	#COL_CAT_TART
    499  12a5		       85 89		      sta	CatTartColor
    500  12a7
    501  12a7		       a5 80		      lda	Frame
    502  12a9		       29 08		      and	#%00001000
    503  12ab		       4a		      lsr
    504  12ac		       4a		      lsr
    505  12ad		       4a		      lsr
    506  12ae		       a8		      tay
    507  12af		       b9 1e 1c 	      lda	RainbowGfx,y
    508  12b2		       85 a1		      sta	Rainbow
    509  12b4
    510  12b4
    511  12b4
    512  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    513  12b4							; Prepare for Main Gameplay Kernel
    514  12b4							;
    515  12b4							; Figure out how many rows to draw before and after the two cat rows
    516  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    517  12b4
    518  12b4
    519  12b4
    520  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    521  12b4							; Finish Vertical Blanking
    522  12b4							;
    523  12b4							; Loop until the end of vertical blanking
    524  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  12b4
    526  12b4		       4c 00 13 	      jmp	VblankTimerLoop
    527  12b7
    528  1300		       00 00 00 00*	      ALIGN	$100
    529  1300
    530  1300				   VblankTimerLoop
    531  1300		       ad 84 02 	      lda	INTIM
    532  1303		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     57  1305
     58  1305
     59  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     60  1305							; Kernel
     61  1305							;
     62  1305							; Draw the screen
     63  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     64  1305
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  1305					      include	code/Kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       a9 00		      lda	#0
      6  1307		       85 02		      sta	WSYNC
      7  1309		       85 01		      sta	VBLANK	; enable display
      8  130b
      9  130b							; Include kernel routines
     10  130b
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  130b					      include	code/ScoreboardKernel.asm
      1  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  130b							; Scoreboard Display
      3  130b							;
      4  130b							; Draw the 6-digit score and level counter.
      5  130b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  130b
      7  130b					      SUBROUTINE
      8  130b
      9  130b		       a9 13		      lda	#$13
     10  130d		       85 04		      sta	NUSIZ0
     11  130f
     12  130f		       a9 20		      lda	#%00100000
     13  1311		       85 0d		      sta	PF0
     14  1313
     15  1313		       a9 35		      lda	#%00110101
     16  1315		       85 0a		      sta	CTRLPF
     17  1317
     18  1317		       a5 86		      lda	BCDLevel
     19  1319		       4a		      lsr
     20  131a		       4a		      lsr
     21  131b		       4a		      lsr
     22  131c		       85 1e		      sta	ENAM1
     23  131e		       85 1d		      sta	ENAM0
     24  1320
     25  1320		       a9 00		      lda	#0
     26  1322		       85 06		      sta	COLUP0
     27  1324		       85 07		      sta	COLUP1
     28  1326		       85 1b		      sta	GRP0
     29  1328
     30  1328		       a9 ff		      lda	#$FF
     31  132a		       85 1d		      sta	ENAM0
     32  132c		       85 1f		      sta	ENABL
     33  132e		       85 25		      sta	VDELP0
     34  1330		       85 26		      sta	VDELP1
     35  1332
     36  1332		       a9 08		      lda	#8
     37  1334		       8d 96 02 	      sta	TIM64T
     38  1337		       a0 05		      ldy	#5
     39  1339
     40  1339		       85 02		      sta	WSYNC
     41  133b
     42  133b				   ScoreboardLoop
     43  133b
     44  133b		       b9 50 1b 	      lda	LevelGfx,y	; 04
     45  133e		       8d 05 00 	      sta.w	NUSIZ1	; 08
     46  1341
     47  1341		       68		      pla		; 12
     48  1342		       85 1c		      sta	GRP1	; 15
     49  1344		       68		      pla		; 19
     50  1345		       85 1b		      sta	GRP0	; 22
     51  1347
     52  1347		       68		      pla		; 26
     53  1348		       85 1c		      sta	GRP1	; 29
     54  134a		       68		      pla		; 33
     55  134b		       85 1b		      sta	GRP0	; 36
     56  134d
     57  134d		       a9 03		      lda	#3	; 38
     58  134f		       85 05		      sta	NUSIZ1	; 41
     59  1351
     60  1351		       68		      pla		; 45
     61  1352		       aa		      tax		; 47
     62  1353		       68		      pla		; 51
     63  1354		       a8		      tay		; 53
     64  1355		       68		      pla		; 57
     65  1356
     66  1356		       86 1c		      stx	GRP1	; 60
     67  1358		       84 1b		      sty	GRP0	; 63
     68  135a		       85 1c		      sta	GRP1	; 66
     69  135c		       85 1b		      sta	GRP0	; 69
     70  135e
     71  135e		       ac 84 02 	      ldy	INTIM	; 73
     72  1361		       10 d8		      bpl	ScoreboardLoop	; 00/75
     73  1363
     74  1363
     75  1363		       a9 00		      lda	#0	; 01
     76  1365		       85 1b		      sta	GRP0	; 04
     77  1367		       85 1c		      sta	GRP1	; 07
     78  1369		       85 26		      sta	VDELP1	; 10
     79  136b		       85 25		      sta	VDELP0	; 13
     80  136d		       85 1f		      sta	ENABL	; 16
     81  136f		       85 1d		      sta	ENAM0	; 19
     82  1371		       85 1e		      sta	ENAM1	; 22
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1373					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1373							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1373							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1373							; CPU is at cycle 33
      4  1373
      5  1373							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1373							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1373
      8  1373		       a2 ff		      ldx	#$FF
      9  1375		       9a		      txs
     10  1376
     11  1376		       a0 11		      ldy	#17
     12  1378
     13  1378				   .ClearRainbow
     14  1378
     15  1378		       48		      pha
     16  1379		       48		      pha
     17  137a
     18  137a		       88		      dey
     19  137b		       d0 fb		      bne	.ClearRainbow
     20  137d
     21  137d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  137d							; Load rainbow colors into RAM - 65 cycles
     23  137d
     24  137d		       a9 14		      lda	#20
     25  137f		       e5 a0		      sbc	CatPosition	; carry is assumed to be set
     26  1381		       29 1f		      and	#%00011111
     27  1383		       18		      clc
     28  1384		       69 eb		      adc	#RamBowColors+13
     29  1386		       aa		      tax
     30  1387		       9a		      txs
     31  1388
     32  1388		       a0 05		      ldy	#5
     33  138a
     34  138a				   .LoadRainbow
     35  138a		       b9 00 1e 	      lda	RainbowColors,y
     36  138d		       48		      pha
     37  138e		       48		      pha
     38  138f
     39  138f		       88		      dey
     40  1390		       10 f8		      bpl	.LoadRainbow
     41  1392
     42  1392
     43  1392
     44  1392		       a9 00		      lda	#ONE_COPY
     45  1394		       85 04		      sta	NUSIZ0
     46  1396		       a9 04		      lda	#TWO_WIDE
     47  1398		       85 05		      sta	NUSIZ1
     48  139a
     49  139a		       a9 06		      lda	#6
     50  139c		       85 c6		      sta	CurrentRow
     51  139e
     52  139e		       85 02		      sta	WSYNC
     53  13a0
     54  13a0		       a5 87		      lda	ScoreColor
     55  13a2		       85 09		      sta	COLUBK
     56  13a4
     57  13a4		       a2 dd		      ldx	#GAMEPLAY_STACK
     58  13a6		       9a		      txs
     59  13a7
     60  13a7		       20 50 14 	      jsr	SetFoodPosition
     61  13aa
     62  13aa		       85 02		      sta	WSYNC
     63  13ac
     64  13ac		       4c 00 14 	      jmp	.Align1
     65  13af
     66  1400		       00 00 00 00*	      ALIGN	$100
     67  1400
     68  1400				   .Align1
     69  1400
     70  1400				   PreKernel
     71  1400
     72  1400		       85 02		      sta	WSYNC
     73  1402
     74  1402		       a5 f1		      lda	RamBowColors+19
     75  1404		       d0 02		      bne	.SetCatThrobPF
     76  1406		       a5 c0		      lda	ThrobColor+0
     77  1408				   .SetCatThrobPF
     78  1408		       85 c3		      sta	CatThrobPF
     79  140a
     80  140a		       85 02		      sta	WSYNC
     81  140c
      0  140c					      SLEEP	2
      1  140c				   .CYCLES    SET	2
      2  140c
      3  140c				  -	      IF	.CYCLES < 2
      4  140c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  140c				  -	      ERR
      6  140c					      ENDIF
      7  140c
      8  140c				  -	      IF	.CYCLES & 1
      9  140c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  140c				  -	      nop	0
     11  140c				  -	      ELSE
     12  140c				  -	      bit	VSYNC
     13  140c				  -	      ENDIF
     14  140c				  -.CYCLES    SET	.CYCLES - 3
     15  140c					      ENDIF
     16  140c
     17  140c					      REPEAT	.CYCLES / 2
     18  140c		       ea		      nop
     19  140d					      REPEND
     83  140d		       a9 90		      lda	#$90
     84  140f		       85 20		      sta	HMP0
     85  1411
     86  1411		       a9 01		      lda	#PF_REFLECT	; 09
     87  1413		       85 0a		      sta	CTRLPF	; 12
     88  1415
     89  1415		       a5 a1		      lda	Rainbow	; 15
     90  1417		       85 0d		      sta	PF0	; 18
     91  1419
     92  1419		       a9 09		      lda	#COL_CAT_FACE	; 20
     93  141b		       85 06		      sta	COLUP0	; 23
     94  141d
     95  141d		       a5 aa		      lda	FoodItemL+6	; 26
     96  141f		       85 10		      sta	RESP0	; 29
     97  1421		       29 f0		      and	#$F0	; 31
     98  1423		       85 91		      sta	FoodGfxPtr1	; 34
     99  1425		       aa		      tax		; 36
    100  1426		       bd 0f 1d 	      lda	FoodGfx+15,x	; 40
    101  1429		       85 c7		      sta	FoodColor1	; 43
    102  142b
    103  142b		       a5 b1		      lda	FoodItemR+6	; 46
    104  142d		       29 f0		      and	#$F0	; 48
    105  142f		       85 93		      sta	FoodGfxPtr2	; 51
    106  1431		       aa		      tax		; 53
    107  1432		       bd 0f 1d 	      lda	FoodGfx+15,x	; 57
    108  1435		       85 c8		      sta	FoodColor2	; 60
    109  1437
    110  1437		       a5 b8		      lda	FoodPosX+6	; 63
    111  1439		       85 c4		      sta	Temp	; 66
    112  143b
      0  143b					      SLEEP	4	; 70
      1  143b				   .CYCLES    SET	4
      2  143b
      3  143b				  -	      IF	.CYCLES < 2
      4  143b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  143b				  -	      ERR
      6  143b					      ENDIF
      7  143b
      8  143b				  -	      IF	.CYCLES & 1
      9  143b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  143b				  -	      nop	0
     11  143b				  -	      ELSE
     12  143b				  -	      bit	VSYNC
     13  143b				  -	      ENDIF
     14  143b				  -.CYCLES    SET	.CYCLES - 3
     15  143b					      ENDIF
     16  143b
     17  143b					      REPEAT	.CYCLES / 2
     18  143b		       ea		      nop
     17  143b					      REPEND
     18  143c		       ea		      nop
     19  143d					      REPEND
    114  143d
    115  143d		       85 2a		      sta	HMOVE	; 73
    116  143f
    117  143f		       a5 c1		      lda	ThrobColor+1	; 03
    118  1441		       85 09		      sta	COLUBK	; 06
    119  1443		       85 08		      sta	COLUPF	; 09
    120  1445
    121  1445		       a9 80		      lda	#$80	; 11
    122  1447		       85 20		      sta	HMP0	; 14
    123  1449
    124  1449		       a5 a3		      lda	PreCatRows
    125  144b		       d0 22		      bne	HiRows
    126  144d		       4c d4 14 	      jmp	CatRows
    127  1450
    128  1450							; If any part of the cat needs to be drawn in the top row,
    129  1450							; skip straight to CatRows.
    130  1450
    131  1450
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  1450					      include	code/Gameplay Kernel/HiRows.asm
      1  1450							; Draw all the rows above the cat's two rows
      2  1450
------- FILE subroutines/SetFoodPosition.asm LEVEL 5 PASS 2
      0  1450					      include	subroutines/SetFoodPosition.asm
      1  1450				   SetFoodPosition
      2  1450
      3  1450		       85 02		      sta	WSYNC	; 00
      4  1452
      5  1452		       85 09		      sta	COLUBK	; 03
      6  1454		       85 08		      sta	COLUPF	; 06
      7  1456
      0  1456					      SLEEP	4	; 10
      1  1456				   .CYCLES    SET	4
      2  1456
      3  1456				  -	      IF	.CYCLES < 2
      4  1456				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1456				  -	      ERR
      6  1456					      ENDIF
      7  1456
      8  1456				  -	      IF	.CYCLES & 1
      9  1456				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1456				  -	      nop	0
     11  1456				  -	      ELSE
     12  1456				  -	      bit	VSYNC
     13  1456				  -	      ENDIF
     14  1456				  -.CYCLES    SET	.CYCLES - 3
     15  1456					      ENDIF
     16  1456
     17  1456					      REPEAT	.CYCLES / 2
     18  1456		       ea		      nop
     17  1456					      REPEND
     18  1457		       ea		      nop
     19  1458					      REPEND
      9  1458
     10  1458		       a4 c6		      ldy	CurrentRow	; 13
     11  145a		       b9 b2 00 	      lda	FoodPosX,y	; 17
     12  145d
     13  145d		       38		      sec		; 19
     14  145e				   .DivideLoop
     15  145e		       e9 0f		      sbc	#15	; 21
     16  1460		       b0 fc		      bcs	.DivideLoop	; 23
     17  1462
     18  1462		       85 11		      sta	RESP1	; 26
     19  1464
     20  1464		       49 07		      eor	#7
     21  1466		       69 01		      adc	#1
     22  1468		       0a		      asl
     23  1469		       0a		      asl
     24  146a		       0a		      asl
     25  146b		       0a		      asl
     26  146c		       85 21		      sta	HMP1	; 41/66
     27  146e
     28  146e		       60		      rts		; 47/72
------- FILE code/Gameplay Kernel/HiRows.asm
      4  146f
      5  146f				   HiRows
      6  146f					      SUBROUTINE
      7  146f
      8  146f		       85 02		      sta	WSYNC
      9  1471
     10  1471		       a5 c0		      lda	ThrobColor+0
     11  1473		       85 09		      sta	COLUBK
     12  1475		       85 08		      sta	COLUPF
     13  1477
     14  1477
     15  1477							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1477							; This will probably be a good time to prepare the pointers for the
     17  1477							; food items' graphics, as well as loading the colors for the food items.
     18  1477
     19  1477							; After that, output 14 lines to draw a single row with food items,
     20  1477							; but without drawing the cat. The food graphics will be updated every line,
     21  1477							; but there will probably not be enough time to also update the food colors
     22  1477							; every line throughout the kernel.
     23  1477
     24  1477		       20 00 18 	      jsr	DrawFoodRow
     25  147a
     26  147a		       c6 c6		      dec	CurrentRow	; 73
     27  147c
     28  147c		       85 02		      sta	WSYNC
     29  147e
     30  147e							; Lastly, output four single-color lines to draw most of a "throb" line,
     31  147e							; while setting the position of player 1 to draw the next set of food items.
     32  147e
     33  147e
     34  147e		       a5 c0		      lda	ThrobColor+0
     35  1480		       85 09		      sta	COLUBK
     36  1482		       85 08		      sta	COLUPF
     37  1484		       a9 00		      lda	#0
     38  1486		       85 1b		      sta	GRP0
     39  1488		       85 1c		      sta	GRP1
     40  148a
     41  148a		       a5 c1		      lda	ThrobColor+1
     42  148c
     43  148c		       20 50 14 	      jsr	SetFoodPosition
     44  148f
     45  148f		       85 02		      sta	WSYNC
     46  1491
     47  1491		       a5 c2		      lda	ThrobColor+2	; 03
     48  1493		       85 09		      sta	COLUBK	; 06
     49  1495		       85 08		      sta	COLUPF	; 09
     50  1497
     51  1497		       20 24 18 	      jsr	Sleep12
     52  149a		       20 24 18 	      jsr	Sleep12
     53  149d		       20 24 18 	      jsr	Sleep12
     54  14a0		       20 24 18 	      jsr	Sleep12
     55  14a3		       20 24 18 	      jsr	Sleep12	; 69
     56  14a6
     57  14a6		       8d 2a 00 	      sta.w	HMOVE	; 73
     58  14a9
     59  14a9		       85 02		      sta	WSYNC
     60  14ab
     61  14ab		       a5 c1		      lda	ThrobColor+1	; 03
     62  14ad		       85 09		      sta	COLUBK	; 06
     63  14af		       85 08		      sta	COLUPF	; 09
     64  14b1
     65  14b1		       b9 a4 00 	      lda	FoodItemL,y	; 13
     66  14b4		       29 f0		      and	#$F0	; 15
     67  14b6		       85 91		      sta	FoodGfxPtr1	; 18
     68  14b8		       aa		      tax		; 20
     69  14b9		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     70  14bc		       85 c7		      sta	FoodColor1	; 27
     71  14be
     72  14be		       b9 ab 00 	      lda	FoodItemR,y	; 31
     73  14c1		       29 f0		      and	#$F0	; 33
     74  14c3		       85 93		      sta	FoodGfxPtr2	; 36
     75  14c5		       aa		      tax		; 38
     76  14c6		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     77  14c9		       85 c8		      sta	FoodColor2	; 45
     78  14cb
     79  14cb		       b9 b2 00 	      lda	FoodPosX,y	; 49
     80  14ce		       85 c4		      sta	Temp	; 52
     81  14d0
     82  14d0		       c6 a3		      dec	PreCatRows
     83  14d2		       d0 9b		      bne	HiRows
     84  14d4
     85  14d4							; If this is not the last row before drawing the cat's rows,
     86  14d4							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  14d4					      include	code/Gameplay Kernel/CatRows.asm
      1  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14d4							; Cat Row Kernel
      3  14d4							;
      4  14d4							; This is the kernel that is used to draw the two rows containing the cat.
      5  14d4							; It also draw the throbbing line between the cat's rows.
      6  14d4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  14d4
      8  14d4				   CatRows
      9  14d4
     10  14d4					      SUBROUTINE
     11  14d4
     12  14d4		       85 02		      sta	WSYNC
     13  14d6
     14  14d6							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     15  14d6
     16  14d6		       a5 c0		      lda	ThrobColor+0	; 03
     17  14d8		       85 09		      sta	COLUBK	; 06
     18  14da		       85 08		      sta	COLUPF	; 09
     19  14dc
     20  14dc		       a6 c8		      ldx	FoodColor2	; 12
     21  14de		       9a		      txs		; 14
     22  14df
      0  14df					      SLEEP	19	; 41
      1  14df				   .CYCLES    SET	19
      2  14df
      3  14df				  -	      IF	.CYCLES < 2
      4  14df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14df				  -	      ERR
      6  14df					      ENDIF
      7  14df
      8  14df					      IF	.CYCLES & 1
      9  14df					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14df		       04 00		      nop	0
     11  14e1				  -	      ELSE
     12  14e1				  -	      bit	VSYNC
     13  14e1					      ENDIF
     14  14e1				   .CYCLES    SET	.CYCLES - 3
     15  14e1					      ENDIF
     16  14e1
     17  14e1					      REPEAT	.CYCLES / 2
     18  14e1		       ea		      nop
     17  14e1					      REPEND
     18  14e2		       ea		      nop
     17  14e2					      REPEND
     18  14e3		       ea		      nop
     17  14e3					      REPEND
     18  14e4		       ea		      nop
     17  14e4					      REPEND
     18  14e5		       ea		      nop
     17  14e5					      REPEND
     18  14e6		       ea		      nop
     17  14e6					      REPEND
     18  14e7		       ea		      nop
     17  14e7					      REPEND
     18  14e8		       ea		      nop
     19  14e9					      REPEND
     24  14e9
     25  14e9					      SUBROUTINE
     26  14e9
     27  14e9		       a4 c6		      ldy	CurrentRow	; 47
     28  14eb		       b9 b2 00 	      lda	FoodPosX,y	; 51
     29  14ee
     30  14ee		       4c 00 15 	      jmp	.Align2	; 44
     31  1500		       00 00 00 00*	      ALIGN	$100
     32  1500				   .Align2
     33  1500
     34  1500		       c9 30		      cmp	#48	; 53
     35  1502
     36  1502		       a2 00		      ldx	#0	; 55
     37  1504		       a0 0d		      ldy	#13	; 57
     38  1506
     39  1506		       b1 95		      lda	(TartGfxPtr1),y	;
     40  1508		       85 0e		      sta	PF1	;
     41  150a
     42  150a							; Then output the 14 lines to draw a single row. This will include drawing
     43  150a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     44  150a							; All graphics will be updated every line.
     45  150a
     46  150a		       b0 0b		      bcs	.RightEntrance	; 60/59
     47  150c		       90 42		      bcc	.LeftEntrance	; 62
     48  150e
     49  150e							; 14 bytes into the page
     50  150e
     51  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  150e							; Kernel used when food items are closer to the right edge of the screen
     53  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  150e
     55  150e				   .RightLoop
     56  150e
     57  150e							; 8 cycles
     58  150e		       b1 97		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     59  1510		       85 1b		      sta	GRP0	; 52
     60  1512
     61  1512							; 9 cycles
     62  1512		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     63  1514		       ba		      tsx		; 57 - load 2nd food item's color
     64  1515		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     65  1517
     66  1517				   .RightEntrance		; enter loop here
     67  1517
     68  1517							; 2 cycles
     69  1517		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     70  1519
     71  1519							; 8 cycles
     72  1519		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     73  151b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     74  151d
     75  151d							; 8 cycles
     76  151d		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     77  151f		       85 1c		      sta	GRP1	; 02
     78  1521
     79  1521							; 7 cycles
     80  1521		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     81  1524		       85 09		      sta	COLUBK	; 09
     82  1526
     83  1526							; 7 cycles
     84  1526		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     85  1529		       85 08		      sta	COLUPF	; 16
     86  152b
     87  152b							; 6 cycles
     88  152b		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
     89  152d		       85 07		      sta	COLUP1	; 22
     90  152f
     91  152f							; 8 cycles
     92  152f		       a5 89		      lda	CatTartColor	; 25
     93  1531		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     94  1533		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     95  1535		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     96  1537
     97  1537							; 5 cycles
     98  1537		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     99  1539
    100  1539							; 2 cycles
    101  1539		       88		      dey		; 41
    102  153a		       10 d2		      bpl	.RightLoop	; 44/43
    103  153c
    104  153c		       a0 12		      ldy	#18	; 45
    105  153e		       b1 99		      lda	(TartGfxPtr2),y	; 50
    106  1540
      0  1540					      SLEEP	2	; 52
      1  1540				   .CYCLES    SET	2
      2  1540
      3  1540				  -	      IF	.CYCLES < 2
      4  1540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1540				  -	      ERR
      6  1540					      ENDIF
      7  1540
      8  1540				  -	      IF	.CYCLES & 1
      9  1540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1540				  -	      nop	0
     11  1540				  -	      ELSE
     12  1540				  -	      bit	VSYNC
     13  1540				  -	      ENDIF
     14  1540				  -.CYCLES    SET	.CYCLES - 3
     15  1540					      ENDIF
     16  1540
     17  1540					      REPEAT	.CYCLES / 2
     18  1540		       ea		      nop
     19  1541					      REPEND
    108  1541
    109  1541		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    110  1543		       ba		      tsx		; 57 - load 2nd food item's color
    111  1544		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    112  1546
    113  1546		       b0 38		      bcs	.End	; 63
    114  1548
    115  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  1548							; Kernel used when food items are closer to the left edge of the screen
    117  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    118  1548
    119  1548				   .LeftLoop
    120  1548
    121  1548							; 8 cycles
    122  1548		       b1 97		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    123  154a		       85 1b		      sta	GRP0	; 57
    124  154c
    125  154c							; 5 cycles
    126  154c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    127  154e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    128  1550
    129  1550				   .LeftEntrance		; enter loop here
    130  1550
    131  1550							; 8 cycles
    132  1550		       b1 95		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    133  1552		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    134  1554
    135  1554							; 8 cycles
    136  1554		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    137  1556		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    138  1558
    139  1558							; 7 cycles
    140  1558		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    141  155b		       85 09		      sta	COLUBK	; 09
    142  155d
    143  155d							; 7 cycles
    144  155d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    145  1560		       85 08		      sta	COLUPF	; 16
    146  1562
    147  1562							; 6 cycles
    148  1562		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    149  1564		       85 07		      sta	COLUP1	; 22
    150  1566
    151  1566							; 8 cycles
    152  1566		       a5 89		      lda	CatTartColor	; 25
    153  1568		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    154  156a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    155  156c
    156  156c							; 13 cycles
    157  156c		       b1 93		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    158  156e		       ba		      tsx		; 38 - load 2nd food item's color
    159  156f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    160  1571		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    161  1573
    162  1573							; 5 cycles
    163  1573		       88		      dey		; 46
    164  1574		       10 d2		      bpl	.LeftLoop	; 49/48
    165  1576
    166  1576		       a2 00		      ldx	#0	; 50
    167  1578		       86 08		      stx	COLUPF	; 53
    168  157a
    169  157a		       a0 12		      ldy	#18	; 55
    170  157c		       b1 99		      lda	(TartGfxPtr2),y	; 60
    171  157e
    172  157e		       86 1c		      stx	GRP1	; 63
    173  1580
    174  1580				   .End
    175  1580
    176  1580
    177  1580
    178  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  1580							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    180  1580							; cat with the rainbow. In order to align player 1 for the next row's
    181  1580							; food items, it will be neccesary to have three versions of this kernel,
    182  1580							; one for each of the three 60-color-clock spaced positions to reset.
    183  1580							; HMOVE will be written to on the first four scanlines. With a maximum
    184  1580							; movement of 15 color-clocks per scanline, this will allow a movement of
    185  1580							; up to 60 color clocks. With three versions of the kernel, it should be
    186  1580							; possible to put player 1 anywhere on the screen.
    187  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    188  1580
    189  1580
    190  1580
    191  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1580							; Draw throb line #1
    193  1580
    194  1580		       85 0e		      sta	PF1	; 66
    195  1582
    196  1582		       b1 9b		      lda	(CatGfxPtr2),y	; 71
    197  1584		       85 1b		      sta	GRP0	; 74
    198  1586
    199  1586		       a6 c0		      ldx	ThrobColor+0	; 01
    200  1588
      0  1588					      THROB_RAINBOW_BK	18	; 12
      1  1588					      SUBROUTINE
      2  1588				   .X	      SET	18
      3  1588
      4  1588		       a5 f0		      lda	RamBowColors+.X
      5  158a		       d0 04		      bne	.Rainbow
      6  158c
      7  158c		       86 09		      stx	COLUBK
      8  158e		       f0 03		      beq	.End
      9  1590
     10  1590				   .Rainbow
     11  1590		       85 09		      sta	COLUBK
     12  1592		       ea		      nop
     13  1593
     14  1593				   .End
    202  1593
    203  1593		       a5 c3		      lda	CatThrobPF	; 15
    204  1595		       85 08		      sta	COLUPF	; 18
    205  1597		       8e 07 00 	      stx.w	COLUP1	; 22
    206  159a
    207  159a		       a5 89		      lda	CatTartColor	; 25
    208  159c		       85 08		      sta	COLUPF	; 28
    209  159e		       86 09		      stx	COLUBK	; 31
    210  15a0
    211  15a0		       88		      dey		; 33
    212  15a1		       85 11		      sta	RESP1	; 36
    213  15a3		       86 08		      stx	COLUPF	; 39
    214  15a5
    215  15a5		       b1 9b		      lda	(CatGfxPtr2),y	; 44
    216  15a7		       85 1b		      sta	GRP0	; 47
    217  15a9
    218  15a9		       b1 99		      lda	(TartGfxPtr2),y	; 52
    219  15ab		       85 0e		      sta	PF1	; 55
    220  15ad
    221  15ad		       c6 c6		      dec	CurrentRow	; 60
    222  15af		       a2 00		      ldx	#0	; 62
    223  15b1		       86 1c		      stx	GRP1	; 65
    224  15b3
    225  15b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  15b3							; Draw throb line #2
    227  15b3
    228  15b3		       a5 bb		      lda	CatRowHmove+2	; 68
    229  15b5		       85 21		      sta	HMP1	; 71
      0  15b7					      SLEEP	2	; 73
      1  15b7				   .CYCLES    SET	2
      2  15b7
      3  15b7				  -	      IF	.CYCLES < 2
      4  15b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b7				  -	      ERR
      6  15b7					      ENDIF
      7  15b7
      8  15b7				  -	      IF	.CYCLES & 1
      9  15b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b7				  -	      nop	0
     11  15b7				  -	      ELSE
     12  15b7				  -	      bit	VSYNC
     13  15b7				  -	      ENDIF
     14  15b7				  -.CYCLES    SET	.CYCLES - 3
     15  15b7					      ENDIF
     16  15b7
     17  15b7					      REPEAT	.CYCLES / 2
     18  15b7		       ea		      nop
     19  15b8					      REPEND
    231  15b8
    232  15b8		       a6 c1		      ldx	ThrobColor+1	; 00
      0  15ba					      THROB_RAINBOW_BK	17	; 11
      1  15ba					      SUBROUTINE
      2  15ba				   .X	      SET	17
      3  15ba
      4  15ba		       a5 ef		      lda	RamBowColors+.X
      5  15bc		       d0 04		      bne	.Rainbow
      6  15be
      7  15be		       86 09		      stx	COLUBK
      8  15c0		       f0 03		      beq	.End
      9  15c2
     10  15c2				   .Rainbow
     11  15c2		       85 09		      sta	COLUBK
     12  15c4		       ea		      nop
     13  15c5
     14  15c5				   .End
      0  15c5					      THROB_RAINBOW_PF	18	; 22
      1  15c5					      SUBROUTINE
      2  15c5				   .X	      SET	18
      3  15c5
      4  15c5		       a5 f0		      lda	RamBowColors+.X
      5  15c7		       d0 04		      bne	.Rainbow
      6  15c9
      7  15c9		       86 08		      stx	COLUPF
      8  15cb		       f0 03		      beq	.End
      9  15cd
     10  15cd				   .Rainbow
     11  15cd		       85 08		      sta	COLUPF
     12  15cf		       ea		      nop
     13  15d0
     14  15d0				   .End
    235  15d0
    236  15d0		       a5 89		      lda	CatTartColor	; 25
    237  15d2		       85 08		      sta	COLUPF	; 28
    238  15d4		       86 09		      stx	COLUBK	; 31
    239  15d6		       86 08		      stx	COLUPF	; 34
    240  15d8
    241  15d8		       88		      dey		; 36
    242  15d9
    243  15d9		       a6 c6		      ldx	CurrentRow	; 39
    244  15db		       b5 b2		      lda	FoodPosX,x	; 43
    245  15dd		       c9 2d		      cmp	#45	; 45
    246  15df		       10 01		      bpl	.RightSide	; 48/47
      0  15e1					      SKIP_WORD		; 51
      1  15e1
      2  15e1		       0c		      HEX	0C
      3  15e2
    248  15e2				   .RightSide
    249  15e2		       85 11		      sta	RESP1	; 51
    250  15e4
    251  15e4		       b1 9b		      lda	(CatGfxPtr2),y	; 56
    252  15e6		       85 1b		      sta	GRP0	; 59
    253  15e8
    254  15e8		       b1 99		      lda	(TartGfxPtr2),y	; 64
    255  15ea		       85 0e		      sta	PF1	; 67
      0  15ec					      SLEEP	3	; 70
      1  15ec				   .CYCLES    SET	3
      2  15ec
      3  15ec				  -	      IF	.CYCLES < 2
      4  15ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ec				  -	      ERR
      6  15ec					      ENDIF
      7  15ec
      8  15ec					      IF	.CYCLES & 1
      9  15ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ec		       04 00		      nop	0
     11  15ee				  -	      ELSE
     12  15ee				  -	      bit	VSYNC
     13  15ee					      ENDIF
     14  15ee				   .CYCLES    SET	.CYCLES - 3
     15  15ee					      ENDIF
     16  15ee
     17  15ee				  -	      REPEAT	.CYCLES / 2
     18  15ee				  -	      nop
     19  15ee					      REPEND
    257  15ee		       85 2a		      sta	HMOVE	; 73
    258  15f0
    259  15f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  15f0							; Draw throb line #3
    261  15f0
    262  15f0		       a6 c2		      ldx	ThrobColor+2	; 00
      0  15f2					      THROB_RAINBOW_BK	16	; 11
      1  15f2					      SUBROUTINE
      2  15f2				   .X	      SET	16
      3  15f2
      4  15f2		       a5 ee		      lda	RamBowColors+.X
      5  15f4		       d0 04		      bne	.Rainbow
      6  15f6
      7  15f6		       86 09		      stx	COLUBK
      8  15f8		       f0 03		      beq	.End
      9  15fa
     10  15fa				   .Rainbow
     11  15fa		       85 09		      sta	COLUBK
     12  15fc		       ea		      nop
     13  15fd
     14  15fd				   .End
      0  15fd					      THROB_RAINBOW_PF	17	; 22
      1  15fd					      SUBROUTINE
      2  15fd				   .X	      SET	17
      3  15fd
      4  15fd		       a5 ef		      lda	RamBowColors+.X
      5  15ff		       d0 04		      bne	.Rainbow
      6  1601
      7  1601		       86 08		      stx	COLUPF
      8  1603		       f0 03		      beq	.End
      9  1605
     10  1605				   .Rainbow
     11  1605		       85 08		      sta	COLUPF
     12  1607		       ea		      nop
     13  1608
     14  1608				   .End
    265  1608
    266  1608		       a5 89		      lda	CatTartColor	; 25
    267  160a		       85 08		      sta	COLUPF	; 28
    268  160c		       86 09		      stx	COLUBK	; 31
    269  160e		       86 08		      stx	COLUPF	; 34
    270  1610
    271  1610		       88		      dey		; 36
    272  1611
    273  1611		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    274  1613		       85 1b		      sta	GRP0	; 44
    275  1615
    276  1615		       b1 99		      lda	(TartGfxPtr2),y	; 49
    277  1617		       85 0e		      sta	PF1	; 52
    278  1619
    279  1619		       a5 bc		      lda	CatRow2FoodL	; 55
    280  161b		       85 91		      sta	FoodGfxPtr1	; 58
    281  161d		       a5 bd		      lda	CatRow2FoodR	; 61
    282  161f		       85 93		      sta	FoodGfxPtr2	; 64
    283  1621
    284  1621		       a5 ba		      lda	CatRowHmove+1	; 67
    285  1623		       85 21		      sta	HMP1	; 70
    286  1625
    287  1625		       85 2a		      sta	HMOVE	; 73
    288  1627
    289  1627							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    290  1627							; Draw throb line #4
    291  1627
    292  1627		       a6 c1		      ldx	ThrobColor+1	; 00
      0  1629					      THROB_RAINBOW_BK	15	; 11
      1  1629					      SUBROUTINE
      2  1629				   .X	      SET	15
      3  1629
      4  1629		       a5 ed		      lda	RamBowColors+.X
      5  162b		       d0 04		      bne	.Rainbow
      6  162d
      7  162d		       86 09		      stx	COLUBK
      8  162f		       f0 03		      beq	.End
      9  1631
     10  1631				   .Rainbow
     11  1631		       85 09		      sta	COLUBK
     12  1633		       ea		      nop
     13  1634
     14  1634				   .End
      0  1634					      THROB_RAINBOW_PF	16	; 22
      1  1634					      SUBROUTINE
      2  1634				   .X	      SET	16
      3  1634
      4  1634		       a5 ee		      lda	RamBowColors+.X
      5  1636		       d0 04		      bne	.Rainbow
      6  1638
      7  1638		       86 08		      stx	COLUPF
      8  163a		       f0 03		      beq	.End
      9  163c
     10  163c				   .Rainbow
     11  163c		       85 08		      sta	COLUPF
     12  163e		       ea		      nop
     13  163f
     14  163f				   .End
    295  163f
    296  163f		       a5 89		      lda	CatTartColor	; 25
    297  1641		       85 08		      sta	COLUPF	; 28
    298  1643		       86 09		      stx	COLUBK	; 31
    299  1645		       86 08		      stx	COLUPF	; 34
    300  1647
    301  1647		       88		      dey		; 36
    302  1648
    303  1648		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    304  164a		       85 1b		      sta	GRP0	; 44
    305  164c
    306  164c		       b1 99		      lda	(TartGfxPtr2),y	; 49
    307  164e		       85 0e		      sta	PF1	; 52
    308  1650
    309  1650		       a5 be		      lda	CatRow2Color1	; 55
    310  1652		       85 c7		      sta	FoodColor1	; 58
    311  1654		       ae bf 00 	      ldx.w	CatRow2Color2	; 55
    312  1657		       9a		      txs		; 58
    313  1658
    314  1658		       a5 b9		      lda	CatRowHmove+0	; 67
    315  165a		       85 21		      sta	HMP1	; 70
    316  165c
    317  165c		       85 2a		      sta	HMOVE	; 73
    318  165e
    319  165e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  165e							; Draw throb line #5
    321  165e
    322  165e					      SUBROUTINE
    323  165e
    324  165e		       a6 c0		      ldx	ThrobColor+0	; 00
      0  1660					      THROB_RAINBOW_BK	14	; 11
      1  1660					      SUBROUTINE
      2  1660				   .X	      SET	14
      3  1660
      4  1660		       a5 ec		      lda	RamBowColors+.X
      5  1662		       d0 04		      bne	.Rainbow
      6  1664
      7  1664		       86 09		      stx	COLUBK
      8  1666		       f0 03		      beq	.End
      9  1668
     10  1668				   .Rainbow
     11  1668		       85 09		      sta	COLUBK
     12  166a		       ea		      nop
     13  166b
     14  166b				   .End
      0  166b					      THROB_RAINBOW_PF	15	; 22
      1  166b					      SUBROUTINE
      2  166b				   .X	      SET	15
      3  166b
      4  166b		       a5 ed		      lda	RamBowColors+.X
      5  166d		       d0 04		      bne	.Rainbow
      6  166f
      7  166f		       86 08		      stx	COLUPF
      8  1671		       f0 03		      beq	.End
      9  1673
     10  1673				   .Rainbow
     11  1673		       85 08		      sta	COLUPF
     12  1675		       ea		      nop
     13  1676
     14  1676				   .End
    327  1676
    328  1676		       a5 89		      lda	CatTartColor	; 25
    329  1678		       85 08		      sta	COLUPF	; 28
    330  167a		       86 09		      stx	COLUBK	; 31
    331  167c		       86 08		      stx	COLUPF	; 34
    332  167e
    333  167e		       88		      dey		; 36
    334  167f
    335  167f		       b1 9b		      lda	(CatGfxPtr2),y	; 41
    336  1681		       85 1b		      sta	GRP0	; 44
    337  1683
    338  1683		       a6 c6		      ldx	CurrentRow	; 47
    339  1685		       b5 b2		      lda	FoodPosX,x	; 51
    340  1687		       c9 30		      cmp	#48	; 53
    341  1689
    342  1689		       a2 00		      ldx	#0	; 55
    343  168b		       ea		      nop		; 57
    344  168c
    345  168c							; Then output the 14 lines to draw a single row. This will include drawing
    346  168c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    347  168c							; All graphics will be updated every line.
    348  168c
    349  168c		       b0 0b		      bcs	.RightEntrance	; 60/59
    350  168e		       90 42		      bcc	.LeftEntrance	; 62
    351  1690
    352  1690							; 14 bytes into the page
    353  1690
    354  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    355  1690							; Kernel used when food items are closer to the right edge of the screen
    356  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    357  1690
    358  1690				   .RightLoop
    359  1690
    360  1690							; 8 cycles
    361  1690		       b1 9b		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    362  1692		       85 1b		      sta	GRP0	; 52
    363  1694
    364  1694							; 9 cycles
    365  1694		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    366  1696		       ba		      tsx		; 57 - load 2nd food item's color
    367  1697		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    368  1699
    369  1699				   .RightEntrance		; enter loop here
    370  1699
    371  1699							; 2 cycles
    372  1699		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    373  169b
    374  169b							; 8 cycles
    375  169b		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    376  169d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    377  169f
    378  169f							; 8 cycles
    379  169f		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    380  16a1		       85 1c		      sta	GRP1	; 02
    381  16a3
    382  16a3							; 7 cycles
    383  16a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    384  16a6		       85 09		      sta	COLUBK	; 09
    385  16a8
    386  16a8							; 7 cycles
    387  16a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    388  16ab		       85 08		      sta	COLUPF	; 16
    389  16ad
    390  16ad							; 6 cycles
    391  16ad		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    392  16af		       85 07		      sta	COLUP1	; 22
    393  16b1
    394  16b1							; 8 cycles
    395  16b1		       a5 89		      lda	CatTartColor	; 25
    396  16b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    397  16b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    398  16b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    399  16b9
    400  16b9							; 5 cycles
    401  16b9		       b3 93		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    402  16bb
    403  16bb							; 2 cycles
    404  16bb		       88		      dey		; 41
    405  16bc		       10 d2		      bpl	.RightLoop	; 44/43
    406  16be
    407  16be		       a0 12		      ldy	#18	; 45
    408  16c0		       b1 99		      lda	(TartGfxPtr2),y	; 50
    409  16c2
      0  16c2					      SLEEP	2	; 52
      1  16c2				   .CYCLES    SET	2
      2  16c2
      3  16c2				  -	      IF	.CYCLES < 2
      4  16c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c2				  -	      ERR
      6  16c2					      ENDIF
      7  16c2
      8  16c2				  -	      IF	.CYCLES & 1
      9  16c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c2				  -	      nop	0
     11  16c2				  -	      ELSE
     12  16c2				  -	      bit	VSYNC
     13  16c2				  -	      ENDIF
     14  16c2				  -.CYCLES    SET	.CYCLES - 3
     15  16c2					      ENDIF
     16  16c2
     17  16c2					      REPEAT	.CYCLES / 2
     18  16c2		       ea		      nop
     19  16c3					      REPEND
    411  16c3
    412  16c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    413  16c5		       ba		      tsx		; 57 - load 2nd food item's color
    414  16c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    415  16c8
    416  16c8		       b0 36		      bcs	.End	; 63
    417  16ca
    418  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    419  16ca							; Kernel used when food items are closer to the left edge of the screen
    420  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    421  16ca
    422  16ca				   .LeftLoop
    423  16ca
    424  16ca							; 8 cycles
    425  16ca		       b1 9b		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    426  16cc		       85 1b		      sta	GRP0	; 57
    427  16ce
    428  16ce							; 5 cycles
    429  16ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    430  16d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    431  16d2
    432  16d2				   .LeftEntrance		; enter loop here
    433  16d2
    434  16d2							; 8 cycles
    435  16d2		       b1 99		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    436  16d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    437  16d6
    438  16d6							; 8 cycles
    439  16d6		       b1 91		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    440  16d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    441  16da
    442  16da							; 7 cycles
    443  16da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    444  16dd		       85 09		      sta	COLUBK	; 09
    445  16df
    446  16df							; 7 cycles
    447  16df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    448  16e2		       85 08		      sta	COLUPF	; 16
    449  16e4
    450  16e4							; 6 cycles
    451  16e4		       a5 c7		      lda	FoodColor1	; 19 - set 1st food item's color
    452  16e6		       85 07		      sta	COLUP1	; 22
    453  16e8
    454  16e8							; 8 cycles
    455  16e8		       a5 89		      lda	CatTartColor	; 25
    456  16ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    457  16ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    458  16ee
    459  16ee							; 13 cycles
    460  16ee		       b1 93		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    461  16f0		       ba		      tsx		; 38 - load 2nd food item's color
    462  16f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    463  16f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    464  16f5
    465  16f5							; 5 cycles
    466  16f5		       88		      dey		; 46
    467  16f6		       10 d2		      bpl	.LeftLoop	; 49/48
    468  16f8
    469  16f8		       a2 00		      ldx	#0	; 50
    470  16fa		       86 08		      stx	COLUPF	; 53
    471  16fc
    472  16fc		       a0 12		      ldy	#18	; 55
    473  16fe		       b1 99		      lda	(TartGfxPtr2),y	; 60
    474  1700
    475  1700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    476  1700
    477  1700				   .End
    478  1700
    479  1700		       a2 ff		      ldx	#$FF	; 65
    480  1702		       9a		      txs		; 67
    481  1703
    482  1703		       a2 00		      ldx	#0
    483  1705
    484  1705							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    485  1705							; Use this time to prepare the next row's food item pointers (unless this is
    486  1705							; the last row). If this is the last row, skip over LoRows.
    487  1705
    488  1705		       85 02		      sta	WSYNC
    489  1707		       a5 c0		      lda	ThrobColor+0
    490  1709		       85 09		      sta	COLUBK
    491  170b		       85 08		      sta	COLUPF
    492  170d		       86 1c		      stx	GRP1
      0  170f					      SLEEP	25
      1  170f				   .CYCLES    SET	25
      2  170f
      3  170f				  -	      IF	.CYCLES < 2
      4  170f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  170f				  -	      ERR
      6  170f					      ENDIF
      7  170f
      8  170f					      IF	.CYCLES & 1
      9  170f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  170f		       04 00		      nop	0
     11  1711				  -	      ELSE
     12  1711				  -	      bit	VSYNC
     13  1711					      ENDIF
     14  1711				   .CYCLES    SET	.CYCLES - 3
     15  1711					      ENDIF
     16  1711
     17  1711					      REPEAT	.CYCLES / 2
     18  1711		       ea		      nop
     17  1711					      REPEND
     18  1712		       ea		      nop
     17  1712					      REPEND
     18  1713		       ea		      nop
     17  1713					      REPEND
     18  1714		       ea		      nop
     17  1714					      REPEND
     18  1715		       ea		      nop
     17  1715					      REPEND
     18  1716		       ea		      nop
     17  1716					      REPEND
     18  1717		       ea		      nop
     17  1717					      REPEND
     18  1718		       ea		      nop
     17  1718					      REPEND
     18  1719		       ea		      nop
     17  1719					      REPEND
     18  171a		       ea		      nop
     17  171a					      REPEND
     18  171b		       ea		      nop
     19  171c					      REPEND
    494  171c		       86 1b		      stx	GRP0
    495  171e
    496  171e		       c6 c6		      dec	CurrentRow
    497  1720		       30 03		      bmi	.GpEnd
    498  1722
    499  1722							; If the cat is at the very bottom of the screen, don't disable the
    500  1722							; missile/player graphics until after they are drawn, so they don't get
    501  1722							; clipped at the bottom of the screen. An easy way to do this would be to
    502  1722							; simply disable them after they would have been drawn, whether they are
    503  1722							; already disabled or not.
    504  1722
    505  1722		       4c 25 18 	      jmp	LoRows
    506  1725
    507  1725				   .GpEnd
    508  1725		       4c 8d 18 	      jmp	GameplayEnd
    509  1728
    510  1800		       00 00 00 00*	      ALIGN	$100
    511  1800
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1800					      include	subroutines/DrawFoodRow.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 91		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 c7		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c4		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 93		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 c8		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE code/Gameplay Kernel/CatRows.asm
    513  1825
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  1825					      include	code/Gameplay Kernel/LoRows.asm
      1  1825							; Draw all the rows below the cat's two rows.
      2  1825
      3  1825				   LoRows
      4  1825					      SUBROUTINE
      5  1825
      6  1825							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      7  1825							; player 1 for the next row's food items.
      8  1825
      9  1825		       a5 c1		      lda	ThrobColor+1
     10  1827
     11  1827		       20 50 14 	      jsr	SetFoodPosition
     12  182a
     13  182a		       85 02		      sta	WSYNC
     14  182c
     15  182c		       a5 c2		      lda	ThrobColor+2	; 03
     16  182e		       85 09		      sta	COLUBK	; 06
     17  1830		       85 08		      sta	COLUPF	; 09
     18  1832
     19  1832		       20 24 18 	      jsr	Sleep12
     20  1835		       20 24 18 	      jsr	Sleep12
     21  1838		       20 24 18 	      jsr	Sleep12
     22  183b		       20 24 18 	      jsr	Sleep12
     23  183e		       20 24 18 	      jsr	Sleep12	; 69
     24  1841
     25  1841		       8d 2a 00 	      sta.w	HMOVE	; 73
     26  1844
     27  1844		       85 02		      sta	WSYNC
     28  1846
     29  1846		       a5 c1		      lda	ThrobColor+1
     30  1848		       85 09		      sta	COLUBK
     31  184a		       85 08		      sta	COLUPF
     32  184c		       85 02		      sta	WSYNC
     33  184e
     34  184e		       a5 c0		      lda	ThrobColor+0	; 3
     35  1850		       85 09		      sta	COLUBK	; 6
     36  1852		       85 08		      sta	COLUPF	; 9
     37  1854
     38  1854		       a4 c6		      ldy	CurrentRow	; 12
     39  1856
     40  1856		       b9 a4 00 	      lda	FoodItemL,y	; 16
     41  1859		       29 f0		      and	#$F0	; 18
     42  185b		       85 91		      sta	FoodGfxPtr1	; 21
     43  185d		       aa		      tax		; 23
     44  185e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     45  1861		       85 c7		      sta	FoodColor1	; 30
     46  1863
     47  1863		       b9 ab 00 	      lda	FoodItemR,y	; 34
     48  1866		       29 f0		      and	#$F0	; 37
     49  1868		       85 93		      sta	FoodGfxPtr2	; 39
     50  186a		       aa		      tax		; 41
     51  186b		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     52  186e		       85 c8		      sta	FoodColor2	; 48
     53  1870
     54  1870		       b9 b2 00 	      lda	FoodPosX,y	; 52
     55  1873		       85 c4		      sta	Temp	; 55
     56  1875
     57  1875
     58  1875
     59  1875							; Output 14 lines to draw a row, exactly the same as in HiRows.
     60  1875							; It may be possible to code this as a subroutine to save ROM space.
     61  1875
     62  1875		       20 00 18 	      jsr	DrawFoodRow	; 61
     63  1878
     64  1878		       85 02		      sta	WSYNC
     65  187a
     66  187a							; Lastly, output a single line for the next "throb" line.
     67  187a							; Use this time to prepare the next row's food item pointers (unless this is
     68  187a							; the last row). If this is not the last row, loop to LoRows for the next row.
     69  187a
     70  187a		       a5 c0		      lda	ThrobColor+0
     71  187c		       85 09		      sta	COLUBK
     72  187e		       85 08		      sta	COLUPF
     73  1880		       a9 00		      lda	#0
     74  1882		       85 1b		      sta	GRP0
     75  1884		       85 1c		      sta	GRP1
     76  1886
     77  1886		       c6 c6		      dec	CurrentRow
     78  1888		       10 9b		      bpl	LoRows
     79  188a
     80  188a		       a2 ff		      ldx	#$FF
     81  188c		       9a		      txs
     82  188d
     83  188d				   GameplayEnd
     84  188d		       85 02		      sta	WSYNC
      0  188f					      SLEEP	2
      1  188f				   .CYCLES    SET	2
      2  188f
      3  188f				  -	      IF	.CYCLES < 2
      4  188f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  188f				  -	      ERR
      6  188f					      ENDIF
      7  188f
      8  188f				  -	      IF	.CYCLES & 1
      9  188f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  188f				  -	      nop	0
     11  188f				  -	      ELSE
     12  188f				  -	      bit	VSYNC
     13  188f				  -	      ENDIF
     14  188f				  -.CYCLES    SET	.CYCLES - 3
     15  188f					      ENDIF
     16  188f
     17  188f					      REPEAT	.CYCLES / 2
     18  188f		       ea		      nop
     19  1890					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  1890					      include	code/ProgressHealthKernel.asm
      1  1890		       a5 c1		      lda	ThrobColor+1
      2  1892		       85 09		      sta	COLUBK
      3  1894		       a9 00		      lda	#0
      4  1896		       85 0d		      sta	PF0
      5  1898		       85 0a		      sta	CTRLPF
      6  189a		       a9 09		      lda	#COL_CAT_FACE
      7  189c		       85 08		      sta	COLUPF
      8  189e
      9  189e		       20 24 18 	      jsr	Sleep12
     10  18a1		       20 24 18 	      jsr	Sleep12
      0  18a4					      SLEEP	8	; 53
      1  18a4				   .CYCLES    SET	8
      2  18a4
      3  18a4				  -	      IF	.CYCLES < 2
      4  18a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  18a4				  -	      ERR
      6  18a4					      ENDIF
      7  18a4
      8  18a4				  -	      IF	.CYCLES & 1
      9  18a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  18a4				  -	      nop	0
     11  18a4				  -	      ELSE
     12  18a4				  -	      bit	VSYNC
     13  18a4				  -	      ENDIF
     14  18a4				  -.CYCLES    SET	.CYCLES - 3
     15  18a4					      ENDIF
     16  18a4
     17  18a4					      REPEAT	.CYCLES / 2
     18  18a4		       ea		      nop
     17  18a4					      REPEND
     18  18a5		       ea		      nop
     17  18a5					      REPEND
     18  18a6		       ea		      nop
     17  18a6					      REPEND
     18  18a7		       ea		      nop
     19  18a8					      REPEND
     12  18a8
     13  18a8		       a9 20		      lda	#$20	; 55
     14  18aa		       85 20		      sta	HMP0	; 58
     15  18ac		       a9 b0		      lda	#$B0	; 60
     16  18ae		       85 21		      sta	HMP1	; 63
     17  18b0
     18  18b0		       85 10		      sta	RESP0	; 66
     19  18b2		       85 11		      sta	RESP1	; 69
     20  18b4
     21  18b4		       a9 00		      lda	#$00	; 71
     22  18b6
     23  18b6		       85 2a		      sta	HMOVE	; 74
     24  18b8
     25  18b8		       85 06		      sta	COLUP0
     26  18ba		       85 07		      sta	COLUP1
     27  18bc
     28  18bc		       a5 87		      lda	ScoreColor
     29  18be		       85 09		      sta	COLUBK
     30  18c0
     31  18c0		       a9 05		      lda	#DOUBLE_SIZE	; 08
     32  18c2		       85 04		      sta	NUSIZ0
     33  18c4		       85 05		      sta	NUSIZ1
     34  18c6
     35  18c6		       a9 08		      lda	#REFP_TRUE
     36  18c8		       85 0c		      sta	REFP1
     37  18ca
     38  18ca					      SUBROUTINE
     39  18ca
     40  18ca		       a0 04		      ldy	#4
     41  18cc		       85 02		      sta	WSYNC
     42  18ce
     43  18ce							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  18ce				   .HealthTop		; draw top of health
     45  18ce
     46  18ce		       a2 03		      ldx	#3
     47  18d0
     48  18d0				   .Loop
     49  18d0		       85 02		      sta	WSYNC
     50  18d2
     51  18d2		       b9 6f 1b 	      lda	HealthTopGfx,y	; 04
     52  18d5		       85 1b		      sta	GRP0	; 07
     53  18d7		       85 1c		      sta	GRP1	; 10
     54  18d9		       a9 00		      lda	#$00	; 12
     55  18db		       85 0f		      sta	PF2	; 15
     56  18dd
     57  18dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  18dd							; Set the pointers for health graphics - 26 cycles
     59  18dd
     60  18dd		       18		      clc		; 17
     61  18de
     62  18de		       a9 1b		      lda	#>HealthLeftGfx	; 19
     63  18e0		       85 9a		      sta	HthGfxLPtr+1	; 22
     64  18e2		       85 9c		      sta	HthGfxRPtr+1	; 25
     65  18e4
     66  18e4		       a9 74		      lda	#<HealthLeftGfx	; 27
     67  18e6		       65 8b		      adc	Health	; 30
     68  18e8		       85 99		      sta	HthGfxLPtr	; 33
     69  18ea
     70  18ea		       a9 94		      lda	#<HealthRightGfx	; 35
     71  18ec		       65 8b		      adc	Health	; 38
     72  18ee		       85 9b		      sta	HthGfxRPtr	; 41
     73  18f0
     74  18f0
     75  18f0
     76  18f0		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
     77  18f3		       85 0f		      sta	PF2	; 48
     78  18f5
     79  18f5		       ca		      dex		; 50
     80  18f6		       d0 d8		      bne	.Loop	; 52
     81  18f8
     82  18f8		       88		      dey		; 54
     83  18f9		       10 d3		      bpl	.HealthTop	; 56
     84  18fb
     85  18fb
     86  18fb					      SUBROUTINE
     87  18fb
     88  18fb
     89  18fb		       a0 03		      ldy	#3	; 58
     90  18fd		       a2 03		      ldx	#3	; 60
     91  18ff		       86 c4		      stx	Temp	; 63
     92  1901
     93  1901		       4c 00 1a 	      jmp	.HealthMiddle	; 66
     94  1904
     95  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
     96  1a00
     97  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  1a00				   .HealthMiddle		; draw middle of health, with progress bar
     99  1a00
    100  1a00		       85 02		      sta	WSYNC
    101  1a02				   .Loop
    102  1a02		       a5 8c		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    103  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    104  1a06
    105  1a06		       a5 8d		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    106  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    107  1a0a
    108  1a0a		       a5 8e		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    109  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    110  1a0e
    111  1a0e		       a5 88		      lda	PgBarColor	; 21 - get the progress bar color
    112  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    113  1a12
    114  1a12		       a5 8f		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    115  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    116  1a16
    117  1a16		       b1 99		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    118  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    119  1a1a		       b1 9b		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    120  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    121  1a1e
    122  1a1e		       a5 90		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    123  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    124  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    125  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    126  1a26
    127  1a26		       a5 87		      lda	ScoreColor	; 60 - get the color for the background
    128  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    129  1a2b
    130  1a2b		       ca		      dex		; 66
    131  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    132  1a2e
    133  1a2e		       a6 c4		      ldx	Temp	; 71
    134  1a30
    135  1a30		       88		      dey		; 73
    136  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    137  1a33
    138  1a33
    139  1a33
    140  1a33					      SUBROUTINE
    141  1a33
    142  1a33
    143  1a33		       a9 00		      lda	#0
    144  1a35		       85 0d		      sta	PF0
    145  1a37		       85 0e		      sta	PF1
    146  1a39
    147  1a39		       a0 07		      ldy	#7
    148  1a3b
    149  1a3b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    150  1a3b				   .HealthBottom		; draw bottom of health
    151  1a3b
    152  1a3b		       a2 03		      ldx	#3
    153  1a3d				   .Loop
    154  1a3d		       b1 99		      lda	(HthGfxLPtr),y
    155  1a3f		       85 1b		      sta	GRP0
    156  1a41		       b1 9b		      lda	(HthGfxRPtr),y
    157  1a43		       85 1c		      sta	GRP1
    158  1a45		       a9 00		      lda	#$00
    159  1a47		       85 0f		      sta	PF2
    160  1a49
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    162  1a50
    163  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    164  1a53		       85 0f		      sta	PF2
    165  1a55		       85 02		      sta	WSYNC
    166  1a57
    167  1a57		       ca		      dex
    168  1a58		       d0 e3		      bne	.Loop
    169  1a5a
    170  1a5a		       88		      dey
    171  1a5b		       c0 03		      cpy	#3
    172  1a5d		       d0 dc		      bne	.HealthBottom
    173  1a5f
    174  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    175  1a5f
    176  1a5f		       a9 00		      lda	#$00
    177  1a61		       85 1b		      sta	GRP0
    178  1a63		       85 1c		      sta	GRP1
    179  1a65		       85 0b		      sta	REFP0
    180  1a67		       85 0c		      sta	REFP1
    181  1a69		       85 0f		      sta	PF2
    182  1a6b
    183  1a6b		       85 02		      sta	WSYNC
------- FILE code/Kernel.asm
     14  1a6d
     15  1a6d		       a9 02		      lda	#2
     16  1a6f		       85 01		      sta	VBLANK	; disable display
     17  1a71
     18  1a71		       4c 43 10 	      jmp	Overscan
------- FILE main.asm
     66  1a74
     67  1a74		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     68  1a75
     69  1a75
     70  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     71  1a75							; Data Tables
     72  1a75							;
     73  1a75							; Include data tables
     74  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  1a75
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1a75					      include	data/Graphics.asm
      1  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a75							; Graphics Tables
      3  1a75							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a75
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       78		      .byte.b	%01111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50				   LevelGfx
    130  1b50
    131  1b50		       34		      .byte.b	$34
    132  1b51		       04		      .byte.b	$04
    133  1b52		       04		      .byte.b	$04
    134  1b53		       04		      .byte.b	$04
    135  1b54		       04		      .byte.b	$04
    136  1b55		       04		      .byte.b	$04
    137  1b56		       24		      .byte.b	$24
    138  1b57
    139  1b57
    140  1b57
    141  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1b57							; Throbbing Line Graphics
    143  1b57							;
    144  1b57							; Graphics tables for the throbbing lines
    145  1b57							;
    146  1b57							; Table takes up $18 (24) bytes of ROM
    147  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b57
    149  1b57				   ThrobGfx
    150  1b57
    151  1b57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1b58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1b59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1b5a
    155  1b5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1b5a
    157  1b5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1b5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1b5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1b5d
    161  1b5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1b5d
    163  1b5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1b5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1b5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1b60
    167  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1b60
    169  1b60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1b61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1b62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1b63
    173  1b63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1b63
    175  1b63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1b64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1b65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1b66
    179  1b66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1b66
    181  1b66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1b67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1b68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1b69
    185  1b69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1b69
    187  1b69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1b6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1b6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1b6c
    191  1b6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1b6c
    193  1b6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1b6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1b6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1b6f
    197  1b6f
    198  1b6f
    199  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1b6f							; Health Graphics
    201  1b6f							;
    202  1b6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1b6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1b6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1b6f							; the graphics for the lower right are flipped.
    206  1b6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1b6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1b6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1b6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1b6f							; LOWER 4 lines of graphics (also upside-down).
    211  1b6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1b6f							; health graphics drawn with the playfield.
    213  1b6f							;
    214  1b6f							; Table takes up $45 (69) bytes of ROM
    215  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1b6f
    217  1b6f				   HealthTopGfx
    218  1b6f
    219  1b6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1b70		       43		      .byte.b	%01000011
    221  1b71		       44		      .byte.b	%01000100
    222  1b72		       48		      .byte.b	%01001000
    223  1b73		       30		      .byte.b	%00110000
    224  1b74
    225  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1b74				   HealthLeftGfx
    227  1b74
    228  1b74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1b75		       8c		      .byte.b	%10001100
    230  1b76		       84		      .byte.b	%10000100
    231  1b77		       80		      .byte.b	%10000000
    232  1b78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1b79		       20		      .byte.b	%00100000
    234  1b7a		       47		      .byte.b	%01000111
    235  1b7b		       84		      .byte.b	%10000100
    236  1b7c
    237  1b7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1b7c
    239  1b7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1b7d		       8c		      .byte.b	%10001100
    241  1b7e		       84		      .byte.b	%10000100
    242  1b7f		       80		      .byte.b	%10000000
    243  1b80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1b81		       20		      .byte.b	%00100000
    245  1b82		       47		      .byte.b	%01000111
    246  1b83		       80		      .byte.b	%10000000
    247  1b84
    248  1b84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1b84
    250  1b84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1b85		       8c		      .byte.b	%10001100
    252  1b86		       84		      .byte.b	%10000100
    253  1b87		       80		      .byte.b	%10000000
    254  1b88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1b89		       20		      .byte.b	%00100000
    256  1b8a		       44		      .byte.b	%01000100
    257  1b8b		       87		      .byte.b	%10000111
    258  1b8c
    259  1b8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1b8c
    261  1b8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1b8d		       9c		      .byte.b	%10011100
    263  1b8e		       80		      .byte.b	%10000000
    264  1b8f		       80		      .byte.b	%10000000
    265  1b90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1b91		       20		      .byte.b	%00100000
    267  1b92		       46		      .byte.b	%01000110
    268  1b93		       81		      .byte.b	%10000001
    269  1b94
    270  1b94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1b94				   HealthRightGfx
    272  1b94
    273  1b94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1b95		       9a		      .byte.b	%10011010
    275  1b96		       90		      .byte.b	%10010000
    276  1b97		       80		      .byte.b	%10000000
    277  1b98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1b99		       20		      .byte.b	%00100000
    279  1b9a		       4f		      .byte.b	%01001111
    280  1b9b		       89		      .byte.b	%10001001
    281  1b9c
    282  1b9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1b9c
    284  1b9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1b9d		       9a		      .byte.b	%10011010
    286  1b9e		       90		      .byte.b	%10010000
    287  1b9f		       80		      .byte.b	%10000000
    288  1ba0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ba1		       20		      .byte.b	%00100000
    290  1ba2		       4f		      .byte.b	%01001111
    291  1ba3		       80		      .byte.b	%10000000
    292  1ba4
    293  1ba4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ba4
    295  1ba4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ba5		       9a		      .byte.b	%10011010
    297  1ba6		       88		      .byte.b	%10001000
    298  1ba7		       80		      .byte.b	%10000000
    299  1ba8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ba9		       20		      .byte.b	%00100000
    301  1baa		       48		      .byte.b	%01001000
    302  1bab		       8f		      .byte.b	%10001111
    303  1bac
    304  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1bac
    306  1bac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1bad		       ba		      .byte.b	%10111010
    308  1bae		       80		      .byte.b	%10000000
    309  1baf		       80		      .byte.b	%10000000
    310  1bb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1bb1		       20		      .byte.b	%00100000
    312  1bb2		       4c		      .byte.b	%01001100
    313  1bb3		       83		      .byte.b	%10000011
    314  1bb4
    315  1bb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1bb4
    317  1bb4							; 3 bytes left in this page
    318  1bb4
    319  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1c00
    321  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1c00				   HealthBgGfx
    323  1c00							; 13 bytes
    324  1c00
    325  1c00		       00		      .byte.b	%00000000
    326  1c01		       3e		      .byte.b	%00111110
    327  1c02		       7f		      .byte.b	%01111111
    328  1c03		       7f		      .byte.b	%01111111
    329  1c04		       7f		      .byte.b	%01111111
    330  1c05		       7f		      .byte.b	%01111111
    331  1c06		       7f		      .byte.b	%01111111
    332  1c07		       7f		      .byte.b	%01111111
    333  1c08		       7f		      .byte.b	%01111111
    334  1c09		       7f		      .byte.b	%01111111
    335  1c0a		       63		      .byte.b	%01100011
    336  1c0b		       63		      .byte.b	%01100011
    337  1c0c		       00		      .byte.b	%00000000
    338  1c0d
    339  1c0d
    340  1c0d
    341  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1c0d							; Progress Bar Graphics
    343  1c0d							;
    344  1c0d							;
    345  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1c0d
    347  1c0d				   PgBarGfx
    348  1c0d							; 9 bytes
    349  1c0d
    350  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1c0f		       3f		      .byte.b	%00111111
    353  1c10		       1f		      .byte.b	%00011111
    354  1c11		       0f		      .byte.b	%00001111
    355  1c12		       07		      .byte.b	%00000111
    356  1c13		       03		      .byte.b	%00000011
    357  1c14		       01		      .byte.b	%00000001
    358  1c15		       00		      .byte.b	%00000000
    359  1c16
    360  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1c16				   PgBarGfxR
    362  1c16							; 8 bytes
    363  1c16
    364  1c16		       ff		      .byte.b	%11111111	; PF2
    365  1c17		       fe		      .byte.b	%11111110
    366  1c18		       fc		      .byte.b	%11111100
    367  1c19		       f8		      .byte.b	%11111000
    368  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1c1c		       c0		      .byte.b	%11000000
    371  1c1d		       80		      .byte.b	%10000000
    372  1c1e
    373  1c1e
    374  1c1e
    375  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1c1e							; Cat Rainbow Graphics
    377  1c1e							;
    378  1c1e							;
    379  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1c1e
    381  1c1e				   RainbowGfx
    382  1c1e							; 4 bytes
    383  1c1e
    384  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1c1f
    386  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1c20
    388  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1c21
    390  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1c22
    392  1d00		       00 00 00 00*	      ALIGN	$100
    393  1d00
    394  1d00				   FoodGfx
    395  1d00
    396  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1d00							; 0 - blank
    398  1d00
    399  1d00		       01		      .byte.b	%00000001
    400  1d01		       80		      .byte.b	%10000000
    401  1d02		       01		      .byte.b	%00000001
    402  1d03		       80		      .byte.b	%10000000
    403  1d04		       01		      .byte.b	%00000001
    404  1d05		       80		      .byte.b	%10000000
    405  1d06		       01		      .byte.b	%00000001
    406  1d07		       80		      .byte.b	%10000000
    407  1d08		       01		      .byte.b	%00000001
    408  1d09		       80		      .byte.b	%10000000
    409  1d0a		       01		      .byte.b	%00000001
    410  1d0b		       80		      .byte.b	%10000000
    411  1d0c		       01		      .byte.b	%00000001
    412  1d0d		       80		      .byte.b	%10000000
    413  1d0e
    414  1d0e		       00		      .byte.b	0
    415  1d0f		       00		      .byte.b	$00
    416  1d10
    417  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1d10							; 1 - apple
    419  1d10
    420  1d10		       34		      .byte.b	%00110100
    421  1d11		       7e		      .byte.b	%01111110
    422  1d12		       7e		      .byte.b	%01111110
    423  1d13		       ff		      .byte.b	%11111111
    424  1d14		       ff		      .byte.b	%11111111
    425  1d15		       ff		      .byte.b	%11111111
    426  1d16		       ff		      .byte.b	%11111111
    427  1d17		       ff		      .byte.b	%11111111
    428  1d18		       ff		      .byte.b	%11111111
    429  1d19		       7f		      .byte.b	%01111111
    430  1d1a		       6a		      .byte.b	%01101010
    431  1d1b		       08		      .byte.b	%00001000
    432  1d1c		       0c		      .byte.b	%00001100
    433  1d1d		       04		      .byte.b	%00000100
    434  1d1e
    435  1d1e		       00		      .byte.b	0
    436  1d1f		       46		      .byte.b	$46
    437  1d20
    438  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1d20							; 2 - peach
    440  1d20
    441  1d20		       3c		      .byte.b	%00111100
    442  1d21		       6e		      .byte.b	%01101110
    443  1d22		       6e		      .byte.b	%01101110
    444  1d23		       df		      .byte.b	%11011111
    445  1d24		       df		      .byte.b	%11011111
    446  1d25		       bf		      .byte.b	%10111111
    447  1d26		       bf		      .byte.b	%10111111
    448  1d27		       bf		      .byte.b	%10111111
    449  1d28		       de		      .byte.b	%11011110
    450  1d29		       5e		      .byte.b	%01011110
    451  1d2a		       6c		      .byte.b	%01101100
    452  1d2b		       18		      .byte.b	%00011000
    453  1d2c		       10		      .byte.b	%00010000
    454  1d2d		       30		      .byte.b	%00110000
    455  1d2e
    456  1d2e		       00		      .byte.b	0
    457  1d2f		       3a		      .byte.b	$3A
    458  1d30
    459  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1d30							; 3 - banana
    461  1d30
    462  1d30		       38		      .byte.b	%00111000
    463  1d31		       7c		      .byte.b	%01111100
    464  1d32		       fe		      .byte.b	%11111110
    465  1d33		       fe		      .byte.b	%11111110
    466  1d34		       ff		      .byte.b	%11111111
    467  1d35		       ff		      .byte.b	%11111111
    468  1d36		       8f		      .byte.b	%10001111
    469  1d37		       07		      .byte.b	%00000111
    470  1d38		       07		      .byte.b	%00000111
    471  1d39		       03		      .byte.b	%00000011
    472  1d3a		       03		      .byte.b	%00000011
    473  1d3b		       02		      .byte.b	%00000010
    474  1d3c		       06		      .byte.b	%00000110
    475  1d3d		       06		      .byte.b	%00000110
    476  1d3e
    477  1d3e		       00		      .byte.b	0
    478  1d3f		       1e		      .byte.b	$1E
    479  1d40
    480  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1d40							; 4 - pear
    482  1d40
    483  1d40		       38		      .byte.b	%00111000
    484  1d41		       7c		      .byte.b	%01111100
    485  1d42		       fe		      .byte.b	%11111110
    486  1d43		       fe		      .byte.b	%11111110
    487  1d44		       fe		      .byte.b	%11111110
    488  1d45		       fe		      .byte.b	%11111110
    489  1d46		       7c		      .byte.b	%01111100
    490  1d47		       7c		      .byte.b	%01111100
    491  1d48		       38		      .byte.b	%00111000
    492  1d49		       38		      .byte.b	%00111000
    493  1d4a		       30		      .byte.b	%00110000
    494  1d4b		       10		      .byte.b	%00010000
    495  1d4c		       18		      .byte.b	%00011000
    496  1d4d		       08		      .byte.b	%00001000
    497  1d4e
    498  1d4e		       00		      .byte.b	0
    499  1d4f		       cc		      .byte.b	$CC
    500  1d50
    501  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1d50							; 5 - plum
    503  1d50
    504  1d50		       38		      .byte.b	%00111000
    505  1d51		       6c		      .byte.b	%01101100
    506  1d52		       6e		      .byte.b	%01101110
    507  1d53		       de		      .byte.b	%11011110
    508  1d54		       df		      .byte.b	%11011111
    509  1d55		       bf		      .byte.b	%10111111
    510  1d56		       bf		      .byte.b	%10111111
    511  1d57		       bf		      .byte.b	%10111111
    512  1d58		       de		      .byte.b	%11011110
    513  1d59		       de		      .byte.b	%11011110
    514  1d5a		       5e		      .byte.b	%01011110
    515  1d5b		       3c		      .byte.b	%00111100
    516  1d5c		       20		      .byte.b	%00100000
    517  1d5d		       60		      .byte.b	%01100000
    518  1d5e
    519  1d5e		       00		      .byte.b	0
    520  1d5f		       88		      .byte.b	$88
    521  1d60
    522  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1d60							; 6 - grapes
    524  1d60
    525  1d60		       18		      .byte.b	%00011000
    526  1d61		       08		      .byte.b	%00001000
    527  1d62		       36		      .byte.b	%00110110
    528  1d63		       12		      .byte.b	%00010010
    529  1d64		       6c		      .byte.b	%01101100
    530  1d65		       24		      .byte.b	%00100100
    531  1d66		       db		      .byte.b	%11011011
    532  1d67		       49		      .byte.b	%01001001
    533  1d68		       36		      .byte.b	%00110110
    534  1d69		       12		      .byte.b	%00010010
    535  1d6a		       6c		      .byte.b	%01101100
    536  1d6b		       34		      .byte.b	%00110100
    537  1d6c		       10		      .byte.b	%00010000
    538  1d6d		       18		      .byte.b	%00011000
    539  1d6e
    540  1d6e		       00		      .byte.b	0
    541  1d6f		       64		      .byte.b	$64
    542  1d70
    543  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1d70							; 7 - broccoli
    545  1d70
    546  1d70		       18		      .byte.b	%00011000
    547  1d71		       18		      .byte.b	%00011000
    548  1d72		       1c		      .byte.b	%00011100
    549  1d73		       3e		      .byte.b	%00111110
    550  1d74		       2a		      .byte.b	%00101010
    551  1d75		       12		      .byte.b	%00010010
    552  1d76		       2a		      .byte.b	%00101010
    553  1d77		       54		      .byte.b	%01010100
    554  1d78		       aa		      .byte.b	%10101010
    555  1d79		       55		      .byte.b	%01010101
    556  1d7a		       aa		      .byte.b	%10101010
    557  1d7b		       55		      .byte.b	%01010101
    558  1d7c		       2a		      .byte.b	%00101010
    559  1d7d		       04		      .byte.b	%00000100
    560  1d7e
    561  1d7e		       00		      .byte.b	0
    562  1d7f		       c7		      .byte.b	$C7
    563  1d80
    564  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1d80							; 8 - cabbage
    566  1d80
    567  1d80		       18		      .byte.b	%00011000
    568  1d81		       76		      .byte.b	%01110110
    569  1d82		       76		      .byte.b	%01110110
    570  1d83		       7a		      .byte.b	%01111010
    571  1d84		       f9		      .byte.b	%11111001
    572  1d85		       fb		      .byte.b	%11111011
    573  1d86		       ed		      .byte.b	%11101101
    574  1d87		       db		      .byte.b	%11011011
    575  1d88		       fb		      .byte.b	%11111011
    576  1d89		       e9		      .byte.b	%11101001
    577  1d8a		       56		      .byte.b	%01010110
    578  1d8b		       76		      .byte.b	%01110110
    579  1d8c		       6e		      .byte.b	%01101110
    580  1d8d		       18		      .byte.b	%00011000
    581  1d8e
    582  1d8e		       00		      .byte.b	0
    583  1d8f		       da		      .byte.b	$DA
    584  1d90
    585  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1d90							; 9 - celery
    587  1d90
    588  1d90		       c0		      .byte.b	%11000000
    589  1d91		       e0		      .byte.b	%11100000
    590  1d92		       70		      .byte.b	%01110000
    591  1d93		       30		      .byte.b	%00110000
    592  1d94		       18		      .byte.b	%00011000
    593  1d95		       18		      .byte.b	%00011000
    594  1d96		       0c		      .byte.b	%00001100
    595  1d97		       0c		      .byte.b	%00001100
    596  1d98		       0e		      .byte.b	%00001110
    597  1d99		       06		      .byte.b	%00000110
    598  1d9a		       0d		      .byte.b	%00001101
    599  1d9b		       0b		      .byte.b	%00001011
    600  1d9c		       0d		      .byte.b	%00001101
    601  1d9d		       06		      .byte.b	%00000110
    602  1d9e
    603  1d9e		       00		      .byte.b	0
    604  1d9f		       d6		      .byte.b	$D6
    605  1da0
    606  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1da0							; A - green pepper
    608  1da0
    609  1da0		       6c		      .byte.b	%01101100
    610  1da1		       6c		      .byte.b	%01101100
    611  1da2		       fe		      .byte.b	%11111110
    612  1da3		       fe		      .byte.b	%11111110
    613  1da4		       f6		      .byte.b	%11110110
    614  1da5		       f6		      .byte.b	%11110110
    615  1da6		       f6		      .byte.b	%11110110
    616  1da7		       f6		      .byte.b	%11110110
    617  1da8		       f6		      .byte.b	%11110110
    618  1da9		       ec		      .byte.b	%11101100
    619  1daa		       7c		      .byte.b	%01111100
    620  1dab		       10		      .byte.b	%00010000
    621  1dac		       18		      .byte.b	%00011000
    622  1dad		       08		      .byte.b	%00001000
    623  1dae
    624  1dae		       00		      .byte.b	0
    625  1daf		       c8		      .byte.b	$C8
    626  1db0
    627  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1db0							; B - pumpkin
    629  1db0
    630  1db0		       3c		      .byte.b	%00111100
    631  1db1		       56		      .byte.b	%01010110
    632  1db2		       b7		      .byte.b	%10110111
    633  1db3		       ad		      .byte.b	%10101101
    634  1db4		       ad		      .byte.b	%10101101
    635  1db5		       ad		      .byte.b	%10101101
    636  1db6		       ad		      .byte.b	%10101101
    637  1db7		       ad		      .byte.b	%10101101
    638  1db8		       b7		      .byte.b	%10110111
    639  1db9		       56		      .byte.b	%01010110
    640  1dba		       3c		      .byte.b	%00111100
    641  1dbb		       18		      .byte.b	%00011000
    642  1dbc		       0c		      .byte.b	%00001100
    643  1dbd		       0c		      .byte.b	%00001100
    644  1dbe
    645  1dbe		       00		      .byte.b	0
    646  1dbf		       2a		      .byte.b	$2A
    647  1dc0
    648  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1dc0							; C - mushroom
    650  1dc0
    651  1dc0		       18		      .byte.b	%00011000
    652  1dc1		       3c		      .byte.b	%00111100
    653  1dc2		       24		      .byte.b	%00100100
    654  1dc3		       24		      .byte.b	%00100100
    655  1dc4		       24		      .byte.b	%00100100
    656  1dc5		       66		      .byte.b	%01100110
    657  1dc6		       a5		      .byte.b	%10100101
    658  1dc7		       99		      .byte.b	%10011001
    659  1dc8		       e7		      .byte.b	%11100111
    660  1dc9		       ff		      .byte.b	%11111111
    661  1dca		       5a		      .byte.b	%01011010
    662  1dcb		       76		      .byte.b	%01110110
    663  1dcc		       3c		      .byte.b	%00111100
    664  1dcd		       18		      .byte.b	%00011000
    665  1dce
    666  1dce		       00		      .byte.b	0
    667  1dcf		       08		      .byte.b	$08
    668  1dd0
    669  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1dd0							; D - key
    671  1dd0
    672  1dd0		       10		      .byte.b	%00010000
    673  1dd1		       1e		      .byte.b	%00011110
    674  1dd2		       1e		      .byte.b	%00011110
    675  1dd3		       18		      .byte.b	%00011000
    676  1dd4		       1e		      .byte.b	%00011110
    677  1dd5		       1e		      .byte.b	%00011110
    678  1dd6		       10		      .byte.b	%00010000
    679  1dd7		       10		      .byte.b	%00010000
    680  1dd8		       10		      .byte.b	%00010000
    681  1dd9		       10		      .byte.b	%00010000
    682  1dda		       38		      .byte.b	%00111000
    683  1ddb		       6c		      .byte.b	%01101100
    684  1ddc		       6c		      .byte.b	%01101100
    685  1ddd		       38		      .byte.b	%00111000
    686  1dde
    687  1dde		       00		      .byte.b	0
    688  1ddf		       2c		      .byte.b	$2C
    689  1de0
    690  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1de0							; E - ring
    692  1de0
    693  1de0		       00		      .byte.b	%00000000
    694  1de1		       18		      .byte.b	%00011000
    695  1de2		       3c		      .byte.b	%00111100
    696  1de3		       66		      .byte.b	%01100110
    697  1de4		       42		      .byte.b	%01000010
    698  1de5		       42		      .byte.b	%01000010
    699  1de6		       42		      .byte.b	%01000010
    700  1de7		       66		      .byte.b	%01100110
    701  1de8		       3c		      .byte.b	%00111100
    702  1de9		       18		      .byte.b	%00011000
    703  1dea		       18		      .byte.b	%00011000
    704  1deb		       2c		      .byte.b	%00101100
    705  1dec		       18		      .byte.b	%00011000
    706  1ded		       00		      .byte.b	%00000000
    707  1dee
    708  1dee		       00		      .byte.b	0
    709  1def		       2c		      .byte.b	$2C
    710  1df0
    711  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1df0							; F - heart
    713  1df0
    714  1df0		       00		      .byte.b	%00000000
    715  1df1		       18		      .byte.b	%00011000
    716  1df2		       18		      .byte.b	%00011000
    717  1df3		       3c		      .byte.b	%00111100
    718  1df4		       3c		      .byte.b	%00111100
    719  1df5		       7e		      .byte.b	%01111110
    720  1df6		       7e		      .byte.b	%01111110
    721  1df7		       ff		      .byte.b	%11111111
    722  1df8		       ff		      .byte.b	%11111111
    723  1df9		       ff		      .byte.b	%11111111
    724  1dfa		       e7		      .byte.b	%11100111
    725  1dfb		       e7		      .byte.b	%11100111
    726  1dfc		       42		      .byte.b	%01000010
    727  1dfd		       00		      .byte.b	%00000000
    728  1dfe
    729  1dfe		       00		      .byte.b	0
    730  1dff		       4a		      .byte.b	$4A
    731  1e00
    732  1e00				   RainbowColors
    733  1e00
    734  1e00		       64		      .byte.b	$64
    735  1e01		       88		      .byte.b	$88
    736  1e02		       c8		      .byte.b	$C8
    737  1e03		       1e		      .byte.b	$1E
    738  1e04		       28		      .byte.b	$28
    739  1e05		       44		      .byte.b	$44
    740  1e06
    741  1e06				   CatTartGfx
    742  1e06
    743  1e06		       00 00 00 00*	      ds	18, $00
    744  1e18
    745  1e18		       00		      .byte.b	%00000000
    746  1e19		       00		      .byte.b	%00000000
    747  1e1a		       e0		      .byte.b	%11100000
    748  1e1b		       c0		      .byte.b	%11000000
    749  1e1c		       c0		      .byte.b	%11000000
    750  1e1d		       c0		      .byte.b	%11000000
    751  1e1e		       c0		      .byte.b	%11000000
    752  1e1f		       c0		      .byte.b	%11000000
    753  1e20		       c0		      .byte.b	%11000000
    754  1e21		       e0		      .byte.b	%11100000
    755  1e22		       e0		      .byte.b	%11100000
    756  1e23		       e0		      .byte.b	%11100000
    757  1e24		       e0		      .byte.b	%11100000
    758  1e25		       e0		      .byte.b	%11100000
    759  1e26		       e0		      .byte.b	%11100000
    760  1e27		       e0		      .byte.b	%11100000
    761  1e28
    762  1e28				   CatFaceGfx
    763  1e28
    764  1e28		       00 00 00 00*	      ds	18, $00
    765  1e3a
    766  1e3a		       36		      .byte.b	%00110110
    767  1e3b		       36		      .byte.b	%00110110
    768  1e3c		       00		      .byte.b	%00000000
    769  1e3d		       7e		      .byte.b	%01111110
    770  1e3e		       c1		      .byte.b	%11000001
    771  1e3f		       d5		      .byte.b	%11010101
    772  1e40		       ff		      .byte.b	%11111111
    773  1e41		       d5		      .byte.b	%11010101
    774  1e42		       dd		      .byte.b	%11011101
    775  1e43		       ff		      .byte.b	%11111111
    776  1e44		       66		      .byte.b	%01100110
    777  1e45		       66		      .byte.b	%01100110
    778  1e46		       42		      .byte.b	%01000010
    779  1e47		       00		      .byte.b	%00000000
    780  1e48
    781  1e48		       00 00 00 00*	      ds	19, $00
------- FILE main.asm
     77  1e5b
     78  1e5b		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     79  1e5c
     80  1e5c
     81  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  1e5c							; End of ROM
     83  1e5c							;
     84  1e5c							; Define the end of the cartridge
     85  1e5c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  1e5c
     87  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     88  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     89  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     90  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
