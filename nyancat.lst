------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10000 ????						;
      3  10000 ????						; Project - Nyan Cat Game
      4  10000 ????						; by Jeremiah Knol
      5  10000 ????						;
      6  10000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  10000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  10000 ????						;
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????						; 11-26-2017 Version 2.1
     12  10000 ????						;
     13  10000 ????						; Add cat with rainbow and food items
     14  10000 ????						;
     15  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  10000 ????
     17  10000 ????
     18  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  10000 ????						; Initialization
     20  10000 ????						;
     21  10000 ????						; Include headers and set address of binary
     22  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  10000 ????
     24  10000 ????						; Define CPU type and include standard VCS header files
     25  10000 ????				       PROCESSOR	6502
     26  10000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	headers/vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	#0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	#1
     49  0000 ????
     50  0000 ????
     51  0000 ????
     52  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  0000 ????						; Program Equates
     54  0000 ????						;
     55  0000 ????						; Equates for constant program values.
     56  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57  0000 ????
     58  0000 ????						; number of scanlines in vertical blank and overscan
     59  0000 ????
     60  0000 ????	       00 25	   VBLANK_SCANLINES equ	#37
     61  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	#29
     62  0000 ????
     63  0000 ????						; converted values to store to TIM64T
     64  0000 ????
     65  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     66  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     67  0000 ????
     68  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  0000 ????						; colors
     70  0000 ????
     71  0000 ????	       00 02	   COL_SCORE  equ	$02
     72  0000 ????						;COL_SCOREBOARD		equ $4C
     73  0000 ????	       00 0e	   COL_SCOREBOARD equ	$0E
     74  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     75  0000 ????	       00 00	   COL_LINES  equ	COL_BACKGROUND
     76  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     77  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     78  0000 ????
     79  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     81  0000 ????
     82  0000 ????	       00 00	   LUM_0      equ	$00
     83  0000 ????	       00 02	   LUM_2      equ	$02
     84  0000 ????	       00 04	   LUM_4      equ	$04
     85  0000 ????	       00 06	   LUM_6      equ	$06
     86  0000 ????	       00 08	   LUM_8      equ	$08
     87  0000 ????	       00 0a	   LUM_A      equ	$0A
     88  0000 ????	       00 0c	   LUM_C      equ	$0C
     89  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00c0 ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for the level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw the progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of the 5 values to be written to the playfield
     39 U008e							; registers when drawing the progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for the full part of the progress bar
     42 U008f
     43 U008f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44 U008f							; Variables for the health display
     45 U008f
     46 U008f		       00	   Health     ds	1	; amount of health
     47 U0090							; 0=full 8=medium 16=low 24=empty
     48 U0090
     49 U0090		       00 00	   HthGfxLPtr ds	2	; pointer for the left half of the health graphics
     50 U0092		       00 00	   HthGfxRPtr ds	2	; pointer for the right half of the health graphics
     51 U0094
     52 U0094							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53 U0094							; Variables used when drawing the cat
     54 U0094
     55 U0094		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     56 U0095
     57 U0095		       00 00	   RbowColPtr1 ds	2	; pointer for the playfield rainbow color
     58 U0097		       00 00	   RbowColPtr2 ds	2	; pointer for the background rainbow color
     59 U0099
     60 U0099		       00 00	   TartGfxPtr ds	2	; pointer for the tart graphics
     61 U009b		       00 00	   CatGfxPtr  ds	2	; pointer for the cat face/paws graphics
     62 U009d
     63 U009d		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     64 U009e		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     65 U009f
     66 U009f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67 U009f							; Variables used for the food items
     68 U009f
     69 U009f		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
     70 U00a6		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
     71 U00ad							; the left items, last 7 bytes are for the right items.
     72 U00ad							; Hi nybble holds the value (0-15) of the item to draw.
     73 U00ad							; Lo nybble holds the value of next frame's item.
     74 U00ad							; All nybbles are swapped at the start of each frame.
     75 U00ad
     76 U00ad		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
     77 U00b4
     78 U00b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79 U00b4							; Variables for the throbbing lines' colors
     80 U00b4
     81 U00b4		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     82 U00b7							; throbbing lines. The first color is darkest,
     83 U00b7							; the last is brightest.
     84 U00b7
     85 U00b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86 U00b7							; Temporary variables which cannot be shared with stack space
     87 U00b7
     88 U00b7		       00	   TempLoop   ds	1
     89 U00b8
     90 U00b8							; 57 of 79 non-temporary RAM bytes used (22 left)
     91 U00b8							; last 49 bytes of RAM are used for stack space
     92 U00b8
     93 U00b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     94 U00b8							; Temporary variables which can be shared with stack space
     95 U00b8
     96 U00b8		       00	   Temp       ds	1
     97 U00b9
     98 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99 U00b9							; Other variables which can be shared with stack space
    100 U00b9
    101 U00b9		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    102 U00ba
    103 U00ba		       00 00	   FoodGfxPtr1 ds	2	; pointer for the 1st food item's graphics
    104 U00bc		       00	   FoodColor1 ds	1	; color if the 1st food item
    105 U00bd
    106 U00bd		       00 00	   FoodGfxPtr2 ds	2	; pointer for the 2nd food item's graphics
    107 U00bf		       00	   FoodColor2 ds	1	; color if the 2nd food item
    108 U00c0
    109 U00c0							; 8 of 49 temporary RAM bytes used (42 left)
------- FILE main.asm
     34 U00c0
     35 U00c0							; Ensure that the code is placed in the proper place in the binary
     36 U00c0
     37  10000 ????				       SEG	CODE
     38  f000					      ORG	$F000	; 4K ROM
     39  f000
     40  f000
     41  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  f000							; Full System Clear
     43  f000							;
     44  f000							; Clear all system registers and RAM at startup
     45  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  f000
     47  f000				   SystemClear
     48  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b
     52  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  f00b							; Game Logic
     54  f00b							;
     55  f00b							; Do the overscan, vertycal sync, and vertical blanking,
     56  f00b							; along with any game logic
     57  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  f00b
------- FILE code/GameLogic.asm LEVEL 2 PASS 2
      0  f00b					      include	code/GameLogic.asm
      1  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f00b							; Overscan
      3  f00b							;
      4  f00b							; Start the overscan timer and do game logic
      5  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f00b
      7  f00b				   Overscan
      8  f00b
      9  f00b		       a9 23		      lda	#OVERSCAN_TIMER
     10  f00d		       85 02		      sta	WSYNC
     11  f00f		       8d 96 02 	      sta	TIM64T	; 03
     12  f012
     13  f012
     14  f012
     15  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f012							; Update Score
     17  f012							;
     18  f012							; Add to the score
     19  f012							;
     20  f012							; Takes 45 cycles to complete
     21  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f012
     23  f012		       a5 85		      lda	BCDScoreAdd+1	; 2
     24  f014		       a6 84		      ldx	BCDScoreAdd	; 2
     25  f016
     26  f016		       f8		      sed		; 2 - enable BCD mode
     27  f017
     28  f017		       18		      clc		; 2
     29  f018		       85 b8		      sta	Temp	; 3
     30  f01a		       a5 83		      lda	BCDScore+2	; 2
     31  f01c		       65 b8		      adc	Temp	; 3
     32  f01e		       85 83		      sta	BCDScore+2	; 3
     33  f020		       86 b8		      stx	Temp	; 3
     34  f022		       a5 82		      lda	BCDScore+1	; 2
     35  f024		       65 b8		      adc	Temp	; 3
     36  f026		       85 82		      sta	BCDScore+1	; 3
     37  f028		       a9 00		      lda	#$00	; 2
     38  f02a		       85 b8		      sta	Temp	; 3
     39  f02c		       a5 81		      lda	BCDScore+0	; 2
     40  f02e		       65 b8		      adc	Temp	; 3
     41  f030		       85 81		      sta	BCDScore+0	; 3
     42  f032
     43  f032		       d8		      cld		; 2 - disable BCD mode
     44  f033
     45  f033
     46  f033
     47  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  f033							; Finish Overscan
     49  f033							;
     50  f033							; Loop until the end of overscan
     51  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  f033
     53  f033				   OverscanTimerLoop
     54  f033		       ad 84 02 	      lda	INTIM
     55  f036		       d0 fb		      bne	OverscanTimerLoop
     56  f038
     57  f038
     58  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f038							; Vertical Sync
     60  f038							;
     61  f038							; Do the vertical sync and start the vertical blanking timer
     62  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f038
     64  f038		       a9 02		      lda	#2
     65  f03a		       85 02		      sta	WSYNC
     66  f03c		       85 00		      sta	VSYNC	; enable VSYNC
     67  f03e
     68  f03e		       85 02		      sta	WSYNC
     69  f040		       a9 2d		      lda	#VBLANK_TIMER
     70  f042		       85 02		      sta	WSYNC
     71  f044		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     72  f047
     73  f047		       85 2b		      sta	HMCLR	; clear any HMOVE offsets
     74  f049
     75  f049		       a9 00		      lda	#0
     76  f04b		       85 02		      sta	WSYNC
     77  f04d		       85 00		      sta	VSYNC	; disable VSYNC
     78  f04f
     79  f04f
     80  f04f
     81  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  f04f							; Vertical Blank
     83  f04f							;
     84  f04f							; Do the vertical blanking and game logic
     85  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  f04f
     87  f04f
     88  f04f
     89  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  f04f							; Prepare Scoreboard and Level Progress Displays
     91  f04f							;
     92  f04f							; Set object positions for scoreboard kernel.
     93  f04f							; Also load the values for the playfield registers in RAM
     94  f04f							; for drawing the level progress bar.
     95  f04f							;
     96  f04f							; Takes 193 cycles (2 full scanlines + 41 cycles)
     97  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  f04f
     99  f04f		       a9 b0		      lda	#$B0	; 05 - set HMOVE offsets for both player objects
    100  f051		       85 20		      sta	HMP0	; 08
    101  f053		       a9 c0		      lda	#$C0	; 10
    102  f055		       85 21		      sta	HMP1	; 13
    103  f057		       a9 80		      lda	#$80	; 15 - set HMOVE offsets for ball and missile0
    104  f059		       85 24		      sta	HMBL	; 18
    105  f05b		       85 22		      sta	HMM0	; 21
    106  f05d
      0  f05d					      SLEEP	3	; 24
      1  f05d				   .CYCLES    SET	3
      2  f05d
      3  f05d				  -	      IF	.CYCLES < 2
      4  f05d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05d				  -	      ERR
      6  f05d					      ENDIF
      7  f05d
      8  f05d					      IF	.CYCLES & 1
      9  f05d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05d		       04 00		      nop	0
     11  f05f				  -	      ELSE
     12  f05f				  -	      bit	VSYNC
     13  f05f					      ENDIF
     14  f05f				   .CYCLES    SET	.CYCLES - 3
     15  f05f					      ENDIF
     16  f05f
     17  f05f				  -	      REPEAT	.CYCLES / 2
     18  f05f				  -	      nop
     19  f05f					      REPEND
    108  f05f
    109  f05f		       85 10		      sta	RESP0	; 27 - set player positions
    110  f061		       85 11		      sta	RESP1	; 30
    111  f063
    112  f063		       a9 d0		      lda	#$D0	; 32 - set HMOVE offset for missile1
    113  f065		       85 23		      sta	HMM1	; 35
    114  f067
    115  f067							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  f067							; reset all progress bar playfield graphics RAM (and use 21 cycles)
    117  f067
    118  f067		       a9 e0		      lda	#%11100000	; 37
    119  f069		       85 89		      sta	ProgressBar+0	; 40
    120  f06b		       a9 ff		      lda	#%11111111	; 42
    121  f06d		       85 8a		      sta	ProgressBar+1	; 45
    122  f06f		       85 8b		      sta	ProgressBar+2	; 48
    123  f071		       85 8c		      sta	ProgressBar+3	; 51
    124  f073		       a9 fe		      lda	#%11111110	; 53
    125  f075		       85 8d		      sta	ProgressBar+4	; 56
    126  f077
    127  f077		       85 14		      sta	RESBL	; 59 - set ball and missile positions
    128  f079		       85 12		      sta	RESM0	; 62
    129  f07b		       85 13		      sta	RESM1	; 65
    130  f07d
    131  f07d		       85 02		      sta	WSYNC
    132  f07f		       85 2a		      sta	HMOVE
    133  f081
    134  f081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  f081							; Load RAM for progress bar display (takes 28-53 cycles)
    136  f081
    137  f081		       a5 88		      lda	Progress	; 3 - get amount of progress
    138  f083
    139  f083							; The level progress bar uses the following playfield bits:
    140  f083							; (note that PF0 and PF2 are NOT reversed in this diagram)
    141  f083							;
    142  f083							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    143  f083							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    144  f083							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    145  f083							;
    146  f083							; When the progress bar is empty, every bit labeled "X" above should be
    147  f083							; set (1), and when it is full, every "X" bit should be cleared (0).
    148  f083							; The bits labeled "o" must ALWAYS be cleared.
    149  f083							;
    150  f083							; The leftmost playfield value (the 1st PF0) will be calculated first,
    151  f083							; and then each playfield value to the right until the 2nd PF1
    152  f083							; will be calculated.
    153  f083
    154  f083		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    155  f085
    156  f085		       38		      sec		; 2
    157  f086		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    158  f088		       30 1e		      bmi	.Underflow1	; 2/3
    159  f08a		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    160  f08c
    161  f08c		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    162  f08e		       30 23		      bmi	.Underflow2	; 2/3
    163  f090		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    164  f092
    165  f092		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    166  f094		       30 28		      bmi	.Underflow3	; 2/3
    167  f096		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    168  f098
    169  f098		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    170  f09a		       30 2d		      bmi	.Underflow4	; 2/3
    171  f09c		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    172  f09e
    173  f09e		       aa		      tax		; 2
    174  f09f		       bd 0e f7 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    175  f0a2		       0a		      asl		; 2
    176  f0a3		       85 8d		      sta	ProgressBar+4	; 3
    177  f0a5		       4c d1 f0 	      jmp	.Finish	; 3
    178  f0a8
    179  f0a8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  f0a8				   .Underflow1		; for 1st PF0
    181  f0a8
    182  f0a8		       69 03		      adc	#3	; 3 - add back the 3
    183  f0aa		       aa		      tax		; 2
    184  f0ab		       bd 1b f7 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    185  f0ae		       85 89		      sta	ProgressBar	; 3
    186  f0b0		       4c d1 f0 	      jmp	.Finish	; 3
    187  f0b3
    188  f0b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f0b3				   .Underflow2		; for 1st PF1
    190  f0b3
    191  f0b3		       69 08		      adc	#8	; 3 - add back the 8
    192  f0b5		       aa		      tax		; 2
    193  f0b6		       bd 0d f7 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    194  f0b9		       85 8a		      sta	ProgressBar+1	; 3
    195  f0bb		       4c d1 f0 	      jmp	.Finish	; 3
    196  f0be
    197  f0be							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    198  f0be				   .Underflow3		; for PF2
    199  f0be
    200  f0be		       69 08		      adc	#8	; 3 - add back the 8
    201  f0c0		       aa		      tax		; 2
    202  f0c1		       bd 16 f7 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    203  f0c4		       85 8b		      sta	ProgressBar+2	; 3
    204  f0c6		       4c d1 f0 	      jmp	.Finish	; 3
    205  f0c9
    206  f0c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    207  f0c9				   .Underflow4		; for 2nd PF0
    208  f0c9
    209  f0c9		       69 04		      adc	#4	; 3 - add back the 4
    210  f0cb		       aa		      tax		; 2
    211  f0cc		       bd 1a f7 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    212  f0cf		       85 8c		      sta	ProgressBar+3	; 3
    213  f0d1
    214  f0d1							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f0d1				   .Finish
    216  f0d1
    217  f0d1		       85 2b		      sta	HMCLR	; 56
    218  f0d3		       a9 b0		      lda	#$B0	; 58 - another HMOVE is neccesary for the ball
    219  f0d5		       85 24		      sta	HMBL	; 61
    220  f0d7		       e6 80		      inc	Frame	; 66 increment the frame number
    221  f0d9
    222  f0d9		       85 02		      sta	WSYNC
    223  f0db		       85 2a		      sta	HMOVE
    224  f0dd
    225  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  f0dd							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    227  f0dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f0dd
    229  f0dd		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2	; 2
    230  f0df		       85 04		      sta	NUSIZ0	; 3
    231  f0e1		       85 05		      sta	NUSIZ1	; 3
    232  f0e3
    233  f0e3		       a9 01		      lda	#VDEL_TRUE	; 2
    234  f0e5		       85 25		      sta	VDELP0	; 3
    235  f0e7		       85 26		      sta	VDELP1	; 3
    236  f0e9
    237  f0e9		       a9 02		      lda	#COL_SCORE	; 2
    238  f0eb		       85 06		      sta	COLUP0	; 3
    239  f0ed		       85 07		      sta	COLUP1	; 3
    240  f0ef		       85 08		      sta	COLUPF	; 3
    241  f0f1		       85 09		      sta	COLUBK	; 3
    242  f0f3		       85 86		      sta	ScoreColor	; 3
    243  f0f5		       a9 56		      lda	#$56	; 2
    244  f0f7		       85 8e		      sta	PgBarColor	; 3
    245  f0f9
    246  f0f9
    247  f0f9
    248  f0f9		       a9 00		      lda	#$00
    249  f0fb		       85 84		      sta	BCDScoreAdd
    250  f0fd		       a9 00		      lda	#$00
    251  f0ff		       85 85		      sta	BCDScoreAdd+1
    252  f101
    253  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f101							; Prepare Health Display
    255  f101							;
    256  f101							; Set the pointers for the health graphics
    257  f101							;
    258  f101							; Takes 28 cycles to complete
    259  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  f101
    261  f101		       18		      clc		; 2
    262  f102
    263  f102		       a9 bd		      lda	#<HealthLeftGfx	; 2
    264  f104		       65 8f		      adc	Health	; 3
    265  f106		       85 90		      sta	HthGfxLPtr	; 3
    266  f108		       a9 f6		      lda	#>HealthLeftGfx	; 2
    267  f10a		       85 91		      sta	HthGfxLPtr+1	; 3
    268  f10c
    269  f10c		       a9 dd		      lda	#<HealthRightGfx	; 2
    270  f10e		       65 8f		      adc	Health	; 3
    271  f110		       85 92		      sta	HthGfxRPtr	; 3
    272  f112		       a9 f6		      lda	#>HealthRightGfx	; 2
    273  f114		       85 93		      sta	HthGfxRPtr+1	; 3
    274  f116
    275  f116
    276  f116
    277  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    278  f116							; Prepare for Throbbing Lines
    279  f116							;
    280  f116							; Set the offset value for the throbbing line graphics
    281  f116							;
    282  f116							; Takes 20 cycles to complete
    283  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    284  f116
    285  f116		       a5 80		      lda	Frame	; 3 - get the current frame number
    286  f118		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    287  f11a		       4a		      lsr		; 2
    288  f11b		       4a		      lsr		; 2 - shift to get a value from 0-7
    289  f11c		       85 b8		      sta	Temp	; 3
    290  f11e		       0a		      asl		; 2 - carry flag will always be clear after this
    291  f11f		       65 b8		      adc	Temp	; 3 - multiply by 3
    292  f121		       a8		      tay
    293  f122		       b9 a0 f6 	      lda	LineThrobGfx+0,y
    294  f125		       85 b4		      sta	ThrobColor+0
    295  f127		       b9 a1 f6 	      lda	LineThrobGfx+1,y
    296  f12a		       85 b5		      sta	ThrobColor+1
    297  f12c		       b9 a2 f6 	      lda	LineThrobGfx+2,y
    298  f12f		       85 b6		      sta	ThrobColor+2
    299  f131
    300  f131
    301  f131
    302  f131							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    303  f131							; Prepare for Main Gameplay Kernel
    304  f131							;
    305  f131							; Figure out how many rows to draw before and after the two cat rows
    306  f131							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    307  f131
    308  f131							;lda CatPosY
    309  f131
    310  f131		       a9 03		      lda	#3
    311  f133		       85 9d		      sta	PreCatRows
    312  f135		       a9 02		      lda	#2
    313  f137		       85 9e		      sta	PostCatRows
    314  f139
    315  f139
    316  f139
    317  f139							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    318  f139							; Load Scoreboard
    319  f139							;
    320  f139							; Get graphics data for the scoreboard and push it onto the stack
    321  f139							;
    322  f139							; Takes 1245 cycles to complete (16 full scanlines + 29 cycles)
    323  f139							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    324  f139
    325  f139					      SUBROUTINE
    326  f139
    327  f139		       a9 06		      lda	#6	; 2 - start with bottom of digit graphics data
    328  f13b		       85 b7		      sta	TempLoop	; 3
    329  f13d
    330  f13d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    331  f13d				   .Loop
    332  f13d
    333  f13d							; push level counter graphics data
    334  f13d		       a5 87		      lda	BCDLevel	; 3 - get level counter
    335  f13f		       29 0f		      and	#$0F	; 2 - isolate left nybble/digit
    336  f141		       0a		      asl		; 2
    337  f142		       0a		      asl		; 2
    338  f143		       0a		      asl		; 2 - digit value * 8
    339  f144							; no need to clc, carry will always be clear
    340  f144		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    341  f146		       a8		      tay		; 2
    342  f147		       b9 50 f6 	      lda	LevelGfx,y	; 4
    343  f14a		       48		      pha		; 3
    344  f14b
    345  f14b		       a2 02		      ldx	#2	; 2 - start with rightmost BCD score value
    346  f14d							; (we must push to stack in reverse of drawing order)
    347  f14d				   .DigitLoop
    348  f14d
    349  f14d							; right nybble
    350  f14d		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    351  f14f		       29 0f		      and	#$0F	; 2 - isolate right nybble/digit
    352  f151		       0a		      asl		; 2
    353  f152		       0a		      asl		; 2
    354  f153		       0a		      asl		; 2 - digit value * 8
    355  f154							; no need to clc, carry will always be clear
    356  f154		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    357  f156		       a8		      tay		; 2
    358  f157		       b9 00 f6 	      lda	ScoreGfx,y	; 4
    359  f15a		       48		      pha		; 3
    360  f15b
    361  f15b							; left nybble
    362  f15b		       b5 81		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    363  f15d		       29 f0		      and	#$F0	; 2 - isolate left nybble/digit
    364  f15f		       4a		      lsr		; 2 - digit value * 8
    365  f160							; no need to clc, carry will always be clear
    366  f160		       65 b7		      adc	TempLoop	; 3 - add offset for current loop iteration
    367  f162		       a8		      tay		; 2
    368  f163		       b9 00 f6 	      lda	ScoreGfx,y	; 4
    369  f166		       48		      pha		; 3
    370  f167
    371  f167		       ca		      dex		; 2
    372  f168		       10 e3		      bpl	.DigitLoop	; 2/3
    373  f16a
    374  f16a		       c6 b7		      dec	TempLoop	; 5
    375  f16c		       10 cf		      bpl	.Loop	; 2/3
    376  f16e
    377  f16e
    378  f16e
    379  f16e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  f16e							; Finish Vertical Blanking
    381  f16e							;
    382  f16e							; Loop until the end of vertical blanking
    383  f16e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    384  f16e
    385  f16e				   VblankTimerLoop
    386  f16e		       ad 84 02 	      lda	INTIM
    387  f171		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     60  f173
     61  f173
     62  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f173							; Kernel
     64  f173							;
     65  f173							; Draw the screen
     66  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     67  f173
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  f173					      include	code/Kernel.asm
      1  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f173							; Kernel
      3  f173							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f173
      5  f173		       a9 00		      lda	#0
      6  f175		       85 02		      sta	WSYNC
      7  f177		       85 01		      sta	VBLANK	; enable display
      8  f179
      9  f179							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  f179					      include	code/ScoreboardKernel.asm
      1  f179							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f179							; Scoreboard Display
      3  f179							;
      4  f179							; Draw the 6-digit score and level counter.
      5  f179							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f179
      7  f179					      SUBROUTINE
      8  f179
      9  f179		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  f17b		       85 0a		      sta	CTRLPF
     11  f17d
     12  f17d		       a9 ff		      lda	#$FF
     13  f17f		       85 0d		      sta	PF0
     14  f181
     15  f181		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  f183		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  f185		       85 0e		      sta	PF1	; display kernel loop.
     18  f187
     19  f187		       a0 05		      ldy	#5
     20  f189
     21  f189							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f189				   ScoreTop		; draw border above scoreboard
     23  f189
     24  f189		       85 02		      sta	WSYNC
     25  f18b
     26  f18b		       a9 00		      lda	#0
     27  f18d		       85 1b		      sta	GRP0
     28  f18f		       85 1c		      sta	GRP1
     29  f191
     30  f191		       88		      dey
     31  f192		       d0 f5		      bne	ScoreTop
     32  f194
     33  f194		       a9 80		      lda	#$80
     34  f196		       85 0e		      sta	PF1
     35  f198
     36  f198		       a9 0e		      lda	#COL_SCOREBOARD
     37  f19a		       85 09		      sta	COLUBK
     38  f19c
     39  f19c		       85 02		      sta	WSYNC
     40  f19e		       85 02		      sta	WSYNC
     41  f1a0
      0  f1a0					      SLEEP	48
      1  f1a0				   .CYCLES    SET	48
      2  f1a0
      3  f1a0				  -	      IF	.CYCLES < 2
      4  f1a0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a0				  -	      ERR
      6  f1a0					      ENDIF
      7  f1a0
      8  f1a0				  -	      IF	.CYCLES & 1
      9  f1a0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a0				  -	      nop	0
     11  f1a0				  -	      ELSE
     12  f1a0				  -	      bit	VSYNC
     13  f1a0				  -	      ENDIF
     14  f1a0				  -.CYCLES    SET	.CYCLES - 3
     15  f1a0					      ENDIF
     16  f1a0
     17  f1a0					      REPEAT	.CYCLES / 2
     18  f1a0		       ea		      nop
     17  f1a0					      REPEND
     18  f1a1		       ea		      nop
     17  f1a1					      REPEND
     18  f1a2		       ea		      nop
     17  f1a2					      REPEND
     18  f1a3		       ea		      nop
     17  f1a3					      REPEND
     18  f1a4		       ea		      nop
     17  f1a4					      REPEND
     18  f1a5		       ea		      nop
     17  f1a5					      REPEND
     18  f1a6		       ea		      nop
     17  f1a6					      REPEND
     18  f1a7		       ea		      nop
     17  f1a7					      REPEND
     18  f1a8		       ea		      nop
     17  f1a8					      REPEND
     18  f1a9		       ea		      nop
     17  f1a9					      REPEND
     18  f1aa		       ea		      nop
     17  f1aa					      REPEND
     18  f1ab		       ea		      nop
     17  f1ab					      REPEND
     18  f1ac		       ea		      nop
     17  f1ac					      REPEND
     18  f1ad		       ea		      nop
     17  f1ad					      REPEND
     18  f1ae		       ea		      nop
     17  f1ae					      REPEND
     18  f1af		       ea		      nop
     17  f1af					      REPEND
     18  f1b0		       ea		      nop
     17  f1b0					      REPEND
     18  f1b1		       ea		      nop
     17  f1b1					      REPEND
     18  f1b2		       ea		      nop
     17  f1b2					      REPEND
     18  f1b3		       ea		      nop
     17  f1b3					      REPEND
     18  f1b4		       ea		      nop
     17  f1b4					      REPEND
     18  f1b5		       ea		      nop
     17  f1b5					      REPEND
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     19  f1b8					      REPEND
     43  f1b8
     44  f1b8		       a5 87		      lda	BCDLevel
     45  f1ba		       4a		      lsr
     46  f1bb		       4a		      lsr
     47  f1bc		       4a		      lsr
     48  f1bd		       85 1f		      sta	ENABL	; draw ball if bit-4 is set (if level > 9)
     49  f1bf
     50  f1bf		       4c 1a f2 	      jmp	.EntrancePoint
     51  f1c2
     52  f200		       00 00 00 00*	      ALIGN	$100
     53  f200
     54  f200							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55  f200				   .ScoreDigitLoop
     56  f200
     57  f200							; A contains gfx for digit3
     58  f200		       85 1b		      sta	GRP0	; 14	digit3 -> [GRP0]	digit2 -> GRP1
     59  f202
     60  f202							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     61  f202
     62  f202		       68		      pla		; 18	pull gfx for digit4...
     63  f203		       a8		      tay		; 20	...and store in Y
     64  f204		       68		      pla		; 24	pull gfx data for digit5...
     65  f205		       aa		      tax		; 26	...and store in X
     66  f206		       68		      pla		; 30	pull gfx data for digit6 to A
     67  f207
     68  f207		       84 1c		      sty	GRP1	; 33	digit4 -> [GRP1]	digit3 -> GRP0
     69  f209		       86 1b		      stx	GRP0	; 36	digit5 -> [GRP0]	digit4 -> GRP1
     70  f20b		       85 1c		      sta	GRP1	; 39	digit6 -> [GRP1]	digit5 -> GRP0
     71  f20d		       85 1b		      sta	GRP0	; 42	digit6 -> [GRP0]	digit6 -> GRP1
     72  f20f
     73  f20f		       68		      pla		; 46	pull gfx data for level counter
     74  f210		       85 1d		      sta	ENAM0	; 49	use bit 1 of data for ENAM0
     75  f212		       2a		      rol		; 51
     76  f213		       85 1e		      sta	ENAM1	; 54	use bit 0 of data for ENAM1
     77  f215		       6a		      ror		; 56
     78  f216		       6a		      ror		; 58
     79  f217		       6a		      ror		; 60
     80  f218		       85 04		      sta	NUSIZ0	; 63	use bits 2-7 of data (re-aligned) for NUSIZ0
     81  f21a
     82  f21a				   .EntrancePoint
     83  f21a
     84  f21a		       68		      pla		; 67	pull gfx for digit1
     85  f21b		       85 1b		      sta	GRP0	; 70	digit1 -> [GRP0]
     86  f21d
     87  f21d		       68		      pla		; 74	pull gfx for digit2
     88  f21e		       8d 1c 00 	      sta.w	GRP1	; 02	digit2 -> [GRP1]	digit1 -> GRP0
     89  f221							;	(use an extra cycle for timing reasons)
     90  f221
     91  f221		       68		      pla		; 06	pull gfx for digit3
     92  f222
     93  f222							; On the final iteration of the loop, the stack will have wrapped
     94  f222							; and pulled from location $02 at this point.
     95  f222							; This happens to be the collision register CXP0FB.
     96  f222							; Bit-7 will always be set in this register,
     97  f222							; and bit-7 is always clear in the score graphics,
     98  f222							; so checking bit-7 of the data pulled is all that you need
     99  f222							; to determine when to terminate the loop.
    100  f222
    101  f222		       aa		      tax		; 08	set flags according to pulled data
    102  f223
    103  f223		       10 db		      bpl	.ScoreDigitLoop	; 10/11	check negative flag to see if the loop is over
    104  f225
    105  f225							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f225
    107  f225		       a9 00		      lda	#0	; 12
    108  f227		       85 1d		      sta	ENAM0	; 15 - disable missiles
    109  f229		       85 1e		      sta	ENAM1	; 18
    110  f22b		       85 1b		      sta	GRP0	; 21 - disable player graphics
    111  f22d		       85 1c		      sta	GRP1	; 24
    112  f22f		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
    113  f231		       85 26		      sta	VDELP1	; 30
    114  f233		       85 1f		      sta	ENABL	; 33 - disable ball
    115  f235		       85 0a		      sta	CTRLPF	; 36 - disable playfield mirroring
    116  f237
    117  f237		       a2 ff		      ldx	#$FF	; 38
    118  f239		       9a		      txs		; 40 - reset the stack pointer
------- FILE code/Kernel.asm
------- FILE code/GameplayKernel.asm LEVEL 3 PASS 2
      0  f23a					      include	code/GameplayKernel.asm
      1  f23a							; The rainbow will be drawn using both the playfield (PF0) and the background.
      2  f23a
      3  f23a							; The pop-tart will be a single-color rectangle drawn with PF1.
      4  f23a
      5  f23a							; The cat's head and front paws will be drawn with player 0.
      6  f23a
      7  f23a							; All the food items will be drawn with player 1. It's NUSIZ will be set to
      8  f23a							; 2 copies wide, and it will use flicker to draw up to 4 food items per row,
      9  f23a							; 2 for each frame.
     10  f23a
     11  f23a
     12  f23a
     13  f23a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14  f23a							; We are currently at cycle 40 in the current scanline.
     15  f23a
     16  f23a
     17  f23a
     18  f23a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  f23a							; Output 4 blank scanlines, while setting up the graphics objects.
     20  f23a
     21  f23a				   PreKernel
     22  f23a
     23  f23a		       85 b9		      sta	CurrentRow	; 43 - reset row counter ('A' still contains zero)
     24  f23c
     25  f23c		       a9 f8		      lda	#>FoodGfx	; 45 - prepare MSB's for both food graphics pointers
     26  f23e		       85 bb		      sta	FoodGfxPtr1+1	; 48 - (the LSB's will be calculated later,
     27  f240		       85 be		      sta	FoodGfxPtr2+1	; 51 - before each row is drawn)
     28  f242
     29  f242		       a9 00		      lda	#<CatTartGfx
     30  f244		       85 99		      sta	TartGfxPtr
     31  f246		       a9 f9		      lda	#>CatTartGfx
     32  f248		       85 9a		      sta	TartGfxPtr+1
     33  f24a
     34  f24a		       a2 0e		      ldx	#<RainbowColors
     35  f24c		       86 95		      stx	RbowColPtr1
     36  f24e		       e8		      inx
     37  f24f		       86 97		      stx	RbowColPtr2
     38  f251
     39  f251		       a9 f9		      lda	#>RainbowColors
     40  f253		       85 96		      sta	RbowColPtr1+1
     41  f255		       85 98		      sta	RbowColPtr2+1
     42  f257
     43  f257		       a5 80		      lda	Frame
     44  f259		       6a		      ror
     45  f25a		       b0 05		      bcs	.Do1
     46  f25c
     47  f25c		       a9 00		      lda	#0
     48  f25e		       4c 64 f2 	      jmp	.Do2
     49  f261
     50  f261				   .Do1
     51  f261		       2a		      rol
     52  f262		       29 f0		      and	#$F0
     53  f264
     54  f264				   .Do2
     55  f264		       85 9f		      sta	FoodItemL
     56  f266		       85 a6		      sta	FoodItemR
     57  f268
     58  f268		       a9 5e		      lda	#<CatFaceGfx
     59  f26a		       85 9b		      sta	CatGfxPtr
     60  f26c		       a9 f7		      lda	#>CatFaceGfx
     61  f26e		       85 9c		      sta	CatGfxPtr+1
     62  f270
     63  f270		       a9 a0		      lda	#%10100000
     64  f272		       85 0d		      sta	PF0
     65  f274
     66  f274		       a9 06		      lda	#COL_CAT_FACE
     67  f276		       85 06		      sta	COLUP0
     68  f278
     69  f278							;lda #88
     70  f278
     71  f278		       a5 80		      lda	Frame
     72  f27a		       29 3f		      and	#%00111111
     73  f27c		       18		      clc
     74  f27d		       69 18		      adc	#24
     75  f27f
     76  f27f		       85 ad		      sta	FoodPosX
     77  f281
     78  f281		       a9 80		      lda	#$80
     79  f283		       85 20		      sta	HMP0
     80  f285
     81  f285							; Player 0 is already aligned for drawing the cat's face.
     82  f285
     83  f285							; Align player 1 to draw the current frame's food items for the top row.
     84  f285
     85  f285							; food item can be placed anywhere from 0-88
     86  f285							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     87  f285
     88  f285		       85 02		      sta	WSYNC
     89  f287
     90  f287		       a4 b9		      ldy	CurrentRow	; 03 - get the row we are drawing
     91  f289		       b9 ad 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     92  f28c
     93  f28c		       38		      sec		; 09
     94  f28d				   .DivideLoop
     95  f28d		       e9 0f		      sbc	#15	; 11
     96  f28f		       b0 fc		      bcs	.DivideLoop	; 13
     97  f291
     98  f291		       49 07		      eor	#7	; 15
     99  f293		       0a		      asl		; 17
    100  f294		       0a		      asl		; 19
    101  f295		       0a		      asl		; 21
    102  f296		       0a		      asl		; 23
    103  f297
    104  f297		       85 11		      sta	RESP1	; 26
    105  f299		       85 21		      sta	HMP1	; 29
    106  f29b
    107  f29b		       85 02		      sta	WSYNC
    108  f29d
    109  f29d		       a5 b5		      lda	ThrobColor+1
    110  f29f		       85 09		      sta	COLUBK
    111  f2a1
    112  f2a1		       a9 00		      lda	#ONE_COPY
    113  f2a3		       85 04		      sta	NUSIZ0
    114  f2a5		       a9 04		      lda	#TWO_WIDE
    115  f2a7		       85 05		      sta	NUSIZ1
    116  f2a9
      0  f2a9					      SLEEP	51
      1  f2a9				   .CYCLES    SET	51
      2  f2a9
      3  f2a9				  -	      IF	.CYCLES < 2
      4  f2a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a9				  -	      ERR
      6  f2a9					      ENDIF
      7  f2a9
      8  f2a9					      IF	.CYCLES & 1
      9  f2a9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a9		       04 00		      nop	0
     11  f2ab				  -	      ELSE
     12  f2ab				  -	      bit	VSYNC
     13  f2ab					      ENDIF
     14  f2ab				   .CYCLES    SET	.CYCLES - 3
     15  f2ab					      ENDIF
     16  f2ab
     17  f2ab					      REPEAT	.CYCLES / 2
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     17  f2c0					      REPEND
     18  f2c1		       ea		      nop
     17  f2c1					      REPEND
     18  f2c2		       ea		      nop
     19  f2c3					      REPEND
    118  f2c3
    119  f2c3		       4c 00 f3 	      jmp	.KJump
    120  f2c6
    121  f300		       00 00 00 00*	      ALIGN	$100
    122  f300				   .KJump
    123  f300		       85 2a		      sta	HMOVE
      0  f302					      SLEEP	3
      1  f302				   .CYCLES    SET	3
      2  f302
      3  f302				  -	      IF	.CYCLES < 2
      4  f302				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f302				  -	      ERR
      6  f302					      ENDIF
      7  f302
      8  f302					      IF	.CYCLES & 1
      9  f302					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f302		       04 00		      nop	0
     11  f304				  -	      ELSE
     12  f304				  -	      bit	VSYNC
     13  f304					      ENDIF
     14  f304				   .CYCLES    SET	.CYCLES - 3
     15  f304					      ENDIF
     16  f304
     17  f304				  -	      REPEAT	.CYCLES / 2
     18  f304				  -	      nop
     19  f304					      REPEND
    125  f304
    126  f304							; If any part of the cat needs to be drawn in the top row,
    127  f304							; skip straight to CatRows.
    128  f304
    129  f304
    130  f304
    131  f304							; Draw all the rows above the cat's two rows.
    132  f304				   HiRows
    133  f304
    134  f304							; First, output a single-color line to draw the bottom of a "throb" line.
    135  f304							; This will probably be a good time to prepare the pointers for the
    136  f304							; food items' graphics, as well as loading the colors for the food items.
    137  f304
    138  f304		       a5 b4		      lda	ThrobColor+0	; 02
    139  f306		       85 09		      sta	COLUBK	; 05
    140  f308
    141  f308		       a4 b9		      ldy	CurrentRow	; 08
    142  f30a		       b9 9f 00 	      lda	FoodItemL,y	; 12
    143  f30d		       29 f0		      and	#$F0	; 14
    144  f30f		       85 ba		      sta	FoodGfxPtr1	; 17
    145  f311		       aa		      tax		; 19
    146  f312		       bd 0e f8 	      lda	FoodGfx+14,x	; 23
    147  f315		       85 bc		      sta	FoodColor1	; 26
    148  f317
    149  f317		       b9 a6 00 	      lda	FoodItemR,y	; 30
    150  f31a		       29 f0		      and	#$F0	; 32
    151  f31c		       85 bd		      sta	FoodGfxPtr2	; 35
    152  f31e		       aa		      tax		; 37
    153  f31f		       bd 0e f8 	      lda	FoodGfx+14,x	; 41
    154  f322		       85 bf		      sta	FoodColor2	; 44
    155  f324
    156  f324
    157  f324		       85 02		      sta	WSYNC
    158  f326
    159  f326							; After that, output 14 lines to draw a single row with food items,
    160  f326							; but without drawing the cat. The food graphics will be updated every line,
    161  f326							; but there will probably not be enough time to also update the food colors
    162  f326							; every line throughout the kernel.
    163  f326
    164  f326		       a9 00		      lda	#COL_BACKGROUND
    165  f328		       85 09		      sta	COLUBK
    166  f32a
    167  f32a		       a4 0e		      ldy	14
    168  f32c				   .Loop1
    169  f32c		       85 02		      sta	WSYNC
    170  f32e		       88		      dey
    171  f32f		       d0 fb		      bne	.Loop1
    172  f331
    173  f331							; Lastly, output four single-color lines to draw most of a "throb" line,
    174  f331							; while setting the position of player 1 to draw the next set of food items.
    175  f331
    176  f331		       a5 b4		      lda	ThrobColor+0
    177  f333		       85 09		      sta	COLUBK
    178  f335		       85 02		      sta	WSYNC
    179  f337
    180  f337		       a5 b5		      lda	ThrobColor+1
    181  f339		       85 09		      sta	COLUBK
    182  f33b		       85 02		      sta	WSYNC
    183  f33d
    184  f33d		       a5 b6		      lda	ThrobColor+2
    185  f33f		       85 09		      sta	COLUBK
    186  f341		       a2 00		      ldx	#0
    187  f343		       86 1b		      stx	GRP0
    188  f345		       a2 00		      ldx	#COL_BACKGROUND
    189  f347		       85 02		      sta	WSYNC
    190  f349
    191  f349		       a5 b5		      lda	ThrobColor+1
    192  f34b		       85 09		      sta	COLUBK
    193  f34d
    194  f34d		       c6 9d		      dec	PreCatRows
    195  f34f		       85 02		      sta	WSYNC
    196  f351		       d0 b1		      bne	HiRows
    197  f353
    198  f353							; If this is not the last row before drawing the cat's rows,
    199  f353							; loop back to HiRows to draw the next row.
    200  f353
    201  f353
    202  f353
    203  f353							; Draw the two rows that contain the cat.
    204  f353				   CatRows
    205  f353
    206  f353							; Output a line to finish the bottom of a "throb" line, like in HiRows.
    207  f353							; If the cat is at the very top of the row, draw the top of the pop-tart.
    208  f353
    209  f353		       a5 b4		      lda	ThrobColor+0
    210  f355		       85 09		      sta	COLUBK
    211  f357		       a0 0d		      ldy	#13
    212  f359
      0  f359					      SLEEP	57
      1  f359				   .CYCLES    SET	57
      2  f359
      3  f359				  -	      IF	.CYCLES < 2
      4  f359				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f359				  -	      ERR
      6  f359					      ENDIF
      7  f359
      8  f359					      IF	.CYCLES & 1
      9  f359					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f359		       04 00		      nop	0
     11  f35b				  -	      ELSE
     12  f35b				  -	      bit	VSYNC
     13  f35b					      ENDIF
     14  f35b				   .CYCLES    SET	.CYCLES - 3
     15  f35b					      ENDIF
     16  f35b
     17  f35b					      REPEAT	.CYCLES / 2
     18  f35b		       ea		      nop
     17  f35b					      REPEND
     18  f35c		       ea		      nop
     17  f35c					      REPEND
     18  f35d		       ea		      nop
     17  f35d					      REPEND
     18  f35e		       ea		      nop
     17  f35e					      REPEND
     18  f35f		       ea		      nop
     17  f35f					      REPEND
     18  f360		       ea		      nop
     17  f360					      REPEND
     18  f361		       ea		      nop
     17  f361					      REPEND
     18  f362		       ea		      nop
     17  f362					      REPEND
     18  f363		       ea		      nop
     17  f363					      REPEND
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     17  f369					      REPEND
     18  f36a		       ea		      nop
     17  f36a					      REPEND
     18  f36b		       ea		      nop
     17  f36b					      REPEND
     18  f36c		       ea		      nop
     17  f36c					      REPEND
     18  f36d		       ea		      nop
     17  f36d					      REPEND
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     17  f36f					      REPEND
     18  f370		       ea		      nop
     17  f370					      REPEND
     18  f371		       ea		      nop
     17  f371					      REPEND
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     19  f376					      REPEND
    214  f376
    215  f376							; Then output the 14 lines to draw a single row. This will include drawing
    216  f376							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    217  f376							; All graphics will be updated every line.
    218  f376
    219  f376				   .KernelLoop
    220  f376							; 16 cycles to prepare rainbow colors
    221  f376		       b1 95		      lda	(RbowColPtr1),y	; 5
    222  f378		       85 08		      sta	COLUPF	; 3
    223  f37a		       b1 97		      lda	(RbowColPtr2),y	; 5
    224  f37c		       85 09		      sta	COLUBK	; 3
    225  f37e
    226  f37e							; 8 cycles to prepare cat face graphics
    227  f37e		       b1 9b		      lda	(CatGfxPtr),y	; 5
    228  f380		       85 1b		      sta	GRP0	; 3
    229  f382
    230  f382							; 8 cycles to prepare tart graphics
    231  f382		       b1 99		      lda	(TartGfxPtr),y	; 5
    232  f384		       85 0e		      sta	PF1	; 3
    233  f386
    234  f386							; 5 cycles to set tart color
    235  f386		       a9 4a		      lda	#COL_CAT_TART	; 2 (25)
    236  f388		       85 08		      sta	COLUPF	; 3 (28) MUST end on cycle 28
    237  f38a
    238  f38a							; 6 cycles to clear PF/BK colors to black
    239  f38a							; x is pre-loaded with 0, the color black
    240  f38a		       86 09		      stx	COLUBK	; 3 (31) MUST end on cycle 31
    241  f38c		       86 08		      stx	COLUPF	; 3 (34)
    242  f38e
    243  f38e							; 14 cycles to prepare 1st food item's graphics
    244  f38e		       b1 ba		      lda	(FoodGfxPtr1),y	; 5
    245  f390		       85 1c		      sta	GRP1	; 3
    246  f392		       a5 bc		      lda	FoodColor1	; 3
    247  f394		       85 07		      sta	COLUP1	; 3
    248  f396
    249  f396							; 14 cycles to prepare 2nd food item's graphics
    250  f396		       b1 bd		      lda	(FoodGfxPtr2),y	; 5
    251  f398		       85 1c		      sta	GRP1	; 3
    252  f39a		       a5 bf		      lda	FoodColor2	; 3
    253  f39c		       85 07		      sta	COLUP1	; 3
    254  f39e
    255  f39e							; 5 cycles to finish the loop mechanism
    256  f39e		       88		      dey		; 2
    257  f39f		       10 d5		      bpl	.KernelLoop	; 3
    258  f3a1
    259  f3a1							; exactly 76 cycles total
    260  f3a1
    261  f3a1
    262  f3a1
    263  f3a1							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    264  f3a1							; cat with the rainbow. In order to align player 1 for the next row's
    265  f3a1							; food items, it will be neccesary to have three versions of this kernel,
    266  f3a1							; one for each of the three 60-color-clock spaced positions to reset.
    267  f3a1							; HMOVE will be written to on the first four scanlines. With a maximum
    268  f3a1							; movement of 15 color-clocks per scanline, this will allow a movement of
    269  f3a1							; up to 60 color clocks. With three versions of the kernel, it should be
    270  f3a1							; possible to put player 1 anywhere on the screen.
    271  f3a1
    272  f3a1		       a5 b4		      lda	ThrobColor+0
    273  f3a3		       85 09		      sta	COLUBK
    274  f3a5		       86 1b		      stx	GRP0
    275  f3a7		       86 1c		      stx	GRP1
    276  f3a9		       85 02		      sta	WSYNC
    277  f3ab
    278  f3ab		       a5 b5		      lda	ThrobColor+1
    279  f3ad		       85 09		      sta	COLUBK
    280  f3af		       85 02		      sta	WSYNC
    281  f3b1
    282  f3b1		       a5 b6		      lda	ThrobColor+2
    283  f3b3		       85 09		      sta	COLUBK
    284  f3b5		       85 02		      sta	WSYNC
    285  f3b7
    286  f3b7		       a5 b5		      lda	ThrobColor+1
    287  f3b9		       85 09		      sta	COLUBK
    288  f3bb		       85 02		      sta	WSYNC
    289  f3bd
    290  f3bd		       a5 b4		      lda	ThrobColor+0
    291  f3bf		       85 09		      sta	COLUBK
    292  f3c1		       85 02		      sta	WSYNC
    293  f3c3
    294  f3c3							; Then output 14 lines to draw the next row, exactly the same way as the
    295  f3c3							; previous one. It will be neccesary to have multiple versions of this, as well,
    296  f3c3							; since GRP1 needs to be updated at the correct time depending on the position
    297  f3c3							; of player 1.
    298  f3c3
    299  f3c3		       a9 00		      lda	#COL_BACKGROUND
    300  f3c5		       85 09		      sta	COLUBK
    301  f3c7
    302  f3c7		       a4 0e		      ldy	14
    303  f3c9				   .Loop3
    304  f3c9		       85 02		      sta	WSYNC
    305  f3cb		       88		      dey
    306  f3cc		       d0 fb		      bne	.Loop3
    307  f3ce
    308  f3ce							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    309  f3ce							; Use this time to prepare the next row's food item pointers (unless this is
    310  f3ce							; the last row). If this is the last row, skip over LoRows.
    311  f3ce
    312  f3ce		       a5 b4		      lda	ThrobColor+0
    313  f3d0		       85 09		      sta	COLUBK
    314  f3d2		       85 02		      sta	WSYNC
    315  f3d4
    316  f3d4							; If the cat is at the very bottom of the screen, don't disable the
    317  f3d4							; missile/player graphics until after they are drawn, so they don't get
    318  f3d4							; clipped at the bottom of the screen. An easy way to do this would be to
    319  f3d4							; simply disable them after they would have been drawn, whether they are
    320  f3d4							; already disabled or not.
    321  f3d4
    322  f3d4
    323  f3d4
    324  f3d4							; Draw all the rows below the cat's two rows.
    325  f3d4				   LoRows
    326  f3d4
    327  f3d4							; Output 4 lines, drawing the rest of the "throb" line, while preparing
    328  f3d4							; player 1 for the next row's food items.
    329  f3d4
    330  f3d4		       a5 b5		      lda	ThrobColor+1
    331  f3d6		       85 09		      sta	COLUBK
    332  f3d8		       85 02		      sta	WSYNC
    333  f3da
    334  f3da		       a5 b6		      lda	ThrobColor+2
    335  f3dc		       85 09		      sta	COLUBK
    336  f3de		       85 02		      sta	WSYNC
    337  f3e0
    338  f3e0		       a5 b5		      lda	ThrobColor+1
    339  f3e2		       85 09		      sta	COLUBK
    340  f3e4		       85 02		      sta	WSYNC
    341  f3e6
    342  f3e6		       a5 b4		      lda	ThrobColor+0
    343  f3e8		       85 09		      sta	COLUBK
    344  f3ea		       85 02		      sta	WSYNC
    345  f3ec
    346  f3ec							; Output 14 lines to draw a row, exactly the same as in HiRows.
    347  f3ec							; It may be possible to code this as a subroutine to save ROM space.
    348  f3ec
    349  f3ec		       a9 00		      lda	#COL_BACKGROUND
    350  f3ee		       85 09		      sta	COLUBK
    351  f3f0
    352  f3f0		       a4 0e		      ldy	14
    353  f3f2				   .Loop4
    354  f3f2		       85 02		      sta	WSYNC
    355  f3f4		       88		      dey
    356  f3f5		       d0 fb		      bne	.Loop4
    357  f3f7
    358  f3f7							; Lastly, output the a single line for the next "throb" line.
    359  f3f7							; Use this time to prepare the next row's food item pointers (unless this is
    360  f3f7							; the last row). If this is not the last row, loop to LoRows for the next row.
    361  f3f7
    362  f3f7		       a5 b4		      lda	ThrobColor+0
    363  f3f9		       85 09		      sta	COLUBK
    364  f3fb
    365  f3fb		       c6 9e		      dec	PostCatRows
    366  f3fd		       85 02		      sta	WSYNC
    367  f3ff		       d0 d3		      bne	LoRows
    368  f401
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  f401					      include	code/ProgressHealthKernel.asm
      1  f401		       a5 b5		      lda	ThrobColor+1
      2  f403		       85 09		      sta	COLUBK
      3  f405		       a9 06		      lda	#COL_CAT_FACE
      4  f407		       85 08		      sta	COLUPF
      5  f409		       a9 00		      lda	#0
      6  f40b		       85 0a		      sta	CTRLPF
      7  f40d
      0  f40d					      SLEEP	35	; 53
      1  f40d				   .CYCLES    SET	35
      2  f40d
      3  f40d				  -	      IF	.CYCLES < 2
      4  f40d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f40d				  -	      ERR
      6  f40d					      ENDIF
      7  f40d
      8  f40d					      IF	.CYCLES & 1
      9  f40d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f40d		       04 00		      nop	0
     11  f40f				  -	      ELSE
     12  f40f				  -	      bit	VSYNC
     13  f40f					      ENDIF
     14  f40f				   .CYCLES    SET	.CYCLES - 3
     15  f40f					      ENDIF
     16  f40f
     17  f40f					      REPEAT	.CYCLES / 2
     18  f40f		       ea		      nop
     17  f40f					      REPEND
     18  f410		       ea		      nop
     17  f410					      REPEND
     18  f411		       ea		      nop
     17  f411					      REPEND
     18  f412		       ea		      nop
     17  f412					      REPEND
     18  f413		       ea		      nop
     17  f413					      REPEND
     18  f414		       ea		      nop
     17  f414					      REPEND
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     17  f417					      REPEND
     18  f418		       ea		      nop
     17  f418					      REPEND
     18  f419		       ea		      nop
     17  f419					      REPEND
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     17  f41c					      REPEND
     18  f41d		       ea		      nop
     17  f41d					      REPEND
     18  f41e		       ea		      nop
     19  f41f					      REPEND
      9  f41f
     10  f41f		       a9 20		      lda	#$20	; 55
     11  f421		       85 20		      sta	HMP0	; 58
     12  f423		       a9 b0		      lda	#$B0	; 60
     13  f425		       85 21		      sta	HMP1	; 63
     14  f427
     15  f427		       85 10		      sta	RESP0	; 66
     16  f429		       85 11		      sta	RESP1	; 69
     17  f42b
     18  f42b		       a9 00		      lda	#$00	; 71
     19  f42d
     20  f42d		       85 2a		      sta	HMOVE	; 74
     21  f42f
     22  f42f		       85 06		      sta	COLUP0
     23  f431		       85 07		      sta	COLUP1
     24  f433
     25  f433		       a9 0e		      lda	#COL_SCOREBOARD
     26  f435		       85 09		      sta	COLUBK
     27  f437
     28  f437		       a9 05		      lda	#DOUBLE_SIZE	; 08
     29  f439		       85 04		      sta	NUSIZ0
     30  f43b		       85 05		      sta	NUSIZ1
     31  f43d
     32  f43d		       a9 08		      lda	#REFP_TRUE
     33  f43f		       85 0c		      sta	REFP1
     34  f441
     35  f441					      SUBROUTINE
     36  f441
     37  f441		       a0 04		      ldy	#4
     38  f443		       85 02		      sta	WSYNC
     39  f445
     40  f445							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41  f445				   .HealthTop		; draw top of health
     42  f445
     43  f445		       a2 03		      ldx	#3
     44  f447
     45  f447				   .Loop
     46  f447		       85 02		      sta	WSYNC
     47  f449
     48  f449		       b9 b8 f6 	      lda	HealthTopGfx,y	; 04
     49  f44c		       85 1b		      sta	GRP0	; 07
     50  f44e		       85 1c		      sta	GRP1	; 10
     51  f450		       a9 00		      lda	#$00	; 12
     52  f452		       85 0f		      sta	PF2	; 15
      0  f454					      SLEEP	26	; 37
      1  f454				   .CYCLES    SET	26
      2  f454
      3  f454				  -	      IF	.CYCLES < 2
      4  f454				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f454				  -	      ERR
      6  f454					      ENDIF
      7  f454
      8  f454				  -	      IF	.CYCLES & 1
      9  f454				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f454				  -	      nop	0
     11  f454				  -	      ELSE
     12  f454				  -	      bit	VSYNC
     13  f454				  -	      ENDIF
     14  f454				  -.CYCLES    SET	.CYCLES - 3
     15  f454					      ENDIF
     16  f454
     17  f454					      REPEAT	.CYCLES / 2
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     17  f456					      REPEND
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     19  f461					      REPEND
     54  f461		       b9 08 f7 	      lda	HealthBgGfx+8,y	; 41
     55  f464		       85 0f		      sta	PF2	; 44
     56  f466
     57  f466		       ca		      dex
     58  f467		       d0 de		      bne	.Loop
     59  f469
     60  f469		       88		      dey
     61  f46a		       10 d9		      bpl	.HealthTop
     62  f46c
     63  f46c
     64  f46c					      SUBROUTINE
     65  f46c
     66  f46c
     67  f46c		       a0 03		      ldy	#3
     68  f46e		       a2 03		      ldx	#3
     69  f470		       86 b8		      stx	Temp
     70  f472
     71  f472		       4c 00 f5 	      jmp	.HealthMiddle
     72  f475
     73  f500		       00 00 00 00*	      ALIGN	$100	; align to page
     74  f500
     75  f500							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  f500				   .HealthMiddle		; draw middle of health, with progress bar
     77  f500
     78  f500		       85 02		      sta	WSYNC
     79  f502				   .Loop
     80  f502		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     81  f504		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     82  f506
     83  f506		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     84  f508		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     85  f50a
     86  f50a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     87  f50c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     88  f50e
     89  f50e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     90  f510		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     91  f512
     92  f512		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     93  f514		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     94  f516
     95  f516		       b1 90		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     96  f518		       85 1b		      sta	GRP0	; 38 - for the left half of health
     97  f51a		       b1 92		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     98  f51c		       85 1c		      sta	GRP1	; 46 - for the right half of health
     99  f51e
    100  f51e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    101  f520		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    102  f522		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    103  f524		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
    104  f527
    105  f527		       a9 0e		      lda	#COL_SCOREBOARD	; 60 - get the color for the background
    106  f529		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    107  f52c
    108  f52c		       ca		      dex		; 66
    109  f52d		       d0 d1		      bne	.HealthMiddle	; 68
    110  f52f
    111  f52f		       a6 b8		      ldx	Temp	; 71
    112  f531
    113  f531		       88		      dey		; 73
    114  f532		       10 ce		      bpl	.Loop	; 76 / 00
    115  f534
    116  f534
    117  f534
    118  f534
    119  f534
    120  f534
    121  f534
    122  f534
    123  f534
    124  f534					      SUBROUTINE
    125  f534
    126  f534
    127  f534		       a9 00		      lda	#0
    128  f536		       85 0d		      sta	PF0
    129  f538		       85 0e		      sta	PF1
    130  f53a
    131  f53a		       a0 07		      ldy	#7
    132  f53c
    133  f53c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    134  f53c				   .HealthBottom		; draw bottom of health
    135  f53c
    136  f53c		       a2 03		      ldx	#3
    137  f53e				   .Loop
    138  f53e		       b1 90		      lda	(HthGfxLPtr),y
    139  f540		       85 1b		      sta	GRP0
    140  f542		       b1 92		      lda	(HthGfxRPtr),y
    141  f544		       85 1c		      sta	GRP1
    142  f546		       a9 00		      lda	#$00
    143  f548		       85 0f		      sta	PF2
    144  f54a
      0  f54a					      SLEEP	14
      1  f54a				   .CYCLES    SET	14
      2  f54a
      3  f54a				  -	      IF	.CYCLES < 2
      4  f54a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54a				  -	      ERR
      6  f54a					      ENDIF
      7  f54a
      8  f54a				  -	      IF	.CYCLES & 1
      9  f54a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54a				  -	      nop	0
     11  f54a				  -	      ELSE
     12  f54a				  -	      bit	VSYNC
     13  f54a				  -	      ENDIF
     14  f54a				  -.CYCLES    SET	.CYCLES - 3
     15  f54a					      ENDIF
     16  f54a
     17  f54a					      REPEAT	.CYCLES / 2
     18  f54a		       ea		      nop
     17  f54a					      REPEND
     18  f54b		       ea		      nop
     17  f54b					      REPEND
     18  f54c		       ea		      nop
     17  f54c					      REPEND
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     17  f54f					      REPEND
     18  f550		       ea		      nop
     19  f551					      REPEND
    146  f551
    147  f551		       b9 fc f6 	      lda	HealthBgGfx-4,y
    148  f554		       85 0f		      sta	PF2
    149  f556		       85 02		      sta	WSYNC
    150  f558
    151  f558		       ca		      dex
    152  f559		       d0 e3		      bne	.Loop
    153  f55b
    154  f55b		       88		      dey
    155  f55c		       c0 03		      cpy	#3
    156  f55e		       d0 dc		      bne	.HealthBottom
    157  f560
    158  f560							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  f560
    160  f560		       a9 00		      lda	#$00
    161  f562		       85 1b		      sta	GRP0
    162  f564		       85 1c		      sta	GRP1
    163  f566		       85 0b		      sta	REFP0
    164  f568		       85 0c		      sta	REFP1
    165  f56a		       85 0f		      sta	PF2
    166  f56c
    167  f56c		       85 02		      sta	WSYNC
    168  f56e
------- FILE code/Kernel.asm
     13  f56e
     14  f56e		       a9 02		      lda	#2
     15  f570		       85 01		      sta	VBLANK	; disable display
     16  f572
     17  f572		       4c 0b f0 	      jmp	Overscan
------- FILE main.asm
     69  f575
     70  f575				   Z_EndOfCode		; label to show how much ROM is used for the code
     71  f575
     72  f575
     73  f575							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     74  f575							; Data Tables
     75  f575							;
     76  f575							; Include data tables
     77  f575							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     78  f575
     79  f575							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  f575					      include	data/Graphics.asm
      1  f575							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f575							; Graphics Tables
      3  f575							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f575
      5  f600		       00 00 00 00*	      ALIGN	$100	; align to page
      6  f600
      7  f600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  f600							; Digit graphics for the scoreboard
      9  f600							;
     10  f600							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  f600							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  f600							; to normal when it is pulled from the stack.
     13  f600							;
     14  f600							; Table takes up $50 (80) bytes of ROM
     15  f600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f600
     17  f600				   ScoreGfx
     18  f600
     19  f600		       1c		      .byte.b	%00011100	; digit 0
     20  f601		       26		      .byte.b	%00100110
     21  f602		       63		      .byte.b	%01100011
     22  f603		       63		      .byte.b	%01100011
     23  f604		       63		      .byte.b	%01100011
     24  f605		       32		      .byte.b	%00110010
     25  f606		       1c		      .byte.b	%00011100
     26  f607		       00		      .byte.b	%00000000
     27  f608
     28  f608							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  f608
     30  f608		       18		      .byte.b	%00011000	; digit 1
     31  f609		       38		      .byte.b	%00111000
     32  f60a		       18		      .byte.b	%00011000
     33  f60b		       18		      .byte.b	%00011000
     34  f60c		       18		      .byte.b	%00011000
     35  f60d		       18		      .byte.b	%00011000
     36  f60e		       7e		      .byte.b	%01111110
     37  f60f		       00		      .byte.b	%00000000
     38  f610
     39  f610							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  f610
     41  f610		       3e		      .byte.b	%00111110	; digit 2
     42  f611		       63		      .byte.b	%01100011
     43  f612		       07		      .byte.b	%00000111
     44  f613		       1e		      .byte.b	%00011110
     45  f614		       3c		      .byte.b	%00111100
     46  f615		       70		      .byte.b	%01110000
     47  f616		       7f		      .byte.b	%01111111
     48  f617		       00		      .byte.b	%00000000
     49  f618
     50  f618							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  f618
     52  f618		       7f		      .byte.b	%01111111	; digit 3
     53  f619		       06		      .byte.b	%00000110
     54  f61a		       0c		      .byte.b	%00001100
     55  f61b		       1e		      .byte.b	%00011110
     56  f61c		       03		      .byte.b	%00000011
     57  f61d		       63		      .byte.b	%01100011
     58  f61e		       3e		      .byte.b	%00111110
     59  f61f		       00		      .byte.b	%00000000
     60  f620
     61  f620							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  f620
     63  f620		       0e		      .byte.b	%00001110	; digit 4
     64  f621		       1e		      .byte.b	%00011110
     65  f622		       36		      .byte.b	%00110110
     66  f623		       66		      .byte.b	%01100110
     67  f624		       7f		      .byte.b	%01111111
     68  f625		       06		      .byte.b	%00000110
     69  f626		       06		      .byte.b	%00000110
     70  f627		       00		      .byte.b	%00000000
     71  f628
     72  f628							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  f628
     74  f628		       7e		      .byte.b	%01111110	; digit 5
     75  f629		       60		      .byte.b	%01100000
     76  f62a		       7e		      .byte.b	%01111110
     77  f62b		       03		      .byte.b	%00000011
     78  f62c		       03		      .byte.b	%00000011
     79  f62d		       63		      .byte.b	%01100011
     80  f62e		       3e		      .byte.b	%00111110
     81  f62f		       00		      .byte.b	%00000000
     82  f630
     83  f630							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  f630
     85  f630		       1e		      .byte.b	%00011110	; digit 6
     86  f631		       30		      .byte.b	%00110000
     87  f632		       60		      .byte.b	%01100000
     88  f633		       7e		      .byte.b	%01111110
     89  f634		       63		      .byte.b	%01100011
     90  f635		       63		      .byte.b	%01100011
     91  f636		       3e		      .byte.b	%00111110
     92  f637		       00		      .byte.b	%00000000
     93  f638
     94  f638							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  f638
     96  f638		       7f		      .byte.b	%01111111	; digit 7
     97  f639		       03		      .byte.b	%00000011
     98  f63a		       06		      .byte.b	%00000110
     99  f63b		       0c		      .byte.b	%00001100
    100  f63c		       18		      .byte.b	%00011000
    101  f63d		       18		      .byte.b	%00011000
    102  f63e		       18		      .byte.b	%00011000
    103  f63f		       00		      .byte.b	%00000000
    104  f640
    105  f640							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  f640
    107  f640		       3c		      .byte.b	%00111100	; digit 8
    108  f641		       62		      .byte.b	%01100010
    109  f642		       72		      .byte.b	%01110010
    110  f643		       3c		      .byte.b	%00111100
    111  f644		       43		      .byte.b	%01000011
    112  f645		       43		      .byte.b	%01000011
    113  f646		       3e		      .byte.b	%00111110
    114  f647		       00		      .byte.b	%00000000
    115  f648
    116  f648							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  f648
    118  f648		       3e		      .byte.b	%00111110	; digit 9
    119  f649		       63		      .byte.b	%01100011
    120  f64a		       63		      .byte.b	%01100011
    121  f64b		       3f		      .byte.b	%00111111
    122  f64c		       03		      .byte.b	%00000011
    123  f64d		       06		      .byte.b	%00000110
    124  f64e		       3c		      .byte.b	%00111100
    125  f64f		       00		      .byte.b	%00000000
    126  f650
    127  f650
    128  f650
    129  f650							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  f650							; NUSIZx and ENAMx data for level counter graphics
    131  f650							;
    132  f650							; This table enables or disables each missile and adjusts the left missile's
    133  f650							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  f650							; left digit. (The right digit is drawn with the ball.)
    135  f650							; Bit-1 is used to enable or disable the left missile,
    136  f650							; and bit-0 is used to enable or disable the right missile.
    137  f650							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  f650							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  f650							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  f650							; correct for the score display.
    141  f650							;
    142  f650							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  f650							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  f650							; to normal when it is pulled from the stack.
    145  f650							;
    146  f650							; Table takes up $50 (80) bytes of ROM
    147  f650							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  f650
    149  f650				   LevelGfx
    150  f650
    151  f650							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  f650							; ^^^^^^^^^
    153  f650		       8f		      .byte.b	%10001111	; digit 0
    154  f651		       4f		      .byte.b	%01001111
    155  f652		       4f		      .byte.b	%01001111
    156  f653		       4f		      .byte.b	%01001111
    157  f654		       4f		      .byte.b	%01001111
    158  f655		       4f		      .byte.b	%01001111
    159  f656		       8f		      .byte.b	%10001111
    160  f657		       00		      .byte.b	%00000000
    161  f658
    162  f658							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  f658
    164  f658							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  f658							; ^^^^^^^^^
    166  f658		       8d		      .byte.b	%10001101	; digit 1
    167  f659		       4d		      .byte.b	%01001101
    168  f65a		       4d		      .byte.b	%01001101
    169  f65b		       8d		      .byte.b	%10001101
    170  f65c		       4d		      .byte.b	%01001101
    171  f65d		       4d		      .byte.b	%01001101
    172  f65e		       8d		      .byte.b	%10001101
    173  f65f		       00		      .byte.b	%00000000
    174  f660
    175  f660							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  f660
    177  f660							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  f660							; ^^^^^^^^^
    179  f660		       8f		      .byte.b	%10001111	; digit 2
    180  f661		       4d		      .byte.b	%01001101
    181  f662		       4d		      .byte.b	%01001101
    182  f663		       8f		      .byte.b	%10001111
    183  f664		       4e		      .byte.b	%01001110
    184  f665		       4e		      .byte.b	%01001110
    185  f666		       8f		      .byte.b	%10001111
    186  f667		       00		      .byte.b	%00000000
    187  f668
    188  f668							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  f668
    190  f668							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  f668							; ^^^^^^^^^
    192  f668		       8f		      .byte.b	%10001111	; digit 3
    193  f669		       4d		      .byte.b	%01001101
    194  f66a		       4d		      .byte.b	%01001101
    195  f66b		       8f		      .byte.b	%10001111
    196  f66c		       4d		      .byte.b	%01001101
    197  f66d		       4d		      .byte.b	%01001101
    198  f66e		       8f		      .byte.b	%10001111
    199  f66f		       00		      .byte.b	%00000000
    200  f670
    201  f670							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  f670
    203  f670							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  f670							; ^^^^^^^^^
    205  f670		       4f		      .byte.b	%01001111	; digit 4
    206  f671		       4f		      .byte.b	%01001111
    207  f672		       4f		      .byte.b	%01001111
    208  f673		       8f		      .byte.b	%10001111
    209  f674		       4d		      .byte.b	%01001101
    210  f675		       4d		      .byte.b	%01001101
    211  f676		       4d		      .byte.b	%01001101
    212  f677		       00		      .byte.b	%00000000
    213  f678
    214  f678							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  f678
    216  f678							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  f678							; ^^^^^^^^^
    218  f678		       8f		      .byte.b	%10001111	; digit 5
    219  f679		       4e		      .byte.b	%01001110
    220  f67a		       4e		      .byte.b	%01001110
    221  f67b		       8f		      .byte.b	%10001111
    222  f67c		       4d		      .byte.b	%01001101
    223  f67d		       4d		      .byte.b	%01001101
    224  f67e		       8f		      .byte.b	%10001111
    225  f67f		       00		      .byte.b	%00000000
    226  f680
    227  f680							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  f680
    229  f680							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  f680							; ^^^^^^^^^
    231  f680		       8f		      .byte.b	%10001111	; digit 6
    232  f681		       4e		      .byte.b	%01001110
    233  f682		       4e		      .byte.b	%01001110
    234  f683		       8f		      .byte.b	%10001111
    235  f684		       4f		      .byte.b	%01001111
    236  f685		       4f		      .byte.b	%01001111
    237  f686		       8f		      .byte.b	%10001111
    238  f687		       00		      .byte.b	%00000000
    239  f688
    240  f688							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  f688
    242  f688							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  f688							; ^^^^^^^^^
    244  f688		       8f		      .byte.b	%10001111	; digit 7
    245  f689		       4d		      .byte.b	%01001101
    246  f68a		       4d		      .byte.b	%01001101
    247  f68b		       8d		      .byte.b	%10001101
    248  f68c		       4d		      .byte.b	%01001101
    249  f68d		       4d		      .byte.b	%01001101
    250  f68e		       8d		      .byte.b	%10001101
    251  f68f		       00		      .byte.b	%00000000
    252  f690
    253  f690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  f690
    255  f690							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  f690							; ^^^^^^^^^
    257  f690		       8f		      .byte.b	%10001111	; digit 8
    258  f691		       4f		      .byte.b	%01001111
    259  f692		       4f		      .byte.b	%01001111
    260  f693		       8f		      .byte.b	%10001111
    261  f694		       4f		      .byte.b	%01001111
    262  f695		       4f		      .byte.b	%01001111
    263  f696		       8f		      .byte.b	%10001111
    264  f697		       00		      .byte.b	%00000000
    265  f698
    266  f698							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  f698
    268  f698							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  f698							; ^^^^^^^^^
    270  f698		       8f		      .byte.b	%10001111	; digit 9
    271  f699		       4f		      .byte.b	%01001111
    272  f69a		       4f		      .byte.b	%01001111
    273  f69b		       8f		      .byte.b	%10001111
    274  f69c		       4d		      .byte.b	%01001101
    275  f69d		       4d		      .byte.b	%01001101
    276  f69e		       8f		      .byte.b	%10001111
    277  f69f		       00		      .byte.b	%00000000
    278  f6a0
    279  f6a0
    280  f6a0
    281  f6a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  f6a0							; Throbbing Line Graphics
    283  f6a0							;
    284  f6a0							; Graphics tables for the throbbing lines
    285  f6a0							;
    286  f6a0							; Table takes up $18 (24) bytes of ROM
    287  f6a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  f6a0
    289  f6a0				   LineThrobGfx
    290  f6a0
    291  f6a0		       00		      .byte.b	COL_LINES + LUM_0	; frame 0
    292  f6a1		       02		      .byte.b	COL_LINES + LUM_2
    293  f6a2		       04		      .byte.b	COL_LINES + LUM_4
    294  f6a3
    295  f6a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  f6a3
    297  f6a3		       00		      .byte.b	COL_LINES + LUM_0	; frame 1
    298  f6a4		       04		      .byte.b	COL_LINES + LUM_4
    299  f6a5		       06		      .byte.b	COL_LINES + LUM_6
    300  f6a6
    301  f6a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  f6a6
    303  f6a6		       00		      .byte.b	COL_LINES + LUM_0	; frame 2
    304  f6a7		       06		      .byte.b	COL_LINES + LUM_6
    305  f6a8		       08		      .byte.b	COL_LINES + LUM_8
    306  f6a9
    307  f6a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  f6a9
    309  f6a9		       02		      .byte.b	COL_LINES + LUM_2	; frame 3
    310  f6aa		       08		      .byte.b	COL_LINES + LUM_8
    311  f6ab		       0c		      .byte.b	COL_LINES + LUM_C
    312  f6ac
    313  f6ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  f6ac
    315  f6ac		       04		      .byte.b	COL_LINES + LUM_4	; frame 4
    316  f6ad		       0a		      .byte.b	COL_LINES + LUM_A
    317  f6ae		       0e		      .byte.b	COL_LINES + LUM_E
    318  f6af
    319  f6af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  f6af
    321  f6af		       02		      .byte.b	COL_LINES + LUM_2	; frame 5
    322  f6b0		       08		      .byte.b	COL_LINES + LUM_8
    323  f6b1		       0c		      .byte.b	COL_LINES + LUM_C
    324  f6b2
    325  f6b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  f6b2
    327  f6b2		       00		      .byte.b	COL_LINES + LUM_0	; frame 6
    328  f6b3		       06		      .byte.b	COL_LINES + LUM_6
    329  f6b4		       0a		      .byte.b	COL_LINES + LUM_A
    330  f6b5
    331  f6b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  f6b5
    333  f6b5		       00		      .byte.b	COL_LINES + LUM_0	; frame 7
    334  f6b6		       04		      .byte.b	COL_LINES + LUM_4
    335  f6b7		       06		      .byte.b	COL_LINES + LUM_6
    336  f6b8
    337  f6b8
    338  f6b8
    339  f6b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  f6b8							; Health Graphics
    341  f6b8							;
    342  f6b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  f6b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  f6b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  f6b8							; the graphics for the lower right are flipped.
    346  f6b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  f6b8							; are set up in a confusing way. They are upside-down, but they are split
    348  f6b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  f6b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  f6b8							; LOWER 4 lines of graphics (also upside-down).
    351  f6b8							; The last table (HealthBgGfx) is for the grey background of the
    352  f6b8							; health graphics drawn with the playfield.
    353  f6b8							;
    354  f6b8							; Table takes up $45 (69) bytes of ROM
    355  f6b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  f6b8
    357  f6b8				   HealthTopGfx
    358  f6b8
    359  f6b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  f6b9		       43		      .byte.b	%01000011
    361  f6ba		       44		      .byte.b	%01000100
    362  f6bb		       48		      .byte.b	%01001000
    363  f6bc		       30		      .byte.b	%00110000
    364  f6bd
    365  f6bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  f6bd				   HealthLeftGfx
    367  f6bd
    368  f6bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  f6be		       8c		      .byte.b	%10001100
    370  f6bf		       84		      .byte.b	%10000100
    371  f6c0		       80		      .byte.b	%10000000
    372  f6c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  f6c2		       20		      .byte.b	%00100000
    374  f6c3		       47		      .byte.b	%01000111
    375  f6c4		       84		      .byte.b	%10000100
    376  f6c5
    377  f6c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  f6c5
    379  f6c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  f6c6		       8c		      .byte.b	%10001100
    381  f6c7		       84		      .byte.b	%10000100
    382  f6c8		       80		      .byte.b	%10000000
    383  f6c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  f6ca		       20		      .byte.b	%00100000
    385  f6cb		       47		      .byte.b	%01000111
    386  f6cc		       80		      .byte.b	%10000000
    387  f6cd
    388  f6cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  f6cd
    390  f6cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  f6ce		       8c		      .byte.b	%10001100
    392  f6cf		       84		      .byte.b	%10000100
    393  f6d0		       80		      .byte.b	%10000000
    394  f6d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  f6d2		       20		      .byte.b	%00100000
    396  f6d3		       44		      .byte.b	%01000100
    397  f6d4		       87		      .byte.b	%10000111
    398  f6d5
    399  f6d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  f6d5
    401  f6d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  f6d6		       9c		      .byte.b	%10011100
    403  f6d7		       80		      .byte.b	%10000000
    404  f6d8		       80		      .byte.b	%10000000
    405  f6d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  f6da		       20		      .byte.b	%00100000
    407  f6db		       46		      .byte.b	%01000110
    408  f6dc		       81		      .byte.b	%10000001
    409  f6dd
    410  f6dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  f6dd				   HealthRightGfx
    412  f6dd
    413  f6dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  f6de		       9a		      .byte.b	%10011010
    415  f6df		       90		      .byte.b	%10010000
    416  f6e0		       80		      .byte.b	%10000000
    417  f6e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  f6e2		       20		      .byte.b	%00100000
    419  f6e3		       4f		      .byte.b	%01001111
    420  f6e4		       89		      .byte.b	%10001001
    421  f6e5
    422  f6e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  f6e5
    424  f6e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  f6e6		       9a		      .byte.b	%10011010
    426  f6e7		       90		      .byte.b	%10010000
    427  f6e8		       80		      .byte.b	%10000000
    428  f6e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  f6ea		       20		      .byte.b	%00100000
    430  f6eb		       4f		      .byte.b	%01001111
    431  f6ec		       80		      .byte.b	%10000000
    432  f6ed
    433  f6ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  f6ed
    435  f6ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  f6ee		       9a		      .byte.b	%10011010
    437  f6ef		       88		      .byte.b	%10001000
    438  f6f0		       80		      .byte.b	%10000000
    439  f6f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  f6f2		       20		      .byte.b	%00100000
    441  f6f3		       48		      .byte.b	%01001000
    442  f6f4		       8f		      .byte.b	%10001111
    443  f6f5
    444  f6f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  f6f5
    446  f6f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  f6f6		       ba		      .byte.b	%10111010
    448  f6f7		       80		      .byte.b	%10000000
    449  f6f8		       80		      .byte.b	%10000000
    450  f6f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  f6fa		       20		      .byte.b	%00100000
    452  f6fb		       4c		      .byte.b	%01001100
    453  f6fc		       83		      .byte.b	%10000011
    454  f6fd
    455  f6fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  f6fd
    457  f6fd							; 3 bytes left in this page
    458  f6fd
    459  f700		       00 00 00 	      ALIGN	$100	; align to page
    460  f700
    461  f700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  f700				   HealthBgGfx
    463  f700							; 13 bytes
    464  f700
    465  f700		       00		      .byte.b	%00000000
    466  f701		       3e		      .byte.b	%00111110
    467  f702		       7f		      .byte.b	%01111111
    468  f703		       7f		      .byte.b	%01111111
    469  f704		       7f		      .byte.b	%01111111
    470  f705		       7f		      .byte.b	%01111111
    471  f706		       7f		      .byte.b	%01111111
    472  f707		       7f		      .byte.b	%01111111
    473  f708		       7f		      .byte.b	%01111111
    474  f709		       7f		      .byte.b	%01111111
    475  f70a		       63		      .byte.b	%01100011
    476  f70b		       63		      .byte.b	%01100011
    477  f70c		       00		      .byte.b	%00000000
    478  f70d
    479  f70d
    480  f70d
    481  f70d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  f70d							; Progress Bar Graphics
    483  f70d							;
    484  f70d							;
    485  f70d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  f70d
    487  f70d				   PgBarGfx
    488  f70d							; 9 bytes
    489  f70d
    490  f70d		       ff		      .byte.b	%11111111	; 1st PF1
    491  f70e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  f70f		       3f		      .byte.b	%00111111
    493  f710		       1f		      .byte.b	%00011111
    494  f711		       0f		      .byte.b	%00001111
    495  f712		       07		      .byte.b	%00000111
    496  f713		       03		      .byte.b	%00000011
    497  f714		       01		      .byte.b	%00000001
    498  f715		       00		      .byte.b	%00000000
    499  f716
    500  f716							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  f716				   PgBarGfxR
    502  f716							; 8 bytes
    503  f716
    504  f716		       ff		      .byte.b	%11111111	; PF2
    505  f717		       fe		      .byte.b	%11111110
    506  f718		       fc		      .byte.b	%11111100
    507  f719		       f8		      .byte.b	%11111000
    508  f71a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  f71b		       e0		      .byte.b	%11100000	; 1st PF0
    510  f71c		       c0		      .byte.b	%11000000
    511  f71d		       80		      .byte.b	%10000000
    512  f71e
    513  f71e
    514  f71e
    515  f71e				   FineHmove73
    516  f71e
    517  f71e		       70 60 50 40	      HEX	70 60 50 40
    518  f722		       30 20 10 00	      HEX	30 20 10 00
    519  f726		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  f72a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  f72e
    522  f72e
    523  f72e
    524  f72e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  f72e							; Cat Rainbow Graphics
    526  f72e							;
    527  f72e							;
    528  f72e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  f72e
    530  f72e				   RainbowGfx
    531  f72e							; 4 bytes
    532  f72e
    533  f72e							;.byte %10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  f72e
    535  f72e							;.byte %01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  f72e
    537  f72e							;.byte %11000000	; rainbow PF0 gfx for moving up
    538  f72e
    539  f72e							;.byte %00110000	; rainbow PF0 gfx for moving down
    540  f72e
    541  f72e				   RainbowCol
    542  f72e
    543  f72e		       00 00 00 00*	      HEX	000000000000000000000000000000000000	; 18 bytes
    544  f740
    545  f740		       36		      .byte.b	$36
    546  f741		       36		      .byte.b	$36
    547  f742
    548  f742		       28		      .byte.b	$28
    549  f743		       28		      .byte.b	$28
    550  f744
    551  f744		       1e		      .byte.b	$1E
    552  f745		       1e		      .byte.b	$1E
    553  f746
    554  f746		       cc		      .byte.b	$CC
    555  f747		       cc		      .byte.b	$CC
    556  f748
    557  f748		       72		      .byte.b	$72
    558  f749		       72		      .byte.b	$72
    559  f74a
    560  f74a		       54		      .byte.b	$54
    561  f74b		       54		      .byte.b	$54
    562  f74c
    563  f74c		       00 00 00 00*	      HEX	000000000000000000000000000000000000	; 18 bytes
    564  f75e
    565  f75e				   CatFaceGfx
    566  f75e
    567  f75e		       36		      .byte.b	%00110110
    568  f75f		       36		      .byte.b	%00110110
    569  f760		       00		      .byte.b	%00000000
    570  f761		       7e		      .byte.b	%01111110
    571  f762		       c1		      .byte.b	%11000001
    572  f763		       d5		      .byte.b	%11010101
    573  f764		       ff		      .byte.b	%11111111
    574  f765		       d5		      .byte.b	%11010101
    575  f766		       dd		      .byte.b	%11011101
    576  f767		       ff		      .byte.b	%11111111
    577  f768		       66		      .byte.b	%01100110
    578  f769		       66		      .byte.b	%01100110
    579  f76a		       42		      .byte.b	%01000010
    580  f76b
    581  f76b		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    582  f780
    583  f800		       00 00 00 00*	      ALIGN	$100
    584  f800
    585  f800				   FoodGfx
    586  f800
    587  f800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    588  f800							; 0 - blank
    589  f800
    590  f800		       00		      .byte.b	%00000000
    591  f801		       00		      .byte.b	%00000000
    592  f802		       00		      .byte.b	%00000000
    593  f803		       00		      .byte.b	%00000000
    594  f804		       00		      .byte.b	%00000000
    595  f805		       00		      .byte.b	%00000000
    596  f806		       00		      .byte.b	%00000000
    597  f807		       00		      .byte.b	%00000000
    598  f808		       00		      .byte.b	%00000000
    599  f809		       00		      .byte.b	%00000000
    600  f80a		       00		      .byte.b	%00000000
    601  f80b		       00		      .byte.b	%00000000
    602  f80c		       00		      .byte.b	%00000000
    603  f80d		       00		      .byte.b	%00000000
    604  f80e
    605  f80e		       0e		      .byte.b	$0E
    606  f80f		       00		      .byte.b	0
    607  f810
    608  f810							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    609  f810							; 1 - apple
    610  f810
    611  f810		       34		      .byte.b	%00110100
    612  f811		       7e		      .byte.b	%01111110
    613  f812		       7e		      .byte.b	%01111110
    614  f813		       ff		      .byte.b	%11111111
    615  f814		       ff		      .byte.b	%11111111
    616  f815		       ff		      .byte.b	%11111111
    617  f816		       ff		      .byte.b	%11111111
    618  f817		       ff		      .byte.b	%11111111
    619  f818		       ff		      .byte.b	%11111111
    620  f819		       7f		      .byte.b	%01111111
    621  f81a		       6a		      .byte.b	%01101010
    622  f81b		       08		      .byte.b	%00001000
    623  f81c		       0c		      .byte.b	%00001100
    624  f81d		       04		      .byte.b	%00000100
    625  f81e
    626  f81e		       46		      .byte.b	$46
    627  f81f		       00		      .byte.b	0
    628  f820
    629  f820							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    630  f820							; 2 - peach
    631  f820
    632  f820		       3c		      .byte.b	%00111100
    633  f821		       6e		      .byte.b	%01101110
    634  f822		       6e		      .byte.b	%01101110
    635  f823		       df		      .byte.b	%11011111
    636  f824		       df		      .byte.b	%11011111
    637  f825		       bf		      .byte.b	%10111111
    638  f826		       bf		      .byte.b	%10111111
    639  f827		       bf		      .byte.b	%10111111
    640  f828		       de		      .byte.b	%11011110
    641  f829		       5e		      .byte.b	%01011110
    642  f82a		       6c		      .byte.b	%01101100
    643  f82b		       18		      .byte.b	%00011000
    644  f82c		       10		      .byte.b	%00010000
    645  f82d		       30		      .byte.b	%00110000
    646  f82e
    647  f82e		       3a		      .byte.b	$3A
    648  f82f		       00		      .byte.b	0
    649  f830
    650  f830							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    651  f830							; 3 - banana
    652  f830
    653  f830		       38		      .byte.b	%00111000
    654  f831		       7c		      .byte.b	%01111100
    655  f832		       fe		      .byte.b	%11111110
    656  f833		       fe		      .byte.b	%11111110
    657  f834		       ff		      .byte.b	%11111111
    658  f835		       ff		      .byte.b	%11111111
    659  f836		       8f		      .byte.b	%10001111
    660  f837		       07		      .byte.b	%00000111
    661  f838		       07		      .byte.b	%00000111
    662  f839		       03		      .byte.b	%00000011
    663  f83a		       03		      .byte.b	%00000011
    664  f83b		       02		      .byte.b	%00000010
    665  f83c		       06		      .byte.b	%00000110
    666  f83d		       06		      .byte.b	%00000110
    667  f83e
    668  f83e		       1e		      .byte.b	$1E
    669  f83f		       00		      .byte.b	0
    670  f840
    671  f840							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    672  f840							; 4 - pear
    673  f840
    674  f840		       38		      .byte.b	%00111000
    675  f841		       7c		      .byte.b	%01111100
    676  f842		       fe		      .byte.b	%11111110
    677  f843		       fe		      .byte.b	%11111110
    678  f844		       fe		      .byte.b	%11111110
    679  f845		       fe		      .byte.b	%11111110
    680  f846		       fe		      .byte.b	%11111110
    681  f847		       fe		      .byte.b	%11111110
    682  f848		       7c		      .byte.b	%01111100
    683  f849		       38		      .byte.b	%00111000
    684  f84a		       30		      .byte.b	%00110000
    685  f84b		       10		      .byte.b	%00010000
    686  f84c		       18		      .byte.b	%00011000
    687  f84d		       08		      .byte.b	%00001000
    688  f84e
    689  f84e		       cc		      .byte.b	$CC
    690  f84f		       00		      .byte.b	0
    691  f850
    692  f850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    693  f850							; 5 - plum
    694  f850
    695  f850		       38		      .byte.b	%00111000
    696  f851		       6c		      .byte.b	%01101100
    697  f852		       6e		      .byte.b	%01101110
    698  f853		       de		      .byte.b	%11011110
    699  f854		       df		      .byte.b	%11011111
    700  f855		       bf		      .byte.b	%10111111
    701  f856		       bf		      .byte.b	%10111111
    702  f857		       bf		      .byte.b	%10111111
    703  f858		       de		      .byte.b	%11011110
    704  f859		       de		      .byte.b	%11011110
    705  f85a		       5e		      .byte.b	%01011110
    706  f85b		       3c		      .byte.b	%00111100
    707  f85c		       20		      .byte.b	%00100000
    708  f85d		       60		      .byte.b	%01100000
    709  f85e
    710  f85e		       88		      .byte.b	$88
    711  f85f		       00		      .byte.b	0
    712  f860
    713  f860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    714  f860							; 6 - grapes
    715  f860
    716  f860		       18		      .byte.b	%00011000
    717  f861		       08		      .byte.b	%00001000
    718  f862		       36		      .byte.b	%00110110
    719  f863		       12		      .byte.b	%00010010
    720  f864		       6c		      .byte.b	%01101100
    721  f865		       24		      .byte.b	%00100100
    722  f866		       db		      .byte.b	%11011011
    723  f867		       49		      .byte.b	%01001001
    724  f868		       36		      .byte.b	%00110110
    725  f869		       12		      .byte.b	%00010010
    726  f86a		       6c		      .byte.b	%01101100
    727  f86b		       34		      .byte.b	%00110100
    728  f86c		       10		      .byte.b	%00010000
    729  f86d		       18		      .byte.b	%00011000
    730  f86e
    731  f86e		       64		      .byte.b	$64
    732  f86f		       00		      .byte.b	0
    733  f870
    734  f870							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    735  f870							; 7 - broccoli
    736  f870
    737  f870		       00		      .byte.b	%00000000
    738  f871		       00		      .byte.b	%00000000
    739  f872		       18		      .byte.b	%00011000
    740  f873		       18		      .byte.b	%00011000
    741  f874		       3e		      .byte.b	%00111110
    742  f875		       2a		      .byte.b	%00101010
    743  f876		       ea		      .byte.b	%11101010
    744  f877		       df		      .byte.b	%11011111
    745  f878		       ff		      .byte.b	%11111111
    746  f879		       ff		      .byte.b	%11111111
    747  f87a		       7e		      .byte.b	%01111110
    748  f87b		       18		      .byte.b	%00011000
    749  f87c		       00		      .byte.b	%00000000
    750  f87d		       00		      .byte.b	%00000000
    751  f87e
    752  f87e		       c6		      .byte.b	$C6
    753  f87f		       00		      .byte.b	0
    754  f880
    755  f880							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    756  f880							; 8 - cabbage
    757  f880
    758  f880		       18		      .byte.b	%00011000
    759  f881		       76		      .byte.b	%01110110
    760  f882		       76		      .byte.b	%01110110
    761  f883		       7a		      .byte.b	%01111010
    762  f884		       f9		      .byte.b	%11111001
    763  f885		       fb		      .byte.b	%11111011
    764  f886		       ed		      .byte.b	%11101101
    765  f887		       db		      .byte.b	%11011011
    766  f888		       fb		      .byte.b	%11111011
    767  f889		       e9		      .byte.b	%11101001
    768  f88a		       56		      .byte.b	%01010110
    769  f88b		       76		      .byte.b	%01110110
    770  f88c		       6e		      .byte.b	%01101110
    771  f88d		       18		      .byte.b	%00011000
    772  f88e
    773  f88e		       da		      .byte.b	$DA
    774  f88f		       00		      .byte.b	0
    775  f890
    776  f890							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    777  f890							; 9 - celery
    778  f890
    779  f890		       c0		      .byte.b	%11000000
    780  f891		       e0		      .byte.b	%11100000
    781  f892		       70		      .byte.b	%01110000
    782  f893		       30		      .byte.b	%00110000
    783  f894		       18		      .byte.b	%00011000
    784  f895		       18		      .byte.b	%00011000
    785  f896		       0c		      .byte.b	%00001100
    786  f897		       0c		      .byte.b	%00001100
    787  f898		       0e		      .byte.b	%00001110
    788  f899		       06		      .byte.b	%00000110
    789  f89a		       0d		      .byte.b	%00001101
    790  f89b		       0b		      .byte.b	%00001011
    791  f89c		       0d		      .byte.b	%00001101
    792  f89d		       06		      .byte.b	%00000110
    793  f89e
    794  f89e		       d6		      .byte.b	$D6
    795  f89f		       00		      .byte.b	0
    796  f8a0
    797  f8a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    798  f8a0							; A - green pepper
    799  f8a0
    800  f8a0		       6c		      .byte.b	%01101100
    801  f8a1		       6c		      .byte.b	%01101100
    802  f8a2		       fe		      .byte.b	%11111110
    803  f8a3		       fe		      .byte.b	%11111110
    804  f8a4		       f6		      .byte.b	%11110110
    805  f8a5		       f6		      .byte.b	%11110110
    806  f8a6		       f6		      .byte.b	%11110110
    807  f8a7		       f6		      .byte.b	%11110110
    808  f8a8		       f6		      .byte.b	%11110110
    809  f8a9		       ec		      .byte.b	%11101100
    810  f8aa		       7c		      .byte.b	%01111100
    811  f8ab		       10		      .byte.b	%00010000
    812  f8ac		       18		      .byte.b	%00011000
    813  f8ad		       08		      .byte.b	%00001000
    814  f8ae
    815  f8ae		       c8		      .byte.b	$C8
    816  f8af		       00		      .byte.b	0
    817  f8b0
    818  f8b0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    819  f8b0							; B - potato
    820  f8b0
    821  f8b0		       00		      .byte.b	%00000000
    822  f8b1		       00		      .byte.b	%00000000
    823  f8b2		       00		      .byte.b	%00000000
    824  f8b3		       1c		      .byte.b	%00011100
    825  f8b4		       7e		      .byte.b	%01111110
    826  f8b5		       ff		      .byte.b	%11111111
    827  f8b6		       ff		      .byte.b	%11111111
    828  f8b7		       ef		      .byte.b	%11101111
    829  f8b8		       f6		      .byte.b	%11110110
    830  f8b9		       78		      .byte.b	%01111000
    831  f8ba		       30		      .byte.b	%00110000
    832  f8bb		       00		      .byte.b	%00000000
    833  f8bc		       00		      .byte.b	%00000000
    834  f8bd		       00		      .byte.b	%00000000
    835  f8be
    836  f8be		       f6		      .byte.b	$F6
    837  f8bf		       00		      .byte.b	0
    838  f8c0
    839  f8c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    840  f8c0							; C - mushroom
    841  f8c0
    842  f8c0		       00		      .byte.b	%00000000
    843  f8c1		       18		      .byte.b	%00011000
    844  f8c2		       18		      .byte.b	%00011000
    845  f8c3		       18		      .byte.b	%00011000
    846  f8c4		       18		      .byte.b	%00011000
    847  f8c5		       99		      .byte.b	%10011001
    848  f8c6		       db		      .byte.b	%11011011
    849  f8c7		       ff		      .byte.b	%11111111
    850  f8c8		       ff		      .byte.b	%11111111
    851  f8c9		       ff		      .byte.b	%11111111
    852  f8ca		       7e		      .byte.b	%01111110
    853  f8cb		       7e		      .byte.b	%01111110
    854  f8cc		       18		      .byte.b	%00011000
    855  f8cd		       00		      .byte.b	%00000000
    856  f8ce
    857  f8ce		       08		      .byte.b	$08
    858  f8cf		       00		      .byte.b	0
    859  f8d0
    860  f8d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    861  f8d0							; D - key
    862  f8d0
    863  f8d0		       10		      .byte.b	%00010000
    864  f8d1		       1e		      .byte.b	%00011110
    865  f8d2		       1e		      .byte.b	%00011110
    866  f8d3		       18		      .byte.b	%00011000
    867  f8d4		       1e		      .byte.b	%00011110
    868  f8d5		       1e		      .byte.b	%00011110
    869  f8d6		       10		      .byte.b	%00010000
    870  f8d7		       10		      .byte.b	%00010000
    871  f8d8		       10		      .byte.b	%00010000
    872  f8d9		       10		      .byte.b	%00010000
    873  f8da		       38		      .byte.b	%00111000
    874  f8db		       6c		      .byte.b	%01101100
    875  f8dc		       6c		      .byte.b	%01101100
    876  f8dd		       38		      .byte.b	%00111000
    877  f8de
    878  f8de		       2c		      .byte.b	$2C
    879  f8df		       00		      .byte.b	0
    880  f8e0
    881  f8e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    882  f8e0							; E - ring
    883  f8e0
    884  f8e0		       00		      .byte.b	%00000000
    885  f8e1		       18		      .byte.b	%00011000
    886  f8e2		       3c		      .byte.b	%00111100
    887  f8e3		       66		      .byte.b	%01100110
    888  f8e4		       42		      .byte.b	%01000010
    889  f8e5		       42		      .byte.b	%01000010
    890  f8e6		       42		      .byte.b	%01000010
    891  f8e7		       66		      .byte.b	%01100110
    892  f8e8		       3c		      .byte.b	%00111100
    893  f8e9		       18		      .byte.b	%00011000
    894  f8ea		       18		      .byte.b	%00011000
    895  f8eb		       2c		      .byte.b	%00101100
    896  f8ec		       18		      .byte.b	%00011000
    897  f8ed		       00		      .byte.b	%00000000
    898  f8ee
    899  f8ee		       2c		      .byte.b	$2C
    900  f8ef		       00		      .byte.b	0
    901  f8f0
    902  f8f0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    903  f8f0							; F - heart
    904  f8f0
    905  f8f0		       00		      .byte.b	%00000000
    906  f8f1		       18		      .byte.b	%00011000
    907  f8f2		       18		      .byte.b	%00011000
    908  f8f3		       3c		      .byte.b	%00111100
    909  f8f4		       3c		      .byte.b	%00111100
    910  f8f5		       7e		      .byte.b	%01111110
    911  f8f6		       7e		      .byte.b	%01111110
    912  f8f7		       ff		      .byte.b	%11111111
    913  f8f8		       ff		      .byte.b	%11111111
    914  f8f9		       ff		      .byte.b	%11111111
    915  f8fa		       e7		      .byte.b	%11100111
    916  f8fb		       e7		      .byte.b	%11100111
    917  f8fc		       42		      .byte.b	%01000010
    918  f8fd		       00		      .byte.b	%00000000
    919  f8fe
    920  f8fe		       4a		      .byte.b	$4A
    921  f8ff		       00		      .byte.b	0
    922  f900
    923  f900				   CatTartGfx
    924  f900
    925  f900		       00		      .byte.b	%00000000
    926  f901		       e0		      .byte.b	%11100000
    927  f902		       e0		      .byte.b	%11100000
    928  f903		       c0		      .byte.b	%11000000
    929  f904		       c0		      .byte.b	%11000000
    930  f905		       c0		      .byte.b	%11000000
    931  f906		       c0		      .byte.b	%11000000
    932  f907		       c0		      .byte.b	%11000000
    933  f908		       c0		      .byte.b	%11000000
    934  f909		       e0		      .byte.b	%11100000
    935  f90a		       e0		      .byte.b	%11100000
    936  f90b		       e0		      .byte.b	%11100000
    937  f90c		       e0		      .byte.b	%11100000
    938  f90d		       e0		      .byte.b	%11100000
    939  f90e
    940  f90e				   RainbowColors
    941  f90e
    942  f90e		       00		      .byte.b	COL_BACKGROUND
    943  f90f		       00		      .byte.b	COL_BACKGROUND
    944  f910
    945  f910		       64		      .byte.b	$64
    946  f911		       64		      .byte.b	$64
    947  f912		       88		      .byte.b	$88
    948  f913		       88		      .byte.b	$88
    949  f914		       c8		      .byte.b	$C8
    950  f915		       c8		      .byte.b	$C8
    951  f916		       1e		      .byte.b	$1E
    952  f917		       1e		      .byte.b	$1E
    953  f918		       28		      .byte.b	$28
    954  f919		       28		      .byte.b	$28
    955  f91a		       44		      .byte.b	$44
    956  f91b		       44		      .byte.b	$44
    957  f91c
    958  f91c		       00		      .byte.b	COL_BACKGROUND
    959  f91d		       00		      .byte.b	COL_BACKGROUND
------- FILE main.asm
     81  f91e
     82  f91e
     83  f91e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  f91e							; End of ROM
     85  f91e							;
     86  f91e							; Define the end of the cartridge
     87  f91e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88  f91e
     89  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
     90  fffa		       00 f0		      .WORD.w	SystemClear	; NMI
     91  fffc		       00 f0		      .WORD.w	SystemClear	; RESET
     92  fffe		       00 f0		      .WORD.w	SystemClear	; IRQ
