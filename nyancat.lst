------- FILE main.asm LEVEL 1 PASS 2
      1  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000 ????						; Project - Nyan Cat Game
      3  1000 ????						; by Jeremiah Knol
      4  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  1000 ????						; 11-01-2018 Version 4.3
      6  1000 ????						;
      7  1000 ????						; Add music
      8  1000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  1000 ????
     10  1000 ????				      PROCESSOR	6502
     11  1000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  1000 ????				      include	headers/vcs.h
      1  1000 ????						; VCS.H
      2  1000 ????						; Version 1.05, 13/November/2003
      3  1000 ????
      4  1000 ????	       00 69	   VERSION_VCS =	105
      5  1000 ????
      6  1000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  1000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  1000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  1000 ????						;
     10  1000 ????						; This file defines hardware registers and memory mapping for the
     11  1000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  1000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  1000 ????						; available at at http://www.atari2600.org/dasm
     14  1000 ????						;
     15  1000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  1000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  1000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  1000 ????						; with your views.  Please contribute, if you think you can improve this
     19  1000 ????						; file!
     20  1000 ????						;
     21  1000 ????						; Latest Revisions...
     22  1000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  1000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  1000 ????						;			    This will allow conditional code to verify VCS.H being
     25  1000 ????						;			    used for code assembly.
     26  1000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  1000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  1000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  1000 ????						;			 readability issue, and binary compatibility with disassembled
     30  1000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  1000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  1000 ????						;			 which was broken by the use of segments in this file, as
     33  1000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  1000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  1000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  1000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  1000 ????						;						   it is safe to leave it undefined, and the base address will
     38  1000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  1000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  1000 ????						;			  - register definitions are now generated through assignment
     41  1000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  1000 ????						;			    address architecture.
     43  1000 ????						; 1.0	22/MAR/2003		Initial release
     44  1000 ????
     45  1000 ????
     46  1000 ????						;-------------------------------------------------------------------------------
     47  1000 ????
     48  1000 ????						; TIA_BASE_ADDRESS
     49  1000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  1000 ????						; Normally 0, the base address should (externally, before including this file)
     51  1000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  1000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  1000 ????						; < $40 as a bankswitch.
     54  1000 ????
     55  1000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  1000 ????			  -TIA_BASE_ADDRESS =	0
     57  1000 ????				      ENDIF
     58  1000 ????
     59  1000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  1000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  1000 ????						; *OR* by declaring the label before including this file, eg:
     62  1000 ????						; TIA_BASE_ADDRESS = $40
     63  1000 ????						;   include "vcs.h"
     64  1000 ????
     65  1000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  1000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  1000 ????						; for the mirrored ROM hardware registers.
     68  1000 ????
     69  1000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  1000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  1000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  1000 ????
     73  1000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  1000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  1000 ????				      ENDIF
     76  1000 ????
     77  1000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  1000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  1000 ????				      ENDIF
     80  1000 ????
     81  1000 ????						;-------------------------------------------------------------------------------
     82  1000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????	       00 28	   VBLANK_LINES_NTSC equ	40
     48  0000 ????	       00 1e	   OSCAN_LINES_NTSC equ	30
     49  0000 ????	       00 2b	   VBLANK_NTSC equ	[[VBLANK_LINES_NTSC - 3] * 76 - 7] / 64
     50  0000 ????	       00 24	   OSCAN_NTSC equ	[[OSCAN_LINES_NTSC] * 76 + 26] / 64
     51  0000 ????
     52  0000 ????	       00 42	   VBLANK_LINES_PAL equ	66
     53  0000 ????	       00 36	   OSCAN_LINES_PAL equ	54
     54  0000 ????	       00 4a	   VBLANK_PAL equ	[[VBLANK_LINES_PAL - 3] * 76 - 7] / 64
     55  0000 ????	       00 40	   OSCAN_PAL  equ	[[OSCAN_LINES_PAL] * 76 + 26] / 64
     56  0000 ????
     57  0000 ????						; colors
     58  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     59  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     60  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     61  0000 ????	       00 08	   COL_CAT_FACE equ	$08
     62  0000 ????	       00 5f	   COL_CAT_TART equ	$5F
     63  0000 ????
     64  0000 ????						; luminosity values for throb line data
     65  0000 ????	       00 00	   LUM_0      equ	$0>>1
     66  0000 ????	       00 01	   LUM_2      equ	$2>>1
     67  0000 ????	       00 02	   LUM_4      equ	$4>>1
     68  0000 ????	       00 03	   LUM_6      equ	$6>>1
     69  0000 ????	       00 04	   LUM_8      equ	$8>>1
     70  0000 ????	       00 05	   LUM_A      equ	$A>>1
     71  0000 ????	       00 06	   LUM_C      equ	$C>>1
     72  0000 ????	       00 07	   LUM_E      equ	$E>>1
     73  0000 ????
     74  0000 ????						; color modes for throb line data
     75  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     76  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     77  0000 ????
     78  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     79  0000 ????
     80  0000 ????						; bankswitching hotspots
     81  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     82  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     83  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     84  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00b0 ????				      SEG.U	VARS
      6 U00b0 ????				      RORG	$80
      7 U00b0 ????
------- FILE headers/ram_global.asm LEVEL 3 PASS 2
      0 U00b0 ????				      include	headers/ram_global.asm
      1 U00b0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00b0 ????						; Global Variables
      3 U00b0 ????						;
      4 U00b0 ????						; These variables are used globally and cannot be shared or otherwise corrupted
      5 U00b0 ????						; Uses 15 bytes of RAM
      6 U00b0 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7 U00b0 ????
      8 U00b0 ????			   RamGlobal
      9 U00b0 ????
     10 U00b0 ????						; Game housekeeping - 2 bytes
     11 U00b0 ????	       00	   Frame      ds	1	; current frame mod 256
     12 U00b1 ????			   Variation		; game variation options
     13 U00b1 ????	       00		      ds	1	; x-------	number of players
     14 U00b2 ????						; -x------	current player
     15 U00b2 ????						; --xx----	P1 difficulty
     16 U00b2 ????						; ----xx--	P2 difficulty
     17 U00b2 ????
     18 U00b2 ????						; Random Numbers - 2 bytes
     19 U00b2 ????	       00 00	   Rand16     ds	2	; 16-bit random number
     20 U00b4 ????
     21 U00b4 ????						; Music - 2 bytes
     22 U00b4 ????			   MusicNote		; xxxx----	current sequence
     23 U00b4 ????	       00		      ds	1	; ----xxxx	note in sequence
     24 U00b5 ????
     25 U00b5 ????			   NoteData		; xxxxx---	note length table offset
     26 U00b5 ????	       00		      ds	1	; -----xxx	frames left in note
     27 U00b6 ????
     28 U00b6 ????						; Cat colors - 2 bytes
     29 U00b6 ????			   CatTartColor 		; color for current player's cat in the kernels
     30 U00b6 ????	       00		      ds	1
     31 U00b7 ????			   OtherTartColor		; color for the other player's cat
     32 U00b7 ????	       00		      ds	1
     33 U00b8 ????
     34 U00b8 ????						; Scores and current level - 7 bytes
     35 U00b8 ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     36 U00b8 ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     37 U00be ????						; last 3 for player 2.
     38 U00be ????			   Level		; value for the current level
     39 U00be ????	       00		      ds	1
     40 U00bf ????
     41 U00bf ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42 U00bf ????						; Local Variables
     43 U00bf ????						;
     44 U00bf ????						; These variables are only used locally, and are redefined for each area of code
     45 U00bf ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46 U00bf ????
     47 U00bf ????			   RamLocal
     48 U00bf ????
------- FILE headers/variables.h
------- FILE headers/ram_menu.asm LEVEL 3 PASS 2
      0 U00bf ????				      include	headers/ram_menu.asm
      1 U00bf ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00bf ????						; Menu Variables
      3 U00bf ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U00bf ????						; These variables are only needed in the main menu routine.
      5 U00bf ????						;
      6 U00bf ????						; Uses 96 bytes of RAM
      7 U00bf ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U00bf ????
      9 U00bf ????				      RORG	RamLocal
     10 U00bf ????
     11 U00bf ????						; Menu navigation - 1 byte
     12 U00bf ????			   CursorPos		; -----xxx	cursor position
     13 U00bf ????
     14 U00bf ????						; Frame counters - 2 bytes
     15 U00bf ????			   MenuCatFrame 		; animation frame for menu cat
     16 U00bf ????	       00		      ds	1
     17 U00c0 ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     18 U00c0 ????	       00		      ds	1
     19 U00c1 ????			   MenuCatTiming		; xxxxx---	animation frame length offset from 0-26
     20 U00c1 ????	       00		      ds	1	; -----xxx	game frames left in current animation frame
     21 U00c2 ????
     22 U00c2 ????						; Pointers - 8 bytes
     23 U00c2 ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     24 U00c2 ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     25 U00c2 ????	       00 00		      ds	2
     26 U00c4 ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     27 U00c4 ????	       00 00		      ds	2
     28 U00c6 ????			   MenuCatMslPtr		; pointer used to access missile graphics
     29 U00c6 ????	       00 00		      ds	2
     30 U00c8 ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     31 U00c8 ????	       00 00		      ds	2
     32 U00ca ????
     33 U00ca ????						; Pre-load variables for within kernel - 4 bytes
     34 U00ca ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     35 U00ca ????	       00		      ds	1
     36 U00cb ????			   RamMenuCatMissile		; missile graphics in menu cat
     37 U00cb ????	       00		      ds	1
     38 U00cc ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
     39 U00cc ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
     40 U00cc ????	       00		      ds	1
     41 U00cd ????			   MenuCatShift
     42 U00cd ????	       00		      ds	1
     43 U00ce ????
     44 U00ce ????						; Data blocks - 82 bytes
     45 U00ce ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
     46 U00ce ????	       00 00 00 00*	      ds	14
     47 U00dc ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
     48 U00dc ????	       00 00 00 00*	      ds	15
     49 U00eb ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
     50 U00eb ????	       00 00 00 00*	      ds	15
     51 U00fa ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
     52 U00fa ????	       00 00 00 00*	      ds	16
     53 U010a ????	       00		      ds	1	; extra byte needed for next data block
     54 U010b ????			   RamBowColorsBk		; rainbow colors
     55 U010b ????	       00 00 00 00*	      ds	20
     56 U011f ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
     57 U011f ????	       00		      ds	1
     58 U0120 ????
     59 U0120 ????						; 18 bytes free
------- FILE headers/variables.h
------- FILE headers/ram_gameplay.asm LEVEL 3 PASS 2
      0 U0120 ????				      include	headers/ram_gameplay.asm
      1 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0120 ????						; Gameplay variables
      3 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0120 ????						; These variables are only needed in the gameplay routine
      5 U0120 ????						;
      6 U0120 ????						; Uses 55 bytes of RAM
      7 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U0120 ????
      9 U0120 ????				      RORG	RamLocal
     10 U0120 ????
     11 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12 U0120 ????						; Variables that shouldn't be shared - ? bytes
     13 U0120 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14 U0120 ????
     15 U0120 ????						; Pointers - 14 bytes
     16 U0120 ????
     17 U0120 ????						; The unused 3 bits of the high byte in each pointer
     18 U0120 ????						; may be used for the speeds of each row
     19 U0120 ????
     20 U0120 ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
     21 U0120 ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     22 U0120 ????	       00 00		      ds	2
     23 U0122 ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
     24 U0122 ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     25 U0122 ????	       00 00		      ds	2
     26 U0124 ????			   TartGfxPtr1		; pointer for the tart graphics
     27 U0124 ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     28 U0124 ????	       00 00		      ds	2
     29 U0126 ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
     30 U0126 ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     31 U0126 ????	       00 00		      ds	2
     32 U0128 ????			   TartGfxPtr2		; pointer for the tart graphics
     33 U0128 ????			   HthGfxLPtr		; pointer for left half of the health graphics
     34 U0128 ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     35 U0128 ????	       00 00		      ds	2
     36 U012a ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
     37 U012a ????			   HthGfxRPtr		; pointer for right half of the health graphics
     38 U012a ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     39 U012a ????	       00 00		      ds	2
     40 U012c ????			   ThrobPtr		; pointer for loading the throb colors
     41 U012c ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     42 U012c ????	       00 00		      ds	2
     43 U012e ????
     44 U012e ????						; Variable game colors - 2 bytes
     45 U012e ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
     46 U012f ????	       00	   PgBarColor ds	1	; color for full part of progress bar
     47 U0130 ????
     48 U0130 ????						; Variables used when drawing the cat - 5 bytes
     49 U0130 ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     50 U0131 ????			   CatPosition		; data describing the cat's position
     51 U0131 ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     52 U0132 ????						; bits 4-0 store the number of scanlines to skip after
     53 U0132 ????						; top of the cat's row before drawing the cat, from 0-18
     54 U0132 ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
     55 U0133 ????			   JoyCenter		; least significant bit, true if joystick has been returned to center
     56 U0133 ????	       00		      ds	1
     57 U0134 ????			   PreCatRows		; number of rows to draw before the two "cat" rows
     58 U0134 ????	       00		      ds	1
     59 U0135 ????
     60 U0135 ????						; Variables used for the food items - 21 bytes
     61 U0135 ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
     62 U0135 ????	       00 00 00 00*	      ds	7	; this frame.
     63 U013c ????						; Lo nybble either holds the pre-loaded value of the next
     64 U013c ????						; food item to appear in this row, or temporarily holds the
     65 U013c ????						; 3rd food item which isn't shown this frame, based on how many
     66 U013c ????						; food items are visible in this row (2-3), which is determined
     67 U013c ????						; by the position of the leftmost food item.
     68 U013c ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
     69 U013c ????	       00 00 00 00*	      ds	7	; this frame.
     70 U0143 ????						; Lo nybble holds the fractional positional value
     71 U0143 ????						; for the row's position (0-15).
     72 U0143 ????			   FoodPosX		; (range 0-88)
     73 U0143 ????	       00 00 00 00*	      ds	7
     74 U014a ????
     75 U014a ????						; Variables for the progress bar and health display - 2 bytes
     76 U014a ????			   Progress		; value for level progress, which can be
     77 U014a ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     78 U014b ????			   Health		; amount of health
     79 U014b ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     80 U014c ????						;ProgressBar	; array of 5 playfield values for progress bar
     81 U014c ????						; (shared with next 5 bytes of RAM)
     82 U014c ????
     83 U014c ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
     84 U014c ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
     85 U014c ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
     86 U014f ????			   CatRow2FoodL
     87 U014f ????	       00		      ds	1
     88 U0150 ????			   CatRow2FoodR
     89 U0150 ????	       00		      ds	1
     90 U0151 ????			   CatRow2Color1
     91 U0151 ????	       00		      ds	1
     92 U0152 ????			   CatRow2Color2
     93 U0152 ????	       00		      ds	1
     94 U0153 ????
     95 U0153 ????						; Variables for the throbbing lines' colors - 4 bytes
     96 U0153 ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     97 U0156 ????						; throbbing lines. The first color is darkest,
     98 U0156 ????						; the last is brightest.
     99 U0156 ????	       00	   CatThrobPF ds	1
    100 U0157 ????
    101 U0157 ????						; Temporary variables - 2 bytes
    102 U0157 ????			   ProgressBar
    103 U0157 ????	       00	   Temp       ds	1
    104 U0158 ????	       00	   TempLoop   ds	1
    105 U0159 ????
    106 U0159 ????						; 51 bytes free
    107 U0159 ????
    108 U0159 ????						; Variables which can be shared with the scoreboard stack - 3 bytes
    109 U0159 ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    110 U015a ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    111 U015b ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    112 U015c ????
    113 U015c ????						; 7 of 15 available temporary RAM bytes used (8 left)
    114 U015c ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    115 U015c ????
    116 U015c ????				      RORG	$100 - 34
    117 U015c ????			   RamBowColors
------- FILE headers/variables.h
------- FILE headers/ram_temp.asm LEVEL 3 PASS 2
      0 U015c ????				      include	headers/ram_temp.asm
      1 U015c ????
      2 U015c ????				      RORG	$F0
      3 U015c ????
      4 U015c ????			   MusicPtr
      5 U015c ????	       00 00		      ds	2
      6 U015e ????			   TempX
      7 U015e ????	       00		      ds	1
      8 U015f ????			   TempNote
      9 U015f ????	       00		      ds	1
     10 U0160 ????
------- FILE headers/variables.h
     12 U0160 ????
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U0160 ????				      include	headers/macros.h
      1 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0160 ????						; Start Bank
      3 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0160 ????						; Takes an integer for the bank
      5 U0160 ????						;
      6 U0160 ????						; Placed at the start of each bank
      7 U0160 ????						; Sets the bank's ROM location, and adds the global jump table
      8 U0160 ????						;
      9 U0160 ????						; Uses 18 bytes of ROM for the jump table
     10 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U0160 ????
     12 U0160 ????				      MAC	start_bank
     13 U0160 ????				      SEG	BANK_{1}
     14 U0160 ????				      ORG	[{1} - 1] * $1000
     15 U0160 ????				      RORG	$1000
     16 U0160 ????				      SUBROUTINE
     17 U0160 ????
     18 U0160 ????			   JmpInitSystem
     19 U0160 ????				      nop	SelectBank1
     20 U0160 ????				      jmp	InitSystem
     21 U0160 ????			   JmpMenuOverScan
     22 U0160 ????				      nop	SelectBank1
     23 U0160 ????				      jmp	MenuOverScan
     24 U0160 ????			   JmpGamePlay
     25 U0160 ????						;	nop SelectBank2
     26 U0160 ????						;	jmp GameplayInit
     27 U0160 ????				      jmp	JmpInitSystem
     28 U0160 ????
     29 U0160 ????				      ENDM
     30 U0160 ????
     31 U0160 ????
     32 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0160 ????						; End Bank
     34 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35 U0160 ????						; Takes an integer for the bank
     36 U0160 ????						;
     37 U0160 ????						; Placed at the end of each bank
     38 U0160 ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     39 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40 U0160 ????
     41 U0160 ????				      MAC	end_bank
     42 U0160 ????				      ORG	[{1} - 1] * $1000 + $0FFA
     43 U0160 ????
     44 U0160 ????				      .word	JmpInitSystem	; NMI
     45 U0160 ????				      .word	JmpInitSystem	; RESET
     46 U0160 ????				      .word	JmpInitSystem	; IRQ
     47 U0160 ????
     48 U0160 ????				      ENDM
     49 U0160 ????
     50 U0160 ????
     51 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52 U0160 ????						; Set Overscan Timer
     53 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54 U0160 ????						; Sets and starts the timer for the overscan
     55 U0160 ????						;
     56 U0160 ????						; Uses 13 bytes of ROM
     57 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58 U0160 ????
     59 U0160 ????				      MAC	set_oscan_timer
     60 U0160 ????				      SUBROUTINE
     61 U0160 ????
     62 U0160 ????				      lda	#OSCAN_NTSC
     63 U0160 ????				      bit	Variation
     64 U0160 ????				      bmi	.NtscMode
     65 U0160 ????				      lda	#OSCAN_PAL
     66 U0160 ????			   .NtscMode
     67 U0160 ????				      sta	WSYNC
     68 U0160 ????				      sta	TIM64T	; set overscan timer
     69 U0160 ????
     70 U0160 ????				      ENDM
     71 U0160 ????
     72 U0160 ????
     73 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     74 U0160 ????						; Vertical Sync
     75 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76 U0160 ????						; Performs a vertical sync, and starts the timer for vertical blanking
     77 U0160 ????						;
     78 U0160 ????						; Uses 22 bytes of ROM
     79 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80 U0160 ????
     81 U0160 ????				      MAC	vert_sync
     82 U0160 ????				      SUBROUTINE
     83 U0160 ????
     84 U0160 ????				      ldx	#VBLANK_NTSC	; TIM64T value for NTSC mode
     85 U0160 ????				      bit	Variation
     86 U0160 ????				      bmi	.NtscMode
     87 U0160 ????				      ldx	#VBLANK_PAL	; TIM64T value for PAL mode
     88 U0160 ????			   .NtscMode
     89 U0160 ????				      lda	#%1110
     90 U0160 ????			   .VsyncLoop
     91 U0160 ????				      sta	WSYNC
     92 U0160 ????				      sta	VSYNC
     93 U0160 ????				      sta	VBLANK
     94 U0160 ????				      stx	TIM64T
     95 U0160 ????				      lsr
     96 U0160 ????				      bne	.VsyncLoop
     97 U0160 ????
     98 U0160 ????				      ENDM
     99 U0160 ????
    100 U0160 ????
    101 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    102 U0160 ????						; Timer Loop
    103 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    104 U0160 ????						; Loops until the timer runs down
    105 U0160 ????						; Used to finish vertical blanking and overscan
    106 U0160 ????						;
    107 U0160 ????						; Uses 5 bytes of ROM
    108 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    109 U0160 ????
    110 U0160 ????				      MAC	timer_loop
    111 U0160 ????				      SUBROUTINE
    112 U0160 ????
    113 U0160 ????			   .TimerLoop
    114 U0160 ????				      lda	INTIM
    115 U0160 ????				      bne	.TimerLoop	; loop until end of vertical blanking
    116 U0160 ????
    117 U0160 ????				      ENDM
    118 U0160 ????
    119 U0160 ????
    120 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121 U0160 ????						; Throb Rainbow Background
    122 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    123 U0160 ????						; Checks the background color, and if black, the throb color is used instead
    124 U0160 ????						; The throb color must be pre-loaded into the X register
    125 U0160 ????						;
    126 U0160 ????						; Uses 11 bytes of ROM
    127 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    128 U0160 ????
    129 U0160 ????				      MAC	throb_rainbow_bk
    130 U0160 ????				      SUBROUTINE
    131 U0160 ????			   .X	      SET	{1}
    132 U0160 ????
    133 U0160 ????				      lda	RamBowColors+.X	; 3
    134 U0160 ????				      bne	.Rainbow	; 5/6
    135 U0160 ????				      stx	COLUBK	; 8
    136 U0160 ????				      beq	.End	; 11
    137 U0160 ????			   .Rainbow
    138 U0160 ????				      sta	COLUBK	; 9
    139 U0160 ????				      nop		; 11
    140 U0160 ????			   .End
    141 U0160 ????				      ENDM
    142 U0160 ????
    143 U0160 ????
    144 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    145 U0160 ????						; Throb Rainbow Playfield
    146 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    147 U0160 ????						; Checks the playfield color, and if black, the throb color is used instead
    148 U0160 ????						; The throb color must be pre-loaded into the X register
    149 U0160 ????						;
    150 U0160 ????						; Uses 11 bytes of ROM
    151 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    152 U0160 ????
    153 U0160 ????				      MAC	throb_rainbow_pf
    154 U0160 ????				      SUBROUTINE
    155 U0160 ????			   .X	      SET	{1}
    156 U0160 ????
    157 U0160 ????				      lda	RamBowColors+.X	; 3
    158 U0160 ????				      bne	.Rainbow	; 5/6
    159 U0160 ????				      stx	COLUPF	; 8
    160 U0160 ????				      beq	.End	; 11
    161 U0160 ????			   .Rainbow
    162 U0160 ????				      sta	COLUPF	; 9
    163 U0160 ????				      nop		; 11
    164 U0160 ????			   .End
    165 U0160 ????				      ENDM
    166 U0160 ????
    167 U0160 ????
    168 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    169 U0160 ????						; Jump to Next Page
    170 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    171 U0160 ????						; Jumps to the beginning of the next page, padding the end of the current one
    172 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    173 U0160 ????
    174 U0160 ????				      MAC	next_page
    175 U0160 ????				      SUBROUTINE
    176 U0160 ????
    177 U0160 ????				      jmp	.NextPage
    178 U0160 ????				      ALIGN	$100
    179 U0160 ????			   .NextPage
    180 U0160 ????
    181 U0160 ????				      ENDM
    182 U0160 ????
    183 U0160 ????
    184 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    185 U0160 ????						; Skip Word
    186 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    187 U0160 ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    188 U0160 ????						; skipping the next two bytes of ROM.
    189 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    190 U0160 ????
    191 U0160 ????				      MAC	skip_word
    192 U0160 ????				      HEX	0C
    193 U0160 ????				      ENDM
------- FILE main.asm
     18 U0160 ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U0160 ????				      include	bank1.asm
      1 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U0160 ????						; Bank 1
      3 U0160 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U0160 ????
      0 U0160 ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 0f 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c b2 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c
     14  000c
     15  000c		       4c 00 10 	      jmp	JmpInitSystem
     16  000f
      6  000f
------- FILE init.asm LEVEL 3 PASS 2
      0  000f					      include	init.asm
      1  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  000f							; Clear system registers and RAM
      3  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  000f							; Uses 14 bytes of ROM
      5  000f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  000f
      7  000f				   InitSystem
      8  000f
      9  000f							; clear CPU and zeropage
     10  000f		       d8		      cld
     11  0010		       ab 00		      lxa	#0
     12  0012		       a8		      tay
     13  0013				   .ClearStack
     14  0013		       ca		      dex
     15  0014		       9a		      txs
     16  0015		       48		      pha
     17  0016		       d0 fb		      bne	.ClearStack
     18  0018
     19  0018							; check for forced 50hz mode
     20  0018		       4e 82 02 	      lsr	SWCHB	; reset switch state -> carry flag
     21  001b		       66 81		      ror	Variation	; write to D7
     22  001d
------- FILE bank1.asm
------- FILE bank1/code/intro.asm LEVEL 3 PASS 2
      0  001d					      include	bank1/code/intro.asm
      1  001d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  001d							; Intro music sequence
      3  001d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  001d
      5  001d				   Intro
      6  001d
      7  001d		       a9 fa		      lda	#250
      8  001f		       85 84		      sta	MusicNote
      9  0021
     10  0021				   .IntroOscan
      0  0021					      SET_OSCAN_TIMER
      1  0021					      SUBROUTINE
      2  0021
      3  0021		       a9 24		      lda	#OSCAN_NTSC
      4  0023		       24 81		      bit	Variation
      5  0025		       30 02		      bmi	.NtscMode
      6  0027		       a9 40		      lda	#OSCAN_PAL
      7  0029				   .NtscMode
      8  0029		       85 02		      sta	WSYNC
      9  002b		       8d 96 02 	      sta	TIM64T
     10  002e
      0  002e					      TIMER_LOOP
      1  002e					      SUBROUTINE
      2  002e
      3  002e				   .TimerLoop
      4  002e		       ad 84 02 	      lda	INTIM
      5  0031		       d0 fb		      bne	.TimerLoop
      6  0033
     13  0033
      0  0033					      VERT_SYNC
      1  0033					      SUBROUTINE
      2  0033
      3  0033		       a2 2b		      ldx	#VBLANK_NTSC
      4  0035		       24 81		      bit	Variation
      5  0037		       30 02		      bmi	.NtscMode
      6  0039		       a2 4a		      ldx	#VBLANK_PAL
      7  003b				   .NtscMode
      8  003b		       a9 0e		      lda	#%1110
      9  003d				   .VsyncLoop
     10  003d		       85 02		      sta	WSYNC
     11  003f		       85 00		      sta	VSYNC
     12  0041		       85 01		      sta	VBLANK
     13  0043		       8e 96 02 	      stx	TIM64T
     14  0046		       4a		      lsr
     15  0047		       d0 f4		      bne	.VsyncLoop
     16  0049
     15  0049
     16  0049		       a5 84		      lda	MusicNote
     17  004b		       10 1d		      bpl	.IntroMusic
     18  004d
     19  004d		       a2 08		      ldx	#8
     20  004f		       c9 fc		      cmp	#252
     21  0051		       f0 0b		      beq	.IntroClick
     22  0053		       ca		      dex
     23  0054		       c9 fd		      cmp	#253
     24  0056		       f0 06		      beq	.IntroClick
     25  0058
     26  0058		       a9 00		      lda	#0
     27  005a		       85 19		      sta	AUDV0
     28  005c		       f0 3a		      beq	.NoEcho
     29  005e
     30  005e				   .IntroClick
     31  005e		       a9 1f		      lda	#$1F
     32  0060		       85 19		      sta	AUDV0
     33  0062		       a9 08		      lda	#$8
     34  0064		       85 15		      sta	AUDC0
     35  0066		       86 17		      stx	AUDF0
     36  0068		       d0 2e		      bne	.NoEcho
     37  006a
     38  006a				   .IntroMusic
     39  006a		       a9 19		      lda	#>IntroSeq
     40  006c		       85 f1		      sta	MusicPtr+1
     41  006e		       a9 3f		      lda	#<IntroSeq
     42  0070		       85 f0		      sta	MusicPtr
     43  0072		       a2 00		      ldx	#0
     44  0074		       20 3f 16 	      jsr	SetNote
     45  0077		       a9 25		      lda	#<IntroVlm
     46  0079		       85 f0		      sta	MusicPtr
     47  007b		       20 53 16 	      jsr	SetVolume
     48  007e
     49  007e		       a5 84		      lda	MusicNote
     50  0080		       c9 02		      cmp	#2
     51  0082		       30 14		      bmi	.NoEcho
     52  0084
     53  0084		       a9 3d		      lda	#<IntroSeq-2
     54  0086		       85 f0		      sta	MusicPtr
     55  0088		       a2 01		      ldx	#1
     56  008a		       20 3f 16 	      jsr	SetNote
     57  008d		       a9 25		      lda	#<IntroVlm
     58  008f		       85 f0		      sta	MusicPtr
     59  0091		       20 53 16 	      jsr	SetVolume
     60  0094		       4a		      lsr
     61  0095		       4a		      lsr
     62  0096		       85 1a		      sta	AUDV1
     63  0098
     64  0098		       20 6e 16    .NoEcho    jsr	UpdateNote
     65  009b
      0  009b					      TIMER_LOOP
      1  009b					      SUBROUTINE
      2  009b
      3  009b				   .TimerLoop
      4  009b		       ad 84 02 	      lda	INTIM
      5  009e		       d0 fb		      bne	.TimerLoop
      6  00a0
     67  00a0
     68  00a0
     69  00a0		       a2 c1		      ldx	#193
     70  00a2				   .IntroLoop
     71  00a2		       ca		      dex
     72  00a3		       85 02		      sta	WSYNC
     73  00a5		       d0 fb		      bne	.IntroLoop
     74  00a7
     75  00a7		       a5 84		      lda	MusicNote
     76  00a9		       c9 20		      cmp	#32
     77  00ab		       f0 03		      beq	.IntroEnd
     78  00ad		       4c 21 10 	      jmp	.IntroOscan
     79  00b0
     80  00b0				   .IntroEnd
     81  00b0		       86 84		      stx	MusicNote
     82  00b2
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  00b2					      include	bank1/code/oscan_logic.asm
      1  00b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  00b2							; Overscan logic for menu
      3  00b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  00b2
      5  00b2				   MenuOverScan
      0  00b2					      SET_OSCAN_TIMER
      1  00b2					      SUBROUTINE
      2  00b2
      3  00b2		       a9 24		      lda	#OSCAN_NTSC
      4  00b4		       24 81		      bit	Variation
      5  00b6		       30 02		      bmi	.NtscMode
      6  00b8		       a9 40		      lda	#OSCAN_PAL
      7  00ba				   .NtscMode
      8  00ba		       85 02		      sta	WSYNC
      9  00bc		       8d 96 02 	      sta	TIM64T
     10  00bf
      7  00bf
      8  00bf		       a9 02		      lda	#2	; temp menu bypass
      9  00c1		       2c 82 02 	      bit	SWCHB
     10  00c4		       d0 03		      bne	.NoResetPress
     11  00c6		       4c 0c 10 	      jmp	JmpGamePlay
     12  00c9				   .NoResetPress
     13  00c9
     14  00c9		       e6 80		      inc	Frame	; next frame
     15  00cb
      0  00cb					      TIMER_LOOP
      1  00cb					      SUBROUTINE
      2  00cb
      3  00cb				   .TimerLoop
      4  00cb		       ad 84 02 	      lda	INTIM
      5  00ce		       d0 fb		      bne	.TimerLoop
      6  00d0
     17  00d0
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  00d0					      include	bank1/code/vblank_logic.asm
      1  00d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  00d0							; Vertical Sync and Logic
      3  00d0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  00d0
      0  00d0					      VERT_SYNC		; 11
      1  00d0					      SUBROUTINE
      2  00d0
      3  00d0		       a2 2b		      ldx	#VBLANK_NTSC
      4  00d2		       24 81		      bit	Variation
      5  00d4		       30 02		      bmi	.NtscMode
      6  00d6		       a2 4a		      ldx	#VBLANK_PAL
      7  00d8				   .NtscMode
      8  00d8		       a9 0e		      lda	#%1110
      9  00da				   .VsyncLoop
     10  00da		       85 02		      sta	WSYNC
     11  00dc		       85 00		      sta	VSYNC
     12  00de		       85 01		      sta	VBLANK
     13  00e0		       8e 96 02 	      stx	TIM64T
     14  00e3		       4a		      lsr
     15  00e4		       d0 f4		      bne	.VsyncLoop
     16  00e6
      6  00e6
------- FILE bank1/code/music.asm LEVEL 4 PASS 2
      0  00e6					      include	bank1/code/music.asm
      1  00e6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  00e6							; Music Engine
      3  00e6							;
      4  00e6							; Handles the main music melody
      5  00e6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  00e6
      7  00e6							; set bass frequency
      8  00e6		       a7 84		      lax	MusicNote
      9  00e8		       4b 1e		      asr	#%00011110
     10  00ea		       4a		      lsr
     11  00eb		       a8		      tay
     12  00ec		       b9 5f 19 	      lda	BassSeq,y
     13  00ef		       85 18		      sta	AUDF1
     14  00f1		       a9 06		      lda	#6
     15  00f3		       a0 07		      ldy	#7
     16  00f5		       b0 02		      bcs	.Loud
     17  00f7		       a0 03		      ldy	#3
     18  00f9		       85 16	   .Loud      sta	AUDC1
     19  00fb		       84 1a		      sty	AUDV1
     20  00fd
     21  00fd							; get current note offset and store in Y
     22  00fd		       8a		      txa
     23  00fe		       4a		      lsr
     24  00ff		       4a		      lsr
     25  0100		       4a		      lsr
     26  0101		       4a		      lsr
     27  0102		       a8		      tay
     28  0103		       8a		      txa
     29  0104		       29 0f		      and	#$F
     30  0106		       18		      clc
     31  0107		       79 67 19 	      adc	MusicSeqs,y
     32  010a		       a8		      tay
     33  010b
     34  010b		       a9 19		      lda	#>MusicSeq0
     35  010d		       85 f1		      sta	MusicPtr+1
     36  010f		       a9 77		      lda	#<MusicSeq0
     37  0111		       85 f0		      sta	MusicPtr
     38  0113		       a2 00		      ldx	#0
     39  0115		       20 41 16 	      jsr	SetNote2
     40  0118		       a9 32		      lda	#<MusicVlm
     41  011a		       85 f0		      sta	MusicPtr
     42  011c		       20 53 16 	      jsr	SetVolume
     43  011f
     44  011f		       20 6e 16 	      jsr	UpdateNote
     45  0122
------- FILE bank1/code/vblank_logic.asm
      8  0122
      9  0122
     10  0122
     11  0122		       a7 91		      lax	MenuCatTiming
     12  0124		       29 07		      and	#7
     13  0126		       d0 2d		      bne	.KeepCatFrame
     14  0128
     15  0128		       8a		      txa
     16  0129		       18		      clc
     17  012a		       69 08		      adc	#1<<3
     18  012c		       c9 d8		      cmp	#27<<3
     19  012e		       d0 02		      bne	.NoRollCatFrameLen
     20  0130		       a9 00		      lda	#0
     21  0132				   .NoRollCatFrameLen
     22  0132		       85 91		      sta	MenuCatTiming
     23  0134
     24  0134		       4a		      lsr
     25  0135		       4a		      lsr
     26  0136		       4a		      lsr
     27  0137		       a8		      tay
     28  0138		       24 81		      bit	Variation
     29  013a		       10 05		      bpl	.CatTimingPAL
     30  013c		       b9 37 1a 	      lda	CatTimingNTSC,y
     31  013f		       d0 03		      bne	.CatTimingNTSC
     32  0141				   .CatTimingPAL
     33  0141		       b9 52 1a 	      lda	CatTimingPAL,y
     34  0144				   .CatTimingNTSC
     35  0144		       18		      clc
     36  0145		       65 91		      adc	MenuCatTiming
     37  0147		       85 91		      sta	MenuCatTiming
     38  0149
     39  0149		       e6 8f		      inc	MenuCatFrame
     40  014b		       a5 8f		      lda	MenuCatFrame
     41  014d		       c9 06		      cmp	#6
     42  014f		       d0 04		      bne	.NoRollCatFrame
     43  0151		       a9 00		      lda	#0
     44  0153		       85 8f		      sta	MenuCatFrame
     45  0155				   .NoRollCatFrame
     46  0155
     47  0155				   .KeepCatFrame
     48  0155		       c6 91		      dec	MenuCatTiming
     49  0157
     50  0157
     51  0157
     52  0157		       a2 ee		      ldx	#RamBowColorsBk+19
     53  0159		       a5 80		      lda	Frame
     54  015b		       29 08		      and	#%00001000
     55  015d		       d0 0f		      bne	.Rainbow1
     56  015f		       a9 e0		      lda	#%11100000
     57  0161		       85 0d		      sta	PF0
     58  0163		       a9 c1		      lda	#%11000001
     59  0165		       85 0e		      sta	PF1
     60  0167		       a9 ec		      lda	#RamBowColorsBk+17
     61  0169		       85 98		      sta	BowColorsPfPtr
     62  016b		       4c 7b 11 	      jmp	.Rainbow2
     63  016e				   .Rainbow1
     64  016e		       ca		      dex
     65  016f		       a9 c0		      lda	#%11000000
     66  0171		       85 0d		      sta	PF0
     67  0173		       a9 e0		      lda	#%11100000
     68  0175		       85 0e		      sta	PF1
     69  0177		       a9 ea		      lda	#RamBowColorsBk+15
     70  0179		       85 98		      sta	BowColorsPfPtr
     71  017b				   .Rainbow2
     72  017b		       a9 00		      lda	#0
     73  017d		       85 99		      sta	BowColorsPfPtr+1
     74  017f
     75  017f		       a5 ef		      lda	MenuBgColor
     76  0181		       85 da		      sta	RamBowColorsBk-1
     77  0183		       85 db		      sta	RamBowColorsBk
     78  0185		       85 dc		      sta	RamBowColorsBk+1
     79  0187		       85 ed		      sta	RamBowColorsBk+18
     80  0189		       85 ee		      sta	RamBowColorsBk+19
     81  018b		       85 ef		      sta	RamBowColorsBk+20
     82  018d
     83  018d		       a5 8f		      lda	MenuCatFrame
     84  018f		       c9 02		      cmp	#2
     85  0191		       10 01		      bpl	.Jmp2
     86  0193		       ca		      dex
     87  0194				   .Jmp2
     88  0194		       9a		      txs
     89  0195
     90  0195		       a2 00		      ldx	#0
     91  0197		       a9 08		      lda	#%1000
     92  0199		       2c 82 02 	      bit	SWCHB
     93  019c		       d0 02		      bne	.NtscMode
     94  019e		       a2 08		      ldx	#8
     95  01a0				   .NtscMode
     96  01a0
     97  01a0		       bd b9 18 	      lda	MenuColors,x
     98  01a3		       85 ef		      sta	MenuBgColor
     99  01a5		       e8		      inx
    100  01a6		       bd b9 18 	      lda	MenuColors,x
    101  01a9		       85 86		      sta	CatTartColor
    102  01ab
    103  01ab		       a0 06		      ldy	#6
    104  01ad				   .SetBowColors
    105  01ad		       bd ba 18 	      lda	MenuColors+1,x
    106  01b0		       48		      pha
    107  01b1		       48		      pha
    108  01b2		       48		      pha
    109  01b3		       e8		      inx
    110  01b4		       88		      dey
    111  01b5		       d0 f6		      bne	.SetBowColors
    112  01b7
    113  01b7		       a2 d9		      ldx	#RamMenuCatGfxR+15
    114  01b9		       9a		      txs
    115  01ba
    116  01ba							; push graphics for GRP1
    117  01ba		       a9 17		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
    118  01bc		       85 93		      sta	MenuCatRamPtr+1	; and set pointer to this page
    119  01be		       a6 8f		      ldx	MenuCatFrame	; get animation frame
    120  01c0		       bd ad 18 	      lda	MenuCatOffsetGfx,x	; get offset within page
    121  01c3		       85 92		      sta	MenuCatRamPtr	; and set pointer address
    122  01c5
    123  01c5		       a0 0d		      ldy	#13
    124  01c7				   .LoopGfxR
    125  01c7		       b1 92		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    126  01c9		       48		      pha		; and push to RAM
    127  01ca		       88		      dey
    128  01cb		       10 fa		      bpl	.LoopGfxR
    129  01cd
    130  01cd		       8a		      txa		; get animation frame
    131  01ce		       0a		      asl		; multiply by 2
    132  01cf		       a8		      tay
    133  01d0		       b9 54 18 	      lda	MenuCatLowGfxR,y
    134  01d3		       48		      pha
    135  01d4		       c8		      iny
    136  01d5		       b9 54 18 	      lda	MenuCatLowGfxR,y
    137  01d8		       48		      pha
    138  01d9
    139  01d9							; push graphics for right copies of PF2
    140  01d9		       bd b3 18 	      lda	MenuCatOffsetPf,x
    141  01dc		       85 92		      sta	MenuCatRamPtr
    142  01de
    143  01de		       a0 0c		      ldy	#12
    144  01e0				   .LoopPfR
    145  01e0		       b1 92		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    146  01e2		       48		      pha		; and push to RAM
    147  01e3		       88		      dey
    148  01e4		       10 fa		      bpl	.LoopPfR
    149  01e6
    150  01e6		       8a		      txa		; get animation frame
    151  01e7		       0a		      asl		; multiply by 2
    152  01e8		       a8		      tay
    153  01e9		       b9 60 18 	      lda	MenuCatLowPfGfxR,y
    154  01ec		       48		      pha
    155  01ed		       c8		      iny
    156  01ee		       b9 60 18 	      lda	MenuCatLowPfGfxR,y
    157  01f1		       48		      pha
    158  01f2		       85 9d		      sta	MenuCatShift	; use highest bit for cat face shift
    159  01f4
    160  01f4							; push graphics for left copies of PF2
    161  01f4		       8a		      txa		; get animation frame
    162  01f5		       0a		      asl
    163  01f6		       0a		      asl
    164  01f7		       0a		      asl
    165  01f8		       38		      sec
    166  01f9		       e5 8f		      sbc	MenuCatFrame
    167  01fb		       0a		      asl		; multiply by 14 (clears carry flag)
    168  01fc		       85 90		      sta	MenuCatFrameX14	; save to reuse later
    169  01fe		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    170  0200		       85 92		      sta	MenuCatRamPtr	; and set pointer address
    171  0202
    172  0202		       a0 0e		      ldy	#14
    173  0204				   .LoopPfL
    174  0204		       b1 92		      lda	(MenuCatRamPtr),y
    175  0206		       48		      pha
    176  0207		       88		      dey
    177  0208		       10 fa		      bpl	.LoopPfL
    178  020a
    179  020a							; push graphics for GRP0
    180  020a		       a9 18		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    181  020c		       85 93		      sta	MenuCatRamPtr+1	; and set pointer to this page
    182  020e		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    183  0210		       85 92		      sta	MenuCatRamPtr	; and set pointer address
    184  0212
    185  0212		       a0 0d		      ldy	#13
    186  0214				   .LoopGfxL
    187  0214		       b1 92		      lda	(MenuCatRamPtr),y
    188  0216		       48		      pha
    189  0217		       88		      dey
    190  0218		       10 fa		      bpl	.LoopGfxL
    191  021a
    192  021a							; prepare graphics pointers for kernel
    193  021a		       a9 17		      lda	#>MenuCatGfxPage1
    194  021c		       85 95		      sta	MenuCatHmvPtrP+1
    195  021e		       85 97		      sta	MenuCatMslPtr+1
    196  0220		       a9 18		      lda	#>MenuCatGfxPage2
    197  0222		       85 93		      sta	MenuCatHmvPtrM+1
    198  0224
    199  0224		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    200  0226		       e0 05		      cpx	#5
    201  0228		       d0 03		      bne	.NotFrame5
    202  022a		       38		      sec
    203  022b		       e9 0e		      sbc	#14
    204  022d				   .NotFrame5
    205  022d		       18		      clc
    206  022e		       69 ad		      adc	#<MenuCatHmoveP
    207  0230		       85 94		      sta	MenuCatHmvPtrP
    208  0232		       a5 90		      lda	MenuCatFrameX14	; get animation frame times 14
    209  0234		       38		      sec
    210  0235		       e5 8f		      sbc	MenuCatFrame	; adjust to times 13
    211  0237		       e0 00		      cpx	#0
    212  0239		       f0 03		      beq	.Frame0
    213  023b		       38		      sec
    214  023c		       e9 0d		      sbc	#13
    215  023e				   .Frame0
    216  023e		       18		      clc
    217  023f		       69 6c		      adc	#<MenuCatHmoveM
    218  0241		       85 92		      sta	MenuCatHmvPtrM
    219  0243		       a0 f3		      ldy	#<MenuCatMslGfx
    220  0245		       e0 05		      cpx	#5
    221  0247		       d0 01		      bne	.Not5
    222  0249		       88		      dey
    223  024a				   .Not5
    224  024a		       84 96		      sty	MenuCatMslPtr
    225  024c
      0  024c					      TIMER_LOOP
      1  024c					      SUBROUTINE
      2  024c
      3  024c				   .TimerLoop
      4  024c		       ad 84 02 	      lda	INTIM
      5  024f		       d0 fb		      bne	.TimerLoop
      6  0251
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  0251					      include	bank1/code/kernel.asm
      1  0251							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0251							; Kernel
      3  0251							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0251
      5  0251		       85 02		      sta	WSYNC
      6  0253
------- FILE bank1/code/menuscore.asm LEVEL 4 PASS 2
      0  0253					      include	bank1/code/menuscore.asm
      1  0253							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0253							; Scoreboard for main menu
      3  0253							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0253
      5  0253
      6  0253
      7  0253		       a0 3e		      ldy	#62
      8  0255		       88	   .Loop1     dey
      9  0256		       85 02		      sta	WSYNC
     10  0258		       d0 fb		      bne	.Loop1
     11  025a
------- FILE bank1/code/kernel.asm
      8  025a
------- FILE bank1/code/menucat_prep.asm LEVEL 4 PASS 2
      0  025a					      include	bank1/code/menucat_prep.asm
      1  025a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  025a							; Menu Cat Prep
      3  025a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  025a							; Positions the graphics objects for the giant Nyan Cat display on the menu.
      5  025a							;
      6  025a							; Uses 64 bytes of ROM
      7  025a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  025a
      0  025a					      SLEEP	13	; 15
      1  025a				   .CYCLES    SET	13
      2  025a
      3  025a				  -	      IF	.CYCLES < 2
      4  025a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  025a				  -	      ERR
      6  025a					      ENDIF
      7  025a
      8  025a					      IF	.CYCLES & 1
      9  025a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  025a		       04 00		      nop	0
     11  025c				  -	      ELSE
     12  025c				  -	      bit	VSYNC
     13  025c					      ENDIF
     14  025c				   .CYCLES    SET	.CYCLES - 3
     15  025c					      ENDIF
     16  025c
     17  025c					      REPEAT	.CYCLES / 2
     18  025c		       ea		      nop
     17  025c					      REPEND
     18  025d		       ea		      nop
     17  025d					      REPEND
     18  025e		       ea		      nop
     17  025e					      REPEND
     18  025f		       ea		      nop
     17  025f					      REPEND
     18  0260		       ea		      nop
     19  0261					      REPEND
     10  0261
     11  0261		       a9 10		      lda	#$10	; 17
     12  0263		       85 21		      sta	HMP1	; 20	left 9 clocks
     13  0265		       0a		      asl		; 22	A = #$20
     14  0266		       85 24		      sta	HMBL	; 25	left 10 clocks
     15  0268		       85 23		      sta	HMM1	; 28	left 10 clocks
     16  026a		       a0 80		      ldy	#$80	; 30
     17  026c		       84 20		      sty	HMP0	; 33	no movement
     18  026e		       a9 90		      lda	#$90	; 35
     19  0270
     20  0270		       85 14		      sta	RESBL	; 38
     21  0272		       85 22		      sta	HMM0	; 41	left 1 clock
     22  0274		       85 10		      sta	RESP0	; 44
     23  0276		       85 12		      sta	RESM0	; 47
     24  0278		       85 13		      sta	RESM1	; 50
     25  027a		       85 11		      sta	RESP1	; 53
     26  027c
     27  027c		       a9 07		      lda	#QUAD_SIZE	; 55
     28  027e		       85 04		      sta	NUSIZ0	; 58
     29  0280		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     30  0282							; 60
     31  0282		       85 05		      sta	NUSIZ1	; 63
     32  0284		       a9 31		      lda	#$31	; 65
     33  0286		       85 0a		      sta	CTRLPF	; 68
     34  0288		       85 25		      sta	VDELP0	; 71	enable VDELP0
     35  028a		       85 2a		      sta	HMOVE	; 74	cycle 74!
     36  028c
     37  028c		       ea		      nop		; 00
     38  028d		       0a		      asl		; 02	A = #$62
     39  028e		       a2 e0		      ldx	#$E0	; 04
     40  0290		       85 20		      sta	HMP0	; 07	left 6 clocks
     41  0292		       86 22		      stx	HMM0	; 10	right 2 clocks
     42  0294		       86 21		      stx	HMP1	; 13	right 2 clocks
     43  0296		       86 23		      stx	HMM1	; 16	right 2 clocks
     44  0298		       84 24		      sty	HMBL	; 19	no movement
------- FILE bank1/code/kernel.asm
     10  029a
     11  029a		       a5 8f		      lda	MenuCatFrame
     12  029c		       c9 02		      cmp	#2
     13  029e		       30 06		      bmi	.HiCat
     14  02a0		       85 02		      sta	WSYNC
     15  02a2		       85 02		      sta	WSYNC
     16  02a4		       85 02		      sta	WSYNC
     17  02a6		       85 02	   .HiCat     sta	WSYNC
     18  02a8		       ea		      nop		; 02
     19  02a9
      0  02a9					      NEXT_PAGE
      1  02a9					      SUBROUTINE
      2  02a9
      3  02a9		       4c 00 13 	      jmp	.NextPage
      4  0300		       00 00 00 00*	      ALIGN	$100
      5  0300				   .NextPage
      6  0300
     21  0300
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0300					      include	bank1/code/menucat1_4.asm
      1  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0300							; Menu Cat Kernel (Blocks 1-3)
      3  0300							;
      4  0300							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0300							;
      6  0300							; 70 bytes
      7  0300							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0300
      9  0300							; 16 bytes
     10  0300		       85 02		      sta	WSYNC	;	2
     11  0302		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0304		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0307		       a0 0b		      ldy	#11	; 08	2
     14  0309		       88	   .LP	      dey		; 59	1
     15  030a		       c0 03		      cpy	#3	; 61	2
     16  030c		       d0 fb		      bne	.LP	; 63	2
      0  030e					      SLEEP	2	; 65	1
      1  030e				   .CYCLES    SET	2
      2  030e
      3  030e				  -	      IF	.CYCLES < 2
      4  030e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  030e				  -	      ERR
      6  030e					      ENDIF
      7  030e
      8  030e				  -	      IF	.CYCLES & 1
      9  030e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  030e				  -	      nop	0
     11  030e				  -	      ELSE
     12  030e				  -	      bit	VSYNC
     13  030e				  -	      ENDIF
     14  030e				  -.CYCLES    SET	.CYCLES - 3
     15  030e					      ENDIF
     16  030e
     17  030e					      REPEAT	.CYCLES / 2
     18  030e		       ea		      nop
     19  030f					      REPEND
     18  030f		       4c 1c 13 	      jmp	.Enter1_3	; 68	2
     19  0312
     20  0312				   .Loop
     21  0312
     22  0312		       85 09		      sta	COLUBK	; 56	2
     23  0314		       85 02		      sta	WSYNC	; 00	2
     24  0316
      0  0316					      SLEEP	4	; 04	2
      1  0316				   .CYCLES    SET	4
      2  0316
      3  0316				  -	      IF	.CYCLES < 2
      4  0316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0316				  -	      ERR
      6  0316					      ENDIF
      7  0316
      8  0316				  -	      IF	.CYCLES & 1
      9  0316				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0316				  -	      nop	0
     11  0316				  -	      ELSE
     12  0316				  -	      bit	VSYNC
     13  0316				  -	      ENDIF
     14  0316				  -.CYCLES    SET	.CYCLES - 3
     15  0316					      ENDIF
     16  0316
     17  0316					      REPEAT	.CYCLES / 2
     18  0316		       ea		      nop
     17  0316					      REPEND
     18  0317		       ea		      nop
     19  0318					      REPEND
     26  0318		       d0 0d		      bne	.Skip	; 07	2
     27  031a
     28  031a				   MenuCatKernel1_3
     29  031a
     30  031a							; 10 bytes
      0  031a					      SLEEP	3	; 68	2
      1  031a				   .CYCLES    SET	3
      2  031a
      3  031a				  -	      IF	.CYCLES < 2
      4  031a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  031a				  -	      ERR
      6  031a					      ENDIF
      7  031a
      8  031a					      IF	.CYCLES & 1
      9  031a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  031a		       04 00		      nop	0
     11  031c				  -	      ELSE
     12  031c				  -	      bit	VSYNC
     13  031c					      ENDIF
     14  031c				   .CYCLES    SET	.CYCLES - 3
     15  031c					      ENDIF
     16  031c
     17  031c				  -	      REPEAT	.CYCLES / 2
     18  031c				  -	      nop
     19  031c					      REPEND
     32  031c				   .Enter1_3
     33  031c		       84 1f		      sty	ENABL	; 71	2
     34  031e		       a2 03		      ldx	#3	; 73	2
     35  0320		       85 2a		      sta	HMOVE	; 00	2
     36  0322
     37  0322							; 4 bytes
     38  0322		       b9 31 17 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0325		       85 1b		      sta	GRP0	; 07	2
     40  0327
     41  0327				   .Skip
     42  0327
     43  0327							; 8 bytes
     44  0327		       b9 eb 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  032a		       85 09		      sta	COLUBK	; 14	2
     46  032c		       b1 98		      lda	(BowColorsPfPtr),y	; 19	2
     47  032e		       85 08		      sta	COLUPF	; 22	2
     48  0330
     49  0330							; 8 bytes
     50  0330		       b9 2d 17 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0333		       85 1c		      sta	GRP1	; 29	2
     52  0335		       b9 00 17 	      lda	MenuCatTopPf,y	; 33	2
     53  0338		       85 0f		      sta	PF2	; 36	2
     54  033a
     55  033a							; 17 bytes
     56  033a		       a5 86		      lda	CatTartColor	; 39	2
     57  033c		       85 09		      sta	COLUBK	; 42	2
     58  033e		       a5 ef		      lda	MenuBgColor	; 45	2
     59  0340		       85 08		      sta	COLUPF	; 48	2
     60  0342		       ca		      dex		; 50	1
     61  0343		       d0 cd		      bne	.Loop	; 53/52	2
     62  0345		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0347							; 54	2
     64  0347		       85 09		      sta	COLUBK	; 57	2
     65  0349		       86 04		      stx	NUSIZ0	; 60	2
     66  034b
     67  034b							; 5 bytes
     68  034b		       88		      dey		; 62	1
     69  034c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  034e
     71  034e
     72  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  034e							; Menu Cat Kernel (Block 4)
     74  034e							;
     75  034e							; This kernel draws block 4 of the cat in the menu display.
     76  034e							;
     77  034e							; ? bytes
     78  034e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  034e
     80  034e		       a2 03		      ldx	#3	; 66	2
     81  0350
     82  0350		       ad 31 17 	      lda	MenuCatTopGfxL	; 69	2
     83  0353		       85 1b		      sta	GRP0	; 72	2
     84  0355		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0358
      0  0358					      SLEEP	3	; 03	2
      1  0358				   .CYCLES    SET	3
      2  0358
      3  0358				  -	      IF	.CYCLES < 2
      4  0358				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0358				  -	      ERR
      6  0358					      ENDIF
      7  0358
      8  0358					      IF	.CYCLES & 1
      9  0358					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0358		       04 00		      nop	0
     11  035a				  -	      ELSE
     12  035a				  -	      bit	VSYNC
     13  035a					      ENDIF
     14  035a				   .CYCLES    SET	.CYCLES - 3
     15  035a					      ENDIF
     16  035a
     17  035a				  -	      REPEAT	.CYCLES / 2
     18  035a				  -	      nop
     19  035a					      REPEND
     87  035a				   .Loop4
     88  035a		       a5 eb		      lda	RamBowColorsBk+16	; 06	2
     89  035c		       85 09		      sta	COLUBK	; 09	2
     90  035e		       b1 98		      lda	(BowColorsPfPtr),y	; 14	2
     91  0360		       85 08		      sta	COLUPF	; 17	2
     92  0362
     93  0362		       ad 2d 17 	      lda	MenuCatTopGfxR	; 20	2
     94  0365		       85 1c		      sta	GRP1	; 23	2
     95  0367
     96  0367		       86 20		      stx	HMP0	; 26	2
     97  0369		       86 24		      stx	HMBL	; 29	2
     98  036b
      0  036b					      SLEEP	6	; 36	4
      1  036b				   .CYCLES    SET	6
      2  036b
      3  036b				  -	      IF	.CYCLES < 2
      4  036b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  036b				  -	      ERR
      6  036b					      ENDIF
      7  036b
      8  036b				  -	      IF	.CYCLES & 1
      9  036b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  036b				  -	      nop	0
     11  036b				  -	      ELSE
     12  036b				  -	      bit	VSYNC
     13  036b				  -	      ENDIF
     14  036b				  -.CYCLES    SET	.CYCLES - 3
     15  036b					      ENDIF
     16  036b
     17  036b					      REPEAT	.CYCLES / 2
     18  036b		       ea		      nop
     17  036b					      REPEND
     18  036c		       ea		      nop
     17  036c					      REPEND
     18  036d		       ea		      nop
     19  036e					      REPEND
    100  036e
    101  036e		       a5 86		      lda	CatTartColor	; 39	2
    102  0370		       85 09		      sta	COLUBK	; 42	2
    103  0372		       a5 ef		      lda	MenuBgColor	; 45	2
    104  0374		       85 08		      sta	COLUPF	; 48	2
    105  0376
    106  0376		       38		      sec		; 50	1
    107  0377		       ca		      dex		; 52	1
    108  0378
    109  0378		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  037b
    111  037b		       f0 04		      beq	.Exit4	; 59/58	2
    112  037d		       85 02		      sta	WSYNC	; 00	2
    113  037f		       d0 d9		      bne	.Loop4	; 03	2
    114  0381
    115  0381				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0381					      include	bank1/code/menucat5.asm
      1  0381							;
      2  0381
      3  0381		       a5 9d		      lda	MenuCatShift	; 62	2
      4  0383		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0385					      SKIP_WORD		; 68	1
      1  0385		       0c		      HEX	0C
      6  0386				   .ClearHmove
      7  0386		       85 2b		      sta	HMCLR	; 68	2
      8  0388
      9  0388		       a5 98		      lda	BowColorsPfPtr	; 71	2
     10  038a		       e9 0d		      sbc	#13	; 73	2
     11  038c		       85 98		      sta	BowColorsPfPtr	; 00	2
     12  038e
     13  038e		       85 2a		      sta	HMOVE	; 03	2
     14  0390		       85 98		      sta	BowColorsPfPtr	; 06	2
     15  0392		       a0 0c		      ldy	#12	; 08	2
     16  0394
     17  0394							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0394
     19  0394							; 10 bytes
     20  0394		       a5 ea		      lda	RamBowColorsBk+15	; 11	2
     21  0396		       85 09		      sta	COLUBK	; 14	2
     22  0398		       b1 98		      lda	(BowColorsPfPtr),y	; 19	2
     23  039a		       85 08		      sta	COLUPF	; 22	2
     24  039c		       85 9c		      sta	RainbowColorPf	; 25	2
     25  039e
     26  039e							; 7 bytes
     27  039e		       a5 d9		      lda	RamMenuCatGfxR+15	; 28	2
     28  03a0		       85 1c		      sta	GRP1	; 31	2
     29  03a2		       4a		      lsr		; 33	1
     30  03a3		       85 1d		      sta	ENAM0	; 36	2
     31  03a5
     32  03a5							; 4 bytes
     33  03a5		       a5 86		      lda	CatTartColor	; 39	2
     34  03a7		       85 09		      sta	COLUBK	; 42	2
     35  03a9
     36  03a9							; 5 bytes
     37  03a9		       a5 d8		      lda	RamMenuCatGfxR+14	; 45	2
     38  03ab		       85 9a		      sta	RamMenuCatGfx	; 48	2
     39  03ad
     40  03ad							; 10 bytes
     41  03ad		       a5 ef		      lda	MenuBgColor	; 51	2
     42  03af		       85 08		      sta	COLUPF	; 54	2
     43  03b1		       85 09		      sta	COLUBK	; 57	2
     44  03b3		       85 2b		      sta	HMCLR	; 60	2
     45  03b5		       85 02		      sta	WSYNC	; 00	2
     46  03b7
     47  03b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  03b7
     49  03b7							; 8 bytes
     50  03b7		       a5 ea		      lda	RamBowColorsBk+15	; 03	2
     51  03b9		       85 09		      sta	COLUBK	; 06	2
     52  03bb		       a5 9c		      lda	RainbowColorPf	; 09	2
     53  03bd		       85 08		      sta	COLUPF	; 12	2
     54  03bf
     55  03bf							; 8 bytes
     56  03bf		       b1 92		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  03c1		       85 22		      sta	HMM0	; 20	2
     58  03c3		       0a		      asl		; 22	1
     59  03c4		       0a		      asl		; 24	1
     60  03c5		       0a		      asl		; 26	1
     61  03c6		       0a		      asl		; 28	1
     62  03c7		       85 23		      sta	HMM1	; 31
     63  03c9
     64  03c9							; 11 bytes
      0  03c9					      SLEEP	2	; 33	3
      1  03c9				   .CYCLES    SET	2
      2  03c9
      3  03c9				  -	      IF	.CYCLES < 2
      4  03c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  03c9				  -	      ERR
      6  03c9					      ENDIF
      7  03c9
      8  03c9				  -	      IF	.CYCLES & 1
      9  03c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  03c9				  -	      nop	0
     11  03c9				  -	      ELSE
     12  03c9				  -	      bit	VSYNC
     13  03c9				  -	      ENDIF
     14  03c9				  -.CYCLES    SET	.CYCLES - 3
     15  03c9					      ENDIF
     16  03c9
     17  03c9					      REPEAT	.CYCLES / 2
     18  03c9		       ea		      nop
     19  03ca					      REPEND
     66  03ca		       a5 86		      lda	CatTartColor	; 36	2
     67  03cc		       85 09		      sta	COLUBK	; 39	2
     68  03ce
     69  03ce		       b1 96		      lda	(MenuCatMslPtr),y	; 44	2
     70  03d0		       85 9b		      sta	RamMenuCatMissile	; 47	2
     71  03d2
     72  03d2							; 8 bytes
     73  03d2		       a5 ef		      lda	MenuBgColor	; 50	2
     74  03d4		       85 08		      sta	COLUPF	; 53	2
     75  03d6		       85 09		      sta	COLUBK	; 56	2
     76  03d8		       85 02		      sta	WSYNC	; 00	2
     77  03da
     78  03da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  03da
     80  03da							; 8 bytes
     81  03da		       a5 ea		      lda	RamBowColorsBk+15	; 03	2
     82  03dc		       85 09		      sta	COLUBK	; 06	2
     83  03de		       a5 9c		      lda	RainbowColorPf	; 09	2
     84  03e0		       85 08		      sta	COLUPF	; 12	2
     85  03e2
     86  03e2							; 11 bytes
      0  03e2					      SLEEP	20	; 32	10
      1  03e2				   .CYCLES    SET	20
      2  03e2
      3  03e2				  -	      IF	.CYCLES < 2
      4  03e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  03e2				  -	      ERR
      6  03e2					      ENDIF
      7  03e2
      8  03e2				  -	      IF	.CYCLES & 1
      9  03e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  03e2				  -	      nop	0
     11  03e2				  -	      ELSE
     12  03e2				  -	      bit	VSYNC
     13  03e2				  -	      ENDIF
     14  03e2				  -.CYCLES    SET	.CYCLES - 3
     15  03e2					      ENDIF
     16  03e2
     17  03e2					      REPEAT	.CYCLES / 2
     18  03e2		       ea		      nop
     17  03e2					      REPEND
     18  03e3		       ea		      nop
     17  03e3					      REPEND
     18  03e4		       ea		      nop
     17  03e4					      REPEND
     18  03e5		       ea		      nop
     17  03e5					      REPEND
     18  03e6		       ea		      nop
     17  03e6					      REPEND
     18  03e7		       ea		      nop
     17  03e7					      REPEND
     18  03e8		       ea		      nop
     17  03e8					      REPEND
     18  03e9		       ea		      nop
     17  03e9					      REPEND
     18  03ea		       ea		      nop
     17  03ea					      REPEND
     18  03eb		       ea		      nop
     19  03ec					      REPEND
     88  03ec		       88		      dey		; 34	1
     89  03ed
     90  03ed							; 6 bytes
     91  03ed		       a5 86		      lda	CatTartColor	; 37	2
     92  03ef		       85 09		      sta	COLUBK	; 40	2
     93  03f1
     94  03f1							; 12 bytes
     95  03f1		       a2 ff		      ldx	#$FF	; 42	2
     96  03f3		       a5 ef		      lda	MenuBgColor	; 45	3
     97  03f5		       85 08		      sta	COLUPF	; 48	2
     98  03f7		       86 1f		      stx	ENABL	; 51	2
     99  03f9		       86 1e		      stx	ENAM1	; 54	2
    100  03fb		       85 09		      sta	COLUBK	; 57	2
    101  03fd		       4c 1a 14 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0400					      include	bank1/code/menucat6_17.asm
      1  0400							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0400							; Menu Cat Kernel (Blocks 6-17)
      3  0400							;
      4  0400							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0400							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0400							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0400							;
      8  0400							; 179 bytes
      9  0400							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0400
     11  0400					      ALIGN	$100
     12  0400
     13  0400				   MenuCatKernel6_17
     14  0400
     15  0400							; 24 bytes
     16  0400		       b9 b0 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0403		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0405		       a9 08		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0407		       a6 86		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0409		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  040b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  040e		       b9 bf 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0411		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0413		       a5 ef		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0415		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0417		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  041a
     28  041a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  041a
     30  041a				   .Enter6_17		; enter sandman
     31  041a
     32  041a							; 14 bytes
     33  041a		       a5 9a		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  041c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  041e		       a5 9b		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0420		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0422		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0424		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0426		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0428
     41  0428							; 12 bytes
     42  0428		       b9 de 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  042b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  042d		       85 9c		      sta	RainbowColorBk	; 14	2 - save for later
     45  042f		       b3 98		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0431		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0433		       9a		      txs		; 24	1 - save for later
     48  0434
     49  0434							; 26 bytes
     50  0434		       b9 af 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0437		       85 0f		      sta	PF2	; 31	2
     52  0439		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     53  043b		       a6 86		      ldx	CatTartColor	; 36	2
     54  043d		       85 09		      sta	COLUBK	; 39	2
     55  043f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0442		       b9 be 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0445		       85 0f		      sta	PF2	; 50	2
     58  0447		       a5 ef		      lda	MenuBgColor	; 53	2
     59  0449		       85 08		      sta	COLUPF	; 56	2
     60  044b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  044e
     62  044e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  044e
     64  044e							; 10 bytes
     65  044e		       b1 92		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0450		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0452		       0a		      asl		; 70	1
     68  0453		       0a		      asl		; 72	1
     69  0454		       0a		      asl		; 74	1
     70  0455		       0a		      asl		; 00	1
     71  0456		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0458
     73  0458							; 7 bytes
     74  0458		       a5 9c		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  045a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  045c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  045d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  045f
     79  045f							; 5 bytes
     80  045f		       b1 94		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0461		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0463		       ea		      nop		; 24	1
     83  0464
     84  0464							; 26 bytes
     85  0464		       b9 af 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0467		       85 0f		      sta	PF2	; 31	2
     87  0469		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     88  046b		       a6 86		      ldx	CatTartColor	; 36	2
     89  046d		       85 09		      sta	COLUBK	; 39	2
     90  046f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0472		       b9 be 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0475		       85 0f		      sta	PF2	; 50	2
     93  0477		       a5 ef		      lda	MenuBgColor	; 53	2
     94  0479		       85 08		      sta	COLUPF	; 56	2
     95  047b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  047e
     97  047e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  047e
     99  047e							; 14 bytes
    100  047e		       b9 a0 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0481		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0483		       b9 cc 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0486		       85 9a		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0488		       b1 96		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  048a		       85 9b		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  048c
    107  048c							; 7 bytes
    108  048c		       a5 9c		      lda	RainbowColorBk	; 09	2
    109  048e		       85 09		      sta	COLUBK	; 12	2
    110  0490		       ba		      tsx		; 14	1
    111  0491		       86 08		      stx	COLUPF	; 17	2
    112  0493
    113  0493							; 6 bytes
    114  0493		       88		      dey		; 19	1 - dec y for next kernel block
    115  0494		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0496		       4c 00 14 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0499
    118  0499				   .Exit
    119  0499
    120  0499							; 25 bytes
    121  0499		       4c 00 15 	      jmp	.Align6_17	; 25	2
    122  049c
    123  0500		       00 00 00 00*	      ALIGN	$100
    124  0500				   .Align6_17
    125  0500
    126  0500		       a5 af		      lda	RamMenuCatPfL+3	; 28	2
    127  0502		       85 0f		      sta	PF2	; 31	2
    128  0504		       a9 08		      lda	#COL_CAT_FACE	; 33	2
    129  0506		       a6 86		      ldx	CatTartColor	; 36	2
    130  0508		       85 09		      sta	COLUBK	; 39	2
    131  050a		       ea		      nop		; 41	1
    132  050b		       86 08		      stx	COLUPF	; 44	2
    133  050d		       a5 be		      lda	RamMenuCatPfR+3	; 47	2
    134  050f		       85 0f		      sta	PF2	; 50	2
    135  0511		       a5 ef		      lda	MenuBgColor	; 53	2
    136  0513		       85 08		      sta	COLUPF	; 56	2
    137  0515		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0517					      include	bank1/code/menucat18.asm
      1  0517
      2  0517							; 59
      3  0517		       84 1d		      sty	ENAM0	; 62	2
      4  0519		       a5 9a		      lda	RamMenuCatGfx	; 65	2
      5  051b		       85 1c		      sta	GRP1	; 68	2
      6  051d		       a9 60		      lda	#$60	; 70	2
      7  051f		       85 21		      sta	HMP1	; 73	2
      8  0521		       85 2a		      sta	HMOVE	; 00	2
      9  0523
     10  0523		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0525							; 02	2
     12  0525		       85 04		      sta	NUSIZ0	; 05	2
     13  0527
     14  0527		       a5 dd		      lda	RamBowColorsBk+2	; 08	2
     15  0529		       85 09		      sta	COLUBK	; 11	2
     16  052b		       85 08		      sta	COLUPF	; 14	2
     17  052d
     18  052d		       a0 02		      ldy	#2	; 16	2
     19  052f		       ea		      nop		; 18	1
     20  0530		       a6 ef		      ldx	MenuBgColor	; 21	2
     21  0532		       9a		      txs		; 23	1
     22  0533
     23  0533				   .Loop18
     24  0533
     25  0533		       a5 ae		      lda	RamMenuCatPfL+2	; 26	2
     26  0535		       85 0f		      sta	PF2	; 29	2
     27  0537
     28  0537		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     29  0539		       a2 00		      ldx	#0	; 33	2
     30  053b		       86 1f		      stx	ENABL	; 36	2
     31  053d		       85 09		      sta	COLUBK	; 39	2
     32  053f		       86 08		      stx	COLUPF	; 42	2
     33  0541		       85 12		      sta	RESM0	; 45	2
     34  0543		       a5 bd		      lda	RamMenuCatPfR+2	; 48	2
     35  0545		       85 0f		      sta	PF2	; 51	2
     36  0547		       ba		      tsx		; 53	1
     37  0548		       86 08		      stx	COLUPF	; 56	2
     38  054a		       86 09		      stx	COLUBK	; 59	2
     39  054c		       88		      dey		; 61	1
     40  054d		       f0 16		      beq	.Exit18	; 64/63	2
     41  054f
      0  054f					      SLEEP	8	; 71	2
      1  054f				   .CYCLES    SET	8
      2  054f
      3  054f				  -	      IF	.CYCLES < 2
      4  054f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  054f				  -	      ERR
      6  054f					      ENDIF
      7  054f
      8  054f				  -	      IF	.CYCLES & 1
      9  054f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  054f				  -	      nop	0
     11  054f				  -	      ELSE
     12  054f				  -	      bit	VSYNC
     13  054f				  -	      ENDIF
     14  054f				  -.CYCLES    SET	.CYCLES - 3
     15  054f					      ENDIF
     16  054f
     17  054f					      REPEAT	.CYCLES / 2
     18  054f		       ea		      nop
     17  054f					      REPEND
     18  0550		       ea		      nop
     17  0550					      REPEND
     18  0551		       ea		      nop
     17  0551					      REPEND
     18  0552		       ea		      nop
     19  0553					      REPEND
     43  0553
     44  0553		       a5 dd		      lda	RamBowColorsBk+2	; 74	2
     45  0555		       85 09		      sta	COLUBK	; 01	2
     46  0557		       85 08		      sta	COLUPF	; 04	2
     47  0559
     48  0559		       84 9c		      sty	RainbowColorBk	; 07
     49  055b		       a0 0d		      ldy	#13	; 09
     50  055d		       b1 94		      lda	(MenuCatHmvPtrP),y	; 14
     51  055f		       85 21		      sta	HMP1	; 17
     52  0561		       a4 9c		      ldy	RainbowColorBk	; 20
     53  0563
     54  0563		       d0 ce		      bne	.Loop18	; 23	2
     55  0565
     56  0565				   .Exit18		; 64
     57  0565
     58  0565		       85 02		      sta	WSYNC	; 00
     59  0567
     60  0567		       a5 dd		      lda	RamBowColorsBk+2	; 03
     61  0569		       85 09		      sta	COLUBK	; 06
     62  056b		       85 08		      sta	COLUPF	; 09
     63  056d
     64  056d		       a5 98		      lda	BowColorsPfPtr	; 12
     65  056f		       38		      sec		; 14
     66  0570		       e9 03		      sbc	#3	; 16
     67  0572		       85 98		      sta	BowColorsPfPtr	; 19
      0  0574					      SLEEP	4	; 23
      1  0574				   .CYCLES    SET	4
      2  0574
      3  0574				  -	      IF	.CYCLES < 2
      4  0574				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0574				  -	      ERR
      6  0574					      ENDIF
      7  0574
      8  0574				  -	      IF	.CYCLES & 1
      9  0574				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0574				  -	      nop	0
     11  0574				  -	      ELSE
     12  0574				  -	      bit	VSYNC
     13  0574				  -	      ENDIF
     14  0574				  -.CYCLES    SET	.CYCLES - 3
     15  0574					      ENDIF
     16  0574
     17  0574					      REPEAT	.CYCLES / 2
     18  0574		       ea		      nop
     17  0574					      REPEND
     18  0575		       ea		      nop
     19  0576					      REPEND
     69  0576
     70  0576		       a5 ae		      lda	RamMenuCatPfL+2	; 26	2
     71  0578		       85 0f		      sta	PF2	; 29	2
     72  057a
     73  057a		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     74  057c		       a2 00		      ldx	#0	; 33	2
     75  057e		       86 1f		      stx	ENABL	; 36	2
     76  0580		       85 09		      sta	COLUBK	; 39	2
     77  0582		       86 08		      stx	COLUPF	; 42	2
     78  0584		       85 12		      sta	RESM0	; 45	2
     79  0586		       a5 bd		      lda	RamMenuCatPfR+2	; 48	2
     80  0588		       85 0f		      sta	PF2	; 51	2
     81  058a		       ba		      tsx		; 53	1
     82  058b		       86 08		      stx	COLUPF	; 56	2
     83  058d		       86 09		      stx	COLUBK	; 59	2
     84  058f
      0  058f					      SLEEP	5	; 64
      1  058f				   .CYCLES    SET	5
      2  058f
      3  058f				  -	      IF	.CYCLES < 2
      4  058f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  058f				  -	      ERR
      6  058f					      ENDIF
      7  058f
      8  058f					      IF	.CYCLES & 1
      9  058f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  058f		       04 00		      nop	0
     11  0591				  -	      ELSE
     12  0591				  -	      bit	VSYNC
     13  0591					      ENDIF
     14  0591				   .CYCLES    SET	.CYCLES - 3
     15  0591					      ENDIF
     16  0591
     17  0591					      REPEAT	.CYCLES / 2
     18  0591		       ea		      nop
     19  0592					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0592					      include	bank1/code/menucat19_20.asm
      1  0592							;
      2  0592
      3  0592		       a0 01		      ldy	#1	; 66	2
      4  0594
      5  0594				   MenuCatKernel19_20
      6  0594
      7  0594		       b9 9e 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0597		       85 1b		      sta	GRP0	; 73	2
      9  0599		       85 2a		      sta	HMOVE	; 00	2
     10  059b		       b9 ca 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  059e		       85 1c		      sta	GRP1	; 07	2
     12  05a0
     13  05a0		       b9 db 00 	      lda	RamBowColorsBk,y	; 11	3
     14  05a3		       85 09		      sta	COLUBK	; 14	2
     15  05a5		       b1 98		      lda	(BowColorsPfPtr),y	; 19	2
     16  05a7		       85 08		      sta	COLUPF	; 22	2
     17  05a9		       b9 ac 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  05ac		       85 0f		      sta	PF2	; 29	2
      0  05ae					      SLEEP	2	; 31	1
      1  05ae				   .CYCLES    SET	2
      2  05ae
      3  05ae				  -	      IF	.CYCLES < 2
      4  05ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05ae				  -	      ERR
      6  05ae					      ENDIF
      7  05ae
      8  05ae				  -	      IF	.CYCLES & 1
      9  05ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05ae				  -	      nop	0
     11  05ae				  -	      ELSE
     12  05ae				  -	      bit	VSYNC
     13  05ae				  -	      ENDIF
     14  05ae				  -.CYCLES    SET	.CYCLES - 3
     15  05ae					      ENDIF
     16  05ae
     17  05ae					      REPEAT	.CYCLES / 2
     18  05ae		       ea		      nop
     19  05af					      REPEND
     20  05af
     21  05af		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     22  05b1		       a6 ef		      ldx	MenuBgColor	; 36	2
     23  05b3		       85 09		      sta	COLUBK	; 39	2
     24  05b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  05b8		       b9 bb 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  05bb		       85 0f		      sta	PF2	; 50	2
     27  05bd
     28  05bd		       85 2b		      sta	HMCLR	; 53	2
      0  05bf					      SLEEP	2	; 55	1
      1  05bf				   .CYCLES    SET	2
      2  05bf
      3  05bf				  -	      IF	.CYCLES < 2
      4  05bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05bf				  -	      ERR
      6  05bf					      ENDIF
      7  05bf
      8  05bf				  -	      IF	.CYCLES & 1
      9  05bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05bf				  -	      nop	0
     11  05bf				  -	      ELSE
     12  05bf				  -	      bit	VSYNC
     13  05bf				  -	      ENDIF
     14  05bf				  -.CYCLES    SET	.CYCLES - 3
     15  05bf					      ENDIF
     16  05bf
     17  05bf					      REPEAT	.CYCLES / 2
     18  05bf		       ea		      nop
     19  05c0					      REPEND
     30  05c0
     31  05c0		       86 09		      stx	COLUBK	; 58	2
     32  05c2		       85 02		      sta	WSYNC	; 00	2
     33  05c4
     34  05c4		       b9 db 00 	      lda	RamBowColorsBk,y	; 04	3
     35  05c7		       85 09		      sta	COLUBK	; 07	2
     36  05c9		       b1 98		      lda	(BowColorsPfPtr),y	; 12	2
     37  05cb		       85 08		      sta	COLUPF	; 15	2
     38  05cd		       b9 ac 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  05d0		       85 0f		      sta	PF2	; 22	2
     40  05d2
     41  05d2		       a9 00		      lda	#$00	; 24	2
     42  05d4		       85 20		      sta	HMP0	; 27	2
     43  05d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  05d9
     45  05d9		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     46  05db		       a6 ef		      ldx	MenuBgColor	; 36	2
     47  05dd		       85 09		      sta	COLUBK	; 39	2
     48  05df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  05e2		       b9 bb 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  05e5		       85 0f		      sta	PF2	; 50	2
     51  05e7
     52  05e7		       a9 20		      lda	#$20	; 52	2
     53  05e9		       85 22		      sta	HMM0	; 55	2
     54  05eb
     55  05eb		       86 09		      stx	COLUBK	; 58	2
     56  05ed		       85 02		      sta	WSYNC	; 00	2
     57  05ef
     58  05ef		       b9 db 00 	      lda	RamBowColorsBk,y	; 04	3
     59  05f2		       85 09		      sta	COLUBK	; 07	2
     60  05f4		       b1 98		      lda	(BowColorsPfPtr),y	; 12	2
     61  05f6		       85 08		      sta	COLUPF	; 15	2
     62  05f8		       b9 ac 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  05fb		       85 0f		      sta	PF2	; 22	2
     64  05fd
     65  05fd		       a9 e0		      lda	#$E0	; 24	2
     66  05ff		       85 23		      sta	HMM1	; 27	2
      0  0601					      SLEEP	4	; 31	5
      1  0601				   .CYCLES    SET	4
      2  0601
      3  0601				  -	      IF	.CYCLES < 2
      4  0601				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0601				  -	      ERR
      6  0601					      ENDIF
      7  0601
      8  0601				  -	      IF	.CYCLES & 1
      9  0601				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0601				  -	      nop	0
     11  0601				  -	      ELSE
     12  0601				  -	      bit	VSYNC
     13  0601				  -	      ENDIF
     14  0601				  -.CYCLES    SET	.CYCLES - 3
     15  0601					      ENDIF
     16  0601
     17  0601					      REPEAT	.CYCLES / 2
     18  0601		       ea		      nop
     17  0601					      REPEND
     18  0602		       ea		      nop
     19  0603					      REPEND
     68  0603
     69  0603		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     70  0605		       a6 ef		      ldx	MenuBgColor	; 36	2
     71  0607		       85 09		      sta	COLUBK	; 39	2
     72  0609		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  060c		       b9 bb 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  060f		       85 0f		      sta	PF2	; 50	2
     75  0611
      0  0611					      SLEEP	5	; 55	3
      1  0611				   .CYCLES    SET	5
      2  0611
      3  0611				  -	      IF	.CYCLES < 2
      4  0611				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0611				  -	      ERR
      6  0611					      ENDIF
      7  0611
      8  0611					      IF	.CYCLES & 1
      9  0611					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0611		       04 00		      nop	0
     11  0613				  -	      ELSE
     12  0613				  -	      bit	VSYNC
     13  0613					      ENDIF
     14  0613				   .CYCLES    SET	.CYCLES - 3
     15  0613					      ENDIF
     16  0613
     17  0613					      REPEAT	.CYCLES / 2
     18  0613		       ea		      nop
     19  0614					      REPEND
     77  0614
     78  0614		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0617
     80  0617		       88		      dey		; 61	1
     81  0618		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  061a		       4c 94 15 	      jmp	MenuCatKernel19_20	; 66	2
     83  061d
     84  061d				   .Exit19_20
     85  061d
     86  061d		       a9 00		      lda	#0
     87  061f		       85 1b		      sta	GRP0
     88  0621		       85 1c		      sta	GRP1
     89  0623		       85 1d		      sta	ENAM0
     90  0625		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     27  0627
     28  0627		       a5 8f		      lda	MenuCatFrame
     29  0629		       c9 02		      cmp	#2
     30  062b		       10 06		      bpl	.LoCat
     31  062d		       85 02		      sta	WSYNC
     32  062f		       85 02		      sta	WSYNC
     33  0631		       85 02		      sta	WSYNC
     34  0633		       85 02	   .LoCat     sta	WSYNC
     35  0635
     36  0635		       a0 3e		      ldy	#62
     37  0637				   .Loop8
     38  0637		       88		      dey
     39  0638		       85 02		      sta	WSYNC
     40  063a		       d0 fb		      bne	.Loop8
     41  063c
     42  063c		       4c b2 10 	      jmp	MenuOverScan
     43  063f
------- FILE bank1.asm
------- FILE bank1/code/music_engine.asm LEVEL 3 PASS 2
      0  063f					      include	bank1/code/music_engine.asm
      1  063f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  063f							; Music Engine
      3  063f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  063f
      5  063f					      SUBROUTINE
      6  063f
      7  063f				   SetNote
      8  063f
      9  063f							; set voice and frequency
     10  063f		       a4 84		      ldy	MusicNote
     11  0641				   SetNote2
     12  0641		       b1 f0		      lda	(MusicPtr),y	; get current note
     13  0643		       85 f3		      sta	TempNote	; save current note for later
     14  0645		       f0 0b		      beq	.Hold	; keep voice and frequency if note hold
     15  0647		       95 17		      sta	AUDF0,x	; set new frequency for voice X
     16  0649		       10 03		      bpl	.HiNote
     17  064b		       a9 04		      lda	#$4	; voice for low notes
      0  064d					      SKIP_WORD
      1  064d		       0c		      HEX	0C
     19  064e		       a9 0c	   .HiNote    lda	#$C	; voice for high notes
     20  0650		       95 15		      sta	AUDC0,x	; set new voice for voice X
     21  0652		       60	   .Hold      rts
     22  0653
     23  0653
     24  0653
     25  0653				   SetVolume
     26  0653
     27  0653							; set volume
     28  0653		       86 f2		      stx	TempX	; save voice number
     29  0655		       a7 85		      lax	NoteData	; get note data
     30  0657		       4a		      lsr
     31  0658		       4a		      lsr
     32  0659		       4a		      lsr
     33  065a		       a8		      tay		; save in Y for offset
     34  065b		       8a		      txa		; recover note data
     35  065c		       29 07		      and	#7
     36  065e		       a6 f3		      ldx	TempNote	; recover current note
     37  0660		       d0 04		      bne	.NoHold	; reset envelope if no note hold
     38  0662		       18		      clc		; otherwise...
     39  0663		       79 00 19 	      adc	NoteLenNTSC-1,y	; add last note's length to envelope offset
     40  0666		       a8	   .NoHold    tay
     41  0667		       b1 f0		      lda	(MusicPtr),y	; get new volume for voice X
     42  0669		       a6 f2		      ldx	TempX	; recover voice number
     43  066b		       95 19		      sta	AUDV0,x	; set new volume for voice X
     44  066d		       60		      rts
     45  066e
     46  066e
     47  066e
     48  066e				   UpdateNote
     49  066e
     50  066e		       e6 85		      inc	NoteData	; move to the next step of this note
     51  0670		       a7 85		      lax	NoteData
     52  0672		       4a		      lsr
     53  0673		       4a		      lsr
     54  0674		       4a		      lsr
     55  0675		       a8		      tay
     56  0676		       8a		      txa
     57  0677		       29 07		      and	#7
     58  0679		       24 81		      bit	Variation
     59  067b		       10 07		      bpl	.PAL
     60  067d		       d9 01 19 	      cmp	NoteLenNTSC,y	; check for end of note in NTSC mode
     61  0680		       d0 18		      bne	.Same
     62  0682		       f0 05		      beq	.NTSC
     63  0684		       d9 13 19    .PAL       cmp	NoteLenPAL,y	; check for end of note in PAL mode
     64  0687		       d0 11		      bne	.Same	; branch if note not over yet
     65  0689		       a5 85	   .NTSC      lda	NoteData	; otherwise...
     66  068b		       29 f8		      and	#$F8	; reset 3 low bits of NoteData
     67  068d		       18		      clc
     68  068e		       69 08		      adc	#1<<3	; step forward to the next note length
     69  0690		       c9 90		      cmp	#18<<3
     70  0692		       d0 02		      bne	.NoRoll
     71  0694		       a9 00		      lda	#0	; roll note length counter after 18 notes
     72  0696		       85 85	   .NoRoll    sta	NoteData
     73  0698		       e6 84		      inc	MusicNote	; step forward to the next note
     74  069a		       60	   .Same      rts
     75  069b
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  069b					      include	bank1/data/menucatgfx.asm
      1  069b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  069b							; Menu Cat Graphics
      3  069b							;
      4  069b							; Graphics for drawing the menu cat display
      5  069b							;
      6  069b							; Uses 1 page + 173 bytes of ROM
      7  069b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  069b
      9  0700		       00 00 00 00*	      ALIGN	$100
     10  0700
     11  0700				   MenuCatGfxPage1
     12  0700
     13  0700
     14  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0700							; Menu Cat Top Playfield Graphics
     16  0700							;
     17  0700							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0700							;
     19  0700							; 3 bytes of ROM
     20  0700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0700
     22  0700				   MenuCatTopPf
     23  0700
     24  0700		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0701		       07		      .byte.b	%00000111
     26  0702		       07		      .byte.b	%00000111
     27  0703							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0703
     29  0703							; 3 bytes used in page
     30  0703
     31  0703
     32  0703							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0703							; Menu Cat Right Player Graphics
     34  0703							;
     35  0703							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0703							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0703							;
     38  0703							; 42 bytes of ROM (14 per frame)
     39  0703							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0703
     41  0703				   MenuCatGfxR
     42  0703
     43  0703							; frames 1/5
     44  0703		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0704		       04		      .byte.b	%00000100
     46  0705		       f2		      .byte.b	%11110010
     47  0706		       91		      .byte.b	%10010001
     48  0707		       01		      .byte.b	%00000001
     49  0708		       59		      .byte.b	%01011001
     50  0709		       09		      .byte.b	%00001001
     51  070a		       01		      .byte.b	%00000001
     52  070b		       02		      .byte.b	%00000010
     53  070c		       c2		      .byte.b	%11000010
     54  070d		       22		      .byte.b	%00100010
     55  070e		       32		      .byte.b	%00110010
     56  070f		       2c		      .byte.b	%00101100
     57  0710		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0711
     59  0711							; frames 2/3/4
     60  0711		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0712		       04		      .byte.b	%00000100
     62  0713		       f2		      .byte.b	%11110010
     63  0714		       91		      .byte.b	%10010001
     64  0715		       01		      .byte.b	%00000001
     65  0716		       59		      .byte.b	%01011001
     66  0717		       09		      .byte.b	%00001001
     67  0718		       01		      .byte.b	%00000001
     68  0719		       02		      .byte.b	%00000010
     69  071a		       c2		      .byte.b	%11000010
     70  071b		       62		      .byte.b	%01100010
     71  071c		       52		      .byte.b	%01010010
     72  071d		       4c		      .byte.b	%01001100
     73  071e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  071f
     75  071f							; frame 6
     76  071f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0720		       f8		      .byte.b	%11111000
     78  0721		       04		      .byte.b	%00000100
     79  0722		       f2		      .byte.b	%11110010
     80  0723		       91		      .byte.b	%10010001
     81  0724		       01		      .byte.b	%00000001
     82  0725		       59		      .byte.b	%01011001
     83  0726		       09		      .byte.b	%00001001
     84  0727		       01		      .byte.b	%00000001
     85  0728		       02		      .byte.b	%00000010
     86  0729		       c2		      .byte.b	%11000010
     87  072a		       22		      .byte.b	%00100010
     88  072b		       32		      .byte.b	%00110010
     89  072c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  072d
     91  072d							; 45 bytes used in page
     92  072d
     93  072d
     94  072d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  072d							; Menu Cat Top Right Player Graphics
     96  072d							;
     97  072d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  072d							;
     99  072d							; 4 bytes of ROM
    100  072d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  072d
    102  072d				   MenuCatTopGfxR
    103  072d
    104  072d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  072e		       10		      .byte.b	%00010000
    106  072f		       10		      .byte.b	%00010000
    107  0730		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0731
    109  0731							; 49 bytes used in page
    110  0731
    111  0731
    112  0731							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0731							; Menu Cat Top Left Player Graphics
    114  0731							;
    115  0731							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0731							;
    117  0731							; 3 bytes of ROM
    118  0731							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0731
    120  0731				   MenuCatTopGfxL
    121  0731
    122  0731		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0732		       08		      .byte.b	%00001000
    124  0733		       20		      .byte.b	%00100000
    125  0734							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0734
    127  0734							; 52 bytes used in page
    128  0734
    129  0734
    130  0734							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0734							; Menu Cat Left Playfield Graphics
    132  0734							;
    133  0734							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0734							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0734							;
    136  0734							; 84 bytes of ROM (14 per frame)
    137  0734							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0734
    139  0734				   MenuCatPfL
    140  0734
    141  0734							; frame 1
    142  0734		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0735		       93		      .byte.b	%10010011
    144  0736		       f3		      .byte.b	%11110011
    145  0737		       bf		      .byte.b	%10111111
    146  0738		       bf		      .byte.b	%10111111
    147  0739		       3f		      .byte.b	%00111111
    148  073a		       3f		      .byte.b	%00111111
    149  073b		       3f		      .byte.b	%00111111
    150  073c		       3b		      .byte.b	%00111011
    151  073d		       39		      .byte.b	%00111001
    152  073e		       bd		      .byte.b	%10111101
    153  073f		       bc		      .byte.b	%10111100
    154  0740		       bf		      .byte.b	%10111111
    155  0741		       bf		      .byte.b	%10111111
    156  0742		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0743
    158  0743							; frame 2
    159  0743							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0743		       97		      .byte.b	%10010111
    161  0744		       f7		      .byte.b	%11110111
    162  0745		       bf		      .byte.b	%10111111
    163  0746		       bf		      .byte.b	%10111111
    164  0747		       bf		      .byte.b	%10111111
    165  0748		       bf		      .byte.b	%10111111
    166  0749		       bb		      .byte.b	%10111011
    167  074a		       b9		      .byte.b	%10111001
    168  074b		       bc		      .byte.b	%10111100
    169  074c		       bc		      .byte.b	%10111100
    170  074d		       bf		      .byte.b	%10111111
    171  074e		       bf		      .byte.b	%10111111
    172  074f		       bf		      .byte.b	%10111111
    173  0750		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0751
    175  0751							; frame 3
    176  0751							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0751		       a7		      .byte.b	%10100111
    178  0752		       f7		      .byte.b	%11110111
    179  0753		       bf		      .byte.b	%10111111
    180  0754		       bf		      .byte.b	%10111111
    181  0755		       bf		      .byte.b	%10111111
    182  0756		       bc		      .byte.b	%10111100
    183  0757		       b9		      .byte.b	%10111001
    184  0758		       bf		      .byte.b	%10111111
    185  0759		       bf		      .byte.b	%10111111
    186  075a		       bf		      .byte.b	%10111111
    187  075b		       bf		      .byte.b	%10111111
    188  075c		       bf		      .byte.b	%10111111
    189  075d		       bf		      .byte.b	%10111111
    190  075e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  075f
    192  075f							; frame 4
    193  075f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  075f		       97		      .byte.b	%10010111
    195  0760		       f7		      .byte.b	%11110111
    196  0761		       bf		      .byte.b	%10111111
    197  0762		       bf		      .byte.b	%10111111
    198  0763		       bc		      .byte.b	%10111100
    199  0764		       bc		      .byte.b	%10111100
    200  0765		       b9		      .byte.b	%10111001
    201  0766		       bb		      .byte.b	%10111011
    202  0767		       bf		      .byte.b	%10111111
    203  0768		       bf		      .byte.b	%10111111
    204  0769		       bf		      .byte.b	%10111111
    205  076a		       bf		      .byte.b	%10111111
    206  076b		       bf		      .byte.b	%10111111
    207  076c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  076d
    209  076d							; frame 5
    210  076d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  076d		       cb		      .byte.b	%11001011
    212  076e		       f3		      .byte.b	%11110011
    213  076f		       bf		      .byte.b	%10111111
    214  0770		       bf		      .byte.b	%10111111
    215  0771		       3f		      .byte.b	%00111111
    216  0772		       3f		      .byte.b	%00111111
    217  0773		       3f		      .byte.b	%00111111
    218  0774		       3b		      .byte.b	%00111011
    219  0775		       38		      .byte.b	%00111000
    220  0776		       bc		      .byte.b	%10111100
    221  0777		       bf		      .byte.b	%10111111
    222  0778		       bf		      .byte.b	%10111111
    223  0779		       bf		      .byte.b	%10111111
    224  077a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  077b
    226  077b							; frame 6
    227  077b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  077b		       cb		      .byte.b	%11001011
    229  077c		       f3		      .byte.b	%11110011
    230  077d		       bb		      .byte.b	%10111011
    231  077e		       bf		      .byte.b	%10111111
    232  077f		       bf		      .byte.b	%10111111
    233  0780		       3f		      .byte.b	%00111111
    234  0781		       3f		      .byte.b	%00111111
    235  0782		       3b		      .byte.b	%00111011
    236  0783		       39		      .byte.b	%00111001
    237  0784		       3c		      .byte.b	%00111100
    238  0785		       bc		      .byte.b	%10111100
    239  0786		       bf		      .byte.b	%10111111
    240  0787		       bf		      .byte.b	%10111111
    241  0788							;	.byte %10111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0788
    243  0788							; 136 bytes used in page
    244  0788
    245  0788
    246  0788							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0788							; Menu Cat Right Playfield Graphics
    248  0788							;
    249  0788							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0788							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0788							;
    252  0788							; 37 bytes of ROM (12 per frame + 1)
    253  0788							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0788
    255  0788				   MenuCatPfR
    256  0788
    257  0788							; frames 1/5
    258  0788		       bf		      .byte.b	%10111111	; PF2(R) gfx block 18
    259  0789		       81		      .byte.b	%10000001
    260  078a		       81		      .byte.b	%10000001
    261  078b		       80		      .byte.b	%10000000
    262  078c		       80		      .byte.b	%10000000
    263  078d		       80		      .byte.b	%10000000
    264  078e		       80		      .byte.b	%10000000
    265  078f		       80		      .byte.b	%10000000
    266  0790		       81		      .byte.b	%10000001
    267  0791		       99		      .byte.b	%10011001
    268  0792		       99		      .byte.b	%10011001
    269  0793		       bd		      .byte.b	%10111101
    270  0794							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0794
    272  0794							; frames 2/3/4
    273  0794		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0795		       c1		      .byte.b	%11000001
    275  0796		       80		      .byte.b	%10000000
    276  0797		       80		      .byte.b	%10000000
    277  0798		       80		      .byte.b	%10000000
    278  0799		       80		      .byte.b	%10000000
    279  079a		       80		      .byte.b	%10000000
    280  079b		       80		      .byte.b	%10000000
    281  079c		       80		      .byte.b	%10000000
    282  079d		       88		      .byte.b	%10001000
    283  079e		       9c		      .byte.b	%10011100
    284  079f		       9c		      .byte.b	%10011100
    285  07a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  07a0
    287  07a0							; frame 6
    288  07a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  07a1		       ff		      .byte.b	%11111111
    290  07a2		       81		      .byte.b	%10000001
    291  07a3		       81		      .byte.b	%10000001
    292  07a4		       80		      .byte.b	%10000000
    293  07a5		       80		      .byte.b	%10000000
    294  07a6		       80		      .byte.b	%10000000
    295  07a7		       80		      .byte.b	%10000000
    296  07a8		       80		      .byte.b	%10000000
    297  07a9		       81		      .byte.b	%10000001
    298  07aa		       99		      .byte.b	%10011001
    299  07ab		       99		      .byte.b	%10011001
    300  07ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  07ad							; 173 bytes used in page
    302  07ad
    303  07ad
    304  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  07ad							; Menu Cat Player Hmove Graphics
    306  07ad							;
    307  07ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  07ad							; The frame's graphics will be accessed through a pointer.
    309  07ad							;
    310  07ad							; 70 bytes of ROM (14 per frame)
    311  07ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  07ad
    313  07ad				   MenuCatHmoveP
    314  07ad
    315  07ad							; frame 1
    316  07ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  07ae		       a0		      .byte.b	$A0
    318  07af		       c0		      .byte.b	$C0
    319  07b0		       00		      .byte.b	$00
    320  07b1		       00		      .byte.b	$00
    321  07b2		       00		      .byte.b	$00
    322  07b3		       00		      .byte.b	$00
    323  07b4		       00		      .byte.b	$00
    324  07b5		       00		      .byte.b	$00
    325  07b6		       00		      .byte.b	$00
    326  07b7		       00		      .byte.b	$00
    327  07b8		       00		      .byte.b	$00
    328  07b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  07ba
    330  07ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  07bb
    332  07bb							; frame 2
    333  07bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  07bc		       a0		      .byte.b	$A0
    335  07bd		       a0		      .byte.b	$A0
    336  07be		       00		      .byte.b	$00
    337  07bf		       00		      .byte.b	$00
    338  07c0		       00		      .byte.b	$00
    339  07c1		       00		      .byte.b	$00
    340  07c2		       00		      .byte.b	$00
    341  07c3		       00		      .byte.b	$00
    342  07c4		       00		      .byte.b	$00
    343  07c5		       00		      .byte.b	$00
    344  07c6		       00		      .byte.b	$00
    345  07c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  07c8
    347  07c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  07c9
    349  07c9							; frame 3
    350  07c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  07ca		       80		      .byte.b	$80
    352  07cb		       a0		      .byte.b	$A0
    353  07cc		       00		      .byte.b	$00
    354  07cd		       00		      .byte.b	$00
    355  07ce		       00		      .byte.b	$00
    356  07cf		       00		      .byte.b	$00
    357  07d0		       00		      .byte.b	$00
    358  07d1		       00		      .byte.b	$00
    359  07d2		       00		      .byte.b	$00
    360  07d3		       00		      .byte.b	$00
    361  07d4		       00		      .byte.b	$00
    362  07d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  07d6
    364  07d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  07d7
    366  07d7							; frame 4
    367  07d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  07d8		       80		      .byte.b	$80
    369  07d9		       c0		      .byte.b	$C0
    370  07da		       00		      .byte.b	$00
    371  07db		       00		      .byte.b	$00
    372  07dc		       00		      .byte.b	$00
    373  07dd		       00		      .byte.b	$00
    374  07de		       00		      .byte.b	$00
    375  07df		       00		      .byte.b	$00
    376  07e0		       00		      .byte.b	$00
    377  07e1		       00		      .byte.b	$00
    378  07e2		       00		      .byte.b	$00
    379  07e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  07e4
    381  07e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  07e5
    383  07e5							; frames 5/6
    384  07e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  07e6		       c0		      .byte.b	$C0
    386  07e7		       c0		      .byte.b	$C0
    387  07e8		       00		      .byte.b	$00
    388  07e9		       00		      .byte.b	$00
    389  07ea		       00		      .byte.b	$00
    390  07eb		       00		      .byte.b	$00
    391  07ec		       00		      .byte.b	$00
    392  07ed		       00		      .byte.b	$00
    393  07ee		       00		      .byte.b	$00
    394  07ef		       00		      .byte.b	$00
    395  07f0		       00		      .byte.b	$00
    396  07f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  07f2
    398  07f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  07f3
    400  07f3							; 243 bytes used in page
    401  07f3
    402  07f3
    403  07f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  07f3							; Menu Cat Missile Graphics
    405  07f3							;
    406  07f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  07f3							; menu cat display.
    408  07f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  07f3							; Because of that, this table cannot be at the start of a page.
    410  07f3							;
    411  07f3							; 13 bytes of ROM
    412  07f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  07f3
    414  07f3				   MenuCatMslGfx
    415  07f3
    416  07f3							; frame 6
    417  07f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  07f4
    419  07f4							; frames 5/4/3/2/1
    420  07f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  07f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  07f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  07f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  07f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  07f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  07fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  07fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  07fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  07fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  07fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  07ff
    432  07ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0800
    434  0800							; all 256 bytes used in page
    435  0800
    436  0800
    437  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0800							; PAGE BOUNDARY
    439  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0800
    441  0800				   MenuCatGfxPage2
    442  0800
    443  0800
    444  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0800							; Menu Cat Left Player Graphics
    446  0800							;
    447  0800							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0800							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0800							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0800							;
    451  0800							; 84 bytes of ROM (14 per frame)
    452  0800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0800
    454  0800				   MenuCatGfxL
    455  0800
    456  0800							; frame 1
    457  0800		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0801		       9a		      .byte.b	%10011010
    459  0802		       8f		      .byte.b	%10001111
    460  0803		       70		      .byte.b	%01110000
    461  0804		       04		      .byte.b	%00000100
    462  0805		       01		      .byte.b	%00000001
    463  0806		       03		      .byte.b	%00000011
    464  0807		       0f		      .byte.b	%00001111
    465  0808		       19		      .byte.b	%00011001
    466  0809		       33		      .byte.b	%00110011
    467  080a		       67		      .byte.b	%01100111
    468  080b		       4d		      .byte.b	%01001101
    469  080c		       79		      .byte.b	%01111001
    470  080d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  080e
    472  080e							; frame 2
    473  080e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  080f		       94		      .byte.b	%10010100
    475  0810		       9f		      .byte.b	%10011111
    476  0811		       60		      .byte.b	%01100000
    477  0812		       08		      .byte.b	%00001000
    478  0813		       01		      .byte.b	%00000001
    479  0814		       07		      .byte.b	%00000111
    480  0815		       19		      .byte.b	%00011001
    481  0816		       21		      .byte.b	%00100001
    482  0817		       4f		      .byte.b	%01001111
    483  0818		       49		      .byte.b	%01001001
    484  0819		       31		      .byte.b	%00110001
    485  081a		       01		      .byte.b	%00000001
    486  081b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  081c
    488  081c							; frame 3
    489  081c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  081d		       94		      .byte.b	%10010100
    491  081e		       bf		      .byte.b	%10111111
    492  081f		       c0		      .byte.b	%11000000
    493  0820		       08		      .byte.b	%00001000
    494  0821		       3d		      .byte.b	%00111101
    495  0822		       47		      .byte.b	%01000111
    496  0823		       61		      .byte.b	%01100001
    497  0824		       1f		      .byte.b	%00011111
    498  0825		       03		      .byte.b	%00000011
    499  0826		       01		      .byte.b	%00000001
    500  0827		       01		      .byte.b	%00000001
    501  0828		       01		      .byte.b	%00000001
    502  0829		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  082a
    504  082a							; frame 4
    505  082a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  082b		       94		      .byte.b	%10010100
    507  082c		       9f		      .byte.b	%10011111
    508  082d		       60		      .byte.b	%01100000
    509  082e		       c4		      .byte.b	%11000100
    510  082f		       49		      .byte.b	%01001001
    511  0830		       4f		      .byte.b	%01001111
    512  0831		       21		      .byte.b	%00100001
    513  0832		       19		      .byte.b	%00011001
    514  0833		       07		      .byte.b	%00000111
    515  0834		       01		      .byte.b	%00000001
    516  0835		       01		      .byte.b	%00000001
    517  0836		       01		      .byte.b	%00000001
    518  0837		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0838
    520  0838							; frame 5
    521  0838		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0839		       94		      .byte.b	%10010100
    523  083a		       8f		      .byte.b	%10001111
    524  083b		       78		      .byte.b	%01111000
    525  083c		       0c		      .byte.b	%00001100
    526  083d		       01		      .byte.b	%00000001
    527  083e		       01		      .byte.b	%00000001
    528  083f		       07		      .byte.b	%00000111
    529  0840		       3d		      .byte.b	%00111101
    530  0841		       c3		      .byte.b	%11000011
    531  0842		       8f		      .byte.b	%10001111
    532  0843		       79		      .byte.b	%01111001
    533  0844		       01		      .byte.b	%00000001
    534  0845		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0846
    536  0846							; frame 6
    537  0846		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0847		       94		      .byte.b	%10010100
    539  0848		       8f		      .byte.b	%10001111
    540  0849		       58		      .byte.b	%01011000
    541  084a		       0c		      .byte.b	%00001100
    542  084b		       01		      .byte.b	%00000001
    543  084c		       01		      .byte.b	%00000001
    544  084d		       07		      .byte.b	%00000111
    545  084e		       19		      .byte.b	%00011001
    546  084f		       21		      .byte.b	%00100001
    547  0850		       4f		      .byte.b	%01001111
    548  0851		       49		      .byte.b	%01001001
    549  0852		       31		      .byte.b	%00110001
    550  0853		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0854
    552  0854							; 84 bytes used in page
    553  0854
    554  0854
    555  0854							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0854							; Menu Cat Lower Right Player Graphics
    557  0854							;
    558  0854							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0854							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0854							;
    561  0854							; 12 bytes of ROM (2 per frame)
    562  0854							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0854
    564  0854				   MenuCatLowGfxR
    565  0854
    566  0854							; frame 1
    567  0854		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0855		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0856
    570  0856							; frame 2
    571  0856		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0857		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0858
    574  0858							; frame 3
    575  0858		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0859		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  085a
    578  085a							; frame 4
    579  085a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  085b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  085c
    582  085c							; frame 5
    583  085c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  085d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  085e
    586  085e							; frame 6
    587  085e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  085f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0860
    590  0860							; 96 bytes used in page
    591  0860
    592  0860
    593  0860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0860							; Menu Cat Lower Right Playfield Graphics
    595  0860							;
    596  0860							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0860							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0860							;
    599  0860							; 12 bytes of ROM (2 per frame)
    600  0860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0860
    602  0860				   MenuCatLowPfGfxR
    603  0860
    604  0860							; frame 1
    605  0860		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0861		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0862
    608  0862							; frame 2
    609  0862		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0863		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0864
    612  0864							; frame 3
    613  0864		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0865		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0866
    616  0866							; frame 4
    617  0866		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0867		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0868
    620  0868							; frame 5
    621  0868		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0869		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  086a
    624  086a							; frame 6
    625  086a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  086b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  086c
    628  086c							; 108 bytes used in page
    629  086c
    630  086c
    631  086c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  086c							; Menu Cat Missile Hmove Graphics
    633  086c							;
    634  086c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  086c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  086c							; The frame's graphics will be accessed through a pointer.
    637  086c							;
    638  086c							; 65 bytes of ROM (13 per frame)
    639  086c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  086c
    641  086c				   MenuCatHmoveM
    642  086c
    643  086c							; frames 1/2
    644  086c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  086d		       0e		      .byte.b	$0E
    646  086e		       0e		      .byte.b	$0E
    647  086f		       e0		      .byte.b	$E0
    648  0870		       00		      .byte.b	$00
    649  0871		       20		      .byte.b	$20
    650  0872		       20		      .byte.b	$20
    651  0873		       02		      .byte.b	$02
    652  0874		       00		      .byte.b	$00
    653  0875		       e0		      .byte.b	$E0
    654  0876		       e0		      .byte.b	$E0
    655  0877		       c2		      .byte.b	$C2
    656  0878		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0879
    658  0879							; frame 3
    659  0879		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  087a		       0e		      .byte.b	$0E
    661  087b		       0e		      .byte.b	$0E
    662  087c		       e0		      .byte.b	$E0
    663  087d		       00		      .byte.b	$00
    664  087e		       20		      .byte.b	$20
    665  087f		       20		      .byte.b	$20
    666  0880		       02		      .byte.b	$02
    667  0881		       00		      .byte.b	$00
    668  0882		       e0		      .byte.b	$E0
    669  0883		       e0		      .byte.b	$E0
    670  0884		       c2		      .byte.b	$C2
    671  0885		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0886
    673  0886							; frame 4
    674  0886		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0887		       0e		      .byte.b	$0E
    676  0888		       0e		      .byte.b	$0E
    677  0889		       e0		      .byte.b	$E0
    678  088a		       00		      .byte.b	$00
    679  088b		       20		      .byte.b	$20
    680  088c		       20		      .byte.b	$20
    681  088d		       02		      .byte.b	$02
    682  088e		       00		      .byte.b	$00
    683  088f		       e0		      .byte.b	$E0
    684  0890		       e0		      .byte.b	$E0
    685  0891		       c2		      .byte.b	$C2
    686  0892		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0893
    688  0893							; frame 5
    689  0893		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0894		       0e		      .byte.b	$0E
    691  0895		       0e		      .byte.b	$0E
    692  0896		       e0		      .byte.b	$E0
    693  0897		       00		      .byte.b	$00
    694  0898		       20		      .byte.b	$20
    695  0899		       20		      .byte.b	$20
    696  089a		       02		      .byte.b	$02
    697  089b		       00		      .byte.b	$00
    698  089c		       e0		      .byte.b	$E0
    699  089d		       e0		      .byte.b	$E0
    700  089e		       c2		      .byte.b	$C2
    701  089f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  08a0
    703  08a0							; frame 6
    704  08a0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  08a1		       2e		      .byte.b	$2E
    706  08a2		       0e		      .byte.b	$0E
    707  08a3		       0e		      .byte.b	$0E
    708  08a4		       e0		      .byte.b	$E0
    709  08a5		       00		      .byte.b	$00
    710  08a6		       20		      .byte.b	$20
    711  08a7		       20		      .byte.b	$20
    712  08a8		       02		      .byte.b	$02
    713  08a9		       00		      .byte.b	$00
    714  08aa		       e0		      .byte.b	$E0
    715  08ab		       e0		      .byte.b	$E0
    716  08ac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  08ad
    718  08ad							; 173 bytes used in page
    719  08ad
    720  08ad
    721  08ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  08ad							; Offset Tables
    723  08ad							;
    724  08ad							; Tables of offsets to the correct data for frames that can share graphics.
    725  08ad							;
    726  08ad							; 12 bytes of ROM (6 bytes per table)
    727  08ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  08ad
    729  08ad				   MenuCatOffsetGfx
    730  08ad		       03		      .byte.b	<MenuCatGfxR+0
    731  08ae		       11		      .byte.b	<MenuCatGfxR+14
    732  08af		       11		      .byte.b	<MenuCatGfxR+14
    733  08b0		       11		      .byte.b	<MenuCatGfxR+14
    734  08b1		       03		      .byte.b	<MenuCatGfxR+0
    735  08b2		       1f		      .byte.b	<MenuCatGfxR+28
    736  08b3
    737  08b3				   MenuCatOffsetPf
    738  08b3		       88		      .byte.b	<MenuCatPfR+0
    739  08b4		       94		      .byte.b	<MenuCatPfR+12
    740  08b5		       94		      .byte.b	<MenuCatPfR+12
    741  08b6		       94		      .byte.b	<MenuCatPfR+12
    742  08b7		       88		      .byte.b	<MenuCatPfR+0
    743  08b8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
------- FILE bank1/data/colors.asm LEVEL 3 PASS 2
      0  08b9					      include	bank1/data/colors.asm
      1  08b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  08b9							;
      3  08b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  08b9
      5  08b9				   MenuColors
      6  08b9
      7  08b9							; NTSC
      8  08b9		       a2		      .byte.b	$A2	; menu bg color
      9  08ba		       5f		      .byte.b	$5F	; cat tart color
     10  08bb		       44		      .byte.b	$44	; rainbow color red
     11  08bc		       38		      .byte.b	$38	; rainbow color orange
     12  08bd		       1c		      .byte.b	$1C	; rainbow color yellow
     13  08be		       ca		      .byte.b	$CA	; rainbow color green
     14  08bf		       a8		      .byte.b	$A8	; rainbow color blue
     15  08c0		       76		      .byte.b	$76	; rainbow color purple
     16  08c1
     17  08c1							; PAL
     18  08c1		       92		      .byte.b	$92	; menu bg color
     19  08c2		       6f		      .byte.b	$6F	; cat tart color
     20  08c3		       64		      .byte.b	$64	; rainbow color red
     21  08c4		       48		      .byte.b	$48	; rainbow color orange
     22  08c5		       3c		      .byte.b	$3C	; rainbow color yellow
     23  08c6		       5a		      .byte.b	$5A	; rainbow color green
     24  08c7		       b8		      .byte.b	$B8	; rainbow color blue
     25  08c8		       c6		      .byte.b	$C6	; rainbow color purple
------- FILE bank1.asm
------- FILE bank1/data/music.asm LEVEL 3 PASS 2
      0  08c9					      include	bank1/data/music.asm
      1  08c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  08c9							; Music Data Tables
      3  08c9							;
      4  08c9							; Uses 311 bytes total of ROM
      5  08c9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  08c9
      7  0900		       00 00 00 00*	      ALIGN	$100
      8  0900
      9  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0900							; Equates for note frequencies
     11  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12  0900
     13  0900		       00 00	   NOTE_HOLD  equ	0
     14  0900		       00 10	   NOTE_D4S   equ	16
     15  0900		       00 0f	   NOTE_E4    equ	15
     16  0900		       00 0d	   NOTE_F4S   equ	13
     17  0900		       00 0c	   NOTE_G4S   equ	12
     18  0900		       00 0a	   NOTE_A4S   equ	10
     19  0900		       00 9f	   NOTE_B4    equ	128 + 31
     20  0900		       00 9b	   NOTE_C5S   equ	128 + 27
     21  0900		       00 9a	   NOTE_D5    equ	128 + 26
     22  0900		       00 98	   NOTE_D5S   equ	128 + 24
     23  0900		       00 97	   NOTE_E5    equ	128 + 23
     24  0900		       00 94	   NOTE_F5S   equ	128 + 20
     25  0900		       00 92	   NOTE_G5S   equ	128 + 18
     26  0900		       00 90	   NOTE_A5S   equ	128 + 16
     27  0900		       00 8f	   NOTE_B5    equ	128 + 15
     28  0900		       00 8d	   NOTE_C6S   equ	128 + 13
     29  0900		       00 8b	   NOTE_E6    equ	128 + 11
     30  0900
     31  0900
     32  0900
     33  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  0900							; Note lengths in frames for each 18-note cycle, for 60Hz NTSC and 50Hz PAL.
     35  0900							; A full cycle in 60Hz mode is 114 frames long, or 95 frames for 50Hz mode.
     36  0900							; Either mode spends exactly 1.9 seconds for each 18-note cycle.
     37  0900							; At 4 notes per beat, this is very close to 142 BPM.
     38  0900							;
     39  0900							; Uses 37 bytes of ROM
     40  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41  0900
     42  0900		       06		      .byte.b	6
     43  0901				   NoteLenNTSC
     44  0901		       06		      .byte.b	6
     45  0902		       07		      .byte.b	7
     46  0903		       06		      .byte.b	6
     47  0904		       06		      .byte.b	6
     48  0905		       07		      .byte.b	7
     49  0906		       06		      .byte.b	6
     50  0907		       06		      .byte.b	6
     51  0908		       07		      .byte.b	7
     52  0909		       06		      .byte.b	6
     53  090a		       06		      .byte.b	6
     54  090b		       07		      .byte.b	7
     55  090c		       06		      .byte.b	6
     56  090d		       06		      .byte.b	6
     57  090e		       07		      .byte.b	7
     58  090f		       06		      .byte.b	6
     59  0910		       06		      .byte.b	6
     60  0911		       07		      .byte.b	7
     61  0912		       06		      .byte.b	6
     62  0913				   NoteLenPAL
     63  0913		       05		      .byte.b	5
     64  0914		       05		      .byte.b	5
     65  0915		       05		      .byte.b	5
     66  0916		       06		      .byte.b	6
     67  0917		       05		      .byte.b	5
     68  0918		       05		      .byte.b	5
     69  0919		       05		      .byte.b	5
     70  091a		       06		      .byte.b	6
     71  091b		       05		      .byte.b	5
     72  091c		       05		      .byte.b	5
     73  091d		       06		      .byte.b	6
     74  091e		       05		      .byte.b	5
     75  091f		       05		      .byte.b	5
     76  0920		       05		      .byte.b	5
     77  0921		       06		      .byte.b	6
     78  0922		       05		      .byte.b	5
     79  0923		       05		      .byte.b	5
     80  0924		       06		      .byte.b	6
     81  0925
     82  0925
     83  0925
     84  0925							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85  0925							; Volume envelopes for intro and song
     86  0925							;
     87  0925							; Uses 26 bytes of ROM
     88  0925							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  0925
     90  0925				   IntroVlm
     91  0925		       0f 0e 0d 0b*	      HEX	0F 0E 0D 0B 0A 09 08 07 06 05 04 03 02
     92  0932
     93  0932				   MusicVlm
     94  0932		       09 0b 0d 0e*	      HEX	09 0B 0D 0E 0F 0F 0F 0E 0D 0C 0A 09 07
     95  093f
     96  093f
     97  093f
     98  093f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  093f							; Melody Intro Sequence
    100  093f							;
    101  093f							; Uses 32 bytes of ROM
    102  093f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103  093f
    104  093f				   IntroSeq
    105  093f		       98		      .byte.b	NOTE_D5S
    106  0940		       97		      .byte.b	NOTE_E5
    107  0941		       94		      .byte.b	NOTE_F5S
    108  0942		       00		      .byte.b	NOTE_HOLD
    109  0943		       8f		      .byte.b	NOTE_B5
    110  0944		       00		      .byte.b	NOTE_HOLD
    111  0945		       98		      .byte.b	NOTE_D5S
    112  0946		       97		      .byte.b	NOTE_E5
    113  0947		       94		      .byte.b	NOTE_F5S
    114  0948		       8f		      .byte.b	NOTE_B5
    115  0949		       8d		      .byte.b	NOTE_C6S
    116  094a		       00		      .byte.b	NOTE_HOLD
    117  094b		       8d		      .byte.b	NOTE_C6S
    118  094c		       97		      .byte.b	NOTE_E5
    119  094d		       94		      .byte.b	NOTE_F5S
    120  094e		       00		      .byte.b	NOTE_HOLD
    121  094f
    122  094f		       94		      .byte.b	NOTE_F5S
    123  0950		       00		      .byte.b	NOTE_HOLD
    124  0951		       98		      .byte.b	NOTE_D5S
    125  0952		       97		      .byte.b	NOTE_E5
    126  0953		       94		      .byte.b	NOTE_F5S
    127  0954		       00		      .byte.b	NOTE_HOLD
    128  0955		       8f		      .byte.b	NOTE_B5
    129  0956		       00		      .byte.b	NOTE_HOLD
    130  0957		       8d		      .byte.b	NOTE_C6S
    131  0958		       90		      .byte.b	NOTE_A5S
    132  0959		       8f		      .byte.b	NOTE_B5
    133  095a		       8d		      .byte.b	NOTE_C6S
    134  095b		       8b		      .byte.b	NOTE_E6
    135  095c		       8d		      .byte.b	NOTE_C6S
    136  095d		       8b		      .byte.b	NOTE_E6
    137  095e		       8f		      .byte.b	NOTE_B5
    138  095f
    139  095f
    140  095f
    141  095f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  095f							; Melody Bass Sequence
    143  095f							;
    144  095f							; Uses 8 bytes of ROM
    145  095f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    146  095f
    147  095f				   BassSeq
    148  095f		       0b 0a 0c 09*	      HEX	0B 0A 0C 09 0D 0A 0F 0F
    149  0967
    150  0967
    151  0967
    152  0967							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    153  0967							; Melody Lead Sequence Order
    154  0967							;
    155  0967							; Uses 16 bytes of ROM
    156  0967							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    157  0967
    158  0967				   MusicSeqs
    159  0967		       00		      HEX	00
    160  0968		       10		      HEX	10
    161  0969		       20		      HEX	20
    162  096a		       30		      HEX	30
    163  096b		       00		      HEX	00
    164  096c		       10		      HEX	10
    165  096d		       20		      HEX	20
    166  096e		       40		      HEX	40
    167  096f		       50		      HEX	50
    168  0970		       60		      HEX	60
    169  0971		       70		      HEX	70
    170  0972		       80		      HEX	80
    171  0973		       50		      HEX	50
    172  0974		       60		      HEX	60
    173  0975		       70		      HEX	70
    174  0976		       90		      HEX	90
    175  0977
    176  0977
    177  0977
    178  0977							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    179  0977							; Melody Lead Sequences
    180  0977							;
    181  0977							; Uses 192 bytes of ROM
    182  0977							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    183  0977
    184  0977				   MusicSeq0
    185  0977		       94		      .byte.b	NOTE_F5S
    186  0978		       00		      .byte.b	NOTE_HOLD
    187  0979		       92		      .byte.b	NOTE_G5S
    188  097a		       00		      .byte.b	NOTE_HOLD
    189  097b		       98		      .byte.b	NOTE_D5S
    190  097c		       98		      .byte.b	NOTE_D5S
    191  097d		       00		      .byte.b	NOTE_HOLD
    192  097e		       9f		      .byte.b	NOTE_B4
    193  097f		       9a		      .byte.b	NOTE_D5
    194  0980		       9b		      .byte.b	NOTE_C5S
    195  0981		       9f		      .byte.b	NOTE_B4
    196  0982		       00		      .byte.b	NOTE_HOLD
    197  0983		       9f		      .byte.b	NOTE_B4
    198  0984		       00		      .byte.b	NOTE_HOLD
    199  0985		       9b		      .byte.b	NOTE_C5S
    200  0986		       00		      .byte.b	NOTE_HOLD
    201  0987
    202  0987		       9a		      .byte.b	NOTE_D5
    203  0988		       00		      .byte.b	NOTE_HOLD
    204  0989		       9a		      .byte.b	NOTE_D5
    205  098a		       9b		      .byte.b	NOTE_C5S
    206  098b		       9f		      .byte.b	NOTE_B4
    207  098c		       9b		      .byte.b	NOTE_C5S
    208  098d		       98		      .byte.b	NOTE_D5S
    209  098e		       94		      .byte.b	NOTE_F5S
    210  098f		       92		      .byte.b	NOTE_G5S
    211  0990		       98		      .byte.b	NOTE_D5S
    212  0991		       94		      .byte.b	NOTE_F5S
    213  0992		       9b		      .byte.b	NOTE_C5S
    214  0993		       98		      .byte.b	NOTE_D5S
    215  0994		       9f		      .byte.b	NOTE_B4
    216  0995		       9b		      .byte.b	NOTE_C5S
    217  0996		       9f		      .byte.b	NOTE_B4
    218  0997
    219  0997		       98		      .byte.b	NOTE_D5S
    220  0998		       00		      .byte.b	NOTE_HOLD
    221  0999		       94		      .byte.b	NOTE_F5S
    222  099a		       00		      .byte.b	NOTE_HOLD
    223  099b		       92		      .byte.b	NOTE_G5S
    224  099c		       98		      .byte.b	NOTE_D5S
    225  099d		       94		      .byte.b	NOTE_F5S
    226  099e		       9b		      .byte.b	NOTE_C5S
    227  099f		       98		      .byte.b	NOTE_D5S
    228  09a0		       9f		      .byte.b	NOTE_B4
    229  09a1		       9b		      .byte.b	NOTE_C5S
    230  09a2		       98		      .byte.b	NOTE_D5S
    231  09a3		       9a		      .byte.b	NOTE_D5
    232  09a4		       9b		      .byte.b	NOTE_C5S
    233  09a5		       9f		      .byte.b	NOTE_B4
    234  09a6		       9b		      .byte.b	NOTE_C5S
    235  09a7
    236  09a7		       9a		      .byte.b	NOTE_D5
    237  09a8		       00		      .byte.b	NOTE_HOLD
    238  09a9		       9f		      .byte.b	NOTE_B4
    239  09aa		       9b		      .byte.b	NOTE_C5S
    240  09ab		       98		      .byte.b	NOTE_D5S
    241  09ac		       94		      .byte.b	NOTE_F5S
    242  09ad		       9b		      .byte.b	NOTE_C5S
    243  09ae		       9a		      .byte.b	NOTE_D5
    244  09af		       9b		      .byte.b	NOTE_C5S
    245  09b0		       9f		      .byte.b	NOTE_B4
    246  09b1		       9b		      .byte.b	NOTE_C5S
    247  09b2		       00		      .byte.b	NOTE_HOLD
    248  09b3		       9f		      .byte.b	NOTE_B4
    249  09b4		       00		      .byte.b	NOTE_HOLD
    250  09b5		       9b		      .byte.b	NOTE_C5S
    251  09b6		       00		      .byte.b	NOTE_HOLD
    252  09b7
    253  09b7		       9a		      .byte.b	NOTE_D5
    254  09b8		       00		      .byte.b	NOTE_HOLD
    255  09b9		       9f		      .byte.b	NOTE_B4
    256  09ba		       9b		      .byte.b	NOTE_C5S
    257  09bb		       98		      .byte.b	NOTE_D5S
    258  09bc		       94		      .byte.b	NOTE_F5S
    259  09bd		       9b		      .byte.b	NOTE_C5S
    260  09be		       9a		      .byte.b	NOTE_D5
    261  09bf		       9b		      .byte.b	NOTE_C5S
    262  09c0		       9f		      .byte.b	NOTE_B4
    263  09c1		       9b		      .byte.b	NOTE_C5S
    264  09c2		       00		      .byte.b	NOTE_HOLD
    265  09c3		       9f		      .byte.b	NOTE_B4
    266  09c4		       00		      .byte.b	NOTE_HOLD
    267  09c5		       9f		      .byte.b	NOTE_B4
    268  09c6		       00		      .byte.b	NOTE_HOLD
    269  09c7
    270  09c7		       9f		      .byte.b	NOTE_B4
    271  09c8		       00		      .byte.b	NOTE_HOLD
    272  09c9		       0d		      .byte.b	NOTE_F4S
    273  09ca		       0c		      .byte.b	NOTE_G4S
    274  09cb		       9f		      .byte.b	NOTE_B4
    275  09cc		       00		      .byte.b	NOTE_HOLD
    276  09cd		       0d		      .byte.b	NOTE_F4S
    277  09ce		       0c		      .byte.b	NOTE_G4S
    278  09cf		       9f		      .byte.b	NOTE_B4
    279  09d0		       9b		      .byte.b	NOTE_C5S
    280  09d1		       98		      .byte.b	NOTE_D5S
    281  09d2		       9f		      .byte.b	NOTE_B4
    282  09d3		       97		      .byte.b	NOTE_E5
    283  09d4		       98		      .byte.b	NOTE_D5S
    284  09d5		       97		      .byte.b	NOTE_E5
    285  09d6		       94		      .byte.b	NOTE_F5S
    286  09d7
    287  09d7		       9f		      .byte.b	NOTE_B4
    288  09d8		       00		      .byte.b	NOTE_HOLD
    289  09d9		       9f		      .byte.b	NOTE_B4
    290  09da		       00		      .byte.b	NOTE_HOLD
    291  09db		       0d		      .byte.b	NOTE_F4S
    292  09dc		       0c		      .byte.b	NOTE_G4S
    293  09dd		       9f		      .byte.b	NOTE_B4
    294  09de		       0d		      .byte.b	NOTE_F4S
    295  09df		       97		      .byte.b	NOTE_E5
    296  09e0		       98		      .byte.b	NOTE_D5S
    297  09e1		       9b		      .byte.b	NOTE_C5S
    298  09e2		       9f		      .byte.b	NOTE_B4
    299  09e3		       0d		      .byte.b	NOTE_F4S
    300  09e4		       10		      .byte.b	NOTE_D4S
    301  09e5		       0f		      .byte.b	NOTE_E4
    302  09e6		       0d		      .byte.b	NOTE_F4S
    303  09e7
    304  09e7		       9f		      .byte.b	NOTE_B4
    305  09e8		       00		      .byte.b	NOTE_HOLD
    306  09e9		       0d		      .byte.b	NOTE_F4S
    307  09ea		       0c		      .byte.b	NOTE_G4S
    308  09eb		       9f		      .byte.b	NOTE_B4
    309  09ec		       00		      .byte.b	NOTE_HOLD
    310  09ed		       0d		      .byte.b	NOTE_F4S
    311  09ee		       0c		      .byte.b	NOTE_G4S
    312  09ef		       9f		      .byte.b	NOTE_B4
    313  09f0		       9f		      .byte.b	NOTE_B4
    314  09f1		       9b		      .byte.b	NOTE_C5S
    315  09f2		       98		      .byte.b	NOTE_D5S
    316  09f3		       9f		      .byte.b	NOTE_B4
    317  09f4		       0d		      .byte.b	NOTE_F4S
    318  09f5		       0c		      .byte.b	NOTE_G4S
    319  09f6		       0d		      .byte.b	NOTE_F4S
    320  09f7
    321  09f7		       9f		      .byte.b	NOTE_B4
    322  09f8		       00		      .byte.b	NOTE_HOLD
    323  09f9		       9f		      .byte.b	NOTE_B4
    324  09fa		       0a		      .byte.b	NOTE_A4S
    325  09fb		       9f		      .byte.b	NOTE_B4
    326  09fc		       0d		      .byte.b	NOTE_F4S
    327  09fd		       0c		      .byte.b	NOTE_G4S
    328  09fe		       9f		      .byte.b	NOTE_B4
    329  09ff		       97		      .byte.b	NOTE_E5
    330  0a00		       98		      .byte.b	NOTE_D5S
    331  0a01		       97		      .byte.b	NOTE_E5
    332  0a02		       94		      .byte.b	NOTE_F5S
    333  0a03		       9f		      .byte.b	NOTE_B4
    334  0a04		       00		      .byte.b	NOTE_HOLD
    335  0a05		       0a		      .byte.b	NOTE_A4S
    336  0a06		       00		      .byte.b	NOTE_HOLD
    337  0a07
    338  0a07		       9f		      .byte.b	NOTE_B4
    339  0a08		       00		      .byte.b	NOTE_HOLD
    340  0a09		       9f		      .byte.b	NOTE_B4
    341  0a0a		       0a		      .byte.b	NOTE_A4S
    342  0a0b		       9f		      .byte.b	NOTE_B4
    343  0a0c		       0d		      .byte.b	NOTE_F4S
    344  0a0d		       0c		      .byte.b	NOTE_G4S
    345  0a0e		       9f		      .byte.b	NOTE_B4
    346  0a0f		       97		      .byte.b	NOTE_E5
    347  0a10		       98		      .byte.b	NOTE_D5S
    348  0a11		       97		      .byte.b	NOTE_E5
    349  0a12		       94		      .byte.b	NOTE_F5S
    350  0a13		       9f		      .byte.b	NOTE_B4
    351  0a14		       00		      .byte.b	NOTE_HOLD
    352  0a15		       9b		      .byte.b	NOTE_C5S
    353  0a16		       00		      .byte.b	NOTE_HOLD
    354  0a17
    355  0a17		       10		      .byte.b	NOTE_D4S
    356  0a18		       0f		      .byte.b	NOTE_E4
    357  0a19		       0d		      .byte.b	NOTE_F4S
    358  0a1a		       00		      .byte.b	NOTE_HOLD
    359  0a1b		       9f		      .byte.b	NOTE_B4
    360  0a1c		       00		      .byte.b	NOTE_HOLD
    361  0a1d		       10		      .byte.b	NOTE_D4S
    362  0a1e		       0f		      .byte.b	NOTE_E4
    363  0a1f		       0d		      .byte.b	NOTE_F4S
    364  0a20		       9f		      .byte.b	NOTE_B4
    365  0a21		       9b		      .byte.b	NOTE_C5S
    366  0a22		       98		      .byte.b	NOTE_D5S
    367  0a23		       9b		      .byte.b	NOTE_C5S
    368  0a24		       0a		      .byte.b	NOTE_A4S
    369  0a25		       9f		      .byte.b	NOTE_B4
    370  0a26		       00		      .byte.b	NOTE_HOLD
    371  0a27
    372  0a27		       0d		      .byte.b	NOTE_F4S
    373  0a28		       00		      .byte.b	NOTE_HOLD
    374  0a29		       10		      .byte.b	NOTE_D4S
    375  0a2a		       0f		      .byte.b	NOTE_E4
    376  0a2b		       0d		      .byte.b	NOTE_F4S
    377  0a2c		       00		      .byte.b	NOTE_HOLD
    378  0a2d		       9f		      .byte.b	NOTE_B4
    379  0a2e		       00		      .byte.b	NOTE_HOLD
    380  0a2f		       9b		      .byte.b	NOTE_C5S
    381  0a30		       0a		      .byte.b	NOTE_A4S
    382  0a31		       9f		      .byte.b	NOTE_B4
    383  0a32		       9b		      .byte.b	NOTE_C5S
    384  0a33		       97		      .byte.b	NOTE_E5
    385  0a34		       98		      .byte.b	NOTE_D5S
    386  0a35		       97		      .byte.b	NOTE_E5
    387  0a36		       9b		      .byte.b	NOTE_C5S
    388  0a37
    389  0a37
    390  0a37
    391  0a37							;
    392  0a37
    393  0a37				   CatTimingNTSC
    394  0a37		       04		      .byte.b	4
    395  0a38		       04		      .byte.b	4
    396  0a39		       04		      .byte.b	4
    397  0a3a		       04		      .byte.b	4
    398  0a3b		       05		      .byte.b	5
    399  0a3c		       04		      .byte.b	4
    400  0a3d		       04		      .byte.b	4
    401  0a3e		       04		      .byte.b	4
    402  0a3f		       05		      .byte.b	5
    403  0a40		       04		      .byte.b	4
    404  0a41		       04		      .byte.b	4
    405  0a42		       04		      .byte.b	4
    406  0a43		       04		      .byte.b	4
    407  0a44		       05		      .byte.b	5
    408  0a45		       04		      .byte.b	4
    409  0a46		       04		      .byte.b	4
    410  0a47		       04		      .byte.b	4
    411  0a48		       05		      .byte.b	5
    412  0a49		       04		      .byte.b	4
    413  0a4a		       04		      .byte.b	4
    414  0a4b		       04		      .byte.b	4
    415  0a4c		       04		      .byte.b	4
    416  0a4d		       05		      .byte.b	5
    417  0a4e		       04		      .byte.b	4
    418  0a4f		       04		      .byte.b	4
    419  0a50		       04		      .byte.b	4
    420  0a51		       05		      .byte.b	5
    421  0a52
    422  0a52				   CatTimingPAL
    423  0a52		       03		      .byte.b	3
    424  0a53		       04		      .byte.b	4
    425  0a54		       03		      .byte.b	3
    426  0a55		       04		      .byte.b	4
    427  0a56		       03		      .byte.b	3
    428  0a57		       04		      .byte.b	4
    429  0a58		       03		      .byte.b	3
    430  0a59		       04		      .byte.b	4
    431  0a5a		       03		      .byte.b	3
    432  0a5b		       04		      .byte.b	4
    433  0a5c		       03		      .byte.b	3
    434  0a5d		       04		      .byte.b	4
    435  0a5e		       03		      .byte.b	3
    436  0a5f		       04		      .byte.b	4
    437  0a60		       03		      .byte.b	3
    438  0a61		       04		      .byte.b	4
    439  0a62		       03		      .byte.b	3
    440  0a63		       04		      .byte.b	4
    441  0a64		       03		      .byte.b	3
    442  0a65		       04		      .byte.b	4
    443  0a66		       03		      .byte.b	3
    444  0a67		       04		      .byte.b	4
    445  0a68		       03		      .byte.b	3
    446  0a69		       04		      .byte.b	4
    447  0a6a		       03		      .byte.b	3
    448  0a6b		       04		      .byte.b	4
    449  0a6c		       03		      .byte.b	3
    450  0a6d		       04		      .byte.b	4
    451  0a6e		       04		      .byte.b	4
    452  0a6f
------- FILE bank1.asm
     16  0a6f
      0  0a6f					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
------- FILE main.asm
     20  1000							;	include bank2.asm
     21  1000							;	include bank3.asm
     22  1000							;	include bank4.asm
