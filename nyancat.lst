------- FILE main.asm LEVEL 1 PASS 2
      1  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  4000 ????						; Project - Nyan Cat Game
      3  4000 ????						; by Jeremiah Knol
      4  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  4000 ????						; 11-01-2018 Version 4.3
      6  4000 ????						;
      7  4000 ????						; Add music
      8  4000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  4000 ????
     10  4000 ????				      PROCESSOR	6502
     11  4000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  4000 ????				      include	headers/vcs.h
      1  4000 ????						; VCS.H
      2  4000 ????						; Version 1.05, 13/November/2003
      3  4000 ????
      4  4000 ????	       00 69	   VERSION_VCS =	105
      5  4000 ????
      6  4000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  4000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  4000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  4000 ????						;
     10  4000 ????						; This file defines hardware registers and memory mapping for the
     11  4000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  4000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  4000 ????						; available at at http://www.atari2600.org/dasm
     14  4000 ????						;
     15  4000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  4000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  4000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  4000 ????						; with your views.  Please contribute, if you think you can improve this
     19  4000 ????						; file!
     20  4000 ????						;
     21  4000 ????						; Latest Revisions...
     22  4000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  4000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  4000 ????						;			    This will allow conditional code to verify VCS.H being
     25  4000 ????						;			    used for code assembly.
     26  4000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  4000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  4000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  4000 ????						;			 readability issue, and binary compatibility with disassembled
     30  4000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  4000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  4000 ????						;			 which was broken by the use of segments in this file, as
     33  4000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  4000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  4000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  4000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  4000 ????						;						   it is safe to leave it undefined, and the base address will
     38  4000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  4000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  4000 ????						;			  - register definitions are now generated through assignment
     41  4000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  4000 ????						;			    address architecture.
     43  4000 ????						; 1.0	22/MAR/2003		Initial release
     44  4000 ????
     45  4000 ????
     46  4000 ????						;-------------------------------------------------------------------------------
     47  4000 ????
     48  4000 ????						; TIA_BASE_ADDRESS
     49  4000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  4000 ????						; Normally 0, the base address should (externally, before including this file)
     51  4000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  4000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  4000 ????						; < $40 as a bankswitch.
     54  4000 ????
     55  4000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  4000 ????			  -TIA_BASE_ADDRESS =	0
     57  4000 ????				      ENDIF
     58  4000 ????
     59  4000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  4000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  4000 ????						; *OR* by declaring the label before including this file, eg:
     62  4000 ????						; TIA_BASE_ADDRESS = $40
     63  4000 ????						;   include "vcs.h"
     64  4000 ????
     65  4000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  4000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  4000 ????						; for the mirrored ROM hardware registers.
     68  4000 ????
     69  4000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  4000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  4000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  4000 ????
     73  4000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  4000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  4000 ????				      ENDIF
     76  4000 ????
     77  4000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  4000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  4000 ????				      ENDIF
     80  4000 ????
     81  4000 ????						;-------------------------------------------------------------------------------
     82  4000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     14  0000 ????
------- FILE headers/equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5  0000 ????						; NUSIZx player size and player/missile copy spacing values
      6  0000 ????	       00 00	   ONE_COPY   equ	0
      7  0000 ????	       00 01	   TWO_CLOSE  equ	1
      8  0000 ????	       00 02	   TWO_MED    equ	2
      9  0000 ????	       00 03	   THREE_CLOSE equ	3
     10  0000 ????	       00 04	   TWO_WIDE   equ	4
     11  0000 ????	       00 05	   DOUBLE_SIZE equ	5
     12  0000 ????	       00 06	   THREE_MED  equ	6
     13  0000 ????	       00 07	   QUAD_SIZE  equ	7
     14  0000 ????
     15  0000 ????						; NUSIZx missile size values
     16  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     17  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     18  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     19  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     20  0000 ????
     21  0000 ????						; REFPx values
     22  0000 ????	       00 08	   REFP_TRUE  equ	8
     23  0000 ????	       00 00	   REFP_FALSE equ	0
     24  0000 ????
     25  0000 ????						; CTRLPF values
     26  0000 ????	       00 01	   PF_REFLECT equ	$01
     27  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     28  0000 ????	       00 04	   PF_PRIORITY equ	$04
     29  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     30  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     31  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     32  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     33  0000 ????
     34  0000 ????						; VDELxx values
     35  0000 ????	       00 00	   VDEL_FALSE equ	0
     36  0000 ????	       00 01	   VDEL_TRUE  equ	1
     37  0000 ????
     38  0000 ????						; ENAMx / ENABL values
     39  0000 ????	       00 02	   ENA_TRUE   equ	2
     40  0000 ????	       00 00	   ENA_FALSE  equ	0
     41  0000 ????
     42  0000 ????
     43  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     44  0000 ????						; Program Equates
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????
     47  0000 ????	       00 28	   VBLANK_LINES_NTSC equ	40
     48  0000 ????	       00 1e	   OSCAN_LINES_NTSC equ	30
     49  0000 ????	       00 2b	   VBLANK_NTSC equ	[[VBLANK_LINES_NTSC - 3] * 76 - 7] / 64
     50  0000 ????	       00 24	   OSCAN_NTSC equ	[[OSCAN_LINES_NTSC] * 76 + 26] / 64
     51  0000 ????
     52  0000 ????	       00 42	   VBLANK_LINES_PAL equ	66
     53  0000 ????	       00 36	   OSCAN_LINES_PAL equ	54
     54  0000 ????	       00 4a	   VBLANK_PAL equ	[[VBLANK_LINES_PAL - 3] * 76 - 7] / 64
     55  0000 ????	       00 40	   OSCAN_PAL  equ	[[OSCAN_LINES_PAL] * 76 + 26] / 64
     56  0000 ????
     57  0000 ????						; colors
     58  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     59  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     60  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     61  0000 ????	       00 08	   COL_CAT_FACE equ	$08
     62  0000 ????	       00 5f	   COL_CAT_TART equ	$5F
     63  0000 ????
     64  0000 ????						; luminosity values for throb line data
     65  0000 ????	       00 00	   LUM_0      equ	$0>>1
     66  0000 ????	       00 01	   LUM_2      equ	$2>>1
     67  0000 ????	       00 02	   LUM_4      equ	$4>>1
     68  0000 ????	       00 03	   LUM_6      equ	$6>>1
     69  0000 ????	       00 04	   LUM_8      equ	$8>>1
     70  0000 ????	       00 05	   LUM_A      equ	$A>>1
     71  0000 ????	       00 06	   LUM_C      equ	$C>>1
     72  0000 ????	       00 07	   LUM_E      equ	$E>>1
     73  0000 ????
     74  0000 ????						; color modes for throb line data
     75  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale throb lines
     76  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored throb lines
     77  0000 ????
     78  0000 ????	       00 dd	   GAMEPLAY_STACK equ	$DD	; stack location during gameplay kernel
     79  0000 ????
     80  0000 ????						; bankswitching hotspots
     81  0000 ????	       1f f6	   SelectBank1 equ	$1FF6
     82  0000 ????	       1f f7	   SelectBank2 equ	$1FF7
     83  0000 ????	       1f f8	   SelectBank3 equ	$1FF8
     84  0000 ????	       1f f9	   SelectBank4 equ	$1FF9
------- FILE main.asm
------- FILE headers/variables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/variables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Define Ram Variables
      3  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0000 ????
      5 U00d7 ????				      SEG.U	VARS
      6 U00d7 ????				      RORG	$80
      7 U00d7 ????
------- FILE headers/ram_global.asm LEVEL 3 PASS 2
      0 U00d7 ????				      include	headers/ram_global.asm
      1 U00d7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00d7 ????						; Global Variables
      3 U00d7 ????						;
      4 U00d7 ????						; These variables are used globally and cannot be shared or otherwise corrupted
      5 U00d7 ????						; Uses 16 bytes of RAM
      6 U00d7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7 U00d7 ????
      8 U00d7 ????			   RamGlobal
      9 U00d7 ????
     10 U00d7 ????						; Game housekeeping - 2 bytes
     11 U00d7 ????	       00	   Frame      ds	1	; current frame mod 256
     12 U00d8 ????			   Variation		; game variation options
     13 U00d8 ????	       00		      ds	1	; x-------	60Hz or 50Hz mode
     14 U00d9 ????						; -x------	0 = show startup splash / 1 = show menu
     15 U00d9 ????						; --x-----	number of players
     16 U00d9 ????						; ---x----	current player
     17 U00d9 ????						; ----xx--	P2 difficulty
     18 U00d9 ????						; ------xx	P1 difficulty
     19 U00d9 ????
     20 U00d9 ????						; Random Numbers - 2 bytes
     21 U00d9 ????	       00 00	   Rand16     ds	2	; 16-bit random number
     22 U00db ????
     23 U00db ????						; Music - 2 bytes
     24 U00db ????			   MusicNote		; xxxx----	current sequence
     25 U00db ????	       00		      ds	1	; ----xxxx	note in sequence
     26 U00dc ????			   NoteData		; xxxxx---	note length table offset
     27 U00dc ????	       00		      ds	1	; -----xxx	frames left in note
     28 U00dd ????
     29 U00dd ????						; Cat colors - 2 bytes
     30 U00dd ????			   CatTartColor 		; color for current player's cat in the kernels
     31 U00dd ????	       00		      ds	1
     32 U00de ????			   OtherTartColor		; color for the other player's cat
     33 U00de ????	       00		      ds	1
     34 U00df ????
     35 U00df ????						; Scores and current level - 7 bytes
     36 U00df ????			   BCDScore		; 3-byte array for the 2 scores which will each be stored as
     37 U00df ????	       00 00 00 00*	      ds	6	; BCD encoded 6-digit numbers. First 3 bytes for player 1,
     38 U00e5 ????						; last 3 for player 2.
     39 U00e5 ????			   Level		; value for the current level
     40 U00e5 ????	       00		      ds	1
     41 U00e6 ????
     42 U00e6 ????						; Controller data - 2 bytes
     43 U00e6 ????			   CtrlType		; xx------	controller types
     44 U00e6 ????						; 00------	joystick L, joystick R
     45 U00e6 ????						; 01------	joystick L, paddle R
     46 U00e6 ????						; 10------	paddle L, joystick R
     47 U00e6 ????						; 11------	paddle L, paddle L (left port only)
     48 U00e6 ????						; --x-----	free bit:
     49 U00e6 ????						;		in menu, tells if controller has been detected
     50 U00e6 ????						; ---x----	previous fire button state (joystick or paddle)
     51 U00e6 ????						; ----xxxx	previous right/left/down/up (joystick only)
     52 U00e6 ????	       00		      ds	1
     53 U00e7 ????
     54 U00e7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     55 U00e7 ????						; Local Variables
     56 U00e7 ????						;
     57 U00e7 ????						; These variables are only used locally, and are redefined for each area of code
     58 U00e7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59 U00e7 ????
     60 U00e7 ????			   RamLocal
     61 U00e7 ????
------- FILE headers/variables.h
------- FILE headers/ram_menu.asm LEVEL 3 PASS 2
      0 U00e7 ????				      include	headers/ram_menu.asm
      1 U00e7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U00e7 ????						; Menu Variables
      3 U00e7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U00e7 ????						; These variables are only needed in the main menu routine.
      5 U00e7 ????						;
      6 U00e7 ????						; Uses 103 bytes of RAM
      7 U00e7 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U00e7 ????
      9 U00e7 ????				      RORG	RamLocal
     10 U00e7 ????
     11 U00e7 ????						; Menu position and display - 7 bytes
     12 U00e7 ????			   CursorPos		; -----xxx	cursor position from 0-5
     13 U00e7 ????	       00		      ds	1
     14 U00e8 ????			   MenuPos		; -xxxxxxx	menu display position from 0-152
     15 U00e8 ????	       00		      ds	1
     16 U00e9 ????
     17 U00e9 ????						; Frame counters - 3 bytes
     18 U00e9 ????			   MenuCatFrame 		; animation frame for menu cat
     19 U00e9 ????	       00		      ds	1
     20 U00ea ????			   MenuCatFrameX14		; animation frame for menu cat times 14
     21 U00ea ????	       00		      ds	1
     22 U00eb ????			   MenuCatTiming		; xxxxx---	animation frame length offset from 0-26
     23 U00eb ????	       00		      ds	1	; -----xxx	game frames left in current animation frame
     24 U00ec ????
     25 U00ec ????						; Pointers - 8 bytes
     26 U00ec ????			   MenuTemp
     27 U00ec ????			   MenuCatRamPtr		; pointer for loading menu cat gfx to push to the stack
     28 U00ec ????			   MenuCatHmvPtrM		; pointer used to access HMOVE graphics for the missiles
     29 U00ec ????	       00 00		      ds	2
     30 U00ee ????			   MenuCatHmvPtrP		; pointer used to access HMOVE graphics for the players
     31 U00ee ????			   TextColorPtr
     32 U00ee ????	       00 00		      ds	2
     33 U00f0 ????			   MenuCatMslPtr		; pointer used to access missile graphics
     34 U00f0 ????	       00 00		      ds	2
     35 U00f2 ????			   BowColorsPfPtr		; pointer used to access rainbow colors in RAM
     36 U00f2 ????	       00 00		      ds	2
     37 U00f4 ????
     38 U00f4 ????						; Data blocks - 82 bytes
     39 U00f4 ????			   RamTxtColors
     40 U00f4 ????			   RamMenuCatGfxL		; GRP0 graphics for menu cat
     41 U00f4 ????	       00 00 00 00*	      ds	14
     42 U0102 ????			   TextHeight		; height of next text block
     43 U0102 ????			   RamMenuCatPfL		; left PF2 graphics for menu cat
     44 U0102 ????	       00 00 00 00*	      ds	15
     45 U0111 ????			   RamMenuCatPfR		; right PF2 graphics for menu cat
     46 U0111 ????	       00 00 00 00*	      ds	15
     47 U0120 ????			   RamMenuCatGfxR		; GRP1 graphics for menu cat
     48 U0120 ????	       00 00 00 00*	      ds	16
     49 U0130 ????	       00		      ds	1	; extra byte needed for next data block
     50 U0131 ????			   RamBowColorsBk		; rainbow colors
     51 U0131 ????	       00 00 00 00*	      ds	20
     52 U0145 ????			   MenuBgColor		; menu background color in current color palatte (NTSC/PAL)
     53 U0145 ????	       00		      ds	1
     54 U0146 ????
     55 U0146 ????			   MenuTxtDelay 		; -----xxx	line to start on in first text field
     56 U0146 ????	       00		      ds	1	; -xxxx---	scanlines to skip before starting menu text
     57 U0147 ????			   MenuTxtField 		; -----xxx	first text field to display
     58 U0147 ????	       00 00 00 	      ds	3
     59 U014a ????
     60 U014a ????						; Pre-load variables for within kernel - 4 bytes
     61 U014a ????			   RamMenuCatGfx		; GRP1 graphics in menu cat
     62 U014a ????	       00		      ds	1
     63 U014b ????			   RamMenuCatMissile		; missile graphics in menu cat
     64 U014b ????	       00		      ds	1
     65 U014c ????			   RainbowColorBk		; COLUBK rainbow color in menu cat
     66 U014c ????			   RainbowColorPf		; COLUPF rainbow color in menu cat
     67 U014c ????	       00		      ds	1
     68 U014d ????			   MenuCatShift
     69 U014d ????	       00		      ds	1
     70 U014e ????
     71 U014e ????						; 4 bytes free
     72 U014e ????
------- FILE headers/variables.h
------- FILE headers/ram_gameplay.asm LEVEL 3 PASS 2
      0 U014e ????				      include	headers/ram_gameplay.asm
      1 U014e ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U014e ????						; Gameplay variables
      3 U014e ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U014e ????						; These variables are only needed in the gameplay routine
      5 U014e ????						;
      6 U014e ????						; Uses 55 bytes of RAM
      7 U014e ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8 U014e ????
      9 U014e ????				      RORG	RamLocal
     10 U014e ????
     11 U014e ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12 U014e ????						; Variables that shouldn't be shared - ? bytes
     13 U014e ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     14 U014e ????
     15 U014e ????						; Pointers - 14 bytes
     16 U014e ????
     17 U014e ????						; The unused 3 bits of the high byte in each pointer
     18 U014e ????						; may be used for the speeds of each row
     19 U014e ????
     20 U014e ????			   FoodGfxPtr1		; pointer for 1st food item's graphics
     21 U014e ????			   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     22 U014e ????	       00 00		      ds	2
     23 U0150 ????			   FoodGfxPtr2		; pointer for 2nd food item's graphics
     24 U0150 ????			   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     25 U0150 ????	       00 00		      ds	2
     26 U0152 ????			   TartGfxPtr1		; pointer for the tart graphics
     27 U0152 ????			   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     28 U0152 ????	       00 00		      ds	2
     29 U0154 ????			   CatGfxPtr1		; pointer for the cat face/paws graphics
     30 U0154 ????			   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     31 U0154 ????	       00 00		      ds	2
     32 U0156 ????			   TartGfxPtr2		; pointer for the tart graphics
     33 U0156 ????			   HthGfxLPtr		; pointer for left half of the health graphics
     34 U0156 ????			   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     35 U0156 ????	       00 00		      ds	2
     36 U0158 ????			   CatGfxPtr2		; pointer for the cat face/paws graphics
     37 U0158 ????			   HthGfxRPtr		; pointer for right half of the health graphics
     38 U0158 ????			   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     39 U0158 ????	       00 00		      ds	2
     40 U015a ????			   ThrobPtr		; pointer for loading the throb colors
     41 U015a ????			   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     42 U015a ????	       00 00		      ds	2
     43 U015c ????
     44 U015c ????						; Variable game colors - 2 bytes
     45 U015c ????	       00	   ScoreColor ds	1	; color of the score text and scoreboard
     46 U015d ????	       00	   PgBarColor ds	1	; color for full part of progress bar
     47 U015e ????
     48 U015e ????						; Variables used when drawing the cat - 5 bytes
     49 U015e ????	       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     50 U015f ????			   CatPosition		; data describing the cat's position
     51 U015f ????	       00		      ds	1	; bits 7-5 store the cat's row, from 1-7
     52 U0160 ????						; bits 4-0 store the number of scanlines to skip after
     53 U0160 ????						; top of the cat's row before drawing the cat, from 0-18
     54 U0160 ????	       00	   CatRow     ds	1	; the row that the cat is on or wants to be on/is moving towards
     55 U0161 ????			   JoyCenter		; -------x	set if joystick has been returned to center
     56 U0161 ????	       00		      ds	1
     57 U0162 ????			   PreCatRows		; number of rows to draw before the two "cat" rows
     58 U0162 ????	       00		      ds	1
     59 U0163 ????
     60 U0163 ????						; Variables used for the food items - 21 bytes
     61 U0163 ????			   FoodItemL		; Hi nybble holds the value (0-15) of the right object to draw
     62 U0163 ????	       00 00 00 00*	      ds	7	; this frame.
     63 U016a ????						; Lo nybble either holds the pre-loaded value of the next
     64 U016a ????						; food item to appear in this row, or temporarily holds the
     65 U016a ????						; 3rd food item which isn't shown this frame, based on how many
     66 U016a ????						; food items are visible in this row (2-3), which is determined
     67 U016a ????						; by the position of the leftmost food item.
     68 U016a ????			   FoodItemR		; Hi nybble holds the value of the left object to draw
     69 U016a ????	       00 00 00 00*	      ds	7	; this frame.
     70 U0171 ????						; Lo nybble holds the fractional positional value
     71 U0171 ????						; for the row's position (0-15).
     72 U0171 ????			   FoodPosX		; (range 0-88)
     73 U0171 ????	       00 00 00 00*	      ds	7
     74 U0178 ????
     75 U0178 ????						; Variables for the progress bar and health display - 2 bytes
     76 U0178 ????			   Progress		; value for level progress, which can be
     77 U0178 ????	       00		      ds	1	; from 0 to 30 and will be used to draw progress bar
     78 U0179 ????			   Health		; amount of health
     79 U0179 ????	       00		      ds	1	; 0=full 8=medium 16=low 24=empty
     80 U017a ????						;ProgressBar	; array of 5 playfield values for progress bar
     81 U017a ????						; (shared with next 5 bytes of RAM)
     82 U017a ????
     83 U017a ????						; Variables used to pre-load for 2nd "cat" row's food items - 7 bytes
     84 U017a ????			   CatRowHmove		; array of 3 values to store to HMP1 before strobing
     85 U017a ????	       00 00 00 	      ds	3	; HMOVE to position food items in 2nd cat row
     86 U017d ????			   CatRow2FoodL
     87 U017d ????	       00		      ds	1
     88 U017e ????			   CatRow2FoodR
     89 U017e ????	       00		      ds	1
     90 U017f ????			   CatRow2Color1
     91 U017f ????	       00		      ds	1
     92 U0180 ????			   CatRow2Color2
     93 U0180 ????	       00		      ds	1
     94 U0181 ????
     95 U0181 ????						; Variables for the throbbing lines' colors - 4 bytes
     96 U0181 ????	       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
     97 U0184 ????						; throbbing lines. The first color is darkest,
     98 U0184 ????						; the last is brightest.
     99 U0184 ????	       00	   CatThrobPF ds	1
    100 U0185 ????
    101 U0185 ????						; Temporary variables - 2 bytes
    102 U0185 ????			   ProgressBar
    103 U0185 ????	       00	   Temp       ds	1
    104 U0186 ????	       00	   TempLoop   ds	1
    105 U0187 ????
    106 U0187 ????						; 51 bytes free
    107 U0187 ????
    108 U0187 ????						; Variables which can be shared with the scoreboard stack - 3 bytes
    109 U0187 ????	       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    110 U0188 ????	       00	   FoodColor1 ds	1	; color of the 1st food item
    111 U0189 ????	       00	   FoodColor2 ds	1	; color of the 2nd food item
    112 U018a ????
    113 U018a ????						; 7 of 15 available temporary RAM bytes used (8 left)
    114 U018a ????						; last 34 bytes of RAM are used to hold the rainbow color graphics
    115 U018a ????
    116 U018a ????				      RORG	$100 - 34
    117 U018a ????			   RamBowColors
------- FILE headers/variables.h
------- FILE headers/ram_temp.asm LEVEL 3 PASS 2
      0 U018a ????				      include	headers/ram_temp.asm
      1 U018a ????
      2 U018a ????				      RORG	$FA
      3 U018a ????
      4 U018a ????			   MusicPtr
      5 U018a ????	       00 00		      ds	2
      6 U018c ????			   TempX
      7 U018c ????	       00		      ds	1
      8 U018d ????			   TempNote
      9 U018d ????	       00		      ds	1
     10 U018e ????
     11 U018e ????				      RORG	RamTxtColors
     12 U018e ????
     13 U018e ????	       00 00 00 00*CharGfx0   ds	7
     14 U0195 ????	       00 00 00 00*CharGfx1   ds	7
     15 U019c ????	       00 00 00 00*CharGfx2   ds	7
     16 U01a3 ????	       00	   CharBuf0   ds	1
     17 U01a4 ????	       00	   CharBuf1   ds	1
     18 U01a5 ????	       00 00	   CharPtr0   ds	2
     19 U01a7 ????	       00 00	   CharPtr1   ds	2
     20 U01a9 ????	       00 00	   CharPtr2   ds	2
     21 U01ab ????	       00 00	   CharPtr3   ds	2
     22 U01ad ????	       00	   TempY      ds	1
     23 U01ae ????
------- FILE headers/variables.h
     12 U01ae ????
------- FILE main.asm
------- FILE headers/macros.h LEVEL 2 PASS 2
      0 U01ae ????				      include	headers/macros.h
      1 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U01ae ????						; Start Bank
      3 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U01ae ????						; Takes an integer for the bank
      5 U01ae ????						;
      6 U01ae ????						; Placed at the start of each bank
      7 U01ae ????						; Sets the bank's ROM location, and adds the global jump table
      8 U01ae ????						;
      9 U01ae ????						; Uses 18 bytes of ROM for the jump table
     10 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     11 U01ae ????
     12 U01ae ????				      MAC	start_bank
     13 U01ae ????				      SEG	BANK_{1}
     14 U01ae ????				      ORG	[{1} - 1] * $1000
     15 U01ae ????				      RORG	$1000
     16 U01ae ????				      SUBROUTINE
     17 U01ae ????
     18 U01ae ????			   JmpInitSystem
     19 U01ae ????				      nop	SelectBank1
     20 U01ae ????				      jmp	InitSystem
     21 U01ae ????			   JmpMenuOverScan
     22 U01ae ????				      nop	SelectBank1
     23 U01ae ????				      jmp	MenuOverScan
     24 U01ae ????			   JmpGamePlay
     25 U01ae ????				      nop	SelectBank2
     26 U01ae ????				      jmp	GameplayInit
     27 U01ae ????			   JmpMenuTxtBtm
     28 U01ae ????				      nop	SelectBank3
     29 U01ae ????				      jmp	MenuTxtBtm
     30 U01ae ????			   JmpMenuBottom
     31 U01ae ????				      nop	SelectBank1
     32 U01ae ????				      jmp	MenuBottom
     33 U01ae ????
     34 U01ae ????				      ENDM
     35 U01ae ????
     36 U01ae ????
     37 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     38 U01ae ????						; End Bank
     39 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40 U01ae ????						; Takes an integer for the bank
     41 U01ae ????						;
     42 U01ae ????						; Placed at the end of each bank
     43 U01ae ????						; Pads the remaining space in the 4K bank, and defines the system vectors
     44 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45 U01ae ????
     46 U01ae ????				      MAC	end_bank
     47 U01ae ????				      ORG	[{1} - 1] * $1000 + $0FFA
     48 U01ae ????
     49 U01ae ????				      .word	JmpInitSystem	; NMI
     50 U01ae ????				      .word	JmpInitSystem	; RESET
     51 U01ae ????				      .word	JmpInitSystem	; IRQ
     52 U01ae ????
     53 U01ae ????				      ENDM
     54 U01ae ????
     55 U01ae ????
     56 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57 U01ae ????						; Set Overscan Timer
     58 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59 U01ae ????						; Sets and starts the timer for the overscan
     60 U01ae ????						;
     61 U01ae ????						; Uses 13 bytes of ROM
     62 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63 U01ae ????
     64 U01ae ????				      MAC	set_oscan_timer
     65 U01ae ????				      SUBROUTINE
     66 U01ae ????
     67 U01ae ????				      lda	#OSCAN_PAL + {1}
     68 U01ae ????				      bit	Variation
     69 U01ae ????				      bpl	.PAL
     70 U01ae ????				      lda	#OSCAN_NTSC + {1}
     71 U01ae ????			   .PAL       sta	WSYNC
     72 U01ae ????				      sta	TIM64T	; set overscan timer
     73 U01ae ????
     74 U01ae ????				      ENDM
     75 U01ae ????
     76 U01ae ????
     77 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     78 U01ae ????						; Vertical Sync
     79 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80 U01ae ????						; Performs a vertical sync, and starts the timer for vertical blanking
     81 U01ae ????						;
     82 U01ae ????						; Uses 22 bytes of ROM
     83 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84 U01ae ????
     85 U01ae ????				      MAC	vert_sync
     86 U01ae ????				      SUBROUTINE
     87 U01ae ????
     88 U01ae ????				      ldx	#VBLANK_PAL	; TIM64T value for PAL mode
     89 U01ae ????				      bit	Variation
     90 U01ae ????				      bpl	.PAL
     91 U01ae ????				      ldx	#VBLANK_NTSC	; TIM64T value for NTSC mode
     92 U01ae ????			   .PAL       lda	#%1110
     93 U01ae ????			   .Loop      sta	WSYNC
     94 U01ae ????				      sta	VSYNC
     95 U01ae ????				      sta	VBLANK
     96 U01ae ????				      stx	TIM64T
     97 U01ae ????				      lsr
     98 U01ae ????				      bne	.Loop
     99 U01ae ????
    100 U01ae ????				      ENDM
    101 U01ae ????
    102 U01ae ????
    103 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    104 U01ae ????						; Timer Loop
    105 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106 U01ae ????						; Loops until the timer runs down
    107 U01ae ????						; Used to finish vertical blanking and overscan
    108 U01ae ????						;
    109 U01ae ????						; Uses 5 bytes of ROM
    110 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    111 U01ae ????
    112 U01ae ????				      MAC	timer_loop
    113 U01ae ????				      SUBROUTINE
    114 U01ae ????
    115 U01ae ????			   .Loop      lda	INTIM
    116 U01ae ????				      bne	.Loop	; loop until end of vertical blanking
    117 U01ae ????
    118 U01ae ????				      ENDM
    119 U01ae ????
    120 U01ae ????
    121 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122 U01ae ????						; Throb Rainbow Background
    123 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    124 U01ae ????						; Checks the background color, and if black, the throb color is used instead
    125 U01ae ????						; The throb color must be pre-loaded into the X register
    126 U01ae ????						;
    127 U01ae ????						; Uses 11 bytes of ROM
    128 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    129 U01ae ????
    130 U01ae ????				      MAC	throb_rainbow_bk
    131 U01ae ????				      SUBROUTINE
    132 U01ae ????			   .X	      SET	{1}
    133 U01ae ????
    134 U01ae ????				      lda	RamBowColors+.X	; 3
    135 U01ae ????				      bne	.Rbow	; 5/6
    136 U01ae ????				      stx	COLUBK	; 8
    137 U01ae ????				      beq	.End	; 11
    138 U01ae ????			   .Rbow      sta	COLUBK	; 9
    139 U01ae ????				      nop		; 11
    140 U01ae ????			   .End
    141 U01ae ????				      ENDM
    142 U01ae ????
    143 U01ae ????
    144 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    145 U01ae ????						; Throb Rainbow Playfield
    146 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    147 U01ae ????						; Checks the playfield color, and if black, the throb color is used instead
    148 U01ae ????						; The throb color must be pre-loaded into the X register
    149 U01ae ????						;
    150 U01ae ????						; Uses 11 bytes of ROM
    151 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    152 U01ae ????
    153 U01ae ????				      MAC	throb_rainbow_pf
    154 U01ae ????				      SUBROUTINE
    155 U01ae ????			   .X	      SET	{1}
    156 U01ae ????
    157 U01ae ????				      lda	RamBowColors+.X	; 3
    158 U01ae ????				      bne	.Rbow	; 5/6
    159 U01ae ????				      stx	COLUPF	; 8
    160 U01ae ????				      beq	.End	; 11
    161 U01ae ????			   .Rbow      sta	COLUPF	; 9
    162 U01ae ????				      nop		; 11
    163 U01ae ????			   .End
    164 U01ae ????				      ENDM
    165 U01ae ????
    166 U01ae ????
    167 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168 U01ae ????						; Jump to Next Page
    169 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    170 U01ae ????						; Jumps to the beginning of the next page, padding the end of the current one
    171 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    172 U01ae ????
    173 U01ae ????				      MAC	next_page
    174 U01ae ????				      SUBROUTINE
    175 U01ae ????
    176 U01ae ????				      jmp	.NextPage
    177 U01ae ????				      ALIGN	$100
    178 U01ae ????			   .NextPage
    179 U01ae ????
    180 U01ae ????				      ENDM
    181 U01ae ????
    182 U01ae ????
    183 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    184 U01ae ????						; Skip Byte
    185 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186 U01ae ????						; Gives a name to the opcode $08, which is a 2-cycle nop,
    187 U01ae ????						; skipping the next byte of ROM.
    188 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189 U01ae ????
    190 U01ae ????				      MAC	skip_byte
    191 U01ae ????				      HEX	80
    192 U01ae ????				      ENDM
    193 U01ae ????
    194 U01ae ????
    195 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    196 U01ae ????						; Skip Word
    197 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    198 U01ae ????						; Gives a name to opcode $0C, which is a 4-cycle nop,
    199 U01ae ????						; skipping the next two bytes of ROM.
    200 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    201 U01ae ????
    202 U01ae ????				      MAC	skip_word
    203 U01ae ????				      HEX	0C
    204 U01ae ????				      ENDM
------- FILE main.asm
     18 U01ae ????
------- FILE bank1.asm LEVEL 2 PASS 2
      0 U01ae ????				      include	bank1.asm
      1 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2 U01ae ????						; Bank 1
      3 U01ae ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4 U01ae ????
      0 U01ae ????				      START_BANK	1
      1  1000 ????				      SEG	BANK_1
      2  0000					      ORG	[1 - 1] * $1000
      3  0000					      RORG	$1000
      4  0000					      SUBROUTINE
      5  0000
      6  0000				   JmpInitSystem
      7  0000		       0c f6 1f 	      nop	SelectBank1
      8  0003		       4c 1e 10 	      jmp	InitSystem
      9  0006				   JmpMenuOverScan
     10  0006		       0c f6 1f 	      nop	SelectBank1
     11  0009		       4c e0 10 	      jmp	MenuOverScan
     12  000c				   JmpGamePlay
     13  000c		       0c f7 1f 	      nop	SelectBank2
     14  000f		       4c 1e 10 	      jmp	GameplayInit
     15  0012				   JmpMenuTxtBtm
     16  0012		       0c f8 1f 	      nop	SelectBank3
     17  0015		       4c e1 15 	      jmp	MenuTxtBtm
     18  0018				   JmpMenuBottom
     19  0018		       0c f6 1f 	      nop	SelectBank1
     20  001b		       4c 99 18 	      jmp	MenuBottom
     21  001e
      6  001e
------- FILE init.asm LEVEL 3 PASS 2
      0  001e					      include	init.asm
      1  001e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  001e							; Clear system registers and RAM
      3  001e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  001e							; Uses 20 bytes of ROM
      5  001e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  001e
      7  001e				   InitSystem
      8  001e
      9  001e							; clear CPU and zeropage
     10  001e		       d8		      cld
     11  001f		       ab 00		      lxa	#0
     12  0021		       a8		      tay
     13  0022				   .ClearStack
     14  0022		       ca		      dex
     15  0023		       9a		      txs
     16  0024		       48		      pha
     17  0025		       d0 fb		      bne	.ClearStack
     18  0027
     19  0027		       8d 81 02 	      sta	SWACNT
     20  002a		       8d 83 02 	      sta	SWBCNT
     21  002d
     22  002d							; check for forced 50hz mode
     23  002d		       4e 82 02 	      lsr	SWCHB	; reset switch state -> carry flag
     24  0030		       66 81		      ror	Variation	; write to D7
     25  0032
------- FILE bank1.asm
------- FILE bank1/code/intro.asm LEVEL 3 PASS 2
      0  0032					      include	bank1/code/intro.asm
      1  0032							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0032							; Intro music sequence
      3  0032							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0032
      5  0032					      SUBROUTINE
      6  0032
      7  0032				   Intro
      8  0032		       a9 fa		      lda	#250
      9  0034		       85 84		      sta	MusicNote
     10  0036
      0  0036				   .Oscan     SET_OSCAN_TIMER	0
      1  0036					      SUBROUTINE
      2  0036
      3  0036		       a9 40		      lda	#OSCAN_PAL + 0
      4  0038		       24 81		      bit	Variation
      5  003a		       10 02		      bpl	.PAL
      6  003c		       a9 24		      lda	#OSCAN_NTSC + 0
      7  003e		       85 02	   .PAL       sta	WSYNC
      8  0040		       8d 96 02 	      sta	TIM64T
      9  0043
      0  0043					      TIMER_LOOP
      1  0043					      SUBROUTINE
      2  0043
      3  0043		       ad 84 02    .Loop      lda	INTIM
      4  0046		       d0 fb		      bne	.Loop
      5  0048
      0  0048					      VERT_SYNC
      1  0048					      SUBROUTINE
      2  0048
      3  0048		       a2 4a		      ldx	#VBLANK_PAL
      4  004a		       24 81		      bit	Variation
      5  004c		       10 02		      bpl	.PAL
      6  004e		       a2 2b		      ldx	#VBLANK_NTSC
      7  0050		       a9 0e	   .PAL       lda	#%1110
      8  0052		       85 02	   .Loop      sta	WSYNC
      9  0054		       85 00		      sta	VSYNC
     10  0056		       85 01		      sta	VBLANK
     11  0058		       8e 96 02 	      stx	TIM64T
     12  005b		       4a		      lsr
     13  005c		       d0 f4		      bne	.Loop
     14  005e
     14  005e
     15  005e		       a5 84		      lda	MusicNote
     16  0060		       10 1d		      bpl	.Music
     17  0062
     18  0062		       a2 08		      ldx	#8
     19  0064		       c9 fc		      cmp	#252
     20  0066		       f0 0b		      beq	.Click
     21  0068		       ca		      dex
     22  0069		       c9 fd		      cmp	#253
     23  006b		       f0 06		      beq	.Click
     24  006d
     25  006d		       a9 00		      lda	#0
     26  006f		       85 19		      sta	AUDV0
     27  0071		       f0 3a		      beq	.NoEcho
     28  0073
     29  0073		       a9 1f	   .Click     lda	#$1F
     30  0075		       85 19		      sta	AUDV0
     31  0077		       a9 08		      lda	#$8
     32  0079		       85 15		      sta	AUDC0
     33  007b		       86 17		      stx	AUDF0
     34  007d		       d0 2e		      bne	.NoEcho
     35  007f
     36  007f		       a9 1c	   .Music     lda	#>IntroSeq
     37  0081		       85 fb		      sta	MusicPtr+1
     38  0083		       a9 3f		      lda	#<IntroSeq
     39  0085		       85 fa		      sta	MusicPtr
     40  0087		       a2 00		      ldx	#0
     41  0089		       20 9c 18 	      jsr	SetNote
     42  008c		       a9 25		      lda	#<IntroVlm
     43  008e		       85 fa		      sta	MusicPtr
     44  0090		       20 b0 18 	      jsr	SetVolume
     45  0093
     46  0093		       a5 84		      lda	MusicNote
     47  0095		       c9 02		      cmp	#2
     48  0097		       30 14		      bmi	.NoEcho
     49  0099
     50  0099		       a9 3d		      lda	#<IntroSeq-2
     51  009b		       85 fa		      sta	MusicPtr
     52  009d		       a2 01		      ldx	#1
     53  009f		       20 9c 18 	      jsr	SetNote
     54  00a2		       a9 25		      lda	#<IntroVlm
     55  00a4		       85 fa		      sta	MusicPtr
     56  00a6		       20 b0 18 	      jsr	SetVolume
     57  00a9		       4a		      lsr
     58  00aa		       4a		      lsr
     59  00ab		       85 1a		      sta	AUDV1
     60  00ad
     61  00ad		       20 cb 18    .NoEcho    jsr	UpdateNote
     62  00b0
      0  00b0					      TIMER_LOOP
      1  00b0					      SUBROUTINE
      2  00b0
      3  00b0		       ad 84 02    .Loop      lda	INTIM
      4  00b3		       d0 fb		      bne	.Loop
      5  00b5
     64  00b5
     65  00b5		       a2 c1		      ldx	#193
     66  00b7		       ca	   .Loop      dex
     67  00b8		       85 02		      sta	WSYNC
     68  00ba		       d0 fb		      bne	.Loop
     69  00bc
     70  00bc		       a5 84		      lda	MusicNote
     71  00be		       c9 20		      cmp	#32
     72  00c0		       f0 03		      beq	.End
     73  00c2		       4c 36 10 	      jmp	.Oscan
     74  00c5
     75  00c5		       86 84	   .End       stx	MusicNote
     76  00c7
------- FILE bank1.asm
------- FILE bank1/code/menu_init.asm LEVEL 3 PASS 2
      0  00c7					      include	bank1/code/menu_init.asm
      1  00c7
      2  00c7		       a9 01		      lda	#1
      3  00c9		       85 90		      sta	CursorPos
      4  00cb		       a9 15		      lda	#21
      5  00cd		       85 91		      sta	MenuPos
      6  00cf		       a9 10		      lda	#%00010000
      7  00d1		       85 8f		      sta	CtrlType
      8  00d3
      9  00d3							; set cat color
     10  00d3		       a9 08		      lda	#%1000
     11  00d5		       2d 82 02 	      and	SWCHB
     12  00d8		       aa		      tax
     13  00d9		       bd 01 1b 	      lda	MenuColors+1,x
     14  00dc		       85 86		      sta	CatTartColor
     15  00de		       85 87		      sta	OtherTartColor
     16  00e0
------- FILE bank1.asm
------- FILE bank1/code/oscan_logic.asm LEVEL 3 PASS 2
      0  00e0					      include	bank1/code/oscan_logic.asm
      1  00e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  00e0							; Overscan logic for menu
      3  00e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  00e0
      5  00e0				   MenuOverScan SUBROUTINE
      6  00e0
      0  00e0					      TIMER_LOOP
      1  00e0					      SUBROUTINE
      2  00e0
      3  00e0		       ad 84 02    .Loop      lda	INTIM
      4  00e3		       d0 fb		      bne	.Loop
      5  00e5
      8  00e5
      9  00e5		       a9 15		      lda	#21
     10  00e7		       8d 96 02 	      sta	TIM64T
     11  00ea
     12  00ea		       a2 00		      ldx	#0
     13  00ec		       a5 81		      lda	Variation
     14  00ee		       29 10		      and	#%00010000
     15  00f0		       f0 06		      beq	.GetPdl
     16  00f2		       e8		      inx
     17  00f3		       24 8f		      bit	CtrlType
     18  00f5		       30 01		      bmi	.GetPdl
     19  00f7		       e8		      inx
     20  00f8				   .GetPdl
     21  00f8		       b5 08		      lda	INPT0,x
     22  00fa
     23  00fa		       e6 80		      inc	Frame	; next frame
     24  00fc
      0  00fc					      TIMER_LOOP
      1  00fc					      SUBROUTINE
      2  00fc
      3  00fc		       ad 84 02    .Loop      lda	INTIM
      4  00ff		       d0 fb		      bne	.Loop
      5  0101
     26  0101
------- FILE bank1.asm
------- FILE bank1/code/vblank_logic.asm LEVEL 3 PASS 2
      0  0101					      include	bank1/code/vblank_logic.asm
      1  0101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0101							; Vertical Sync and Logic
      3  0101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0101
      0  0101					      VERT_SYNC		; 11
      1  0101					      SUBROUTINE
      2  0101
      3  0101		       a2 4a		      ldx	#VBLANK_PAL
      4  0103		       24 81		      bit	Variation
      5  0105		       10 02		      bpl	.PAL
      6  0107		       a2 2b		      ldx	#VBLANK_NTSC
      7  0109		       a9 0e	   .PAL       lda	#%1110
      8  010b		       85 02	   .Loop      sta	WSYNC
      9  010d		       85 00		      sta	VSYNC
     10  010f		       85 01		      sta	VBLANK
     11  0111		       8e 96 02 	      stx	TIM64T
     12  0114		       4a		      lsr
     13  0115		       d0 f4		      bne	.Loop
     14  0117
      6  0117
------- FILE bank1/code/music.asm LEVEL 4 PASS 2
      0  0117					      include	bank1/code/music.asm
      1  0117							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0117							; Handles the main music melody
      3  0117							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0117
      5  0117					      SUBROUTINE
      6  0117
      7  0117							; set bass frequency
      8  0117		       a7 84		      lax	MusicNote
      9  0119		       4b 1e		      asr	#%00011110
     10  011b		       4a		      lsr
     11  011c		       a8		      tay
     12  011d		       b9 5f 1c 	      lda	BassSeq,y
     13  0120		       85 18		      sta	AUDF1
     14  0122		       a0 06		      ldy	#6
     15  0124		       a9 07		      lda	#7
     16  0126		       b0 01		      bcs	.Loud
     17  0128		       4a		      lsr
     18  0129		       84 16	   .Loud      sty	AUDC1
     19  012b		       85 1a		      sta	AUDV1
     20  012d
     21  012d							; get current note offset and store in Y
     22  012d		       8a		      txa
     23  012e		       4a		      lsr
     24  012f		       4a		      lsr
     25  0130		       4a		      lsr
     26  0131		       4a		      lsr
     27  0132		       a8		      tay
     28  0133		       8a		      txa
     29  0134		       29 0f		      and	#$F
     30  0136		       18		      clc
     31  0137		       79 67 1c 	      adc	MusicSeqs,y
     32  013a		       a8		      tay
     33  013b
     34  013b		       a9 1c		      lda	#>MusicSeq0
     35  013d		       85 fb		      sta	MusicPtr+1
     36  013f		       a9 77		      lda	#<MusicSeq0
     37  0141		       85 fa		      sta	MusicPtr
     38  0143		       a2 00		      ldx	#0
     39  0145		       20 9e 18 	      jsr	SetNote2
     40  0148		       a9 32		      lda	#<MusicVlm
     41  014a		       85 fa		      sta	MusicPtr
     42  014c		       20 b0 18 	      jsr	SetVolume
     43  014f
     44  014f		       20 cb 18 	      jsr	UpdateNote
     45  0152
------- FILE bank1/code/vblank_logic.asm
------- FILE bank1/code/auto_detect.asm LEVEL 4 PASS 2
      0  0152					      include	bank1/code/auto_detect.asm
      1  0152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0152							; Automatically detect controllers
      3  0152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0152
      5  0152					      SUBROUTINE
      6  0152
      7  0152		       a5 8f		      lda	CtrlType
      8  0154		       29 20		      and	#%00100000
      9  0156		       d0 62		      bne	.EndCtrlDetect
     10  0158
     11  0158							; Y selects controller to detect, 0=P1, 1=P2
     12  0158		       a0 00		      ldy	#0
     13  015a		       a9 10		      lda	#%00010000
     14  015c		       25 81		      and	Variation
     15  015e		       f0 01		      beq	.Player1
     16  0160		       c8		      iny
     17  0161
     18  0161				   .Player1
     19  0161							; check for joystick up/down
     20  0161		       ad 80 02 	      lda	SWCHA
     21  0164		       19 78 1b 	      ora	JoyUpDnMask,y
     22  0167		       49 ff		      eor	#$FF
     23  0169		       d0 05		      bne	.SetTypeToJoy
     24  016b
     25  016b							; check for joystick fire button
     26  016b		       b9 0c 00 	      lda	INPT4,y
     27  016e		       30 0b		      bmi	.NotJoyFire
     28  0170				   .SetTypeToJoy
     29  0170		       b9 7a 1b 	      lda	SetJoyMask,y
     30  0173		       25 8f		      and	CtrlType
     31  0175		       09 20		      ora	#%00100000
     32  0177		       85 8f		      sta	CtrlType
     33  0179		       d0 2d		      bne	.NoInputDelay
     34  017b
     35  017b				   .NotJoyFire
     36  017b		       98		      tya
     37  017c		       aa		      tax
     38  017d		       f0 0e		      beq	.Plyr1Check
     39  017f		       24 8f		      bit	CtrlType
     40  0181		       10 09		      bpl	.Plyr1Joy
     41  0183		       2c 80 02 	      bit	SWCHA
     42  0186		       70 32		      bvs	.EndCtrlDetect
     43  0188		       a9 e0		      lda	#%11100000	; both controls are paddle, ignore this first fire press
     44  018a		       d0 2c		      bne	.EndP1
     45  018c				   .Plyr1Joy
     46  018c		       e8		      inx
     47  018d
     48  018d				   .Plyr1Check
     49  018d		       b5 08		      lda	INPT0,x
     50  018f		       10 23		      bpl	.NoPaddle
     51  0191
     52  0191		       a9 10		      lda	#%00010000
     53  0193		       24 8f		      bit	CtrlType
     54  0195		       f0 0a		      beq	.SetTypeToPdl
     55  0197		       a0 80		      ldy	#$80
     56  0199		       84 01		      sty	VBLANK
     57  019b		       85 01		      sta	VBLANK
     58  019d		       b5 08		      lda	INPT0,x
     59  019f		       10 13		      bpl	.NoPaddle
     60  01a1
     61  01a1				   .SetTypeToPdl
     62  01a1		       b9 7c 1b 	      lda	SetPdlMask,y
     63  01a4		       05 8f		      ora	CtrlType
     64  01a6		       85 8f		      sta	CtrlType
     65  01a8				   .NoInputDelay
     66  01a8		       24 81		      bit	Variation
     67  01aa		       50 0e		      bvc	.EndCtrlDetect
     68  01ac		       a5 8f		      lda	CtrlType
     69  01ae		       09 1f		      ora	#%00011111
     70  01b0		       85 8f		      sta	CtrlType
     71  01b2		       d0 06		      bne	.EndCtrlDetect
     72  01b4
     73  01b4				   .NoPaddle
     74  01b4		       a5 8f		      lda	CtrlType
     75  01b6		       29 ef		      and	#%11101111
     76  01b8		       85 8f	   .EndP1     sta	CtrlType
     77  01ba				   .EndCtrlDetect
     78  01ba
------- FILE bank1/code/vblank_logic.asm
------- FILE bank1/code/process_input.asm LEVEL 4 PASS 2
      0  01ba					      include	bank1/code/process_input.asm
      1  01ba							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  01ba							; Process player input
      3  01ba							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  01ba
      5  01ba					      SUBROUTINE
      6  01ba
      7  01ba		       a7 8f		      lax	CtrlType
      8  01bc		       24 81		      bit	Variation
      9  01be		       70 03		      bvs	.NoSplash
     10  01c0		       29 e0		      and	#%11100000	; force directional input to be ignored
     11  01c2		       aa		      tax
     12  01c3				   .NoSplash
     13  01c3		       29 20		      and	#%00100000
     14  01c5		       d0 03		      bne	.Detected	; branch if controller has been detected
     15  01c7		       4c c7 12 	      jmp	.NotDetected
     16  01ca
     17  01ca				   .Detected
     18  01ca		       a0 00		      ldy	#0
     19  01cc		       a5 81		      lda	Variation
     20  01ce		       29 10		      and	#%00010000
     21  01d0		       f0 04		      beq	.Plyr1
     22  01d2		       c8		      iny
     23  01d3		       8a		      txa
     24  01d4		       0a		      asl
      0  01d5					      SKIP_BYTE
      1  01d5		       80		      HEX	80
     26  01d6		       8a	   .Plyr1     txa
     27  01d7		       30 24		      bmi	.Paddle	; branch if paddle
     28  01d9
     29  01d9		       ad 80 02 	      lda	SWCHA
     30  01dc		       c0 01		      cpy	#1
     31  01de		       f0 04		      beq	.Plyr2
     32  01e0		       4a		      lsr
     33  01e1		       4a		      lsr
     34  01e2		       4a		      lsr
     35  01e3		       4a		      lsr
     36  01e4		       29 0f	   .Plyr2     and	#15
     37  01e6		       85 8f		      sta	CtrlType
     38  01e8
     39  01e8		       b9 0c 00 	      lda	INPT4,y
     40  01eb		       29 80		      and	#$80
     41  01ed		       4a		      lsr
     42  01ee		       4a		      lsr
     43  01ef		       4a		      lsr
     44  01f0		       05 8f		      ora	CtrlType
     45  01f2		       85 8f		      sta	CtrlType
     46  01f4		       8a		      txa
     47  01f5		       29 e0		      and	#%11100000
     48  01f7		       05 8f		      ora	CtrlType
     49  01f9		       85 8f		      sta	CtrlType
     50  01fb		       d0 1e		      bne	.CheckInput
     51  01fd
     52  01fd		       c0 00	   .Paddle    cpy	#0
     53  01ff		       f0 04		      beq	.GetPaddleFire
     54  0201		       8a		      txa
     55  0202		       30 01		      bmi	.GetPaddleFire
     56  0204		       c8		      iny
     57  0205				   .GetPaddleFire
     58  0205		       ad 80 02 	      lda	SWCHA
     59  0208		       39 7e 1b 	      and	PdlFireMask,y
     60  020b		       f0 03		      beq	.PaddleFire
     61  020d		       a9 1f		      lda	#%00011111
      0  020f					      SKIP_WORD
      1  020f		       0c		      HEX	0C
     63  0210				   .PaddleFire
     64  0210		       a9 0f		      lda	#%00001111
     65  0212		       85 8f		      sta	CtrlType
     66  0214		       8a		      txa
     67  0215		       29 e0		      and	#%11100000
     68  0217		       05 8f		      ora	CtrlType
     69  0219		       85 8f		      sta	CtrlType
     70  021b
     71  021b				   .CheckInput
     72  021b		       a5 8f		      lda	CtrlType
     73  021d		       4a		      lsr
     74  021e		       a8		      tay
     75  021f		       8a		      txa
     76  0220		       6a		      ror
     77  0221		       aa		      tax
     78  0222		       30 08		      bmi	.NoUp
     79  0224		       90 06		      bcc	.NoUp
     80  0226
     81  0226							; joystick up
     82  0226		       a5 90		      lda	CursorPos
     83  0228		       f0 02		      beq	.NoUp
     84  022a		       c6 90		      dec	CursorPos
     85  022c
     86  022c		       98	   .NoUp      tya
     87  022d		       4a		      lsr
     88  022e		       a8		      tay
     89  022f		       8a		      txa
     90  0230		       6a		      ror
     91  0231		       aa		      tax
     92  0232		       30 0a		      bmi	.NoDown
     93  0234		       90 08		      bcc	.NoDown
     94  0236
     95  0236							; joystick down
     96  0236		       a5 90		      lda	CursorPos
     97  0238		       c9 04		      cmp	#4
     98  023a		       f0 02		      beq	.NoDown
     99  023c		       e6 90		      inc	CursorPos
    100  023e
    101  023e		       8a	   .NoDown    txa
    102  023f		       4a		      lsr
    103  0240		       4a		      lsr
    104  0241		       aa		      tax
    105  0242		       98		      tya
    106  0243		       4a		      lsr
    107  0244		       4a		      lsr
    108  0245		       4a		      lsr
    109  0246		       8a		      txa
    110  0247		       6a		      ror
    111  0248		       30 7d		      bmi	.NoFire
    112  024a		       a5 81		      lda	Variation	; disable splash, enable menu
    113  024c		       09 40		      ora	#%01000000
    114  024e		       85 81		      sta	Variation
    115  0250		       90 75		      bcc	.NoFire
    116  0252
    117  0252							; fire pressed
    118  0252		       aa		      tax
    119  0253		       a4 90		      ldy	CursorPos
    120  0255		       d0 10		      bne	.Not0
    121  0257		       29 10		      and	#%00010000
    122  0259		       d0 07		      bne	.Back
    123  025b		       8a		      txa
    124  025c		       49 20		      eor	#%00100000
    125  025e		       85 81		      sta	Variation
    126  0260		       b0 65		      bcs	.NoFire
    127  0262		       8a	   .Back      txa
    128  0263		       29 ef		      and	#%11101111
    129  0265		       b0 11		      bcs	.SwpClr
    130  0267
    131  0267		       c0 01	   .Not0      cpy	#1
    132  0269		       d0 1f		      bne	.Not1
    133  026b		       0a		      asl
    134  026c		       0a		      asl
    135  026d		       0a		      asl
    136  026e		       b0 03		      bcs	.Next
    137  0270		       4c 0c 10    .Start     jmp	JmpGamePlay
    138  0273		       30 fb	   .Next      bmi	.Start
    139  0275		       8a		      txa
    140  0276		       09 10		      ora	#%00010000
    141  0278		       85 81	   .SwpClr    sta	Variation
    142  027a		       a5 8f		      lda	CtrlType
    143  027c		       29 df		      and	#%11011111
    144  027e		       09 1f		      ora	#%00011111
    145  0280		       85 8f		      sta	CtrlType
    146  0282		       a4 86		      ldy	CatTartColor
    147  0284		       a5 87		      lda	OtherTartColor
    148  0286		       84 87		      sty	OtherTartColor
    149  0288		       b0 3b		      bcs	.SetClr
    150  028a
    151  028a		       c0 02	   .Not1      cpy	#2
    152  028c		       d0 22		      bne	.Not2
    153  028e		       29 10		      and	#%00010000
    154  0290		       f0 0d		      beq	.DifP1
    155  0292		       8a		      txa
    156  0293		       69 00		      adc	#0
    157  0295		       09 fc		      ora	#%11111100
    158  0297		       85 81		      sta	Variation
    159  0299		       8a		      txa
    160  029a		       09 03		      ora	#%00000011
    161  029c		       4c a9 12 	      jmp	.NewVar
    162  029f		       8a	   .DifP1     txa
    163  02a0		       69 03		      adc	#3
    164  02a2		       09 f3		      ora	#%11110011
    165  02a4		       85 81		      sta	Variation
    166  02a6		       8a		      txa
    167  02a7		       09 0c		      ora	#%00001100
    168  02a9		       25 81	   .NewVar    and	Variation
    169  02ab		       85 81		      sta	Variation
    170  02ad		       4c c7 12 	      jmp	.NoFire
    171  02b0
    172  02b0		       a7 86	   .Not2      lax	CatTartColor
    173  02b2		       18		      clc
    174  02b3		       c0 04		      cpy	#4
    175  02b5		       d0 0c		      bne	.Not4
    176  02b7		       29 f0		      and	#%11110000
    177  02b9		       85 86		      sta	CatTartColor
    178  02bb		       e8		      inx
    179  02bc		       e8		      inx
    180  02bd		       8a		      txa
    181  02be		       29 0f		      and	#%00001111
    182  02c0		       05 86		      ora	CatTartColor
      0  02c2					      SKIP_WORD
      1  02c2		       0c		      HEX	0C
    184  02c3		       69 10	   .Not4      adc	#$10
    185  02c5		       85 86	   .SetClr    sta	CatTartColor
    186  02c7				   .NoFire
    187  02c7				   .NotDetected
    188  02c7
------- FILE bank1/code/vblank_logic.asm
------- FILE bank1/code/menucat_anim.asm LEVEL 4 PASS 2
      0  02c7					      include	bank1/code/menucat_anim.asm
      1  02c7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  02c7							; Menu Cat Animation Management
      3  02c7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  02c7
      5  02c7					      SUBROUTINE
      6  02c7
      7  02c7		       a7 94		      lax	MenuCatTiming
      8  02c9		       29 07		      and	#7
      9  02cb		       d0 34		      bne	.Same
     10  02cd		       8a		      txa
     11  02ce		       18		      clc
     12  02cf		       69 08		      adc	#1<<3
     13  02d1		       c9 d8		      cmp	#27<<3
     14  02d3		       d0 02		      bne	.NoRoll
     15  02d5		       a9 00		      lda	#0
     16  02d7		       85 94	   .NoRoll    sta	MenuCatTiming
     17  02d9
     18  02d9		       4a		      lsr
     19  02da		       4a		      lsr
     20  02db		       4a		      lsr
     21  02dc		       a8		      tay
     22  02dd		       24 81		      bit	Variation
     23  02df		       10 05		      bpl	.PAL
     24  02e1		       b9 37 1d 	      lda	CatTimingNTSC,y
     25  02e4		       d0 03		      bne	.NTSC
     26  02e6		       b9 51 1d    .PAL       lda	CatTimingPAL,y
     27  02e9		       65 94	   .NTSC      adc	MenuCatTiming
     28  02eb		       85 94		      sta	MenuCatTiming
     29  02ed		       e6 92		      inc	MenuCatFrame
     30  02ef
     31  02ef		       a5 92		      lda	MenuCatFrame
     32  02f1		       c9 06		      cmp	#6
     33  02f3		       d0 04		      bne	.Chk86
     34  02f5		       a9 80		      lda	#$80
     35  02f7		       d0 06		      bne	.NewMCF
     36  02f9
     37  02f9		       c9 86	   .Chk86     cmp	#$86
     38  02fb		       d0 04		      bne	.Same
     39  02fd		       a9 00		      lda	#0
     40  02ff		       85 92	   .NewMCF    sta	MenuCatFrame
     41  0301
     42  0301		       c6 94	   .Same      dec	MenuCatTiming
     43  0303
------- FILE bank1/code/vblank_logic.asm
------- FILE bank1/code/load_cat_ram.asm LEVEL 4 PASS 2
      0  0303					      include	bank1/code/load_cat_ram.asm
      1  0303							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0303							; Prepare menu cat's RAM for the display kernel
      3  0303							;
      4  0303							; Uses 239 bytes, taking a max of 1,219 cycles to complete
      5  0303							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0303
      7  0303							; select rainbow pattern to display, and set stack pointer accordingly
      8  0303		       a2 ed		      ldx	#RamBowColorsBk+19
      9  0305		       a5 92		      lda	MenuCatFrame
     10  0307		       29 02		      and	#%00000010
     11  0309		       24 92		      bit	MenuCatFrame
     12  030b		       10 02		      bpl	.NoInvert
     13  030d		       49 02		      eor	#%00000010
     14  030f				   .NoInvert
     15  030f		       d0 0e		      bne	.Rainbow1
     16  0311		       a9 e0		      lda	#%11100000
     17  0313		       85 0d		      sta	PF0
     18  0315		       a9 c1		      lda	#%11000001
     19  0317		       85 0e		      sta	PF1
     20  0319		       a9 eb		      lda	#RamBowColorsBk+17
     21  031b		       85 9b		      sta	BowColorsPfPtr
     22  031d		       d0 0d		      bne	.Rainbow2
     23  031f				   .Rainbow1
     24  031f		       ca		      dex
     25  0320		       a9 c0		      lda	#%11000000
     26  0322		       85 0d		      sta	PF0
     27  0324		       a9 e0		      lda	#%11100000
     28  0326		       85 0e		      sta	PF1
     29  0328		       a9 e9		      lda	#RamBowColorsBk+15
     30  032a		       85 9b		      sta	BowColorsPfPtr
     31  032c				   .Rainbow2
     32  032c		       a9 00		      lda	#0
     33  032e		       85 9c		      sta	BowColorsPfPtr+1
     34  0330
     35  0330		       a5 92		      lda	MenuCatFrame
     36  0332		       85 f3		      sta	RamMenuCatGfx	; save MenuCatFrame
     37  0334		       29 7f		      and	#%01111111
     38  0336		       85 92		      sta	MenuCatFrame
     39  0338		       c9 02		      cmp	#2
     40  033a		       10 01		      bpl	.Jmp2
     41  033c		       ca		      dex
     42  033d		       9a	   .Jmp2      txs
     43  033e
     44  033e							; set background color
     45  033e		       a9 08		      lda	#%1000
     46  0340		       2d 82 02 	      and	SWCHB
     47  0343		       aa		      tax
     48  0344
     49  0344		       bd 00 1b 	      lda	MenuColors,x
     50  0347		       85 ee		      sta	MenuBgColor
     51  0349		       85 d9		      sta	RamBowColorsBk-1
     52  034b		       85 da		      sta	RamBowColorsBk
     53  034d		       85 db		      sta	RamBowColorsBk+1
     54  034f		       85 ec		      sta	RamBowColorsBk+18
     55  0351		       85 ed		      sta	RamBowColorsBk+19
     56  0353		       85 ee		      sta	RamBowColorsBk+20
     57  0355
     58  0355							; set rainbow colors
     59  0355		       a0 06		      ldy	#6
     60  0357				   .SetBowColors
     61  0357		       bd 02 1b 	      lda	MenuColors+2,x
     62  035a		       48		      pha
     63  035b		       48		      pha
     64  035c		       48		      pha
     65  035d		       e8		      inx
     66  035e		       88		      dey
     67  035f		       d0 f6		      bne	.SetBowColors
     68  0361
     69  0361							; push graphics for GRP1
     70  0361		       a2 d8		      ldx	#RamMenuCatGfxR+15
     71  0363		       9a		      txs
     72  0364		       a9 19		      lda	#>MenuCatGfxPage1	; get 1st page of menu cat gfx
     73  0366		       85 96		      sta	MenuCatRamPtr+1	; and set pointer to this page
     74  0368		       a6 92		      ldx	MenuCatFrame	; get animation frame
     75  036a		       bd ad 1a 	      lda	MenuCatOffsetGfx,x	; get offset within page
     76  036d		       85 95		      sta	MenuCatRamPtr	; and set pointer address
     77  036f
     78  036f		       a0 0d		      ldy	#13
     79  0371				   .LoopGfxR
     80  0371		       b1 95		      lda	(MenuCatRamPtr),y	; get next byte of gfx
     81  0373		       48		      pha		; and push to RAM
     82  0374		       88		      dey
     83  0375		       10 fa		      bpl	.LoopGfxR
     84  0377
     85  0377		       8a		      txa		; get animation frame
     86  0378		       0a		      asl		; multiply by 2
     87  0379		       a8		      tay
     88  037a		       b9 54 1a 	      lda	MenuCatLowGfxR,y
     89  037d		       48		      pha
     90  037e		       c8		      iny
     91  037f		       b9 54 1a 	      lda	MenuCatLowGfxR,y
     92  0382		       48		      pha
     93  0383
     94  0383							; push graphics for right copies of PF2
     95  0383		       bd b3 1a 	      lda	MenuCatOffsetPf,x
     96  0386		       85 95		      sta	MenuCatRamPtr
     97  0388
     98  0388		       a0 0c		      ldy	#12
     99  038a				   .LoopPfR
    100  038a		       b1 95		      lda	(MenuCatRamPtr),y	; get next byte of gfx
    101  038c		       48		      pha		; and push to RAM
    102  038d		       88		      dey
    103  038e		       10 fa		      bpl	.LoopPfR
    104  0390
    105  0390		       8a		      txa		; get animation frame
    106  0391		       0a		      asl		; multiply by 2
    107  0392		       a8		      tay
    108  0393		       b9 60 1a 	      lda	MenuCatLowPfGfxR,y
    109  0396		       48		      pha
    110  0397		       c8		      iny
    111  0398		       b9 60 1a 	      lda	MenuCatLowPfGfxR,y
    112  039b		       48		      pha
    113  039c		       85 f6		      sta	MenuCatShift	; use highest bit for cat face shift
    114  039e
    115  039e							; push graphics for left copies of PF2
    116  039e		       8a		      txa		; get animation frame
    117  039f		       0a		      asl
    118  03a0		       0a		      asl
    119  03a1		       0a		      asl
    120  03a2		       38		      sec
    121  03a3		       e5 92		      sbc	MenuCatFrame
    122  03a5		       0a		      asl		; multiply by 14 (clears carry flag)
    123  03a6		       85 93		      sta	MenuCatFrameX14	; save to reuse later
    124  03a8		       69 34		      adc	#<MenuCatPfL	; add graphics table offset
    125  03aa		       85 95		      sta	MenuCatRamPtr	; and set pointer address
    126  03ac
    127  03ac		       a0 0e		      ldy	#14
    128  03ae				   .LoopPfL
    129  03ae		       b1 95		      lda	(MenuCatRamPtr),y
    130  03b0		       48		      pha
    131  03b1		       88		      dey
    132  03b2		       10 fa		      bpl	.LoopPfL
    133  03b4
    134  03b4							; push graphics for GRP0
    135  03b4		       a9 1a		      lda	#>MenuCatGfxPage2	; get 2nd page of menu cat gfx
    136  03b6		       85 96		      sta	MenuCatRamPtr+1	; and set pointer to this page
    137  03b8		       a5 93		      lda	MenuCatFrameX14	; get animation frame times 14
    138  03ba		       85 95		      sta	MenuCatRamPtr	; and set pointer address
    139  03bc
    140  03bc		       a0 0d		      ldy	#13
    141  03be				   .LoopGfxL
    142  03be		       b1 95		      lda	(MenuCatRamPtr),y
    143  03c0		       48		      pha
    144  03c1		       88		      dey
    145  03c2		       10 fa		      bpl	.LoopGfxL
    146  03c4
    147  03c4							; prepare graphics pointers for kernel
    148  03c4		       a9 19		      lda	#>MenuCatGfxPage1
    149  03c6		       85 98		      sta	MenuCatHmvPtrP+1
    150  03c8		       85 9a		      sta	MenuCatMslPtr+1
    151  03ca		       a9 1a		      lda	#>MenuCatGfxPage2
    152  03cc		       85 96		      sta	MenuCatHmvPtrM+1
    153  03ce
    154  03ce		       a5 93		      lda	MenuCatFrameX14	; get animation frame times 14
    155  03d0		       e0 05		      cpx	#5
    156  03d2		       d0 03		      bne	.NotFrame5
    157  03d4		       38		      sec
    158  03d5		       e9 0e		      sbc	#14
    159  03d7				   .NotFrame5
    160  03d7		       18		      clc
    161  03d8		       69 ad		      adc	#<MenuCatHmoveP
    162  03da		       85 97		      sta	MenuCatHmvPtrP
    163  03dc		       a5 93		      lda	MenuCatFrameX14	; get animation frame times 14
    164  03de		       38		      sec
    165  03df		       e5 92		      sbc	MenuCatFrame	; adjust to times 13
    166  03e1		       e0 00		      cpx	#0
    167  03e3		       f0 03		      beq	.Frame0
    168  03e5		       38		      sec
    169  03e6		       e9 0d		      sbc	#13
    170  03e8				   .Frame0
    171  03e8		       18		      clc
    172  03e9		       69 6c		      adc	#<MenuCatHmoveM
    173  03eb		       85 95		      sta	MenuCatHmvPtrM
    174  03ed		       a0 f3		      ldy	#<MenuCatMslGfx
    175  03ef		       e0 05		      cpx	#5
    176  03f1		       d0 01		      bne	.Not5
    177  03f3		       88		      dey
    178  03f4		       84 99	   .Not5      sty	MenuCatMslPtr
    179  03f6
    180  03f6		       a5 f3		      lda	RamMenuCatGfx
    181  03f8		       85 92		      sta	MenuCatFrame	; recover MenuCatFrame
    182  03fa
------- FILE bank1/code/vblank_logic.asm
------- FILE bank1/code/menu_text_prep.asm LEVEL 4 PASS 2
      0  03fa					      include	bank1/code/menu_text_prep.asm
      1  03fa							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  03fa							; Prepare variables for menu text display
      3  03fa							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  03fa
      5  03fa							; adjust menu position smoothly to where the cursor points
      6  03fa		       a6 90		      ldx	CursorPos
      7  03fc		       a5 91		      lda	MenuPos
      8  03fe		       dd 81 1b 	      cmp	Mult21,x
      9  0401		       30 0b		      bmi	.TooSml
     10  0403		       0a		      asl
     11  0404		       65 91		      adc	MenuPos
     12  0406		       7d 81 1b 	      adc	Mult21,x
     13  0409		       6a		      ror
     14  040a		       4a		      lsr
     15  040b		       4c 1a 14 	      jmp	.SetMP
     16  040e		       0a	   .TooSml    asl
     17  040f		       65 91		      adc	MenuPos
     18  0411		       7d 81 1b 	      adc	Mult21,x
     19  0414		       6a		      ror
     20  0415		       69 00		      adc	#0
     21  0417		       4a		      lsr
     22  0418		       69 00		      adc	#0
     23  041a		       85 91	   .SetMP     sta	MenuPos
     24  041c
     25  041c							; prepare variables for menu position
     26  041c		       a2 ff		      ldx	#255
     27  041e		       9a		      txs
     28  041f		       38		      sec
     29  0420				   .SbcLoop
     30  0420		       e8		      inx
     31  0421		       e9 15		      sbc	#21
     32  0423		       10 fb		      bpl	.SbcLoop
     33  0425		       69 15		      adc	#21
     34  0427		       85 ef		      sta	MenuTxtDelay
     35  0429		       a8		      tay
     36  042a		       b9 63 1b 	      lda	MenuTxtDlyTbl,y
     37  042d		       4a		      lsr
     38  042e		       08		      php
     39  042f		       90 01		      bcc	.SkipThat
     40  0431		       e8		      inx
     41  0432				   .SkipThat
     42  0432
     43  0432							; set text to be displayed in fields
     44  0432		       20 10 1b 	      jsr	GetTxtField
     45  0435		       85 f0		      sta	MenuTxtField+0
     46  0437		       20 10 1b 	      jsr	GetTxtField
     47  043a		       85 f1		      sta	MenuTxtField+1
     48  043c		       20 10 1b 	      jsr	GetTxtField
     49  043f		       85 f2		      sta	MenuTxtField+2
     50  0441
------- FILE bank1/code/vblank_logic.asm
     13  0441
      0  0441					      TIMER_LOOP
      1  0441					      SUBROUTINE
      2  0441
      3  0441		       ad 84 02    .Loop      lda	INTIM
      4  0444		       d0 fb		      bne	.Loop
      5  0446
     15  0446
------- FILE bank1.asm
------- FILE bank1/code/kernel.asm LEVEL 3 PASS 2
      0  0446					      include	bank1/code/kernel.asm
      1  0446							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0446							; Kernel
      3  0446							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0446
      5  0446		       85 02		      sta	WSYNC
      6  0448
------- FILE bank1/code/menuscore.asm LEVEL 4 PASS 2
      0  0448					      include	bank1/code/menuscore.asm
      1  0448							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0448							; Scoreboard for main menu
      3  0448							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0448
      5  0448
      6  0448
      7  0448		       a0 3e		      ldy	#62
      8  044a		       88	   .Loop1     dey
      9  044b		       85 02		      sta	WSYNC
     10  044d		       d0 fb		      bne	.Loop1
     11  044f
------- FILE bank1/code/kernel.asm
      8  044f
------- FILE bank1/code/menucat_prep.asm LEVEL 4 PASS 2
      0  044f					      include	bank1/code/menucat_prep.asm
      1  044f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  044f							; Menu Cat Prep
      3  044f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  044f							; Positions the graphics objects for the giant Nyan Cat display on the menu.
      5  044f							;
      6  044f							; Uses 64 bytes of ROM
      7  044f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  044f
      0  044f					      SLEEP	13	; 15
      1  044f				   .CYCLES    SET	13
      2  044f
      3  044f				  -	      IF	.CYCLES < 2
      4  044f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  044f				  -	      ERR
      6  044f					      ENDIF
      7  044f
      8  044f					      IF	.CYCLES & 1
      9  044f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  044f		       04 00		      nop	0
     11  0451				  -	      ELSE
     12  0451				  -	      bit	VSYNC
     13  0451					      ENDIF
     14  0451				   .CYCLES    SET	.CYCLES - 3
     15  0451					      ENDIF
     16  0451
     17  0451					      REPEAT	.CYCLES / 2
     18  0451		       ea		      nop
     17  0451					      REPEND
     18  0452		       ea		      nop
     17  0452					      REPEND
     18  0453		       ea		      nop
     17  0453					      REPEND
     18  0454		       ea		      nop
     17  0454					      REPEND
     18  0455		       ea		      nop
     19  0456					      REPEND
     10  0456
     11  0456		       a9 10		      lda	#$10	; 17
     12  0458		       85 21		      sta	HMP1	; 20	left 9 clocks
     13  045a		       0a		      asl		; 22	A = #$20
     14  045b		       85 24		      sta	HMBL	; 25	left 10 clocks
     15  045d		       85 23		      sta	HMM1	; 28	left 10 clocks
     16  045f		       a0 80		      ldy	#$80	; 30
     17  0461		       84 20		      sty	HMP0	; 33	no movement
     18  0463		       a9 90		      lda	#$90	; 35
     19  0465
     20  0465		       85 14		      sta	RESBL	; 38
     21  0467		       85 22		      sta	HMM0	; 41	left 1 clock
     22  0469		       85 10		      sta	RESP0	; 44
     23  046b		       85 12		      sta	RESM0	; 47
     24  046d		       85 13		      sta	RESM1	; 50
     25  046f		       85 11		      sta	RESP1	; 53
     26  0471
     27  0471		       a9 07		      lda	#QUAD_SIZE	; 55
     28  0473		       85 04		      sta	NUSIZ0	; 58
     29  0475		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     30  0477							; 60
     31  0477		       85 05		      sta	NUSIZ1	; 63
     32  0479		       a9 31		      lda	#$31	; 65
     33  047b		       85 0a		      sta	CTRLPF	; 68
     34  047d		       85 25		      sta	VDELP0	; 71	enable VDELP0
     35  047f		       85 2a		      sta	HMOVE	; 74	cycle 74!
     36  0481
     37  0481		       ea		      nop		; 00
     38  0482		       0a		      asl		; 02	A = #$62
     39  0483		       a2 e0		      ldx	#$E0	; 04
     40  0485		       85 20		      sta	HMP0	; 07	left 6 clocks
     41  0487		       86 22		      stx	HMM0	; 10	right 2 clocks
     42  0489		       86 21		      stx	HMP1	; 13	right 2 clocks
     43  048b		       86 23		      stx	HMM1	; 16	right 2 clocks
     44  048d		       84 24		      sty	HMBL	; 19	no movement
------- FILE bank1/code/kernel.asm
     10  048f
     11  048f		       a5 92		      lda	MenuCatFrame
     12  0491		       0a		      asl
     13  0492		       c9 04		      cmp	#4
     14  0494		       30 06		      bmi	.HiCat
     15  0496		       85 02		      sta	WSYNC
     16  0498		       85 02		      sta	WSYNC
     17  049a		       85 02		      sta	WSYNC
     18  049c		       85 02	   .HiCat     sta	WSYNC
     19  049e		       ea		      nop		; 02
     20  049f
      0  049f					      NEXT_PAGE
      1  049f					      SUBROUTINE
      2  049f
      3  049f		       4c 00 15 	      jmp	.NextPage
      4  0500		       00 00 00 00*	      ALIGN	$100
      5  0500				   .NextPage
      6  0500
     22  0500
------- FILE bank1/code/menucat1_4.asm LEVEL 4 PASS 2
      0  0500					      include	bank1/code/menucat1_4.asm
      1  0500							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0500							; Menu Cat Kernel (Blocks 1-3)
      3  0500							;
      4  0500							; This kernel draws blocks 1-3 of the cat in the menu display.
      5  0500							;
      6  0500							; 70 bytes
      7  0500							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  0500
      9  0500							; 16 bytes
     10  0500		       85 02		      sta	WSYNC	;	2
     11  0502		       a9 07		      lda	#QUAD_SIZE	; 02	2
     12  0504		       8d 04 00 	      sta.w	NUSIZ0	; 06	3
     13  0507		       a0 0b		      ldy	#11	; 08	2
     14  0509		       88	   .LP	      dey		; 59	1
     15  050a		       c0 03		      cpy	#3	; 61	2
     16  050c		       d0 fb		      bne	.LP	; 63	2
      0  050e					      SLEEP	2	; 65	1
      1  050e				   .CYCLES    SET	2
      2  050e
      3  050e				  -	      IF	.CYCLES < 2
      4  050e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  050e				  -	      ERR
      6  050e					      ENDIF
      7  050e
      8  050e				  -	      IF	.CYCLES & 1
      9  050e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  050e				  -	      nop	0
     11  050e				  -	      ELSE
     12  050e				  -	      bit	VSYNC
     13  050e				  -	      ENDIF
     14  050e				  -.CYCLES    SET	.CYCLES - 3
     15  050e					      ENDIF
     16  050e
     17  050e					      REPEAT	.CYCLES / 2
     18  050e		       ea		      nop
     19  050f					      REPEND
     18  050f		       4c 1c 15 	      jmp	.Enter1_3	; 68	2
     19  0512
     20  0512				   .Loop
     21  0512
     22  0512		       85 09		      sta	COLUBK	; 56	2
     23  0514		       85 02		      sta	WSYNC	; 00	2
     24  0516
      0  0516					      SLEEP	4	; 04	2
      1  0516				   .CYCLES    SET	4
      2  0516
      3  0516				  -	      IF	.CYCLES < 2
      4  0516				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0516				  -	      ERR
      6  0516					      ENDIF
      7  0516
      8  0516				  -	      IF	.CYCLES & 1
      9  0516				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0516				  -	      nop	0
     11  0516				  -	      ELSE
     12  0516				  -	      bit	VSYNC
     13  0516				  -	      ENDIF
     14  0516				  -.CYCLES    SET	.CYCLES - 3
     15  0516					      ENDIF
     16  0516
     17  0516					      REPEAT	.CYCLES / 2
     18  0516		       ea		      nop
     17  0516					      REPEND
     18  0517		       ea		      nop
     19  0518					      REPEND
     26  0518		       d0 0d		      bne	.Skip	; 07	2
     27  051a
     28  051a				   MenuCatKernel1_3
     29  051a
     30  051a							; 10 bytes
      0  051a					      SLEEP	3	; 68	2
      1  051a				   .CYCLES    SET	3
      2  051a
      3  051a				  -	      IF	.CYCLES < 2
      4  051a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  051a				  -	      ERR
      6  051a					      ENDIF
      7  051a
      8  051a					      IF	.CYCLES & 1
      9  051a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  051a		       04 00		      nop	0
     11  051c				  -	      ELSE
     12  051c				  -	      bit	VSYNC
     13  051c					      ENDIF
     14  051c				   .CYCLES    SET	.CYCLES - 3
     15  051c					      ENDIF
     16  051c
     17  051c				  -	      REPEAT	.CYCLES / 2
     18  051c				  -	      nop
     19  051c					      REPEND
     32  051c				   .Enter1_3
     33  051c		       84 1f		      sty	ENABL	; 71	2
     34  051e		       a2 03		      ldx	#3	; 73	2
     35  0520		       85 2a		      sta	HMOVE	; 00	2
     36  0522
     37  0522							; 4 bytes
     38  0522		       b9 31 19 	      lda	MenuCatTopGfxL,y	; 04	2
     39  0525		       85 1b		      sta	GRP0	; 07	2
     40  0527
     41  0527				   .Skip
     42  0527
     43  0527							; 8 bytes
     44  0527		       b9 ea 00 	      lda	RamBowColorsBk+16,y	; 11	2
     45  052a		       85 09		      sta	COLUBK	; 14	2
     46  052c		       b1 9b		      lda	(BowColorsPfPtr),y	; 19	2
     47  052e		       85 08		      sta	COLUPF	; 22	2
     48  0530
     49  0530							; 8 bytes
     50  0530		       b9 2d 19 	      lda	MenuCatTopGfxR,y	; 26	2
     51  0533		       85 1c		      sta	GRP1	; 29	2
     52  0535		       b9 00 19 	      lda	MenuCatTopPf,y	; 33	2
     53  0538		       85 0f		      sta	PF2	; 36	2
     54  053a
     55  053a							; 17 bytes
     56  053a		       a5 86		      lda	CatTartColor	; 39	2
     57  053c		       85 09		      sta	COLUBK	; 42	2
     58  053e		       a5 ee		      lda	MenuBgColor	; 45	2
     59  0540		       85 08		      sta	COLUPF	; 48	2
     60  0542		       ca		      dex		; 50	1
     61  0543		       d0 cd		      bne	.Loop	; 53/52	2
     62  0545		       a2 25		      ldx	#DOUBLE_SIZE | MSL_SIZE_4
     63  0547							; 54	2
     64  0547		       85 09		      sta	COLUBK	; 57	2
     65  0549		       86 04		      stx	NUSIZ0	; 60	2
     66  054b
     67  054b							; 5 bytes
     68  054b		       88		      dey		; 62	1
     69  054c		       d0 cc		      bne	MenuCatKernel1_3	; 65/64	2
     70  054e
     71  054e
     72  054e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  054e							; Menu Cat Kernel (Block 4)
     74  054e							;
     75  054e							; This kernel draws block 4 of the cat in the menu display.
     76  054e							;
     77  054e							; ? bytes
     78  054e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  054e
     80  054e		       a2 03		      ldx	#3	; 66	2
     81  0550
     82  0550		       ad 31 19 	      lda	MenuCatTopGfxL	; 69	2
     83  0553		       85 1b		      sta	GRP0	; 72	2
     84  0555		       8d 2a 00 	      sta.w	HMOVE	; 00	3
     85  0558
      0  0558					      SLEEP	3	; 03	2
      1  0558				   .CYCLES    SET	3
      2  0558
      3  0558				  -	      IF	.CYCLES < 2
      4  0558				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0558				  -	      ERR
      6  0558					      ENDIF
      7  0558
      8  0558					      IF	.CYCLES & 1
      9  0558					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0558		       04 00		      nop	0
     11  055a				  -	      ELSE
     12  055a				  -	      bit	VSYNC
     13  055a					      ENDIF
     14  055a				   .CYCLES    SET	.CYCLES - 3
     15  055a					      ENDIF
     16  055a
     17  055a				  -	      REPEAT	.CYCLES / 2
     18  055a				  -	      nop
     19  055a					      REPEND
     87  055a				   .Loop4
     88  055a		       a5 ea		      lda	RamBowColorsBk+16	; 06	2
     89  055c		       85 09		      sta	COLUBK	; 09	2
     90  055e		       b1 9b		      lda	(BowColorsPfPtr),y	; 14	2
     91  0560		       85 08		      sta	COLUPF	; 17	2
     92  0562
     93  0562		       ad 2d 19 	      lda	MenuCatTopGfxR	; 20	2
     94  0565		       85 1c		      sta	GRP1	; 23	2
     95  0567
     96  0567		       86 20		      stx	HMP0	; 26	2
     97  0569		       86 24		      stx	HMBL	; 29	2
     98  056b
      0  056b					      SLEEP	6	; 36	4
      1  056b				   .CYCLES    SET	6
      2  056b
      3  056b				  -	      IF	.CYCLES < 2
      4  056b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  056b				  -	      ERR
      6  056b					      ENDIF
      7  056b
      8  056b				  -	      IF	.CYCLES & 1
      9  056b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  056b				  -	      nop	0
     11  056b				  -	      ELSE
     12  056b				  -	      bit	VSYNC
     13  056b				  -	      ENDIF
     14  056b				  -.CYCLES    SET	.CYCLES - 3
     15  056b					      ENDIF
     16  056b
     17  056b					      REPEAT	.CYCLES / 2
     18  056b		       ea		      nop
     17  056b					      REPEND
     18  056c		       ea		      nop
     17  056c					      REPEND
     18  056d		       ea		      nop
     19  056e					      REPEND
    100  056e
    101  056e		       a5 86		      lda	CatTartColor	; 39	2
    102  0570		       85 09		      sta	COLUBK	; 42	2
    103  0572		       a5 ee		      lda	MenuBgColor	; 45	2
    104  0574		       85 08		      sta	COLUPF	; 48	2
    105  0576
    106  0576		       38		      sec		; 50	1
    107  0577		       ca		      dex		; 52	1
    108  0578
    109  0578		       8d 09 00 	      sta.w	COLUBK	; 56	3
    110  057b
    111  057b		       f0 04		      beq	.Exit4	; 59/58	2
    112  057d		       85 02		      sta	WSYNC	; 00	2
    113  057f		       d0 d9		      bne	.Loop4	; 03	2
    114  0581
    115  0581				   .Exit4
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat5.asm LEVEL 4 PASS 2
      0  0581					      include	bank1/code/menucat5.asm
      1  0581							;
      2  0581
      3  0581		       a5 f6		      lda	MenuCatShift	; 62	2
      4  0583		       10 01		      bpl	.ClearHmove	; 65/64	2
      0  0585					      SKIP_WORD		; 68	1
      1  0585		       0c		      HEX	0C
      6  0586				   .ClearHmove
      7  0586		       85 2b		      sta	HMCLR	; 68	2
      8  0588
      9  0588		       a5 9b		      lda	BowColorsPfPtr	; 71	2
     10  058a		       e9 0d		      sbc	#13	; 73	2
     11  058c		       85 9b		      sta	BowColorsPfPtr	; 00	2
     12  058e
     13  058e		       85 2a		      sta	HMOVE	; 03	2
     14  0590		       85 9b		      sta	BowColorsPfPtr	; 06	2
     15  0592		       a0 0c		      ldy	#12	; 08	2
     16  0594
     17  0594							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  0594
     19  0594							; 10 bytes
     20  0594		       a5 e9		      lda	RamBowColorsBk+15	; 11	2
     21  0596		       85 09		      sta	COLUBK	; 14	2
     22  0598		       b1 9b		      lda	(BowColorsPfPtr),y	; 19	2
     23  059a		       85 08		      sta	COLUPF	; 22	2
     24  059c		       85 f5		      sta	RainbowColorPf	; 25	2
     25  059e
     26  059e							; 7 bytes
     27  059e		       a5 d8		      lda	RamMenuCatGfxR+15	; 28	2
     28  05a0		       85 1c		      sta	GRP1	; 31	2
     29  05a2		       4a		      lsr		; 33	1
     30  05a3		       85 1d		      sta	ENAM0	; 36	2
     31  05a5
     32  05a5							; 4 bytes
     33  05a5		       a5 86		      lda	CatTartColor	; 39	2
     34  05a7		       85 09		      sta	COLUBK	; 42	2
     35  05a9
     36  05a9							; 5 bytes
     37  05a9		       a5 d7		      lda	RamMenuCatGfxR+14	; 45	2
     38  05ab		       85 f3		      sta	RamMenuCatGfx	; 48	2
     39  05ad
     40  05ad							; 10 bytes
     41  05ad		       a5 ee		      lda	MenuBgColor	; 51	2
     42  05af		       85 08		      sta	COLUPF	; 54	2
     43  05b1		       85 09		      sta	COLUBK	; 57	2
     44  05b3		       85 2b		      sta	HMCLR	; 60	2
     45  05b5		       85 02		      sta	WSYNC	; 00	2
     46  05b7
     47  05b7							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  05b7
     49  05b7							; 8 bytes
     50  05b7		       a5 e9		      lda	RamBowColorsBk+15	; 03	2
     51  05b9		       85 09		      sta	COLUBK	; 06	2
     52  05bb		       a5 f5		      lda	RainbowColorPf	; 09	2
     53  05bd		       85 08		      sta	COLUPF	; 12	2
     54  05bf
     55  05bf							; 8 bytes
     56  05bf		       b1 95		      lda	(MenuCatHmvPtrM),y	; 17	2
     57  05c1		       85 22		      sta	HMM0	; 20	2
     58  05c3		       0a		      asl		; 22	1
     59  05c4		       0a		      asl		; 24	1
     60  05c5		       0a		      asl		; 26	1
     61  05c6		       0a		      asl		; 28	1
     62  05c7		       85 23		      sta	HMM1	; 31
     63  05c9
     64  05c9							; 11 bytes
      0  05c9					      SLEEP	2	; 33	3
      1  05c9				   .CYCLES    SET	2
      2  05c9
      3  05c9				  -	      IF	.CYCLES < 2
      4  05c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05c9				  -	      ERR
      6  05c9					      ENDIF
      7  05c9
      8  05c9				  -	      IF	.CYCLES & 1
      9  05c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05c9				  -	      nop	0
     11  05c9				  -	      ELSE
     12  05c9				  -	      bit	VSYNC
     13  05c9				  -	      ENDIF
     14  05c9				  -.CYCLES    SET	.CYCLES - 3
     15  05c9					      ENDIF
     16  05c9
     17  05c9					      REPEAT	.CYCLES / 2
     18  05c9		       ea		      nop
     19  05ca					      REPEND
     66  05ca		       a5 86		      lda	CatTartColor	; 36	2
     67  05cc		       85 09		      sta	COLUBK	; 39	2
     68  05ce
     69  05ce		       b1 99		      lda	(MenuCatMslPtr),y	; 44	2
     70  05d0		       85 f4		      sta	RamMenuCatMissile	; 47	2
     71  05d2
     72  05d2							; 8 bytes
     73  05d2		       a5 ee		      lda	MenuBgColor	; 50	2
     74  05d4		       85 08		      sta	COLUPF	; 53	2
     75  05d6		       85 09		      sta	COLUBK	; 56	2
     76  05d8		       85 02		      sta	WSYNC	; 00	2
     77  05da
     78  05da							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     79  05da
     80  05da							; 8 bytes
     81  05da		       a5 e9		      lda	RamBowColorsBk+15	; 03	2
     82  05dc		       85 09		      sta	COLUBK	; 06	2
     83  05de		       a5 f5		      lda	RainbowColorPf	; 09	2
     84  05e0		       85 08		      sta	COLUPF	; 12	2
     85  05e2
     86  05e2							; 11 bytes
      0  05e2					      SLEEP	20	; 32	10
      1  05e2				   .CYCLES    SET	20
      2  05e2
      3  05e2				  -	      IF	.CYCLES < 2
      4  05e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  05e2				  -	      ERR
      6  05e2					      ENDIF
      7  05e2
      8  05e2				  -	      IF	.CYCLES & 1
      9  05e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  05e2				  -	      nop	0
     11  05e2				  -	      ELSE
     12  05e2				  -	      bit	VSYNC
     13  05e2				  -	      ENDIF
     14  05e2				  -.CYCLES    SET	.CYCLES - 3
     15  05e2					      ENDIF
     16  05e2
     17  05e2					      REPEAT	.CYCLES / 2
     18  05e2		       ea		      nop
     17  05e2					      REPEND
     18  05e3		       ea		      nop
     17  05e3					      REPEND
     18  05e4		       ea		      nop
     17  05e4					      REPEND
     18  05e5		       ea		      nop
     17  05e5					      REPEND
     18  05e6		       ea		      nop
     17  05e6					      REPEND
     18  05e7		       ea		      nop
     17  05e7					      REPEND
     18  05e8		       ea		      nop
     17  05e8					      REPEND
     18  05e9		       ea		      nop
     17  05e9					      REPEND
     18  05ea		       ea		      nop
     17  05ea					      REPEND
     18  05eb		       ea		      nop
     19  05ec					      REPEND
     88  05ec		       88		      dey		; 34	1
     89  05ed
     90  05ed							; 6 bytes
     91  05ed		       a5 86		      lda	CatTartColor	; 37	2
     92  05ef		       85 09		      sta	COLUBK	; 40	2
     93  05f1
     94  05f1							; 12 bytes
     95  05f1		       a2 ff		      ldx	#$FF	; 42	2
     96  05f3		       a5 ee		      lda	MenuBgColor	; 45	3
     97  05f5		       85 08		      sta	COLUPF	; 48	2
     98  05f7		       86 1f		      stx	ENABL	; 51	2
     99  05f9		       86 1e		      stx	ENAM1	; 54	2
    100  05fb		       85 09		      sta	COLUBK	; 57	2
    101  05fd		       4c 1a 16 	      jmp	.Enter6_17	; 60	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat6_17.asm LEVEL 4 PASS 2
      0  0600					      include	bank1/code/menucat6_17.asm
      1  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0600							; Menu Cat Kernel (Blocks 6-17)
      3  0600							;
      4  0600							; This kernel draws blocks 6-17 of the cat in the menu display.
      5  0600							; Every 3 scanlines, P0, M0, and M1 are moved, M0 is resized and either enabled
      6  0600							; or disabled, GRP0 and GRP1 are updated, and both rainbow colors are changed.
      7  0600							;
      8  0600							; 179 bytes
      9  0600							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0600
     11  0600					      ALIGN	$100
     12  0600
     13  0600				   MenuCatKernel6_17
     14  0600
     15  0600							; 24 bytes
     16  0600		       b9 af 00 	      lda	RamMenuCatPfL+4,y	; 28	3 - get left PF2 copy gfx
     17  0603		       85 0f		      sta	PF2	; 31	2 - set PF2
     18  0605		       a9 08		      lda	#COL_CAT_FACE	; 33	2 - get cat face/tail/paws color
     19  0607		       a6 86		      ldx	CatTartColor	; 36	2 - get cat body color
     20  0609		       85 09		      sta	COLUBK	; 39	2 - set cat face/tail/paws color
     21  060b		       8e 08 00 	      stx.w	COLUPF	; 43	3 - set cat body color
     22  060e		       b9 be 00 	      lda	RamMenuCatPfR+4,y	; 47	3 - get right PF2 copy gfx
     23  0611		       85 0f		      sta	PF2	; 50	2 - set PF2
     24  0613		       a5 ee		      lda	MenuBgColor	; 53	2 - get BG color for palette (NTSC/PAL)
     25  0615		       85 08		      sta	COLUPF	; 56	2 - set both colors
     26  0617		       8d 09 00 	      sta.w	COLUBK	; 60	3 - to BG color
     27  061a
     28  061a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  061a
     30  061a				   .Enter6_17		; enter sandman
     31  061a
     32  061a							; 14 bytes
     33  061a		       a5 f3		      lda	RamMenuCatGfx	; 63	2 - get preloaded gfx
     34  061c		       85 1c		      sta	GRP1	; 66	2 - use for P1
     35  061e		       a5 f4		      lda	RamMenuCatMissile	; 69	2 - get preloaded data
     36  0620		       85 1d		      sta	ENAM0	; 72	2 - use bit #1 for M0 enable/disable
     37  0622		       85 2a		      sta	HMOVE	; 75	2 - move objects
     38  0624		       29 fd		      and	#%11111101	; 01	2 - clear bit 1 for correct NUSIZ value
     39  0626		       85 04		      sta	NUSIZ0	; 04	2 - set size of M0 (double player size)
     40  0628
     41  0628							; 12 bytes
     42  0628		       b9 dd 00 	      lda	RamBowColorsBk+3,y	; 08	3 - get this block's rainbow BG color
     43  062b		       85 09		      sta	COLUBK	; 11	2 - set BG color
     44  062d		       85 f5		      sta	RainbowColorBk	; 14	2 - save for later
     45  062f		       b3 9b		      lax	(BowColorsPfPtr),y	; 19	2 - get this block's rainbow PF color
     46  0631		       86 08		      stx	COLUPF	; 22	2 - set PF color
     47  0633		       9a		      txs		; 24	1 - save for later
     48  0634
     49  0634							; 26 bytes
     50  0634		       b9 ae 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     51  0637		       85 0f		      sta	PF2	; 31	2
     52  0639		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     53  063b		       a6 86		      ldx	CatTartColor	; 36	2
     54  063d		       85 09		      sta	COLUBK	; 39	2
     55  063f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     56  0642		       b9 bd 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     57  0645		       85 0f		      sta	PF2	; 50	2
     58  0647		       a5 ee		      lda	MenuBgColor	; 53	2
     59  0649		       85 08		      sta	COLUPF	; 56	2
     60  064b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     61  064e
     62  064e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  064e
     64  064e							; 10 bytes
     65  064e		       b1 95		      lda	(MenuCatHmvPtrM),y	; 65	2 - get next block's missile HMOVE data
     66  0650		       85 22		      sta	HMM0	; 68	2 - use left nybble for HMM0
     67  0652		       0a		      asl		; 70	1
     68  0653		       0a		      asl		; 72	1
     69  0654		       0a		      asl		; 74	1
     70  0655		       0a		      asl		; 00	1
     71  0656		       85 23		      sta	HMM1	; 03	2 - use right nybble for HMM1
     72  0658
     73  0658							; 7 bytes
     74  0658		       a5 f5		      lda	RainbowColorBk	; 06	2 - recover BG rainbow color
     75  065a		       85 09		      sta	COLUBK	; 09	2 - set COLUBK
     76  065c		       ba		      tsx		; 11	1 - recover PF rainbow color
     77  065d		       86 08		      stx	COLUPF	; 14	2 - set COLUPF
     78  065f
     79  065f							; 5 bytes
     80  065f		       b1 97		      lda	(MenuCatHmvPtrP),y	; 19	2 - get next block's player HMOVE data
     81  0661		       85 20		      sta	HMP0	; 22	2 - set HMP0 (P1 isn't moved in kernel)
     82  0663		       ea		      nop		; 24	1
     83  0664
     84  0664							; 26 bytes
     85  0664		       b9 ae 00 	      lda	RamMenuCatPfL+3,y	; 28	3
     86  0667		       85 0f		      sta	PF2	; 31	2
     87  0669		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     88  066b		       a6 86		      ldx	CatTartColor	; 36	2
     89  066d		       85 09		      sta	COLUBK	; 39	2
     90  066f		       8e 08 00 	      stx.w	COLUPF	; 43	3
     91  0672		       b9 bd 00 	      lda	RamMenuCatPfR+3,y	; 47	3
     92  0675		       85 0f		      sta	PF2	; 50	2
     93  0677		       a5 ee		      lda	MenuBgColor	; 53	2
     94  0679		       85 08		      sta	COLUPF	; 56	2
     95  067b		       8d 09 00 	      sta.w	COLUBK	; 60	3
     96  067e
     97  067e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  067e
     99  067e							; 14 bytes
    100  067e		       b9 9f 00 	      lda	RamMenuCatGfxL+2,y	; 64	3 - get next block's P0 gfx
    101  0681		       85 1b		      sta	GRP0	; 67	2 - set GRP0 (VDELP0 is on)
    102  0683		       b9 cb 00 	      lda	RamMenuCatGfxR+2,y	; 71	3 - get next block's P1 gfx
    103  0686		       85 f3		      sta	RamMenuCatGfx	; 74	2 - save in RAM
    104  0688		       b1 99		      lda	(MenuCatMslPtr),y	; 03	2 - get next block's M0 size/enable data
    105  068a		       85 f4		      sta	RamMenuCatMissile	; 06	2 - save in RAM
    106  068c
    107  068c							; 7 bytes
    108  068c		       a5 f5		      lda	RainbowColorBk	; 09	2
    109  068e		       85 09		      sta	COLUBK	; 12	2
    110  0690		       ba		      tsx		; 14	1
    111  0691		       86 08		      stx	COLUPF	; 17	2
    112  0693
    113  0693							; 6 bytes
    114  0693		       88		      dey		; 19	1 - dec y for next kernel block
    115  0694		       30 03		      bmi	.Exit	; 22/21	2 - branch out if done
    116  0696		       4c 00 16 	      jmp	MenuCatKernel6_17	; 24	3 - branch back if not
    117  0699
    118  0699				   .Exit
    119  0699
    120  0699							; 25 bytes
    121  0699		       4c 00 17 	      jmp	.Align6_17	; 25	2
    122  069c
    123  0700		       00 00 00 00*	      ALIGN	$100
    124  0700				   .Align6_17
    125  0700
    126  0700		       a5 ae		      lda	RamMenuCatPfL+3	; 28	2
    127  0702		       85 0f		      sta	PF2	; 31	2
    128  0704		       a9 08		      lda	#COL_CAT_FACE	; 33	2
    129  0706		       a6 86		      ldx	CatTartColor	; 36	2
    130  0708		       85 09		      sta	COLUBK	; 39	2
    131  070a		       ea		      nop		; 41	1
    132  070b		       86 08		      stx	COLUPF	; 44	2
    133  070d		       a5 bd		      lda	RamMenuCatPfR+3	; 47	2
    134  070f		       85 0f		      sta	PF2	; 50	2
    135  0711		       a5 ee		      lda	MenuBgColor	; 53	2
    136  0713		       85 08		      sta	COLUPF	; 56	2
    137  0715		       85 09		      sta	COLUBK	; 59	2
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat18.asm LEVEL 4 PASS 2
      0  0717					      include	bank1/code/menucat18.asm
      1  0717
      2  0717							; 59
      3  0717		       84 1d		      sty	ENAM0	; 62	2
      4  0719		       a5 f3		      lda	RamMenuCatGfx	; 65	2
      5  071b		       85 1c		      sta	GRP1	; 68	2
      6  071d		       a9 60		      lda	#$60	; 70	2
      7  071f		       85 21		      sta	HMP1	; 73	2
      8  0721		       85 2a		      sta	HMOVE	; 00	2
      9  0723
     10  0723		       a9 15		      lda	#DOUBLE_SIZE | MSL_SIZE_2
     11  0725							; 02	2
     12  0725		       85 04		      sta	NUSIZ0	; 05	2
     13  0727
     14  0727		       a5 dc		      lda	RamBowColorsBk+2	; 08	2
     15  0729		       85 09		      sta	COLUBK	; 11	2
     16  072b		       85 08		      sta	COLUPF	; 14	2
     17  072d
     18  072d		       a0 02		      ldy	#2	; 16	2
     19  072f		       ea		      nop		; 18	1
     20  0730		       a6 ee		      ldx	MenuBgColor	; 21	2
     21  0732		       9a		      txs		; 23	1
     22  0733
     23  0733				   .Loop18
     24  0733
     25  0733		       a5 ad		      lda	RamMenuCatPfL+2	; 26	2
     26  0735		       85 0f		      sta	PF2	; 29	2
     27  0737
     28  0737		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     29  0739		       a2 00		      ldx	#0	; 33	2
     30  073b		       86 1f		      stx	ENABL	; 36	2
     31  073d		       85 09		      sta	COLUBK	; 39	2
     32  073f		       86 08		      stx	COLUPF	; 42	2
     33  0741		       85 12		      sta	RESM0	; 45	2
     34  0743		       a5 bc		      lda	RamMenuCatPfR+2	; 48	2
     35  0745		       85 0f		      sta	PF2	; 51	2
     36  0747		       ba		      tsx		; 53	1
     37  0748		       86 08		      stx	COLUPF	; 56	2
     38  074a		       86 09		      stx	COLUBK	; 59	2
     39  074c		       88		      dey		; 61	1
     40  074d		       f0 16		      beq	.Exit18	; 64/63	2
     41  074f
      0  074f					      SLEEP	8	; 71	2
      1  074f				   .CYCLES    SET	8
      2  074f
      3  074f				  -	      IF	.CYCLES < 2
      4  074f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  074f				  -	      ERR
      6  074f					      ENDIF
      7  074f
      8  074f				  -	      IF	.CYCLES & 1
      9  074f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  074f				  -	      nop	0
     11  074f				  -	      ELSE
     12  074f				  -	      bit	VSYNC
     13  074f				  -	      ENDIF
     14  074f				  -.CYCLES    SET	.CYCLES - 3
     15  074f					      ENDIF
     16  074f
     17  074f					      REPEAT	.CYCLES / 2
     18  074f		       ea		      nop
     17  074f					      REPEND
     18  0750		       ea		      nop
     17  0750					      REPEND
     18  0751		       ea		      nop
     17  0751					      REPEND
     18  0752		       ea		      nop
     19  0753					      REPEND
     43  0753
     44  0753		       a5 dc		      lda	RamBowColorsBk+2	; 74	2
     45  0755		       85 09		      sta	COLUBK	; 01	2
     46  0757		       85 08		      sta	COLUPF	; 04	2
     47  0759
     48  0759		       84 f5		      sty	RainbowColorBk	; 07
     49  075b		       a0 0d		      ldy	#13	; 09
     50  075d		       b1 97		      lda	(MenuCatHmvPtrP),y	; 14
     51  075f		       85 21		      sta	HMP1	; 17
     52  0761		       a4 f5		      ldy	RainbowColorBk	; 20
     53  0763
     54  0763		       d0 ce		      bne	.Loop18	; 23	2
     55  0765
     56  0765				   .Exit18		; 64
     57  0765
     58  0765		       85 02		      sta	WSYNC	; 00
     59  0767
     60  0767		       a5 dc		      lda	RamBowColorsBk+2	; 03
     61  0769		       85 09		      sta	COLUBK	; 06
     62  076b		       85 08		      sta	COLUPF	; 09
     63  076d
     64  076d		       a5 9b		      lda	BowColorsPfPtr	; 12
     65  076f		       38		      sec		; 14
     66  0770		       e9 03		      sbc	#3	; 16
     67  0772		       85 9b		      sta	BowColorsPfPtr	; 19
      0  0774					      SLEEP	4	; 23
      1  0774				   .CYCLES    SET	4
      2  0774
      3  0774				  -	      IF	.CYCLES < 2
      4  0774				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0774				  -	      ERR
      6  0774					      ENDIF
      7  0774
      8  0774				  -	      IF	.CYCLES & 1
      9  0774				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0774				  -	      nop	0
     11  0774				  -	      ELSE
     12  0774				  -	      bit	VSYNC
     13  0774				  -	      ENDIF
     14  0774				  -.CYCLES    SET	.CYCLES - 3
     15  0774					      ENDIF
     16  0774
     17  0774					      REPEAT	.CYCLES / 2
     18  0774		       ea		      nop
     17  0774					      REPEND
     18  0775		       ea		      nop
     19  0776					      REPEND
     69  0776
     70  0776		       a5 ad		      lda	RamMenuCatPfL+2	; 26	2
     71  0778		       85 0f		      sta	PF2	; 29	2
     72  077a
     73  077a		       a9 08		      lda	#COL_CAT_FACE	; 31	2
     74  077c		       a2 00		      ldx	#0	; 33	2
     75  077e		       86 1f		      stx	ENABL	; 36	2
     76  0780		       85 09		      sta	COLUBK	; 39	2
     77  0782		       86 08		      stx	COLUPF	; 42	2
     78  0784		       85 12		      sta	RESM0	; 45	2
     79  0786		       a5 bc		      lda	RamMenuCatPfR+2	; 48	2
     80  0788		       85 0f		      sta	PF2	; 51	2
     81  078a		       ba		      tsx		; 53	1
     82  078b		       86 08		      stx	COLUPF	; 56	2
     83  078d		       86 09		      stx	COLUBK	; 59	2
     84  078f
      0  078f					      SLEEP	5	; 64
      1  078f				   .CYCLES    SET	5
      2  078f
      3  078f				  -	      IF	.CYCLES < 2
      4  078f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  078f				  -	      ERR
      6  078f					      ENDIF
      7  078f
      8  078f					      IF	.CYCLES & 1
      9  078f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  078f		       04 00		      nop	0
     11  0791				  -	      ELSE
     12  0791				  -	      bit	VSYNC
     13  0791					      ENDIF
     14  0791				   .CYCLES    SET	.CYCLES - 3
     15  0791					      ENDIF
     16  0791
     17  0791					      REPEAT	.CYCLES / 2
     18  0791		       ea		      nop
     19  0792					      REPEND
------- FILE bank1/code/kernel.asm
------- FILE bank1/code/menucat19_20.asm LEVEL 4 PASS 2
      0  0792					      include	bank1/code/menucat19_20.asm
      1  0792							;
      2  0792
      3  0792		       a0 01		      ldy	#1	; 66	2
      4  0794
      5  0794				   MenuCatKernel19_20
      6  0794
      7  0794		       b9 9d 00 	      lda	RamMenuCatGfxL,y	; 70	3
      8  0797		       85 1b		      sta	GRP0	; 73	2
      9  0799		       85 2a		      sta	HMOVE	; 00	2
     10  079b		       b9 c9 00 	      lda	RamMenuCatGfxR,y	; 04	3
     11  079e		       85 1c		      sta	GRP1	; 07	2
     12  07a0
     13  07a0		       b9 da 00 	      lda	RamBowColorsBk,y	; 11	3
     14  07a3		       85 09		      sta	COLUBK	; 14	2
     15  07a5		       b1 9b		      lda	(BowColorsPfPtr),y	; 19	2
     16  07a7		       85 08		      sta	COLUPF	; 22	2
     17  07a9		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 26	3
     18  07ac		       85 0f		      sta	PF2	; 29	2
      0  07ae					      SLEEP	2	; 31	1
      1  07ae				   .CYCLES    SET	2
      2  07ae
      3  07ae				  -	      IF	.CYCLES < 2
      4  07ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  07ae				  -	      ERR
      6  07ae					      ENDIF
      7  07ae
      8  07ae				  -	      IF	.CYCLES & 1
      9  07ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  07ae				  -	      nop	0
     11  07ae				  -	      ELSE
     12  07ae				  -	      bit	VSYNC
     13  07ae				  -	      ENDIF
     14  07ae				  -.CYCLES    SET	.CYCLES - 3
     15  07ae					      ENDIF
     16  07ae
     17  07ae					      REPEAT	.CYCLES / 2
     18  07ae		       ea		      nop
     19  07af					      REPEND
     20  07af
     21  07af		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     22  07b1		       a6 ee		      ldx	MenuBgColor	; 36	2
     23  07b3		       85 09		      sta	COLUBK	; 39	2
     24  07b5		       8e 08 00 	      stx.w	COLUPF	; 43	3
     25  07b8		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     26  07bb		       85 0f		      sta	PF2	; 50	2
     27  07bd
     28  07bd		       85 2b		      sta	HMCLR	; 53	2
      0  07bf					      SLEEP	2	; 55	1
      1  07bf				   .CYCLES    SET	2
      2  07bf
      3  07bf				  -	      IF	.CYCLES < 2
      4  07bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  07bf				  -	      ERR
      6  07bf					      ENDIF
      7  07bf
      8  07bf				  -	      IF	.CYCLES & 1
      9  07bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  07bf				  -	      nop	0
     11  07bf				  -	      ELSE
     12  07bf				  -	      bit	VSYNC
     13  07bf				  -	      ENDIF
     14  07bf				  -.CYCLES    SET	.CYCLES - 3
     15  07bf					      ENDIF
     16  07bf
     17  07bf					      REPEAT	.CYCLES / 2
     18  07bf		       ea		      nop
     19  07c0					      REPEND
     30  07c0
     31  07c0		       86 09		      stx	COLUBK	; 58	2
     32  07c2		       85 02		      sta	WSYNC	; 00	2
     33  07c4
     34  07c4		       b9 da 00 	      lda	RamBowColorsBk,y	; 04	3
     35  07c7		       85 09		      sta	COLUBK	; 07	2
     36  07c9		       b1 9b		      lda	(BowColorsPfPtr),y	; 12	2
     37  07cb		       85 08		      sta	COLUPF	; 15	2
     38  07cd		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 19	3
     39  07d0		       85 0f		      sta	PF2	; 22	2
     40  07d2
     41  07d2		       a9 00		      lda	#$00	; 24	2
     42  07d4		       85 20		      sta	HMP0	; 27	2
     43  07d6		       8d 21 00 	      sta.w	HMP1	; 31	3
     44  07d9
     45  07d9		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     46  07db		       a6 ee		      ldx	MenuBgColor	; 36	2
     47  07dd		       85 09		      sta	COLUBK	; 39	2
     48  07df		       8e 08 00 	      stx.w	COLUPF	; 43	3
     49  07e2		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     50  07e5		       85 0f		      sta	PF2	; 50	2
     51  07e7
     52  07e7		       a9 20		      lda	#$20	; 52	2
     53  07e9		       85 22		      sta	HMM0	; 55	2
     54  07eb
     55  07eb		       86 09		      stx	COLUBK	; 58	2
     56  07ed		       85 02		      sta	WSYNC	; 00	2
     57  07ef
     58  07ef		       b9 da 00 	      lda	RamBowColorsBk,y	; 04	3
     59  07f2		       85 09		      sta	COLUBK	; 07	2
     60  07f4		       b1 9b		      lda	(BowColorsPfPtr),y	; 12	2
     61  07f6		       85 08		      sta	COLUPF	; 15	2
     62  07f8		       b9 ab 00 	      lda	RamMenuCatPfL,y	; 19	3
     63  07fb		       85 0f		      sta	PF2	; 22	2
     64  07fd
     65  07fd		       a9 e0		      lda	#$E0	; 24	2
     66  07ff		       85 23		      sta	HMM1	; 27	2
      0  0801					      SLEEP	4	; 31	5
      1  0801				   .CYCLES    SET	4
      2  0801
      3  0801				  -	      IF	.CYCLES < 2
      4  0801				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0801				  -	      ERR
      6  0801					      ENDIF
      7  0801
      8  0801				  -	      IF	.CYCLES & 1
      9  0801				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0801				  -	      nop	0
     11  0801				  -	      ELSE
     12  0801				  -	      bit	VSYNC
     13  0801				  -	      ENDIF
     14  0801				  -.CYCLES    SET	.CYCLES - 3
     15  0801					      ENDIF
     16  0801
     17  0801					      REPEAT	.CYCLES / 2
     18  0801		       ea		      nop
     17  0801					      REPEND
     18  0802		       ea		      nop
     19  0803					      REPEND
     68  0803
     69  0803		       a9 08		      lda	#COL_CAT_FACE	; 33	2
     70  0805		       a6 ee		      ldx	MenuBgColor	; 36	2
     71  0807		       85 09		      sta	COLUBK	; 39	2
     72  0809		       8e 08 00 	      stx.w	COLUPF	; 43	3
     73  080c		       b9 ba 00 	      lda	RamMenuCatPfR,y	; 47	3
     74  080f		       85 0f		      sta	PF2	; 50	2
     75  0811
      0  0811					      SLEEP	5	; 55	3
      1  0811				   .CYCLES    SET	5
      2  0811
      3  0811				  -	      IF	.CYCLES < 2
      4  0811				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0811				  -	      ERR
      6  0811					      ENDIF
      7  0811
      8  0811					      IF	.CYCLES & 1
      9  0811					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0811		       04 00		      nop	0
     11  0813				  -	      ELSE
     12  0813				  -	      bit	VSYNC
     13  0813					      ENDIF
     14  0813				   .CYCLES    SET	.CYCLES - 3
     15  0813					      ENDIF
     16  0813
     17  0813					      REPEAT	.CYCLES / 2
     18  0813		       ea		      nop
     19  0814					      REPEND
     77  0814
     78  0814		       8e 09 00 	      stx.w	COLUBK	; 59	3
     79  0817
     80  0817		       88		      dey		; 61	1
     81  0818		       30 03		      bmi	.Exit19_20	; 64/63	2
     82  081a		       4c 94 17 	      jmp	MenuCatKernel19_20	; 66	2
     83  081d
     84  081d				   .Exit19_20
     85  081d
     86  081d		       a9 00		      lda	#0
     87  081f		       85 1b		      sta	GRP0
     88  0821		       85 1c		      sta	GRP1
     89  0823		       85 1d		      sta	ENAM0
     90  0825		       85 1e		      sta	ENAM1
------- FILE bank1/code/kernel.asm
     28  0827
     29  0827		       a5 92		      lda	MenuCatFrame
     30  0829		       0a		      asl
     31  082a		       c9 04		      cmp	#4
     32  082c		       10 06		      bpl	.LoCat
     33  082e		       85 02		      sta	WSYNC
     34  0830		       85 02		      sta	WSYNC
     35  0832		       85 02		      sta	WSYNC
     36  0834		       85 02	   .LoCat     sta	WSYNC
     37  0836
------- FILE bank1/code/menu_bottom.asm LEVEL 4 PASS 2
      0  0836					      include	bank1/code/menu_bottom.asm
      1  0836
      0  0836					      SET_OSCAN_TIMER	53
      1  0836					      SUBROUTINE
      2  0836
      3  0836		       a9 75		      lda	#OSCAN_PAL + 53
      4  0838		       24 81		      bit	Variation
      5  083a		       10 02		      bpl	.PAL
      6  083c		       a9 59		      lda	#OSCAN_NTSC + 53
      7  083e		       85 02	   .PAL       sta	WSYNC
      8  0840		       8d 96 02 	      sta	TIM64T
      9  0843
      3  0843
      4  0843		       24 81		      bit	Variation
      5  0845		       70 03		      bvs	DrawMenu
      6  0847		       4c 99 18 	      jmp	MenuBottom
      7  084a
      8  084a				   DrawMenu
      9  084a		       a5 8f		      lda	CtrlType
     10  084c		       29 20		      and	#%00100000
     11  084e		       f0 06		      beq	.NoGnd
     12  0850		       a0 80		      ldy	#$80
     13  0852		       84 01		      sty	VBLANK	; ground paddle caps if controller detected
     14  0854		       85 01		      sta	VBLANK
     15  0856
     16  0856		       a9 16	   .NoGnd     lda	#>MenuTxtClr
     17  0858		       85 98		      sta	TextColorPtr+1
     18  085a
     19  085a		       a4 ef		      ldy	MenuTxtDelay
     20  085c		       b9 63 1b 	      lda	MenuTxtDlyTbl,y
     21  085f		       4a		      lsr
     22  0860		       90 03		      bcc	.Add30
     23  0862		       a2 33		      ldx	#<MenuTxtClr+19
      0  0864					      SKIP_WORD
      1  0864		       0c		      HEX	0C
     25  0865		       a2 3e	   .Add30     ldx	#<MenuTxtClr+30
     26  0867		       86 97		      stx	TextColorPtr
     27  0869
     28  0869		       98		      tya
     29  086a		       4a		      lsr
     30  086b		       18		      clc
     31  086c		       65 97		      adc	TextColorPtr
     32  086e		       85 97		      sta	TextColorPtr
     33  0870
     34  0870		       a2 00		      ldx	#0
     35  0872		       86 1b		      stx	GRP0
     36  0874		       ca		      dex
     37  0875		       9a		      txs
     38  0876
     39  0876		       a9 03		      lda	#3
     40  0878		       85 02		      sta	WSYNC
     41  087a		       86 20		      stx	HMP0
     42  087c
     43  087c		       85 04		      sta	NUSIZ0
     44  087e		       85 05		      sta	NUSIZ1
     45  0880		       85 25		      sta	VDELP0
     46  0882		       85 26		      sta	VDELP1
     47  0884
     48  0884		       b9 63 1b 	      lda	MenuTxtDlyTbl,y
     49  0887		       4a		      lsr
     50  0888		       aa		      tax
     51  0889		       29 07		      and	#7
     52  088b		       85 95		      sta	MenuTemp
     53  088d		       8a		      txa
     54  088e		       4a		      lsr
     55  088f		       4a		      lsr
     56  0890		       4a		      lsr
     57  0891		       aa		      tax
     58  0892
     59  0892		       85 10		      sta	RESP0	; 41
     60  0894		       85 11		      sta	RESP1	; 44
     61  0896
     62  0896		       4c 12 10 	      jmp	JmpMenuTxtBtm
     63  0899							; 47
     64  0899
     65  0899				   MenuBottom
     66  0899
------- FILE bank1/code/kernel.asm
     39  0899
     40  0899		       4c e0 10 	      jmp	MenuOverScan
     41  089c
------- FILE bank1.asm
------- FILE bank1/code/music_engine.asm LEVEL 3 PASS 2
      0  089c					      include	bank1/code/music_engine.asm
      1  089c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  089c							; Music Engine
      3  089c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  089c
      5  089c				   SetNote    SUBROUTINE		; set voice and frequency
      6  089c
      7  089c		       a4 84		      ldy	MusicNote
      8  089e				   SetNote2
      9  089e		       b1 fa		      lda	(MusicPtr),y	; get current note
     10  08a0		       85 fd		      sta	TempNote	; save current note for later
     11  08a2		       f0 0b		      beq	.Hold	; keep voice and frequency if note hold
     12  08a4		       95 17		      sta	AUDF0,x	; set new frequency for voice X
     13  08a6		       10 03		      bpl	.HiNote
     14  08a8		       a9 04		      lda	#$4	; voice for low notes
      0  08aa					      SKIP_WORD
      1  08aa		       0c		      HEX	0C
     16  08ab		       a9 0c	   .HiNote    lda	#$C	; voice for high notes
     17  08ad		       95 15		      sta	AUDC0,x	; set new voice for voice X
     18  08af		       60	   .Hold      rts
     19  08b0
     20  08b0
     21  08b0
     22  08b0				   SetVolume		; set note volume from envelope
     23  08b0
     24  08b0		       86 fc		      stx	TempX	; save voice number
     25  08b2		       a7 85		      lax	NoteData	; get note data
     26  08b4		       4a		      lsr
     27  08b5		       4a		      lsr
     28  08b6		       4a		      lsr
     29  08b7		       a8		      tay		; save in Y for offset
     30  08b8		       8a		      txa		; recover note data
     31  08b9		       29 07		      and	#7
     32  08bb		       a6 fd		      ldx	TempNote	; recover current note
     33  08bd		       d0 04		      bne	.NoHold	; reset envelope if no note hold
     34  08bf		       18		      clc		; otherwise...
     35  08c0		       79 00 1c 	      adc	NoteLenNTSC-1,y	; add last note's length to envelope offset
     36  08c3		       a8	   .NoHold    tay
     37  08c4		       b1 fa		      lda	(MusicPtr),y	; get new volume for voice X
     38  08c6		       a6 fc		      ldx	TempX	; recover voice number
     39  08c8		       95 19		      sta	AUDV0,x	; set new volume for voice X
     40  08ca		       60		      rts
     41  08cb
     42  08cb
     43  08cb
     44  08cb				   UpdateNote		; update note data for next frame
     45  08cb
     46  08cb		       e6 85		      inc	NoteData	; move to the next step of this note
     47  08cd		       a7 85		      lax	NoteData
     48  08cf		       4a		      lsr
     49  08d0		       4a		      lsr
     50  08d1		       4a		      lsr
     51  08d2		       a8		      tay
     52  08d3		       8a		      txa
     53  08d4		       29 07		      and	#7
     54  08d6		       24 81		      bit	Variation
     55  08d8		       10 07		      bpl	.PAL
     56  08da		       d9 01 1c 	      cmp	NoteLenNTSC,y	; check for end of note in NTSC mode
     57  08dd		       d0 18		      bne	.Same
     58  08df		       f0 05		      beq	.NTSC
     59  08e1		       d9 13 1c    .PAL       cmp	NoteLenPAL,y	; check for end of note in PAL mode
     60  08e4		       d0 11		      bne	.Same	; branch if note not over yet
     61  08e6		       a5 85	   .NTSC      lda	NoteData	; otherwise...
     62  08e8		       29 f8		      and	#$F8	; reset 3 low bits of NoteData
     63  08ea		       18		      clc
     64  08eb		       69 08		      adc	#1<<3	; step forward to the next note length
     65  08ed		       c9 90		      cmp	#18<<3
     66  08ef		       d0 02		      bne	.NoRoll
     67  08f1		       a9 00		      lda	#0	; roll note length counter after 18 notes
     68  08f3		       85 85	   .NoRoll    sta	NoteData
     69  08f5		       e6 84		      inc	MusicNote	; step forward to the next note
     70  08f7
     71  08f7		       60	   .Same      rts
     72  08f8
------- FILE bank1.asm
------- FILE bank1/data/menucatgfx.asm LEVEL 3 PASS 2
      0  08f8					      include	bank1/data/menucatgfx.asm
      1  08f8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  08f8							; Menu Cat Graphics
      3  08f8							;
      4  08f8							; Graphics for drawing the menu cat display
      5  08f8							;
      6  08f8							; Uses 1 page + 173 bytes of ROM
      7  08f8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  08f8
      9  0900		       00 00 00 00*	      ALIGN	$100
     10  0900
     11  0900				   MenuCatGfxPage1
     12  0900
     13  0900
     14  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  0900							; Menu Cat Top Playfield Graphics
     16  0900							;
     17  0900							; Graphics used for PF2 in the top 4 blocks of the menu cat display.
     18  0900							;
     19  0900							; 3 bytes of ROM
     20  0900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     21  0900
     22  0900				   MenuCatTopPf
     23  0900
     24  0900		       07		      .byte.b	%00000111	; PF2 gfx block 4
     25  0901		       07		      .byte.b	%00000111
     26  0902		       07		      .byte.b	%00000111
     27  0903							;	.byte %11111111	; PF2 gfx block 1 (shared with MenuCatGfxR)
     28  0903
     29  0903							; 3 bytes used in page
     30  0903
     31  0903
     32  0903							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33  0903							; Menu Cat Right Player Graphics
     34  0903							;
     35  0903							; Graphics used for GRP1 in blocks 5-18 of the menu cat display.
     36  0903							; The frame's graphics will be pushed onto the stack and read from RAM.
     37  0903							;
     38  0903							; 42 bytes of ROM (14 per frame)
     39  0903							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  0903
     41  0903				   MenuCatGfxR
     42  0903
     43  0903							; frames 1/5
     44  0903		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     45  0904		       04		      .byte.b	%00000100
     46  0905		       f2		      .byte.b	%11110010
     47  0906		       91		      .byte.b	%10010001
     48  0907		       01		      .byte.b	%00000001
     49  0908		       59		      .byte.b	%01011001
     50  0909		       09		      .byte.b	%00001001
     51  090a		       01		      .byte.b	%00000001
     52  090b		       02		      .byte.b	%00000010
     53  090c		       c2		      .byte.b	%11000010
     54  090d		       22		      .byte.b	%00100010
     55  090e		       32		      .byte.b	%00110010
     56  090f		       2c		      .byte.b	%00101100
     57  0910		       20		      .byte.b	%00100000	; GRP1 gfx block 5
     58  0911
     59  0911							; frames 2/3/4
     60  0911		       ff		      .byte.b	%11111111	; GRP1 gfx block 18
     61  0912		       04		      .byte.b	%00000100
     62  0913		       f2		      .byte.b	%11110010
     63  0914		       91		      .byte.b	%10010001
     64  0915		       01		      .byte.b	%00000001
     65  0916		       59		      .byte.b	%01011001
     66  0917		       09		      .byte.b	%00001001
     67  0918		       01		      .byte.b	%00000001
     68  0919		       02		      .byte.b	%00000010
     69  091a		       c2		      .byte.b	%11000010
     70  091b		       62		      .byte.b	%01100010
     71  091c		       52		      .byte.b	%01010010
     72  091d		       4c		      .byte.b	%01001100
     73  091e		       40		      .byte.b	%01000000	; GRP1 gfx block 5
     74  091f
     75  091f							; frame 6
     76  091f		       f4		      .byte.b	%11110100	; GRP1 gfx block 18
     77  0920		       f8		      .byte.b	%11111000
     78  0921		       04		      .byte.b	%00000100
     79  0922		       f2		      .byte.b	%11110010
     80  0923		       91		      .byte.b	%10010001
     81  0924		       01		      .byte.b	%00000001
     82  0925		       59		      .byte.b	%01011001
     83  0926		       09		      .byte.b	%00001001
     84  0927		       01		      .byte.b	%00000001
     85  0928		       02		      .byte.b	%00000010
     86  0929		       c2		      .byte.b	%11000010
     87  092a		       22		      .byte.b	%00100010
     88  092b		       32		      .byte.b	%00110010
     89  092c		       2c		      .byte.b	%00101100	; GRP1 gfx block 5
     90  092d
     91  092d							; 45 bytes used in page
     92  092d
     93  092d
     94  092d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  092d							; Menu Cat Top Right Player Graphics
     96  092d							;
     97  092d							; Graphics used for GRP1 in the top 4 blocks of the menu cat display.
     98  092d							;
     99  092d							; 4 bytes of ROM
    100  092d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  092d
    102  092d				   MenuCatTopGfxR
    103  092d
    104  092d		       20		      .byte.b	%00100000	; GRP1 gfx block 4
    105  092e		       10		      .byte.b	%00010000
    106  092f		       10		      .byte.b	%00010000
    107  0930		       10		      .byte.b	%00010000	; GRP1 gfx block 1
    108  0931
    109  0931							; 49 bytes used in page
    110  0931
    111  0931
    112  0931							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    113  0931							; Menu Cat Top Left Player Graphics
    114  0931							;
    115  0931							; Graphics used for GRP0 in the top 4 blocks of the menu cat display.
    116  0931							;
    117  0931							; 3 bytes of ROM
    118  0931							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    119  0931
    120  0931				   MenuCatTopGfxL
    121  0931
    122  0931		       01		      .byte.b	%00000001	; GRP0 gfx block 4
    123  0932		       08		      .byte.b	%00001000
    124  0933		       20		      .byte.b	%00100000
    125  0934							;	.byte %11111111	; GRP0 gfx block 1 (shared with MenuCatPfL)
    126  0934
    127  0934							; 52 bytes used in page
    128  0934
    129  0934
    130  0934							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    131  0934							; Menu Cat Left Playfield Graphics
    132  0934							;
    133  0934							; Graphics used for left copy of PF2 in blocks 6-20 of the menu cat display.
    134  0934							; The frame's graphics will be pushed onto the stack and read from RAM.
    135  0934							;
    136  0934							; 84 bytes of ROM (14 per frame)
    137  0934							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    138  0934
    139  0934				   MenuCatPfL
    140  0934
    141  0934							; frame 1
    142  0934		       ff		      .byte.b	%11111111	; PF2(L) gfx block 20
    143  0935		       93		      .byte.b	%10010011
    144  0936		       f3		      .byte.b	%11110011
    145  0937		       bf		      .byte.b	%10111111
    146  0938		       bf		      .byte.b	%10111111
    147  0939		       3f		      .byte.b	%00111111
    148  093a		       3f		      .byte.b	%00111111
    149  093b		       3f		      .byte.b	%00111111
    150  093c		       3b		      .byte.b	%00111011
    151  093d		       39		      .byte.b	%00111001
    152  093e		       bd		      .byte.b	%10111101
    153  093f		       bc		      .byte.b	%10111100
    154  0940		       bf		      .byte.b	%10111111
    155  0941		       bf		      .byte.b	%10111111
    156  0942		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    157  0943
    158  0943							; frame 2
    159  0943							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 1)
    160  0943		       97		      .byte.b	%10010111
    161  0944		       f7		      .byte.b	%11110111
    162  0945		       bf		      .byte.b	%10111111
    163  0946		       bf		      .byte.b	%10111111
    164  0947		       bf		      .byte.b	%10111111
    165  0948		       bf		      .byte.b	%10111111
    166  0949		       bb		      .byte.b	%10111011
    167  094a		       b9		      .byte.b	%10111001
    168  094b		       bc		      .byte.b	%10111100
    169  094c		       bc		      .byte.b	%10111100
    170  094d		       bf		      .byte.b	%10111111
    171  094e		       bf		      .byte.b	%10111111
    172  094f		       bf		      .byte.b	%10111111
    173  0950		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    174  0951
    175  0951							; frame 3
    176  0951							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 2)
    177  0951		       a7		      .byte.b	%10100111
    178  0952		       f7		      .byte.b	%11110111
    179  0953		       bf		      .byte.b	%10111111
    180  0954		       bf		      .byte.b	%10111111
    181  0955		       bf		      .byte.b	%10111111
    182  0956		       bc		      .byte.b	%10111100
    183  0957		       b9		      .byte.b	%10111001
    184  0958		       bf		      .byte.b	%10111111
    185  0959		       bf		      .byte.b	%10111111
    186  095a		       bf		      .byte.b	%10111111
    187  095b		       bf		      .byte.b	%10111111
    188  095c		       bf		      .byte.b	%10111111
    189  095d		       bf		      .byte.b	%10111111
    190  095e		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    191  095f
    192  095f							; frame 4
    193  095f							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 3)
    194  095f		       97		      .byte.b	%10010111
    195  0960		       f7		      .byte.b	%11110111
    196  0961		       bf		      .byte.b	%10111111
    197  0962		       bf		      .byte.b	%10111111
    198  0963		       bc		      .byte.b	%10111100
    199  0964		       bc		      .byte.b	%10111100
    200  0965		       b9		      .byte.b	%10111001
    201  0966		       bb		      .byte.b	%10111011
    202  0967		       bf		      .byte.b	%10111111
    203  0968		       bf		      .byte.b	%10111111
    204  0969		       bf		      .byte.b	%10111111
    205  096a		       bf		      .byte.b	%10111111
    206  096b		       bf		      .byte.b	%10111111
    207  096c		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    208  096d
    209  096d							; frame 5
    210  096d							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 4)
    211  096d		       cb		      .byte.b	%11001011
    212  096e		       f3		      .byte.b	%11110011
    213  096f		       bf		      .byte.b	%10111111
    214  0970		       bf		      .byte.b	%10111111
    215  0971		       3f		      .byte.b	%00111111
    216  0972		       3f		      .byte.b	%00111111
    217  0973		       3f		      .byte.b	%00111111
    218  0974		       3b		      .byte.b	%00111011
    219  0975		       38		      .byte.b	%00111000
    220  0976		       bc		      .byte.b	%10111100
    221  0977		       bf		      .byte.b	%10111111
    222  0978		       bf		      .byte.b	%10111111
    223  0979		       bf		      .byte.b	%10111111
    224  097a		       ff		      .byte.b	%11111111	; PF2(L) gfx block 6
    225  097b
    226  097b							; frame 6
    227  097b							;	.byte %11111111	; PF2(L) gfx block 20 (shared with frame 5)
    228  097b		       cb		      .byte.b	%11001011
    229  097c		       f3		      .byte.b	%11110011
    230  097d		       bb		      .byte.b	%10111011
    231  097e		       bf		      .byte.b	%10111111
    232  097f		       bf		      .byte.b	%10111111
    233  0980		       3f		      .byte.b	%00111111
    234  0981		       3f		      .byte.b	%00111111
    235  0982		       3b		      .byte.b	%00111011
    236  0983		       39		      .byte.b	%00111001
    237  0984		       3c		      .byte.b	%00111100
    238  0985		       bc		      .byte.b	%10111100
    239  0986		       bf		      .byte.b	%10111111
    240  0987		       bf		      .byte.b	%10111111
    241  0988							;	.byte %10111111	; PF2(L) gfx block 6 (shared with MenuCatPfR)
    242  0988
    243  0988							; 136 bytes used in page
    244  0988
    245  0988
    246  0988							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    247  0988							; Menu Cat Right Playfield Graphics
    248  0988							;
    249  0988							; Graphics used for right copy of PF2 in blocks 6-18 of the menu cat display.
    250  0988							; The frame's graphics will be pushed onto the stack and read from RAM.
    251  0988							;
    252  0988							; 37 bytes of ROM (12 per frame + 1)
    253  0988							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  0988
    255  0988				   MenuCatPfR
    256  0988
    257  0988							; frames 1/5
    258  0988		       bf		      .byte.b	%10111111	; PF2(R) gfx block 18
    259  0989		       81		      .byte.b	%10000001
    260  098a		       81		      .byte.b	%10000001
    261  098b		       80		      .byte.b	%10000000
    262  098c		       80		      .byte.b	%10000000
    263  098d		       80		      .byte.b	%10000000
    264  098e		       80		      .byte.b	%10000000
    265  098f		       80		      .byte.b	%10000000
    266  0990		       81		      .byte.b	%10000001
    267  0991		       99		      .byte.b	%10011001
    268  0992		       99		      .byte.b	%10011001
    269  0993		       bd		      .byte.b	%10111101
    270  0994							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frames 2/3/4)
    271  0994
    272  0994							; frames 2/3/4
    273  0994		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    274  0995		       c1		      .byte.b	%11000001
    275  0996		       80		      .byte.b	%10000000
    276  0997		       80		      .byte.b	%10000000
    277  0998		       80		      .byte.b	%10000000
    278  0999		       80		      .byte.b	%10000000
    279  099a		       80		      .byte.b	%10000000
    280  099b		       80		      .byte.b	%10000000
    281  099c		       80		      .byte.b	%10000000
    282  099d		       88		      .byte.b	%10001000
    283  099e		       9c		      .byte.b	%10011100
    284  099f		       9c		      .byte.b	%10011100
    285  09a0							;	.byte %11111111	; PF2(R) gfx block 6 (shared with frame 6)
    286  09a0
    287  09a0							; frame 6
    288  09a0		       ff		      .byte.b	%11111111	; PF2(R) gfx block 18
    289  09a1		       ff		      .byte.b	%11111111
    290  09a2		       81		      .byte.b	%10000001
    291  09a3		       81		      .byte.b	%10000001
    292  09a4		       80		      .byte.b	%10000000
    293  09a5		       80		      .byte.b	%10000000
    294  09a6		       80		      .byte.b	%10000000
    295  09a7		       80		      .byte.b	%10000000
    296  09a8		       80		      .byte.b	%10000000
    297  09a9		       81		      .byte.b	%10000001
    298  09aa		       99		      .byte.b	%10011001
    299  09ab		       99		      .byte.b	%10011001
    300  09ac		       bd		      .byte.b	%10111101	; PF2(R) gfx block 6
    301  09ad							; 173 bytes used in page
    302  09ad
    303  09ad
    304  09ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  09ad							; Menu Cat Player Hmove Graphics
    306  09ad							;
    307  09ad							; Graphics used for HMP0 in blocks 6-18 and HMP1 in block 19.
    308  09ad							; The frame's graphics will be accessed through a pointer.
    309  09ad							;
    310  09ad							; 70 bytes of ROM (14 per frame)
    311  09ad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  09ad
    313  09ad				   MenuCatHmoveP
    314  09ad
    315  09ad							; frame 1
    316  09ad		       00		      .byte.b	$00	; P0 gfx block 18
    317  09ae		       a0		      .byte.b	$A0
    318  09af		       c0		      .byte.b	$C0
    319  09b0		       00		      .byte.b	$00
    320  09b1		       00		      .byte.b	$00
    321  09b2		       00		      .byte.b	$00
    322  09b3		       00		      .byte.b	$00
    323  09b4		       00		      .byte.b	$00
    324  09b5		       00		      .byte.b	$00
    325  09b6		       00		      .byte.b	$00
    326  09b7		       00		      .byte.b	$00
    327  09b8		       00		      .byte.b	$00
    328  09b9		       00		      .byte.b	$00	; P0 gfx block 6
    329  09ba
    330  09ba		       20		      .byte.b	$20	; P1 gfx block 19
    331  09bb
    332  09bb							; frame 2
    333  09bb		       00		      .byte.b	$00	; P0 gfx block 18
    334  09bc		       a0		      .byte.b	$A0
    335  09bd		       a0		      .byte.b	$A0
    336  09be		       00		      .byte.b	$00
    337  09bf		       00		      .byte.b	$00
    338  09c0		       00		      .byte.b	$00
    339  09c1		       00		      .byte.b	$00
    340  09c2		       00		      .byte.b	$00
    341  09c3		       00		      .byte.b	$00
    342  09c4		       00		      .byte.b	$00
    343  09c5		       00		      .byte.b	$00
    344  09c6		       00		      .byte.b	$00
    345  09c7		       00		      .byte.b	$00	; P0 gfx block 6
    346  09c8
    347  09c8		       20		      .byte.b	$20	; P1 gfx block 19
    348  09c9
    349  09c9							; frame 3
    350  09c9		       00		      .byte.b	$00	; P0 gfx block 18
    351  09ca		       80		      .byte.b	$80
    352  09cb		       a0		      .byte.b	$A0
    353  09cc		       00		      .byte.b	$00
    354  09cd		       00		      .byte.b	$00
    355  09ce		       00		      .byte.b	$00
    356  09cf		       00		      .byte.b	$00
    357  09d0		       00		      .byte.b	$00
    358  09d1		       00		      .byte.b	$00
    359  09d2		       00		      .byte.b	$00
    360  09d3		       00		      .byte.b	$00
    361  09d4		       00		      .byte.b	$00
    362  09d5		       00		      .byte.b	$00	; P0 gfx block 6
    363  09d6
    364  09d6		       00		      .byte.b	$00	; P1 gfx block 19
    365  09d7
    366  09d7							; frame 4
    367  09d7		       00		      .byte.b	$00	; P0 gfx block 18
    368  09d8		       80		      .byte.b	$80
    369  09d9		       c0		      .byte.b	$C0
    370  09da		       00		      .byte.b	$00
    371  09db		       00		      .byte.b	$00
    372  09dc		       00		      .byte.b	$00
    373  09dd		       00		      .byte.b	$00
    374  09de		       00		      .byte.b	$00
    375  09df		       00		      .byte.b	$00
    376  09e0		       00		      .byte.b	$00
    377  09e1		       00		      .byte.b	$00
    378  09e2		       00		      .byte.b	$00
    379  09e3		       00		      .byte.b	$00	; P0 gfx block 6
    380  09e4
    381  09e4		       20		      .byte.b	$20	; P1 gfx block 19
    382  09e5
    383  09e5							; frames 5/6
    384  09e5		       00		      .byte.b	$00	; P0 gfx block 18
    385  09e6		       c0		      .byte.b	$C0
    386  09e7		       c0		      .byte.b	$C0
    387  09e8		       00		      .byte.b	$00
    388  09e9		       00		      .byte.b	$00
    389  09ea		       00		      .byte.b	$00
    390  09eb		       00		      .byte.b	$00
    391  09ec		       00		      .byte.b	$00
    392  09ed		       00		      .byte.b	$00
    393  09ee		       00		      .byte.b	$00
    394  09ef		       00		      .byte.b	$00
    395  09f0		       00		      .byte.b	$00
    396  09f1		       00		      .byte.b	$00	; P0 gfx block 6
    397  09f2
    398  09f2		       40		      .byte.b	$40	; P1 gfx block 19
    399  09f3
    400  09f3							; 243 bytes used in page
    401  09f3
    402  09f3
    403  09f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    404  09f3							; Menu Cat Missile Graphics
    405  09f3							;
    406  09f3							; Graphics used to control the size and enable for M0 in blocks 6-17 of the
    407  09f3							; menu cat display.
    408  09f3							; The frame's graphics will be accessed through a pointer that is offset by -1.
    409  09f3							; Because of that, this table cannot be at the start of a page.
    410  09f3							;
    411  09f3							; 13 bytes of ROM
    412  09f3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    413  09f3
    414  09f3				   MenuCatMslGfx
    415  09f3
    416  09f3							; frame 6
    417  09f3		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE	; missile gfx block 17
    418  09f4
    419  09f4							; frames 5/4/3/2/1
    420  09f4		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE	; missile gfx block 16/17
    421  09f5		       37		      .byte.b	DOUBLE_SIZE | MSL_SIZE_8 | ENA_TRUE
    422  09f6		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    423  09f7		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    424  09f8		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    425  09f9		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    426  09fa		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    427  09fb		       15		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_FALSE
    428  09fc		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE
    429  09fd		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE
    430  09fe		       17		      .byte.b	DOUBLE_SIZE | MSL_SIZE_2 | ENA_TRUE	; missile gfx block 6/7
    431  09ff
    432  09ff		       27		      .byte.b	DOUBLE_SIZE | MSL_SIZE_4 | ENA_TRUE	; missile gfx block 6
    433  0a00
    434  0a00							; all 256 bytes used in page
    435  0a00
    436  0a00
    437  0a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    438  0a00							; PAGE BOUNDARY
    439  0a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    440  0a00
    441  0a00				   MenuCatGfxPage2
    442  0a00
    443  0a00
    444  0a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  0a00							; Menu Cat Left Player Graphics
    446  0a00							;
    447  0a00							; Graphics used for GRP0 in blocks 7-20 of the menu cat display.
    448  0a00							; The graphics for blocks 5-6 are the same as block 4 from MenuCatTopGfxL.
    449  0a00							; The frame's graphics will be pushed onto the stack and read from RAM.
    450  0a00							;
    451  0a00							; 84 bytes of ROM (14 per frame)
    452  0a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    453  0a00
    454  0a00				   MenuCatGfxL
    455  0a00
    456  0a00							; frame 1
    457  0a00		       71		      .byte.b	%01110001	; GRP0 gfx block 20
    458  0a01		       9a		      .byte.b	%10011010
    459  0a02		       8f		      .byte.b	%10001111
    460  0a03		       70		      .byte.b	%01110000
    461  0a04		       04		      .byte.b	%00000100
    462  0a05		       01		      .byte.b	%00000001
    463  0a06		       03		      .byte.b	%00000011
    464  0a07		       0f		      .byte.b	%00001111
    465  0a08		       19		      .byte.b	%00011001
    466  0a09		       33		      .byte.b	%00110011
    467  0a0a		       67		      .byte.b	%01100111
    468  0a0b		       4d		      .byte.b	%01001101
    469  0a0c		       79		      .byte.b	%01111001
    470  0a0d		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    471  0a0e
    472  0a0e							; frame 2
    473  0a0e		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    474  0a0f		       94		      .byte.b	%10010100
    475  0a10		       9f		      .byte.b	%10011111
    476  0a11		       60		      .byte.b	%01100000
    477  0a12		       08		      .byte.b	%00001000
    478  0a13		       01		      .byte.b	%00000001
    479  0a14		       07		      .byte.b	%00000111
    480  0a15		       19		      .byte.b	%00011001
    481  0a16		       21		      .byte.b	%00100001
    482  0a17		       4f		      .byte.b	%01001111
    483  0a18		       49		      .byte.b	%01001001
    484  0a19		       31		      .byte.b	%00110001
    485  0a1a		       01		      .byte.b	%00000001
    486  0a1b		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    487  0a1c
    488  0a1c							; frame 3
    489  0a1c		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    490  0a1d		       94		      .byte.b	%10010100
    491  0a1e		       bf		      .byte.b	%10111111
    492  0a1f		       c0		      .byte.b	%11000000
    493  0a20		       08		      .byte.b	%00001000
    494  0a21		       3d		      .byte.b	%00111101
    495  0a22		       47		      .byte.b	%01000111
    496  0a23		       61		      .byte.b	%01100001
    497  0a24		       1f		      .byte.b	%00011111
    498  0a25		       03		      .byte.b	%00000011
    499  0a26		       01		      .byte.b	%00000001
    500  0a27		       01		      .byte.b	%00000001
    501  0a28		       01		      .byte.b	%00000001
    502  0a29		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    503  0a2a
    504  0a2a							; frame 4
    505  0a2a		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    506  0a2b		       94		      .byte.b	%10010100
    507  0a2c		       9f		      .byte.b	%10011111
    508  0a2d		       60		      .byte.b	%01100000
    509  0a2e		       c4		      .byte.b	%11000100
    510  0a2f		       49		      .byte.b	%01001001
    511  0a30		       4f		      .byte.b	%01001111
    512  0a31		       21		      .byte.b	%00100001
    513  0a32		       19		      .byte.b	%00011001
    514  0a33		       07		      .byte.b	%00000111
    515  0a34		       01		      .byte.b	%00000001
    516  0a35		       01		      .byte.b	%00000001
    517  0a36		       01		      .byte.b	%00000001
    518  0a37		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    519  0a38
    520  0a38							; frame 5
    521  0a38		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    522  0a39		       94		      .byte.b	%10010100
    523  0a3a		       8f		      .byte.b	%10001111
    524  0a3b		       78		      .byte.b	%01111000
    525  0a3c		       0c		      .byte.b	%00001100
    526  0a3d		       01		      .byte.b	%00000001
    527  0a3e		       01		      .byte.b	%00000001
    528  0a3f		       07		      .byte.b	%00000111
    529  0a40		       3d		      .byte.b	%00111101
    530  0a41		       c3		      .byte.b	%11000011
    531  0a42		       8f		      .byte.b	%10001111
    532  0a43		       79		      .byte.b	%01111001
    533  0a44		       01		      .byte.b	%00000001
    534  0a45		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    535  0a46
    536  0a46							; frame 6
    537  0a46		       63		      .byte.b	%01100011	; GRP0 gfx block 20
    538  0a47		       94		      .byte.b	%10010100
    539  0a48		       8f		      .byte.b	%10001111
    540  0a49		       58		      .byte.b	%01011000
    541  0a4a		       0c		      .byte.b	%00001100
    542  0a4b		       01		      .byte.b	%00000001
    543  0a4c		       01		      .byte.b	%00000001
    544  0a4d		       07		      .byte.b	%00000111
    545  0a4e		       19		      .byte.b	%00011001
    546  0a4f		       21		      .byte.b	%00100001
    547  0a50		       4f		      .byte.b	%01001111
    548  0a51		       49		      .byte.b	%01001001
    549  0a52		       31		      .byte.b	%00110001
    550  0a53		       01		      .byte.b	%00000001	; GRP0 gfx block 7
    551  0a54
    552  0a54							; 84 bytes used in page
    553  0a54
    554  0a54
    555  0a54							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    556  0a54							; Menu Cat Lower Right Player Graphics
    557  0a54							;
    558  0a54							; Graphics used for GRP1 in blocks 19-20 of the menu cat display.
    559  0a54							; The frame's graphics will be pushed onto the stack and read from RAM.
    560  0a54							;
    561  0a54							; 12 bytes of ROM (2 per frame)
    562  0a54							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    563  0a54
    564  0a54				   MenuCatLowGfxR
    565  0a54
    566  0a54							; frame 1
    567  0a54		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    568  0a55		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    569  0a56
    570  0a56							; frame 2
    571  0a56		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    572  0a57		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    573  0a58
    574  0a58							; frame 3
    575  0a58		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    576  0a59		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    577  0a5a
    578  0a5a							; frame 4
    579  0a5a		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    580  0a5b		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    581  0a5c
    582  0a5c							; frame 5
    583  0a5c		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    584  0a5d		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    585  0a5e
    586  0a5e							; frame 6
    587  0a5e		       29		      .byte.b	%00101001	; GRP1 gfx block 19
    588  0a5f		       c6		      .byte.b	%11000110	; GRP1 gfx block 20
    589  0a60
    590  0a60							; 96 bytes used in page
    591  0a60
    592  0a60
    593  0a60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    594  0a60							; Menu Cat Lower Right Playfield Graphics
    595  0a60							;
    596  0a60							; Graphics used for right copy of PF2 in blocks 19-20 of the menu cat display.
    597  0a60							; The frame's graphics will be pushed onto the stack and read from RAM.
    598  0a60							;
    599  0a60							; 12 bytes of ROM (2 per frame)
    600  0a60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    601  0a60
    602  0a60				   MenuCatLowPfGfxR
    603  0a60
    604  0a60							; frame 1
    605  0a60		       53		      .byte.b	%01010011	; PF2(R) gfx block 19
    606  0a61		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    607  0a62
    608  0a62							; frame 2
    609  0a62		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    610  0a63		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    611  0a64
    612  0a64							; frame 3
    613  0a64		       e9		      .byte.b	%11101001	; PF2(R) gfx block 19
    614  0a65		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    615  0a66
    616  0a66							; frame 4
    617  0a66		       cb		      .byte.b	%11001011	; PF2(R) gfx block 19
    618  0a67		       ff		      .byte.b	%11111111	; PF2(R) gfx block 20
    619  0a68
    620  0a68							; frame 5
    621  0a68		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    622  0a69		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    623  0a6a
    624  0a6a							; frame 6
    625  0a6a		       17		      .byte.b	%00010111	; PF2(R) gfx block 19
    626  0a6b		       7f		      .byte.b	%01111111	; PF2(R) gfx block 20
    627  0a6c
    628  0a6c							; 108 bytes used in page
    629  0a6c
    630  0a6c
    631  0a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    632  0a6c							; Menu Cat Missile Hmove Graphics
    633  0a6c							;
    634  0a6c							; Graphics used for HMM0 and HMM1 in lines 6-18.
    635  0a6c							; The left nybble is used for HMM0, and the right is for HMM1.
    636  0a6c							; The frame's graphics will be accessed through a pointer.
    637  0a6c							;
    638  0a6c							; 65 bytes of ROM (13 per frame)
    639  0a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    640  0a6c
    641  0a6c				   MenuCatHmoveM
    642  0a6c
    643  0a6c							; frames 1/2
    644  0a6c		       df		      .byte.b	$DF	; HMMx gfx block 18
    645  0a6d		       0e		      .byte.b	$0E
    646  0a6e		       0e		      .byte.b	$0E
    647  0a6f		       e0		      .byte.b	$E0
    648  0a70		       00		      .byte.b	$00
    649  0a71		       20		      .byte.b	$20
    650  0a72		       20		      .byte.b	$20
    651  0a73		       02		      .byte.b	$02
    652  0a74		       00		      .byte.b	$00
    653  0a75		       e0		      .byte.b	$E0
    654  0a76		       e0		      .byte.b	$E0
    655  0a77		       c2		      .byte.b	$C2
    656  0a78		       00		      .byte.b	$00	; HMMx gfx block 6
    657  0a79
    658  0a79							; frame 3
    659  0a79		       be		      .byte.b	$BE	; HMMx gfx block 18
    660  0a7a		       0e		      .byte.b	$0E
    661  0a7b		       0e		      .byte.b	$0E
    662  0a7c		       e0		      .byte.b	$E0
    663  0a7d		       00		      .byte.b	$00
    664  0a7e		       20		      .byte.b	$20
    665  0a7f		       20		      .byte.b	$20
    666  0a80		       02		      .byte.b	$02
    667  0a81		       00		      .byte.b	$00
    668  0a82		       e0		      .byte.b	$E0
    669  0a83		       e0		      .byte.b	$E0
    670  0a84		       c2		      .byte.b	$C2
    671  0a85		       00		      .byte.b	$00	; HMMx gfx block 6
    672  0a86
    673  0a86							; frame 4
    674  0a86		       df		      .byte.b	$DF	; HMMx gfx block 18
    675  0a87		       0e		      .byte.b	$0E
    676  0a88		       0e		      .byte.b	$0E
    677  0a89		       e0		      .byte.b	$E0
    678  0a8a		       00		      .byte.b	$00
    679  0a8b		       20		      .byte.b	$20
    680  0a8c		       20		      .byte.b	$20
    681  0a8d		       02		      .byte.b	$02
    682  0a8e		       00		      .byte.b	$00
    683  0a8f		       e0		      .byte.b	$E0
    684  0a90		       e0		      .byte.b	$E0
    685  0a91		       c2		      .byte.b	$C2
    686  0a92		       00		      .byte.b	$00	; HMMx gfx block 6
    687  0a93
    688  0a93							; frame 5
    689  0a93		       00		      .byte.b	$00	; HMMx gfx block 18
    690  0a94		       0e		      .byte.b	$0E
    691  0a95		       0e		      .byte.b	$0E
    692  0a96		       e0		      .byte.b	$E0
    693  0a97		       00		      .byte.b	$00
    694  0a98		       20		      .byte.b	$20
    695  0a99		       20		      .byte.b	$20
    696  0a9a		       02		      .byte.b	$02
    697  0a9b		       00		      .byte.b	$00
    698  0a9c		       e0		      .byte.b	$E0
    699  0a9d		       e0		      .byte.b	$E0
    700  0a9e		       c2		      .byte.b	$C2
    701  0a9f		       00		      .byte.b	$00	; HMMx gfx block 6
    702  0aa0
    703  0aa0							; frame 6
    704  0aa0		       11		      .byte.b	$11	; HMMx gfx block 18
    705  0aa1		       2e		      .byte.b	$2E
    706  0aa2		       0e		      .byte.b	$0E
    707  0aa3		       0e		      .byte.b	$0E
    708  0aa4		       e0		      .byte.b	$E0
    709  0aa5		       00		      .byte.b	$00
    710  0aa6		       20		      .byte.b	$20
    711  0aa7		       20		      .byte.b	$20
    712  0aa8		       02		      .byte.b	$02
    713  0aa9		       00		      .byte.b	$00
    714  0aaa		       e0		      .byte.b	$E0
    715  0aab		       e0		      .byte.b	$E0
    716  0aac		       c2		      .byte.b	$C2	; HMMx gfx block 6
    717  0aad
    718  0aad							; 173 bytes used in page
    719  0aad
    720  0aad
    721  0aad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    722  0aad							; Offset Tables
    723  0aad							;
    724  0aad							; Tables of offsets to the correct data for frames that can share graphics.
    725  0aad							;
    726  0aad							; 12 bytes of ROM (6 bytes per table)
    727  0aad							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    728  0aad
    729  0aad				   MenuCatOffsetGfx
    730  0aad		       03		      .byte.b	<MenuCatGfxR+0
    731  0aae		       11		      .byte.b	<MenuCatGfxR+14
    732  0aaf		       11		      .byte.b	<MenuCatGfxR+14
    733  0ab0		       11		      .byte.b	<MenuCatGfxR+14
    734  0ab1		       03		      .byte.b	<MenuCatGfxR+0
    735  0ab2		       1f		      .byte.b	<MenuCatGfxR+28
    736  0ab3
    737  0ab3				   MenuCatOffsetPf
    738  0ab3		       88		      .byte.b	<MenuCatPfR+0
    739  0ab4		       94		      .byte.b	<MenuCatPfR+12
    740  0ab5		       94		      .byte.b	<MenuCatPfR+12
    741  0ab6		       94		      .byte.b	<MenuCatPfR+12
    742  0ab7		       88		      .byte.b	<MenuCatPfR+0
    743  0ab8		       a0		      .byte.b	<MenuCatPfR+24
------- FILE bank1.asm
------- FILE bank1/data/colors.asm LEVEL 3 PASS 2
      0  0ab9					      include	bank1/data/colors.asm
      1  0ab9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0ab9							;
      3  0ab9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  0ab9
      5  0b00		       00 00 00 00*	      ALIGN	$100
      6  0b00				   MenuColors
      7  0b00
      8  0b00							; PAL
      9  0b00		       92		      .byte.b	$92	; menu bg color
     10  0b01		       6f		      .byte.b	$6F	; cat tart color
     11  0b02		       64		      .byte.b	$64	; rainbow color red
     12  0b03		       48		      .byte.b	$48	; rainbow color orange
     13  0b04		       3c		      .byte.b	$3C	; rainbow color yellow
     14  0b05		       5a		      .byte.b	$5A	; rainbow color green
     15  0b06		       b8		      .byte.b	$B8	; rainbow color blue
     16  0b07		       c6		      .byte.b	$C6	; rainbow color purple
     17  0b08							; NTSC
     18  0b08		       a2		      .byte.b	$A2	; menu bg color
     19  0b09		       5f		      .byte.b	$5F	; cat tart color
     20  0b0a		       44		      .byte.b	$44	; rainbow color red
     21  0b0b		       38		      .byte.b	$38	; rainbow color orange
     22  0b0c		       1c		      .byte.b	$1C	; rainbow color yellow
     23  0b0d		       ca		      .byte.b	$CA	; rainbow color green
     24  0b0e		       a8		      .byte.b	$A8	; rainbow color blue
     25  0b0f		       76		      .byte.b	$76	; rainbow color purple
     26  0b10
------- FILE bank1.asm
------- FILE bank1/data/getTxtField.asm LEVEL 3 PASS 2
      0  0b10					      include	bank1/data/getTxtField.asm
      1  0b10				   GetTxtField
      2  0b10		       e8		      inx
      3  0b11		       a5 81		      lda	Variation
      4  0b13
      5  0b13		       e0 02		      cpx	#2
      6  0b15		       d0 10		      bne	.Try3
      7  0b17		       0a		      asl
      8  0b18		       0a		      asl
      9  0b19		       0a		      asl
     10  0b1a		       10 03		      bpl	.Plr1
     11  0b1c		       a9 11		      lda	#17
     12  0b1e		       60		      rts
     13  0b1f		       b0 03	   .Plr1      bcs	.TwoPlr
     14  0b21		       a9 af		      lda	#175
     15  0b23		       60		      rts
     16  0b24		       a9 b7	   .TwoPlr    lda	#183
     17  0b26		       60		      rts
     18  0b27
     19  0b27		       e0 03	   .Try3      cpx	#3
     20  0b29		       d0 0e		      bne	.Try4
     21  0b2b		       29 30		      and	#%00110000
     22  0b2d		       f0 07		      beq	.Start
     23  0b2f		       c9 30		      cmp	#%00110000
     24  0b31		       f0 03		      beq	.Start
     25  0b33		       a9 17		      lda	#23
     26  0b35		       60		      rts
     27  0b36		       a9 42	   .Start     lda	#66
     28  0b38		       60		      rts
     29  0b39
     30  0b39		       e0 04	   .Try4      cpx	#4
     31  0b3b		       d0 11		      bne	.Try5
     32  0b3d		       a8		      tay
     33  0b3e		       29 10		      and	#%00010000
     34  0b40		       d0 04		      bne	.Plr2
     35  0b42		       98		      tya
     36  0b43		       4a		      lsr
     37  0b44		       4a		      lsr
      0  0b45					      SKIP_BYTE
      1  0b45		       80		      HEX	80
     39  0b46		       98	   .Plr2      tya
     40  0b47		       29 03		      and	#3
     41  0b49		       a8		      tay
     42  0b4a		       b9 5f 1b 	      lda	DifTxtOffset,y
     43  0b4d		       60		      rts
     44  0b4e
     45  0b4e		       e0 05	   .Try5      cpx	#5
     46  0b50		       d0 03		      bne	.Try6
     47  0b52		       a9 49		      lda	#73
     48  0b54		       60		      rts
     49  0b55
     50  0b55		       e0 06	   .Try6      cpx	#6
     51  0b57		       d0 03		      bne	.Blank
     52  0b59		       a9 50		      lda	#80
     53  0b5b		       60		      rts
     54  0b5c
     55  0b5c				   .Blank
     56  0b5c		       a9 00		      lda	#0
     57  0b5e		       60		      rts
     58  0b5f
     59  0b5f
     60  0b5f
     61  0b5f				   DifTxtOffset
     62  0b5f		       1d		      .byte.b	29
     63  0b60		       6c		      .byte.b	108
     64  0b61		       bf		      .byte.b	191
     65  0b62		       73		      .byte.b	115
     66  0b63
------- FILE bank1.asm
------- FILE bank1/data/menutxtdlytbl.asm LEVEL 3 PASS 2
      0  0b63					      include	bank1/data/menutxtdlytbl.asm
      1  0b63				   MenuTxtDlyTbl
      2  0b63
      3  0b63		       0c		      .byte.b	(0 << 4) + (6 << 1) + 0
      4  0b64		       1a		      .byte.b	(1 << 4) + (5 << 1) + 0
      5  0b65		       0a		      .byte.b	(0 << 4) + (5 << 1) + 0
      6  0b66		       18		      .byte.b	(1 << 4) + (4 << 1) + 0
      7  0b67		       08		      .byte.b	(0 << 4) + (4 << 1) + 0
      8  0b68		       16		      .byte.b	(1 << 4) + (3 << 1) + 0
      9  0b69		       06		      .byte.b	(0 << 4) + (3 << 1) + 0
     10  0b6a		       14		      .byte.b	(1 << 4) + (2 << 1) + 0
     11  0b6b		       04		      .byte.b	(0 << 4) + (2 << 1) + 0
     12  0b6c		       12		      .byte.b	(1 << 4) + (1 << 1) + 0
     13  0b6d		       02		      .byte.b	(0 << 4) + (1 << 1) + 0
     14  0b6e		       10		      .byte.b	(1 << 4) + (0 << 1) + 0
     15  0b6f		       00		      .byte.b	(0 << 4) + (0 << 1) + 0
     16  0b70		       8d		      .byte.b	(8 << 4) + (6 << 1) + 1
     17  0b71		       7d		      .byte.b	(7 << 4) + (6 << 1) + 1
     18  0b72		       6d		      .byte.b	(6 << 4) + (6 << 1) + 1
     19  0b73		       5d		      .byte.b	(5 << 4) + (6 << 1) + 1
     20  0b74		       4d		      .byte.b	(4 << 4) + (6 << 1) + 1
     21  0b75		       3d		      .byte.b	(3 << 4) + (6 << 1) + 1
     22  0b76		       2d		      .byte.b	(2 << 4) + (6 << 1) + 1
     23  0b77		       1d		      .byte.b	(1 << 4) + (6 << 1) + 1
     24  0b78
     25  0b78				   JoyUpDnMask
     26  0b78		       cf		      .byte.b	%11001111
     27  0b79		       fc		      .byte.b	%11111100
     28  0b7a
     29  0b7a				   SetJoyMask
     30  0b7a		       60		      .byte.b	%01100000
     31  0b7b		       a0		      .byte.b	%10100000
     32  0b7c
     33  0b7c				   SetPdlMask
     34  0b7c		       a0		      .byte.b	%10100000
     35  0b7d		       60		      .byte.b	%01100000
     36  0b7e
     37  0b7e				   PdlFireMask
     38  0b7e		       80		      .byte.b	%10000000
     39  0b7f		       40		      .byte.b	%01000000
     40  0b80		       08		      .byte.b	%00001000
     41  0b81
     42  0b81		       00	   Mult21     .byte.b	0
     43  0b82		       15		      .byte.b	21
     44  0b83		       2a		      .byte.b	42
     45  0b84		       3f		      .byte.b	63
     46  0b85		       54		      .byte.b	84
     47  0b86
------- FILE bank1.asm
------- FILE bank1/data/music.asm LEVEL 3 PASS 2
      0  0b86					      include	bank1/data/music.asm
      1  0b86							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0b86							; Music Data Tables
      3  0b86							;
      4  0b86							; Uses 311 bytes total of ROM
      5  0b86							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0b86
      7  0c00		       00 00 00 00*	      ALIGN	$100
      8  0c00
      9  0c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  0c00							; Equates for note frequencies
     11  0c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     12  0c00
     13  0c00		       00 00	   NOTE_HOLD  equ	0
     14  0c00		       00 10	   NOTE_D4S   equ	16
     15  0c00		       00 0f	   NOTE_E4    equ	15
     16  0c00		       00 0d	   NOTE_F4S   equ	13
     17  0c00		       00 0c	   NOTE_G4S   equ	12
     18  0c00		       00 0a	   NOTE_A4S   equ	10
     19  0c00		       00 9f	   NOTE_B4    equ	128 + 31
     20  0c00		       00 9b	   NOTE_C5S   equ	128 + 27
     21  0c00		       00 9a	   NOTE_D5    equ	128 + 26
     22  0c00		       00 98	   NOTE_D5S   equ	128 + 24
     23  0c00		       00 97	   NOTE_E5    equ	128 + 23
     24  0c00		       00 94	   NOTE_F5S   equ	128 + 20
     25  0c00		       00 92	   NOTE_G5S   equ	128 + 18
     26  0c00		       00 90	   NOTE_A5S   equ	128 + 16
     27  0c00		       00 8f	   NOTE_B5    equ	128 + 15
     28  0c00		       00 8d	   NOTE_C6S   equ	128 + 13
     29  0c00		       00 8b	   NOTE_E6    equ	128 + 11
     30  0c00
     31  0c00
     32  0c00
     33  0c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  0c00							; Note lengths in frames for each 18-note cycle, for 60Hz NTSC and 50Hz PAL.
     35  0c00							; A full cycle in 60Hz mode is 114 frames long, or 95 frames for 50Hz mode.
     36  0c00							; Either mode spends exactly 1.9 seconds for each 18-note cycle.
     37  0c00							; At 4 notes per beat, this is very close to 142 BPM.
     38  0c00							;
     39  0c00							; Uses 37 bytes of ROM
     40  0c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41  0c00
     42  0c00		       06		      .byte.b	6
     43  0c01				   NoteLenNTSC
     44  0c01		       06		      .byte.b	6
     45  0c02		       07		      .byte.b	7
     46  0c03		       06		      .byte.b	6
     47  0c04		       06		      .byte.b	6
     48  0c05		       07		      .byte.b	7
     49  0c06		       06		      .byte.b	6
     50  0c07		       06		      .byte.b	6
     51  0c08		       07		      .byte.b	7
     52  0c09		       06		      .byte.b	6
     53  0c0a		       06		      .byte.b	6
     54  0c0b		       07		      .byte.b	7
     55  0c0c		       06		      .byte.b	6
     56  0c0d		       06		      .byte.b	6
     57  0c0e		       07		      .byte.b	7
     58  0c0f		       06		      .byte.b	6
     59  0c10		       06		      .byte.b	6
     60  0c11		       07		      .byte.b	7
     61  0c12							;	.byte	6
     62  0c12
     63  0c12		       06		      .byte.b	6
     64  0c13				   NoteLenPAL
     65  0c13		       05		      .byte.b	5
     66  0c14		       05		      .byte.b	5
     67  0c15		       05		      .byte.b	5
     68  0c16		       06		      .byte.b	6
     69  0c17		       05		      .byte.b	5
     70  0c18		       05		      .byte.b	5
     71  0c19		       05		      .byte.b	5
     72  0c1a		       06		      .byte.b	6
     73  0c1b		       05		      .byte.b	5
     74  0c1c		       05		      .byte.b	5
     75  0c1d		       06		      .byte.b	6
     76  0c1e		       05		      .byte.b	5
     77  0c1f		       05		      .byte.b	5
     78  0c20		       05		      .byte.b	5
     79  0c21		       06		      .byte.b	6
     80  0c22		       05		      .byte.b	5
     81  0c23		       05		      .byte.b	5
     82  0c24		       06		      .byte.b	6
     83  0c25
     84  0c25
     85  0c25
     86  0c25							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     87  0c25							; Volume envelopes for intro and song
     88  0c25							;
     89  0c25							; Uses 26 bytes of ROM
     90  0c25							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     91  0c25
     92  0c25				   IntroVlm
     93  0c25		       0f 0e 0d 0b*	      HEX	0F 0E 0D 0B 0A 09 08 07 06 05 04 03 02
     94  0c32
     95  0c32				   MusicVlm
     96  0c32		       09 0b 0d 0e*	      HEX	09 0B 0D 0E 0F 0F 0F 0E 0D 0C 0A 09 07
     97  0c3f
     98  0c3f
     99  0c3f
    100  0c3f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    101  0c3f							; Melody Intro Sequence
    102  0c3f							;
    103  0c3f							; Uses 32 bytes of ROM
    104  0c3f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    105  0c3f
    106  0c3f				   IntroSeq
    107  0c3f		       98		      .byte.b	NOTE_D5S
    108  0c40		       97		      .byte.b	NOTE_E5
    109  0c41		       94		      .byte.b	NOTE_F5S
    110  0c42		       00		      .byte.b	NOTE_HOLD
    111  0c43		       8f		      .byte.b	NOTE_B5
    112  0c44		       00		      .byte.b	NOTE_HOLD
    113  0c45		       98		      .byte.b	NOTE_D5S
    114  0c46		       97		      .byte.b	NOTE_E5
    115  0c47		       94		      .byte.b	NOTE_F5S
    116  0c48		       8f		      .byte.b	NOTE_B5
    117  0c49		       8d		      .byte.b	NOTE_C6S
    118  0c4a		       00		      .byte.b	NOTE_HOLD
    119  0c4b		       8d		      .byte.b	NOTE_C6S
    120  0c4c		       97		      .byte.b	NOTE_E5
    121  0c4d		       94		      .byte.b	NOTE_F5S
    122  0c4e		       00		      .byte.b	NOTE_HOLD
    123  0c4f
    124  0c4f		       94		      .byte.b	NOTE_F5S
    125  0c50		       00		      .byte.b	NOTE_HOLD
    126  0c51		       98		      .byte.b	NOTE_D5S
    127  0c52		       97		      .byte.b	NOTE_E5
    128  0c53		       94		      .byte.b	NOTE_F5S
    129  0c54		       00		      .byte.b	NOTE_HOLD
    130  0c55		       8f		      .byte.b	NOTE_B5
    131  0c56		       00		      .byte.b	NOTE_HOLD
    132  0c57		       8d		      .byte.b	NOTE_C6S
    133  0c58		       90		      .byte.b	NOTE_A5S
    134  0c59		       8f		      .byte.b	NOTE_B5
    135  0c5a		       8d		      .byte.b	NOTE_C6S
    136  0c5b		       8b		      .byte.b	NOTE_E6
    137  0c5c		       8d		      .byte.b	NOTE_C6S
    138  0c5d		       8b		      .byte.b	NOTE_E6
    139  0c5e		       8f		      .byte.b	NOTE_B5
    140  0c5f
    141  0c5f
    142  0c5f
    143  0c5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    144  0c5f							; Melody Bass Sequence
    145  0c5f							;
    146  0c5f							; Uses 8 bytes of ROM
    147  0c5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  0c5f
    149  0c5f				   BassSeq
    150  0c5f		       0b 0a 0c 09*	      HEX	0B 0A 0C 09 0D 0A 0F 0F
    151  0c67
    152  0c67
    153  0c67
    154  0c67							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    155  0c67							; Melody Lead Sequence Order
    156  0c67							;
    157  0c67							; Uses 16 bytes of ROM
    158  0c67							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  0c67
    160  0c67				   MusicSeqs
    161  0c67		       00		      HEX	00
    162  0c68		       10		      HEX	10
    163  0c69		       20		      HEX	20
    164  0c6a		       30		      HEX	30
    165  0c6b		       00		      HEX	00
    166  0c6c		       10		      HEX	10
    167  0c6d		       20		      HEX	20
    168  0c6e		       40		      HEX	40
    169  0c6f		       50		      HEX	50
    170  0c70		       60		      HEX	60
    171  0c71		       70		      HEX	70
    172  0c72		       80		      HEX	80
    173  0c73		       50		      HEX	50
    174  0c74		       60		      HEX	60
    175  0c75		       70		      HEX	70
    176  0c76		       90		      HEX	90
    177  0c77
    178  0c77
    179  0c77
    180  0c77							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    181  0c77							; Melody Lead Sequences
    182  0c77							;
    183  0c77							; Uses 192 bytes of ROM
    184  0c77							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    185  0c77
    186  0c77				   MusicSeq0
    187  0c77		       94		      .byte.b	NOTE_F5S
    188  0c78		       00		      .byte.b	NOTE_HOLD
    189  0c79		       92		      .byte.b	NOTE_G5S
    190  0c7a		       00		      .byte.b	NOTE_HOLD
    191  0c7b		       98		      .byte.b	NOTE_D5S
    192  0c7c		       98		      .byte.b	NOTE_D5S
    193  0c7d		       00		      .byte.b	NOTE_HOLD
    194  0c7e		       9f		      .byte.b	NOTE_B4
    195  0c7f		       9a		      .byte.b	NOTE_D5
    196  0c80		       9b		      .byte.b	NOTE_C5S
    197  0c81		       9f		      .byte.b	NOTE_B4
    198  0c82		       00		      .byte.b	NOTE_HOLD
    199  0c83		       9f		      .byte.b	NOTE_B4
    200  0c84		       00		      .byte.b	NOTE_HOLD
    201  0c85		       9b		      .byte.b	NOTE_C5S
    202  0c86		       00		      .byte.b	NOTE_HOLD
    203  0c87
    204  0c87		       9a		      .byte.b	NOTE_D5
    205  0c88		       00		      .byte.b	NOTE_HOLD
    206  0c89		       9a		      .byte.b	NOTE_D5
    207  0c8a		       9b		      .byte.b	NOTE_C5S
    208  0c8b		       9f		      .byte.b	NOTE_B4
    209  0c8c		       9b		      .byte.b	NOTE_C5S
    210  0c8d		       98		      .byte.b	NOTE_D5S
    211  0c8e		       94		      .byte.b	NOTE_F5S
    212  0c8f		       92		      .byte.b	NOTE_G5S
    213  0c90		       98		      .byte.b	NOTE_D5S
    214  0c91		       94		      .byte.b	NOTE_F5S
    215  0c92		       9b		      .byte.b	NOTE_C5S
    216  0c93		       98		      .byte.b	NOTE_D5S
    217  0c94		       9f		      .byte.b	NOTE_B4
    218  0c95		       9b		      .byte.b	NOTE_C5S
    219  0c96		       9f		      .byte.b	NOTE_B4
    220  0c97
    221  0c97		       98		      .byte.b	NOTE_D5S
    222  0c98		       00		      .byte.b	NOTE_HOLD
    223  0c99		       94		      .byte.b	NOTE_F5S
    224  0c9a		       00		      .byte.b	NOTE_HOLD
    225  0c9b		       92		      .byte.b	NOTE_G5S
    226  0c9c		       98		      .byte.b	NOTE_D5S
    227  0c9d		       94		      .byte.b	NOTE_F5S
    228  0c9e		       9b		      .byte.b	NOTE_C5S
    229  0c9f		       98		      .byte.b	NOTE_D5S
    230  0ca0		       9f		      .byte.b	NOTE_B4
    231  0ca1		       9b		      .byte.b	NOTE_C5S
    232  0ca2		       98		      .byte.b	NOTE_D5S
    233  0ca3		       9a		      .byte.b	NOTE_D5
    234  0ca4		       9b		      .byte.b	NOTE_C5S
    235  0ca5		       9f		      .byte.b	NOTE_B4
    236  0ca6		       9b		      .byte.b	NOTE_C5S
    237  0ca7
    238  0ca7		       9a		      .byte.b	NOTE_D5
    239  0ca8		       00		      .byte.b	NOTE_HOLD
    240  0ca9		       9f		      .byte.b	NOTE_B4
    241  0caa		       9b		      .byte.b	NOTE_C5S
    242  0cab		       98		      .byte.b	NOTE_D5S
    243  0cac		       94		      .byte.b	NOTE_F5S
    244  0cad		       9b		      .byte.b	NOTE_C5S
    245  0cae		       9a		      .byte.b	NOTE_D5
    246  0caf		       9b		      .byte.b	NOTE_C5S
    247  0cb0		       9f		      .byte.b	NOTE_B4
    248  0cb1		       9b		      .byte.b	NOTE_C5S
    249  0cb2		       00		      .byte.b	NOTE_HOLD
    250  0cb3		       9f		      .byte.b	NOTE_B4
    251  0cb4		       00		      .byte.b	NOTE_HOLD
    252  0cb5		       9b		      .byte.b	NOTE_C5S
    253  0cb6		       00		      .byte.b	NOTE_HOLD
    254  0cb7
    255  0cb7		       9a		      .byte.b	NOTE_D5
    256  0cb8		       00		      .byte.b	NOTE_HOLD
    257  0cb9		       9f		      .byte.b	NOTE_B4
    258  0cba		       9b		      .byte.b	NOTE_C5S
    259  0cbb		       98		      .byte.b	NOTE_D5S
    260  0cbc		       94		      .byte.b	NOTE_F5S
    261  0cbd		       9b		      .byte.b	NOTE_C5S
    262  0cbe		       9a		      .byte.b	NOTE_D5
    263  0cbf		       9b		      .byte.b	NOTE_C5S
    264  0cc0		       9f		      .byte.b	NOTE_B4
    265  0cc1		       9b		      .byte.b	NOTE_C5S
    266  0cc2		       00		      .byte.b	NOTE_HOLD
    267  0cc3		       9f		      .byte.b	NOTE_B4
    268  0cc4		       00		      .byte.b	NOTE_HOLD
    269  0cc5		       9f		      .byte.b	NOTE_B4
    270  0cc6		       00		      .byte.b	NOTE_HOLD
    271  0cc7
    272  0cc7		       9f		      .byte.b	NOTE_B4
    273  0cc8		       00		      .byte.b	NOTE_HOLD
    274  0cc9		       0d		      .byte.b	NOTE_F4S
    275  0cca		       0c		      .byte.b	NOTE_G4S
    276  0ccb		       9f		      .byte.b	NOTE_B4
    277  0ccc		       00		      .byte.b	NOTE_HOLD
    278  0ccd		       0d		      .byte.b	NOTE_F4S
    279  0cce		       0c		      .byte.b	NOTE_G4S
    280  0ccf		       9f		      .byte.b	NOTE_B4
    281  0cd0		       9b		      .byte.b	NOTE_C5S
    282  0cd1		       98		      .byte.b	NOTE_D5S
    283  0cd2		       9f		      .byte.b	NOTE_B4
    284  0cd3		       97		      .byte.b	NOTE_E5
    285  0cd4		       98		      .byte.b	NOTE_D5S
    286  0cd5		       97		      .byte.b	NOTE_E5
    287  0cd6		       94		      .byte.b	NOTE_F5S
    288  0cd7
    289  0cd7		       9f		      .byte.b	NOTE_B4
    290  0cd8		       00		      .byte.b	NOTE_HOLD
    291  0cd9		       9f		      .byte.b	NOTE_B4
    292  0cda		       00		      .byte.b	NOTE_HOLD
    293  0cdb		       0d		      .byte.b	NOTE_F4S
    294  0cdc		       0c		      .byte.b	NOTE_G4S
    295  0cdd		       9f		      .byte.b	NOTE_B4
    296  0cde		       0d		      .byte.b	NOTE_F4S
    297  0cdf		       97		      .byte.b	NOTE_E5
    298  0ce0		       98		      .byte.b	NOTE_D5S
    299  0ce1		       9b		      .byte.b	NOTE_C5S
    300  0ce2		       9f		      .byte.b	NOTE_B4
    301  0ce3		       0d		      .byte.b	NOTE_F4S
    302  0ce4		       10		      .byte.b	NOTE_D4S
    303  0ce5		       0f		      .byte.b	NOTE_E4
    304  0ce6		       0d		      .byte.b	NOTE_F4S
    305  0ce7
    306  0ce7		       9f		      .byte.b	NOTE_B4
    307  0ce8		       00		      .byte.b	NOTE_HOLD
    308  0ce9		       0d		      .byte.b	NOTE_F4S
    309  0cea		       0c		      .byte.b	NOTE_G4S
    310  0ceb		       9f		      .byte.b	NOTE_B4
    311  0cec		       00		      .byte.b	NOTE_HOLD
    312  0ced		       0d		      .byte.b	NOTE_F4S
    313  0cee		       0c		      .byte.b	NOTE_G4S
    314  0cef		       9f		      .byte.b	NOTE_B4
    315  0cf0		       9f		      .byte.b	NOTE_B4
    316  0cf1		       9b		      .byte.b	NOTE_C5S
    317  0cf2		       98		      .byte.b	NOTE_D5S
    318  0cf3		       9f		      .byte.b	NOTE_B4
    319  0cf4		       0d		      .byte.b	NOTE_F4S
    320  0cf5		       0c		      .byte.b	NOTE_G4S
    321  0cf6		       0d		      .byte.b	NOTE_F4S
    322  0cf7
    323  0cf7		       9f		      .byte.b	NOTE_B4
    324  0cf8		       00		      .byte.b	NOTE_HOLD
    325  0cf9		       9f		      .byte.b	NOTE_B4
    326  0cfa		       0a		      .byte.b	NOTE_A4S
    327  0cfb		       9f		      .byte.b	NOTE_B4
    328  0cfc		       0d		      .byte.b	NOTE_F4S
    329  0cfd		       0c		      .byte.b	NOTE_G4S
    330  0cfe		       9f		      .byte.b	NOTE_B4
    331  0cff		       97		      .byte.b	NOTE_E5
    332  0d00		       98		      .byte.b	NOTE_D5S
    333  0d01		       97		      .byte.b	NOTE_E5
    334  0d02		       94		      .byte.b	NOTE_F5S
    335  0d03		       9f		      .byte.b	NOTE_B4
    336  0d04		       00		      .byte.b	NOTE_HOLD
    337  0d05		       0a		      .byte.b	NOTE_A4S
    338  0d06		       00		      .byte.b	NOTE_HOLD
    339  0d07
    340  0d07		       9f		      .byte.b	NOTE_B4
    341  0d08		       00		      .byte.b	NOTE_HOLD
    342  0d09		       9f		      .byte.b	NOTE_B4
    343  0d0a		       0a		      .byte.b	NOTE_A4S
    344  0d0b		       9f		      .byte.b	NOTE_B4
    345  0d0c		       0d		      .byte.b	NOTE_F4S
    346  0d0d		       0c		      .byte.b	NOTE_G4S
    347  0d0e		       9f		      .byte.b	NOTE_B4
    348  0d0f		       97		      .byte.b	NOTE_E5
    349  0d10		       98		      .byte.b	NOTE_D5S
    350  0d11		       97		      .byte.b	NOTE_E5
    351  0d12		       94		      .byte.b	NOTE_F5S
    352  0d13		       9f		      .byte.b	NOTE_B4
    353  0d14		       00		      .byte.b	NOTE_HOLD
    354  0d15		       9b		      .byte.b	NOTE_C5S
    355  0d16		       00		      .byte.b	NOTE_HOLD
    356  0d17
    357  0d17		       10		      .byte.b	NOTE_D4S
    358  0d18		       0f		      .byte.b	NOTE_E4
    359  0d19		       0d		      .byte.b	NOTE_F4S
    360  0d1a		       00		      .byte.b	NOTE_HOLD
    361  0d1b		       9f		      .byte.b	NOTE_B4
    362  0d1c		       00		      .byte.b	NOTE_HOLD
    363  0d1d		       10		      .byte.b	NOTE_D4S
    364  0d1e		       0f		      .byte.b	NOTE_E4
    365  0d1f		       0d		      .byte.b	NOTE_F4S
    366  0d20		       9f		      .byte.b	NOTE_B4
    367  0d21		       9b		      .byte.b	NOTE_C5S
    368  0d22		       98		      .byte.b	NOTE_D5S
    369  0d23		       9b		      .byte.b	NOTE_C5S
    370  0d24		       0a		      .byte.b	NOTE_A4S
    371  0d25		       9f		      .byte.b	NOTE_B4
    372  0d26		       00		      .byte.b	NOTE_HOLD
    373  0d27
    374  0d27		       0d		      .byte.b	NOTE_F4S
    375  0d28		       00		      .byte.b	NOTE_HOLD
    376  0d29		       10		      .byte.b	NOTE_D4S
    377  0d2a		       0f		      .byte.b	NOTE_E4
    378  0d2b		       0d		      .byte.b	NOTE_F4S
    379  0d2c		       00		      .byte.b	NOTE_HOLD
    380  0d2d		       9f		      .byte.b	NOTE_B4
    381  0d2e		       00		      .byte.b	NOTE_HOLD
    382  0d2f		       9b		      .byte.b	NOTE_C5S
    383  0d30		       0a		      .byte.b	NOTE_A4S
    384  0d31		       9f		      .byte.b	NOTE_B4
    385  0d32		       9b		      .byte.b	NOTE_C5S
    386  0d33		       97		      .byte.b	NOTE_E5
    387  0d34		       98		      .byte.b	NOTE_D5S
    388  0d35		       97		      .byte.b	NOTE_E5
    389  0d36		       9b		      .byte.b	NOTE_C5S
    390  0d37
    391  0d37
    392  0d37
    393  0d37							;
    394  0d37
    395  0d37				   CatTimingNTSC
    396  0d37		       04		      .byte.b	4
    397  0d38		       04		      .byte.b	4
    398  0d39		       04		      .byte.b	4
    399  0d3a		       05		      .byte.b	5
    400  0d3b		       04		      .byte.b	4
    401  0d3c		       04		      .byte.b	4
    402  0d3d		       04		      .byte.b	4
    403  0d3e		       05		      .byte.b	5
    404  0d3f		       04		      .byte.b	4
    405  0d40		       04		      .byte.b	4
    406  0d41		       04		      .byte.b	4
    407  0d42		       04		      .byte.b	4
    408  0d43		       05		      .byte.b	5
    409  0d44		       04		      .byte.b	4
    410  0d45		       04		      .byte.b	4
    411  0d46		       04		      .byte.b	4
    412  0d47		       05		      .byte.b	5
    413  0d48		       04		      .byte.b	4
    414  0d49		       04		      .byte.b	4
    415  0d4a		       04		      .byte.b	4
    416  0d4b		       04		      .byte.b	4
    417  0d4c		       05		      .byte.b	5
    418  0d4d		       04		      .byte.b	4
    419  0d4e		       04		      .byte.b	4
    420  0d4f		       04		      .byte.b	4
    421  0d50		       05		      .byte.b	5
    422  0d51							;	.byte 4
    423  0d51
    424  0d51				   CatTimingPAL
    425  0d51		       04		      .byte.b	4
    426  0d52		       03		      .byte.b	3
    427  0d53		       04		      .byte.b	4
    428  0d54		       03		      .byte.b	3
    429  0d55		       04		      .byte.b	4
    430  0d56		       03		      .byte.b	3
    431  0d57		       04		      .byte.b	4
    432  0d58		       03		      .byte.b	3
    433  0d59		       04		      .byte.b	4
    434  0d5a		       03		      .byte.b	3
    435  0d5b		       04		      .byte.b	4
    436  0d5c		       03		      .byte.b	3
    437  0d5d		       04		      .byte.b	4
    438  0d5e		       03		      .byte.b	3
    439  0d5f		       04		      .byte.b	4
    440  0d60		       03		      .byte.b	3
    441  0d61		       04		      .byte.b	4
    442  0d62		       03		      .byte.b	3
    443  0d63		       04		      .byte.b	4
    444  0d64		       03		      .byte.b	3
    445  0d65		       04		      .byte.b	4
    446  0d66		       03		      .byte.b	3
    447  0d67		       04		      .byte.b	4
    448  0d68		       03		      .byte.b	3
    449  0d69		       04		      .byte.b	4
    450  0d6a		       03		      .byte.b	3
    451  0d6b		       04		      .byte.b	4
    452  0d6c		       03		      .byte.b	3
    453  0d6d		       04		      .byte.b	4
    454  0d6e
------- FILE bank1.asm
     19  0d6e
     20  0d6e				   ZZZ_1
     21  0d6e
      0  0d6e					      END_BANK	1
      1  0ffa					      ORG	[1 - 1] * $1000 + $0FFA
      2  0ffa
      3  0ffa		       00 10		      .word.w	JmpInitSystem
      4  0ffc		       00 10		      .word.w	JmpInitSystem
      5  0ffe		       00 10		      .word.w	JmpInitSystem
      6  1000
     23  1000
------- FILE main.asm
------- FILE bank2.asm LEVEL 2 PASS 2
      0  1000					      include	bank2.asm
      1  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1000							; Bank 2
      3  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1000
      0  1000					      START_BANK	2
      1  2000 ????				      SEG	BANK_2
      2  1000					      ORG	[2 - 1] * $1000
      3  1000					      RORG	$1000
      4  1000					      SUBROUTINE
      5  1000
      6  1000				   JmpInitSystem
      7  1000		       0c f6 1f 	      nop	SelectBank1
      8  1003		       4c 1e 10 	      jmp	InitSystem
      9  1006				   JmpMenuOverScan
     10  1006		       0c f6 1f 	      nop	SelectBank1
     11  1009		       4c e0 10 	      jmp	MenuOverScan
     12  100c				   JmpGamePlay
     13  100c		       0c f7 1f 	      nop	SelectBank2
     14  100f		       4c 1e 10 	      jmp	GameplayInit
     15  1012				   JmpMenuTxtBtm
     16  1012		       0c f8 1f 	      nop	SelectBank3
     17  1015		       4c e1 15 	      jmp	MenuTxtBtm
     18  1018				   JmpMenuBottom
     19  1018		       0c f6 1f 	      nop	SelectBank1
     20  101b		       4c 99 18 	      jmp	MenuBottom
     21  101e
      6  101e
------- FILE bank2/init.asm LEVEL 3 PASS 2
      0  101e					      include	bank2/init.asm
      1  101e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  101e							; Gameplay Initialization
      3  101e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  101e
      5  101e				   GameplayInit SUBROUTINE
      6  101e
      7  101e		       a9 00		      lda	#0
      8  1020		       a2 90		      ldx	#RamLocal
      9  1022				   .ClearRam
     10  1022		       95 00		      sta	$00,x
     11  1024		       9a		      txs
     12  1025		       e8		      inx
     13  1026		       d0 fa		      bne	.ClearRam
     14  1028
     15  1028							; Set the food items (temporary demo code)
     16  1028		       a9 10		      lda	#$10
     17  102a		       85 a5		      sta	FoodItemL+0
     18  102c		       a9 70		      lda	#$70
     19  102e		       85 ac		      sta	FoodItemR+0
     20  1030
     21  1030		       a9 20		      lda	#$20
     22  1032		       85 a6		      sta	FoodItemL+1
     23  1034		       a9 80		      lda	#$80
     24  1036		       85 ad		      sta	FoodItemR+1
     25  1038
     26  1038		       a9 30		      lda	#$30
     27  103a		       85 a7		      sta	FoodItemL+2
     28  103c		       a9 90		      lda	#$90
     29  103e		       85 ae		      sta	FoodItemR+2
     30  1040
     31  1040		       a9 40		      lda	#$40
     32  1042		       85 a8		      sta	FoodItemL+3
     33  1044		       a9 a0		      lda	#$A0
     34  1046		       85 af		      sta	FoodItemR+3
     35  1048
     36  1048		       a9 50		      lda	#$50
     37  104a		       85 a9		      sta	FoodItemL+4
     38  104c		       a9 b0		      lda	#$B0
     39  104e		       85 b0		      sta	FoodItemR+4
     40  1050
     41  1050		       a9 60		      lda	#$60
     42  1052		       85 aa		      sta	FoodItemL+5
     43  1054		       a9 c0		      lda	#$C0
     44  1056		       85 b1		      sta	FoodItemR+5
     45  1058
     46  1058		       a9 d0		      lda	#$D0
     47  105a		       85 ab		      sta	FoodItemL+6
     48  105c		       a9 e0		      lda	#$E0
     49  105e		       85 b2		      sta	FoodItemR+6
------- FILE bank2.asm
------- FILE bank2/code/oscan_logic.asm LEVEL 3 PASS 2
      0  1060					      include	bank2/code/oscan_logic.asm
      1  1060							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1060							; Overscan
      3  1060							;
      4  1060							; Start the overscan timer and do game logic
      5  1060							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1060
      7  1060				   Overscan   SUBROUTINE
      8  1060
      9  1060		       e6 80		      inc	Frame	; increment the frame number
      0  1062					      SET_OSCAN_TIMER	0
      1  1062					      SUBROUTINE
      2  1062
      3  1062		       a9 40		      lda	#OSCAN_PAL + 0
      4  1064		       24 81		      bit	Variation
      5  1066		       10 02		      bpl	.PAL
      6  1068		       a9 24		      lda	#OSCAN_NTSC + 0
      7  106a		       85 02	   .PAL       sta	WSYNC
      8  106c		       8d 96 02 	      sta	TIM64T
      9  106f
     11  106f
     12  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     13  106f							; Proccess Joysticks
     14  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15  106f
     16  106f		       a9 00		      lda	#0
     17  1071		       8d 81 02 	      sta	SWACNT	; set all I/O pins to input for joystick reading
     18  1074		       ad 80 02 	      lda	SWCHA	; get joystick position for this frame ONLY ONCE
     19  1077		       85 c7		      sta	Temp	; save joystick position for consistency
     20  1079		       29 30		      and	#$30	; check left stick's up/down bit states
     21  107b		       c9 30		      cmp	#$30	; to see if they are both HI (joystick centered)
     22  107d		       d0 06		      bne	.NotCenter	; if not, skip ahead
     23  107f		       a5 a3		      lda	JoyCenter	; otherwise set rightmost bit of JoyCenter
     24  1081		       09 01		      ora	#1	; (to signify that the joystick HAS been re-centered
     25  1083		       85 a3		      sta	JoyCenter	; before the cat's next movement)
     26  1085				   .NotCenter
     27  1085		       a5 0c		      lda	INPT4	; if the left fire button is pressed,
     28  1087		       10 06		      bpl	.CheckPos	; skip the check for a previously centered joystick
     29  1089		       a5 a3		      lda	JoyCenter	; otherwise, check if the joystick has been centered
     30  108b		       29 01		      and	#1
     31  108d		       f0 2a		      beq	.Skip	; if it hasn't, don't make a movement
     32  108f				   .CheckPos
     33  108f		       a5 a1		      lda	CatPosition	; get cat's position
     34  1091		       29 1f		      and	#$1F	; check right 5 bits only
     35  1093		       f0 04		      beq	.ReadJoy	; if zero, we are centered on a row (read joystick)
     36  1095		       c9 13		      cmp	#19	; or if 19, we are centered on the bottom row
     37  1097		       d0 20		      bne	.Skip	; if not centered, skip reading joystick
     38  1099				   .ReadJoy
     39  1099		       a5 c7		      lda	Temp
     40  109b		       0a		      asl		; ignore joystick right
     41  109c		       0a		      asl		; ignore joystick left
     42  109d		       0a		      asl		; check joystick down
     43  109e		       b0 09		      bcs	.NoDown
     44  10a0
     45  10a0							; Now that we know the player is pressing the joystick down, we need to
     46  10a0							; decide if the cat should be moved down a row.
     47  10a0
     48  10a0		       a6 a2		      ldx	CatRow
     49  10a2		       e0 06		      cpx	#6
     50  10a4		       f0 13		      beq	.Skip	; If already at the bottom row, don't move down
     51  10a6		       e8		      inx
     52  10a7		       d0 08		      bne	.ChangeRow
     53  10a9
     54  10a9				   .NoDown
     55  10a9		       0a		      asl		; check joystick up
     56  10aa		       b0 0d		      bcs	.Skip
     57  10ac		       a6 a2		      ldx	CatRow
     58  10ae		       f0 09		      beq	.Skip	; If already at the top row, don't move up
     59  10b0		       ca		      dex
     60  10b1				   .ChangeRow
     61  10b1		       86 a2		      stx	CatRow
     62  10b3		       a5 a3		      lda	JoyCenter
     63  10b5		       29 fe		      and	#$FE
     64  10b7		       85 a3		      sta	JoyCenter	; clear rightmost bit in JoyCenter
     65  10b9				   .Skip
     66  10b9
     67  10b9
     68  10b9							; Caclulate cat's position data
     69  10b9					      SUBROUTINE
     70  10b9
     71  10b9		       a5 a2		      lda	CatRow
     72  10bb		       29 07		      and	#7
     73  10bd		       aa		      tax
     74  10be		       bd 5b 1e 	      lda	RowPosition,x
     75  10c1		       c5 a0		      cmp	CatPosY
     76  10c3		       f0 17		      beq	.NoMove
     77  10c5		       30 08		      bmi	.MoveUp
     78  10c7				   .MoveDown
     79  10c7		       38		      sec
     80  10c8		       e5 a0		      sbc	CatPosY
     81  10ca		       4a		      lsr
     82  10cb		       65 a0		      adc	CatPosY
     83  10cd		       d0 0b		      bne	.UpdatePos
     84  10cf				   .MoveUp
     85  10cf		       a5 a0		      lda	CatPosY
     86  10d1		       38		      sec
     87  10d2		       fd 5b 1e 	      sbc	RowPosition,x
     88  10d5		       4a		      lsr
     89  10d6		       18		      clc
     90  10d7		       7d 5b 1e 	      adc	RowPosition,x
     91  10da				   .UpdatePos
     92  10da		       85 a0		      sta	CatPosY
     93  10dc				   .NoMove
     94  10dc		       a2 00		      ldx	#0
     95  10de				   .DivideLoop
     96  10de		       38		      sec
     97  10df		       e8		      inx
     98  10e0		       e9 13		      sbc	#19
     99  10e2		       90 07		      bcc	.AddBack
    100  10e4
    101  10e4		       e0 05		      cpx	#5
    102  10e6		       d0 f6		      bne	.DivideLoop
    103  10e8		       e8		      inx
    104  10e9		       d0 02		      bne	.SetCatPos
    105  10eb				   .AddBack
    106  10eb		       69 13		      adc	#19
    107  10ed				   .SetCatPos
    108  10ed		       85 a1		      sta	CatPosition
    109  10ef		       8a		      txa
    110  10f0		       0a		      asl
    111  10f1		       0a		      asl
    112  10f2		       0a		      asl
    113  10f3		       0a		      asl
    114  10f4		       0a		      asl
    115  10f5		       65 a1		      adc	CatPosition
    116  10f7		       85 a1		      sta	CatPosition
    117  10f9		       ca		      dex
    118  10fa		       86 a4		      stx	PreCatRows
    119  10fc
    120  10fc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    121  10fc							; Finish Overscan
    122  10fc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    123  10fc
      0  10fc					      TIMER_LOOP
      1  10fc					      SUBROUTINE
      2  10fc
      3  10fc		       ad 84 02    .Loop      lda	INTIM
      4  10ff		       d0 fb		      bne	.Loop
      5  1101
------- FILE bank2.asm
------- FILE bank2/code/vblank_logic.asm LEVEL 3 PASS 2
      0  1101					      include	bank2/code/vblank_logic.asm
      1  1101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1101							; Vertical Blank
      3  1101							;
      4  1101							; Do the vertical blanking and game logic
      5  1101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1101
      0  1101					      VERT_SYNC
      1  1101					      SUBROUTINE
      2  1101
      3  1101		       a2 4a		      ldx	#VBLANK_PAL
      4  1103		       24 81		      bit	Variation
      5  1105		       10 02		      bpl	.PAL
      6  1107		       a2 2b		      ldx	#VBLANK_NTSC
      7  1109		       a9 0e	   .PAL       lda	#%1110
      8  110b		       85 02	   .Loop      sta	WSYNC
      9  110d		       85 00		      sta	VSYNC
     10  110f		       85 01		      sta	VBLANK
     11  1111		       8e 96 02 	      stx	TIM64T
     12  1114		       4a		      lsr
     13  1115		       d0 f4		      bne	.Loop
     14  1117
      8  1117
      9  1117		       85 2b		      sta	HMCLR
     10  1119		       85 02		      sta	WSYNC
     11  111b
     12  111b							; set gfx obj positions for scoreboard display
     13  111b		       a9 f0		      lda	#$F0	; 02
     14  111d		       85 23		      sta	HMM1	; 05
     15  111f		       a9 10		      lda	#$10	; 07
     16  1121		       85 21		      sta	HMP1	; 10
     17  1123		       85 22		      sta	HMM0	; 13
      0  1125					      SLEEP	7	; 20
      1  1125				   .CYCLES    SET	7
      2  1125
      3  1125				  -	      IF	.CYCLES < 2
      4  1125				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1125				  -	      ERR
      6  1125					      ENDIF
      7  1125
      8  1125					      IF	.CYCLES & 1
      9  1125					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1125		       04 00		      nop	0
     11  1127				  -	      ELSE
     12  1127				  -	      bit	VSYNC
     13  1127					      ENDIF
     14  1127				   .CYCLES    SET	.CYCLES - 3
     15  1127					      ENDIF
     16  1127
     17  1127					      REPEAT	.CYCLES / 2
     18  1127		       ea		      nop
     17  1127					      REPEND
     18  1128		       ea		      nop
     19  1129					      REPEND
     19  1129		       85 13		      sta	RESM1	; 23
      0  112b					      SLEEP	3	; 26
      1  112b				   .CYCLES    SET	3
      2  112b
      3  112b				  -	      IF	.CYCLES < 2
      4  112b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  112b				  -	      ERR
      6  112b					      ENDIF
      7  112b
      8  112b					      IF	.CYCLES & 1
      9  112b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  112b		       04 00		      nop	0
     11  112d				  -	      ELSE
     12  112d				  -	      bit	VSYNC
     13  112d					      ENDIF
     14  112d				   .CYCLES    SET	.CYCLES - 3
     15  112d					      ENDIF
     16  112d
     17  112d				  -	      REPEAT	.CYCLES / 2
     18  112d				  -	      nop
     19  112d					      REPEND
     21  112d		       85 14		      sta	RESBL	; 29
     22  112f		       20 24 18 	      jsr	Sleep12	; 41
      0  1132					      SLEEP	11	; 52
      1  1132				   .CYCLES    SET	11
      2  1132
      3  1132				  -	      IF	.CYCLES < 2
      4  1132				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1132				  -	      ERR
      6  1132					      ENDIF
      7  1132
      8  1132					      IF	.CYCLES & 1
      9  1132					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1132		       04 00		      nop	0
     11  1134				  -	      ELSE
     12  1134				  -	      bit	VSYNC
     13  1134					      ENDIF
     14  1134				   .CYCLES    SET	.CYCLES - 3
     15  1134					      ENDIF
     16  1134
     17  1134					      REPEAT	.CYCLES / 2
     18  1134		       ea		      nop
     17  1134					      REPEND
     18  1135		       ea		      nop
     17  1135					      REPEND
     18  1136		       ea		      nop
     17  1136					      REPEND
     18  1137		       ea		      nop
     19  1138					      REPEND
     24  1138		       85 10		      sta	RESP0	; 55
     25  113a		       85 11		      sta	RESP1	; 58
     26  113c		       20 24 18 	      jsr	Sleep12	; 67
     27  113f		       85 12		      sta	RESM0	; 70
     28  1141
     29  1141		       85 02		      sta	WSYNC
     30  1143		       85 2a		      sta	HMOVE
     31  1145
     32  1145							; prepare for throbbing lines
     33  1145		       a5 80		      lda	Frame	; get the current frame number
     34  1147		       29 1c		      and	#%00011100	; change animation frame every 4 game frames
     35  1149		       4a		      lsr
     36  114a		       4a		      lsr		; shift to get a value from 0-7
     37  114b		       85 c7		      sta	Temp
     38  114d		       0a		      asl		; carry flag will always be clear after this
     39  114e		       65 c7		      adc	Temp	; multiply by 3
     40  1150		       a8		      tay
     41  1151
     42  1151		       a5 9e		      lda	ScoreColor
     43  1153		       29 f0		      and	#$F0
     44  1155		       85 c7		      sta	Temp
     45  1157		       b9 57 1b 	      lda	ThrobGfx+0,y
     46  115a		       0a		      asl
     47  115b		       90 01		      bcc	.Color0
      0  115d					      SKIP_WORD
      1  115d		       0c		      HEX	0C
     49  115e				   .Color0
     50  115e		       65 c7		      adc	Temp
     51  1160		       85 c3		      sta	ThrobColor+0
     52  1162		       b9 58 1b 	      lda	ThrobGfx+1,y
     53  1165		       0a		      asl
     54  1166		       90 01		      bcc	.Color1
      0  1168					      SKIP_WORD
      1  1168		       0c		      HEX	0C
     56  1169				   .Color1
     57  1169		       65 c7		      adc	Temp
     58  116b		       85 c4		      sta	ThrobColor+1
     59  116d		       b9 59 1b 	      lda	ThrobGfx+2,y
     60  1170		       0a		      asl
     61  1171		       90 01		      bcc	.Color2
      0  1173					      SKIP_WORD
      1  1173		       0c		      HEX	0C
     63  1174				   .Color2
     64  1174		       65 c7		      adc	Temp
     65  1176		       85 c5		      sta	ThrobColor+2
     66  1178
     67  1178					      SUBROUTINE
     68  1178
     69  1178							; get graphics data for the scoreboard and push it onto the stack
     70  1178
     71  1178							; Prepare MSBs for all the scoreboard loading pointers - 23 cycles
     72  1178		       a9 1b		      lda	#>ScoreGfx
     73  117a		       85 91		      sta	LvlLoadPtr+1
     74  117c		       85 93		      sta	ScrLoadPtr0+1
     75  117e		       85 95		      sta	ScrLoadPtr1+1
     76  1180		       85 97		      sta	ScrLoadPtr2+1
     77  1182		       85 99		      sta	ScrLoadPtr3+1
     78  1184		       85 9b		      sta	ScrLoadPtr4+1
     79  1186		       85 9d		      sta	ScrLoadPtr5+1
     80  1188
     81  1188							; Prepare pointer for level digit graphics - 14 cycles
     82  1188		       a5 8e		      lda	Level
     83  118a		       c9 10		      cmp	#$10
     84  118c		       30 02		      bmi	.Less10_1
     85  118e		       e9 0a		      sbc	#10
     86  1190				   .Less10_1
     87  1190		       85 90		      sta	LvlLoadPtr	; set LSB of level digit graphics pointer
     88  1192
     89  1192							; Prepare pointers for score digit graphics - 69 cycles
     90  1192		       a7 88		      lax	BCDScore+0
     91  1194		       29 f0		      and	#$F0
     92  1196		       4a		      lsr
     93  1197		       85 92		      sta	ScrLoadPtr0	; set LSB for score digit pointer 0
     94  1199
     95  1199		       8a		      txa
     96  119a		       29 0f		      and	#$0F
     97  119c		       0a		      asl
     98  119d		       0a		      asl
     99  119e		       0a		      asl
    100  119f		       85 94		      sta	ScrLoadPtr1	; set LSB for score digit pointer 1
    101  11a1
    102  11a1		       a7 89		      lax	BCDScore+1
    103  11a3		       29 f0		      and	#$F0
    104  11a5		       4a		      lsr
    105  11a6		       85 96		      sta	ScrLoadPtr2	; set LSB for score digit pointer 2
    106  11a8
    107  11a8		       8a		      txa
    108  11a9		       29 0f		      and	#$0F
    109  11ab		       0a		      asl
    110  11ac		       0a		      asl
    111  11ad		       0a		      asl
    112  11ae		       85 98		      sta	ScrLoadPtr3	; set LSB for score digit pointer 3
    113  11b0
    114  11b0		       a7 8a		      lax	BCDScore+2
    115  11b2		       29 f0		      and	#$F0
    116  11b4		       4a		      lsr
    117  11b5		       85 9a		      sta	ScrLoadPtr4	; set LSB for score digit pointer 4
    118  11b7
    119  11b7		       8a		      txa
    120  11b8		       29 0f		      and	#$0F
    121  11ba		       0a		      asl
    122  11bb		       0a		      asl
    123  11bc		       0a		      asl
    124  11bd		       85 9c		      sta	ScrLoadPtr5	; set LSB for score digit pointer 5
    125  11bf
    126  11bf							; Load the stack with the graphics for the scoreboard - 428 cycles
    127  11bf		       a0 06		      ldy	#6
    128  11c1				   .LoadScoreboard
    129  11c1		       b1 9c		      lda	(ScrLoadPtr5),y
    130  11c3		       48		      pha
    131  11c4		       b1 9a		      lda	(ScrLoadPtr4),y
    132  11c6		       48		      pha
    133  11c7		       b1 98		      lda	(ScrLoadPtr3),y
    134  11c9		       48		      pha
    135  11ca		       b1 96		      lda	(ScrLoadPtr2),y
    136  11cc		       48		      pha
    137  11cd		       b1 94		      lda	(ScrLoadPtr1),y
    138  11cf		       48		      pha
    139  11d0		       b1 92		      lda	(ScrLoadPtr0),y
    140  11d2		       48		      pha
    141  11d3		       b1 90		      lda	(LvlLoadPtr),y
    142  11d5		       48		      pha
    143  11d6		       88		      dey
    144  11d7		       10 e8		      bpl	.LoadScoreboard
    145  11d9
    146  11d9		       a5 80		      lda	Frame
    147  11db		       4a		      lsr
    148  11dc		       4a		      lsr
    149  11dd		       4a		      lsr
    150  11de		       85 ba		      sta	Progress
    151  11e0
    152  11e0		       85 2b		      sta	HMCLR
    153  11e2		       a6 b3		      ldx	FoodPosX
    154  11e4		       ca		      dex
    155  11e5		       10 02		      bpl	.NoReset0
    156  11e7		       a2 58		      ldx	#88
    157  11e9				   .NoReset0
    158  11e9		       86 b3		      stx	FoodPosX+0
    159  11eb
    160  11eb		       8a		      txa
    161  11ec		       38		      sec
    162  11ed		       e9 12		      sbc	#18
    163  11ef		       b0 02		      bcs	.NoReset1
    164  11f1		       69 59		      adc	#89
    165  11f3				   .NoReset1
    166  11f3		       85 b4		      sta	FoodPosX+1
    167  11f5
    168  11f5		       e9 34		      sbc	#52
    169  11f7		       b0 02		      bcs	.NoReset2
    170  11f9		       69 59		      adc	#89
    171  11fb				   .NoReset2
    172  11fb		       85 b5		      sta	FoodPosX+2
    173  11fd
    174  11fd		       e9 1b		      sbc	#27
    175  11ff		       b0 02		      bcs	.NoReset3
    176  1201		       69 59		      adc	#89
    177  1203				   .NoReset3
    178  1203		       85 b6		      sta	FoodPosX+3
    179  1205
    180  1205		       e9 3f		      sbc	#63
    181  1207		       b0 02		      bcs	.NoReset4
    182  1209		       69 59		      adc	#89
    183  120b				   .NoReset4
    184  120b		       85 b7		      sta	FoodPosX+4
    185  120d
    186  120d		       e9 29		      sbc	#41
    187  120f		       b0 02		      bcs	.NoReset5
    188  1211		       69 59		      adc	#89
    189  1213				   .NoReset5
    190  1213		       85 b8		      sta	FoodPosX+5
    191  1215
    192  1215		       e9 11		      sbc	#17
    193  1217		       b0 02		      bcs	.NoReset6
    194  1219		       69 59		      adc	#89
    195  121b				   .NoReset6
    196  121b		       85 b9		      sta	FoodPosX+6
    197  121d
    198  121d
    199  121d							; Calculate Hmove offsets for 2nd cat row's food items
    200  121d		       a9 05		      lda	#5
    201  121f		       38		      sec
    202  1220		       e5 a4		      sbc	PreCatRows
    203  1222		       a8		      tay
    204  1223
    205  1223		       b9 a5 00 	      lda	FoodItemL,y
    206  1226		       29 f0		      and	#$F0
    207  1228		       85 bf		      sta	CatRow2FoodL
    208  122a		       aa		      tax
    209  122b		       bd 0f 1d 	      lda	FoodGfx+15,x
    210  122e		       85 c1		      sta	CatRow2Color1
    211  1230
    212  1230		       b9 ac 00 	      lda	FoodItemR,y
    213  1233		       29 f0		      and	#$F0
    214  1235		       85 c0		      sta	CatRow2FoodR
    215  1237		       aa		      tax
    216  1238		       bd 0f 1d 	      lda	FoodGfx+15,x
    217  123b		       85 c2		      sta	CatRow2Color2
    218  123d
    219  123d		       b9 b3 00 	      lda	FoodPosX,y
    220  1240		       e9 2c		      sbc	#44
    221  1242		       f0 04		      beq	.Prepare
    222  1244		       90 02		      bcc	.Prepare
    223  1246		       e9 2d		      sbc	#45
    224  1248				   .Prepare
    225  1248		       38		      sec
    226  1249		       e9 01		      sbc	#1
    227  124b		       a2 70		      ldx	#$70
    228  124d		       a0 02		      ldy	#2
    229  124f				   .OffsetLoop
    230  124f		       18		      clc
    231  1250		       69 0f		      adc	#15
    232  1252		       f0 02		      beq	.CalcOffset
    233  1254		       30 0d		      bmi	.MaxOffset
    234  1256				   .CalcOffset
    235  1256		       49 07		      eor	#7
    236  1258		       0a		      asl
    237  1259		       0a		      asl
    238  125a		       0a		      asl
    239  125b		       0a		      asl
    240  125c		       99 bc 00 	      sta	CatRowHmove,y
    241  125f		       a9 00		      lda	#0
    242  1261		       f0 02		      beq	.NextOffset
    243  1263				   .MaxOffset
    244  1263		       96 bc		      stx	CatRowHmove,y
    245  1265				   .NextOffset
    246  1265		       88		      dey
    247  1266		       10 e7		      bpl	.OffsetLoop
    248  1268
    249  1268
    250  1268					      SUBROUTINE
    251  1268
    252  1268		       a9 0a		      lda	#10
    253  126a		       85 8e		      sta	Level
    254  126c
    255  126c		       a5 8e		      lda	Level
    256  126e		       c9 10		      cmp	#$10
    257  1270		       30 02		      bmi	.Less10
    258  1272		       e9 06		      sbc	#6
    259  1274				   .Less10
    260  1274		       0a		      asl
    261  1275		       aa		      tax
    262  1276		       bd 62 1e 	      lda	LevelColors,x
    263  1279		       85 9e		      sta	ScoreColor
    264  127b		       85 06		      sta	COLUP0
    265  127d		       85 07		      sta	COLUP1
    266  127f		       85 08		      sta	COLUPF
    267  1281		       85 09		      sta	COLUBK
    268  1283
    269  1283
    270  1283							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1283							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1283							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    273  1283
    274  1283		       a9 1d		      lda	#>FoodGfx
    275  1285		       85 91		      sta	FoodGfxPtr1+1
    276  1287		       85 93		      sta	FoodGfxPtr2+1
    277  1289
    278  1289		       a9 1e		      lda	#>CatTartGfx
    279  128b		       85 95		      sta	TartGfxPtr1+1
    280  128d		       85 99		      sta	TartGfxPtr2+1
    281  128f
    282  128f		       a9 1e		      lda	#>CatFaceGfx
    283  1291		       85 97		      sta	CatGfxPtr1+1
    284  1293		       85 9b		      sta	CatGfxPtr2+1
    285  1295
    286  1295		       a5 a1		      lda	CatPosition
    287  1297		       29 1f		      and	#%00011111
    288  1299		       aa		      tax
    289  129a		       18		      clc
    290  129b		       69 06		      adc	#<CatTartGfx
    291  129d		       85 98		      sta	TartGfxPtr2
    292  129f		       69 13		      adc	#19
    293  12a1		       85 94		      sta	TartGfxPtr1
    294  12a3
    295  12a3		       8a		      txa
    296  12a4		       69 28		      adc	#<CatFaceGfx
    297  12a6		       85 9a		      sta	CatGfxPtr2
    298  12a8		       69 13		      adc	#19
    299  12aa		       85 96		      sta	CatGfxPtr1
    300  12ac
    301  12ac		       a9 56		      lda	#$56
    302  12ae		       85 9f		      sta	PgBarColor
    303  12b0		       a9 5f		      lda	#COL_CAT_TART
    304  12b2		       85 86		      sta	CatTartColor
    305  12b4
    306  12b4
    307  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  12b4							; Prepare for Main Gameplay Kernel
    309  12b4							;
    310  12b4							; Figure out how many rows to draw before and after the two cat rows
    311  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    312  12b4
    313  12b4
    314  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    315  12b4							; Finish Vertical Blanking
    316  12b4							;
    317  12b4							; Loop until the end of vertical blanking
    318  12b4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    319  12b4
      0  12b4					      NEXT_PAGE
      1  12b4					      SUBROUTINE
      2  12b4
      3  12b4		       4c 00 13 	      jmp	.NextPage
      4  1300		       00 00 00 00*	      ALIGN	$100
      5  1300				   .NextPage
      6  1300
      0  1300					      TIMER_LOOP
      1  1300					      SUBROUTINE
      2  1300
      3  1300		       ad 84 02    .Loop      lda	INTIM
      4  1303		       d0 fb		      bne	.Loop
      5  1305
------- FILE bank2.asm
------- FILE bank2/code/kernel.asm LEVEL 3 PASS 2
      0  1305					      include	bank2/code/kernel.asm
      1  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1305							; Kernel
      3  1305							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1305
      5  1305		       85 02		      sta	WSYNC
      0  1307					      SLEEP	3
      1  1307				   .CYCLES    SET	3
      2  1307
      3  1307				  -	      IF	.CYCLES < 2
      4  1307				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1307				  -	      ERR
      6  1307					      ENDIF
      7  1307
      8  1307					      IF	.CYCLES & 1
      9  1307					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1307		       04 00		      nop	0
     11  1309				  -	      ELSE
     12  1309				  -	      bit	VSYNC
     13  1309					      ENDIF
     14  1309				   .CYCLES    SET	.CYCLES - 3
     15  1309					      ENDIF
     16  1309
     17  1309				  -	      REPEAT	.CYCLES / 2
     18  1309				  -	      nop
     19  1309					      REPEND
      7  1309
      8  1309							; Include kernel routines
------- FILE bank2/code/kernel_score.asm LEVEL 4 PASS 2
      0  1309					      include	bank2/code/kernel_score.asm
      1  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1309							; Scoreboard Display
      3  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1309							; Draw the 6-digit score and level counter
      5  1309							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1309
      7  1309					      SUBROUTINE
      8  1309
      9  1309		       a9 13		      lda	#$13
     10  130b		       85 04		      sta	NUSIZ0
     11  130d		       a9 20		      lda	#%00100000
     12  130f		       85 0d		      sta	PF0
     13  1311		       a9 35		      lda	#%00110101
     14  1313		       85 0a		      sta	CTRLPF
     15  1315
     16  1315		       a5 8e		      lda	Level
     17  1317		       c9 10		      cmp	#$10
     18  1319		       2a		      rol
     19  131a		       0a		      asl
     20  131b		       85 1d		      sta	ENAM0
     21  131d		       85 1e		      sta	ENAM1
     22  131f
     23  131f		       a9 00		      lda	#0
     24  1321		       85 06		      sta	COLUP0
     25  1323		       85 07		      sta	COLUP1
     26  1325		       85 1b		      sta	GRP0
     27  1327
     28  1327		       a9 ff		      lda	#$FF
     29  1329		       85 1f		      sta	ENABL
     30  132b		       85 25		      sta	VDELP0
     31  132d		       85 26		      sta	VDELP1
     32  132f
     33  132f		       a9 08		      lda	#8
     34  1331		       8d 96 02 	      sta	TIM64T
     35  1334		       a0 05		      ldy	#5
     36  1336
     37  1336		       85 02		      sta	WSYNC
     38  1338
     39  1338				   ScoreboardLoop
     40  1338		       b9 50 1b 	      lda	LevelGfx,y	; 04
     41  133b		       8d 05 00 	      sta.w	NUSIZ1	; 08
     42  133e
     43  133e		       68		      pla		; 12
     44  133f		       85 1c		      sta	GRP1	; 15
     45  1341		       68		      pla		; 19
     46  1342		       85 1b		      sta	GRP0	; 22
     47  1344
     48  1344		       68		      pla		; 26
     49  1345		       85 1c		      sta	GRP1	; 29
     50  1347		       68		      pla		; 33
     51  1348		       85 1b		      sta	GRP0	; 36
     52  134a
     53  134a		       a9 03		      lda	#3	; 38
     54  134c		       85 05		      sta	NUSIZ1	; 41
     55  134e
     56  134e		       68		      pla		; 45
     57  134f		       aa		      tax		; 47
     58  1350		       68		      pla		; 51
     59  1351		       a8		      tay		; 53
     60  1352		       68		      pla		; 57
     61  1353
     62  1353		       86 1c		      stx	GRP1	; 60
     63  1355		       84 1b		      sty	GRP0	; 63
     64  1357		       85 1c		      sta	GRP1	; 66
     65  1359		       85 1b		      sta	GRP0	; 69
     66  135b
     67  135b		       ac 84 02 	      ldy	INTIM	; 73
     68  135e		       10 d8		      bpl	ScoreboardLoop	; 00/75
     69  1360
     70  1360		       a9 00		      lda	#0	; 01
     71  1362		       85 1b		      sta	GRP0	; 04
     72  1364		       85 1c		      sta	GRP1	; 07
     73  1366		       85 26		      sta	VDELP1	; 10
     74  1368		       85 25		      sta	VDELP0	; 13
     75  136a		       85 1f		      sta	ENABL	; 16
     76  136c		       85 1d		      sta	ENAM0	; 19
     77  136e		       85 1e		      sta	ENAM1	; 22
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_gameplay.asm LEVEL 4 PASS 2
      0  1370					      include	bank2/code/kernel_gameplay.asm
      1  1370							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1370							; Output 4 blank scanlines, while setting up the graphics objects.
      3  1370							; CPU is at cycle 33
      4  1370							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      5  1370
      6  1370							; Clear last 34 bytes of RAM for rainbow colors - 126 cycles
      7  1370		       a2 ff		      ldx	#$FF
      8  1372		       9a		      txs
      9  1373
     10  1373		       a0 11		      ldy	#17
     11  1375				   .ClearRainbow
     12  1375		       48		      pha
     13  1376		       48		      pha
     14  1377		       88		      dey
     15  1378		       d0 fb		      bne	.ClearRainbow
     16  137a
     17  137a							; Load rainbow colors into RAM - 65 cycles
     18  137a		       a9 14		      lda	#20
     19  137c		       e5 a1		      sbc	CatPosition	; carry is assumed to be set
     20  137e		       29 1f		      and	#%00011111
     21  1380		       18		      clc
     22  1381		       69 eb		      adc	#RamBowColors+13
     23  1383		       aa		      tax
     24  1384		       9a		      txs
     25  1385
     26  1385		       a0 05		      ldy	#5
     27  1387				   .LoadRainbow
     28  1387		       b9 00 1e 	      lda	RainbowColors,y
     29  138a		       48		      pha
     30  138b		       48		      pha
     31  138c		       88		      dey
     32  138d		       10 f8		      bpl	.LoadRainbow
     33  138f
     34  138f		       a9 00		      lda	#ONE_COPY
     35  1391		       85 04		      sta	NUSIZ0
     36  1393		       a9 04		      lda	#TWO_WIDE
     37  1395		       85 05		      sta	NUSIZ1
     38  1397		       a9 06		      lda	#6
     39  1399		       85 c9		      sta	CurrentRow
     40  139b		       85 02		      sta	WSYNC
     41  139d
     42  139d		       a5 9e		      lda	ScoreColor
     43  139f		       85 09		      sta	COLUBK
     44  13a1		       a2 dd		      ldx	#GAMEPLAY_STACK
     45  13a3		       9a		      txs
     46  13a4		       20 5c 14 	      jsr	SetFoodPosition
     47  13a7		       85 02		      sta	WSYNC
     48  13a9
      0  13a9					      NEXT_PAGE
      1  13a9					      SUBROUTINE
      2  13a9
      3  13a9		       4c 00 14 	      jmp	.NextPage
      4  1400		       00 00 00 00*	      ALIGN	$100
      5  1400				   .NextPage
      6  1400
     50  1400
     51  1400				   PreKernel
     52  1400		       85 02		      sta	WSYNC
     53  1402
     54  1402		       a5 f1		      lda	RamBowColors+19
     55  1404		       d0 02		      bne	.SetCatThrobPF
     56  1406		       a5 c3		      lda	ThrobColor+0
     57  1408				   .SetCatThrobPF
     58  1408		       85 c6		      sta	CatThrobPF
     59  140a
     60  140a		       a5 80		      lda	Frame
     61  140c		       29 08		      and	#%00001000
     62  140e		       4a		      lsr
     63  140f		       4a		      lsr
     64  1410		       4a		      lsr
     65  1411		       a8		      tay
     66  1412		       b9 1e 1c 	      lda	RainbowGfx,y
     67  1415		       85 0d		      sta	PF0
     68  1417
     69  1417		       85 02		      sta	WSYNC
     70  1419
      0  1419					      SLEEP	8	; 08
      1  1419				   .CYCLES    SET	8
      2  1419
      3  1419				  -	      IF	.CYCLES < 2
      4  1419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1419				  -	      ERR
      6  1419					      ENDIF
      7  1419
      8  1419				  -	      IF	.CYCLES & 1
      9  1419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1419				  -	      nop	0
     11  1419				  -	      ELSE
     12  1419				  -	      bit	VSYNC
     13  1419				  -	      ENDIF
     14  1419				  -.CYCLES    SET	.CYCLES - 3
     15  1419					      ENDIF
     16  1419
     17  1419					      REPEAT	.CYCLES / 2
     18  1419		       ea		      nop
     17  1419					      REPEND
     18  141a		       ea		      nop
     17  141a					      REPEND
     18  141b		       ea		      nop
     17  141b					      REPEND
     18  141c		       ea		      nop
     19  141d					      REPEND
     72  141d		       a9 90		      lda	#$90	; 10
     73  141f		       85 20		      sta	HMP0	; 13
     74  1421		       a9 01		      lda	#PF_REFLECT	; 15
     75  1423		       85 0a		      sta	CTRLPF	; 18
     76  1425		       a9 08		      lda	#COL_CAT_FACE	; 20
     77  1427		       85 06		      sta	COLUP0	; 23
     78  1429
     79  1429		       a5 ab		      lda	FoodItemL+6	; 26
     80  142b		       85 10		      sta	RESP0	; 29
     81  142d		       29 f0		      and	#$F0	; 31
     82  142f		       85 90		      sta	FoodGfxPtr1	; 34
     83  1431		       aa		      tax		; 36
     84  1432		       bd 0f 1d 	      lda	FoodGfx+15,x	; 40
     85  1435		       85 ca		      sta	FoodColor1	; 43
     86  1437
     87  1437		       a5 b2		      lda	FoodItemR+6	; 46
     88  1439		       29 f0		      and	#$F0	; 48
     89  143b		       85 92		      sta	FoodGfxPtr2	; 51
     90  143d		       aa		      tax		; 53
     91  143e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 57
     92  1441		       85 cb		      sta	FoodColor2	; 60
     93  1443
     94  1443		       a5 b9		      lda	FoodPosX+6	; 63
     95  1445		       85 c7		      sta	Temp	; 66
      0  1447					      SLEEP	4	; 70
      1  1447				   .CYCLES    SET	4
      2  1447
      3  1447				  -	      IF	.CYCLES < 2
      4  1447				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1447				  -	      ERR
      6  1447					      ENDIF
      7  1447
      8  1447				  -	      IF	.CYCLES & 1
      9  1447				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1447				  -	      nop	0
     11  1447				  -	      ELSE
     12  1447				  -	      bit	VSYNC
     13  1447				  -	      ENDIF
     14  1447				  -.CYCLES    SET	.CYCLES - 3
     15  1447					      ENDIF
     16  1447
     17  1447					      REPEAT	.CYCLES / 2
     18  1447		       ea		      nop
     17  1447					      REPEND
     18  1448		       ea		      nop
     19  1449					      REPEND
     97  1449		       85 2a		      sta	HMOVE	; 73
     98  144b
     99  144b		       a5 c4		      lda	ThrobColor+1	; 03
    100  144d		       85 09		      sta	COLUBK	; 06
    101  144f		       85 08		      sta	COLUPF	; 09
    102  1451		       a9 80		      lda	#$80	; 11
    103  1453		       85 20		      sta	HMP0	; 14
    104  1455
    105  1455		       a5 a4		      lda	PreCatRows
    106  1457		       d0 22		      bne	HiRows
    107  1459		       4c e0 14 	      jmp	CatRows
    108  145c
    109  145c							; If any part of the cat needs to be drawn in the top row,
    110  145c							; skip straight to CatRows.
    111  145c
------- FILE bank2/code/kernel_hi_rows.asm LEVEL 5 PASS 2
      0  145c					      include	bank2/code/kernel_hi_rows.asm
      1  145c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  145c							; Draw all the rows above the cat's two rows
      3  145c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  145c
------- FILE bank2/subroutines/set_food_pos.asm LEVEL 6 PASS 2
      0  145c					      include	bank2/subroutines/set_food_pos.asm
      1  145c				   SetFoodPosition
      2  145c
      3  145c		       85 02		      sta	WSYNC	; 00
      4  145e
      5  145e		       85 09		      sta	COLUBK	; 03
      6  1460		       85 08		      sta	COLUPF	; 06
      7  1462
      0  1462					      SLEEP	4	; 10
      1  1462				   .CYCLES    SET	4
      2  1462
      3  1462				  -	      IF	.CYCLES < 2
      4  1462				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1462				  -	      ERR
      6  1462					      ENDIF
      7  1462
      8  1462				  -	      IF	.CYCLES & 1
      9  1462				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1462				  -	      nop	0
     11  1462				  -	      ELSE
     12  1462				  -	      bit	VSYNC
     13  1462				  -	      ENDIF
     14  1462				  -.CYCLES    SET	.CYCLES - 3
     15  1462					      ENDIF
     16  1462
     17  1462					      REPEAT	.CYCLES / 2
     18  1462		       ea		      nop
     17  1462					      REPEND
     18  1463		       ea		      nop
     19  1464					      REPEND
      9  1464
     10  1464		       a4 c9		      ldy	CurrentRow	; 13
     11  1466		       b9 b3 00 	      lda	FoodPosX,y	; 17
     12  1469
     13  1469		       38		      sec		; 19
     14  146a				   .DivideLoop
     15  146a		       e9 0f		      sbc	#15	; 21
     16  146c		       b0 fc		      bcs	.DivideLoop	; 23
     17  146e
     18  146e		       85 11		      sta	RESP1	; 26
     19  1470
     20  1470		       49 07		      eor	#7
     21  1472		       69 01		      adc	#1
     22  1474		       0a		      asl
     23  1475		       0a		      asl
     24  1476		       0a		      asl
     25  1477		       0a		      asl
     26  1478		       85 21		      sta	HMP1	; 41/66
     27  147a
     28  147a		       60		      rts		; 47/72
------- FILE bank2/code/kernel_hi_rows.asm
      6  147b
      7  147b				   HiRows
      8  147b					      SUBROUTINE
      9  147b
     10  147b		       85 02		      sta	WSYNC
     11  147d		       a5 c3		      lda	ThrobColor+0
     12  147f		       85 09		      sta	COLUBK
     13  1481		       85 08		      sta	COLUPF
     14  1483
     15  1483							; First, output a single-color line to draw the bottom of a "throb" line.
     16  1483							; This will probably be a good time to prepare the pointers for the
     17  1483							; food items' graphics, as well as loading the colors for the food items.
     18  1483
     19  1483							; After that, output 14 lines to draw a single row with food items,
     20  1483							; but without drawing the cat. The food graphics will be updated every line,
     21  1483							; but there will probably not be enough time to also update the food colors
     22  1483							; every line throughout the kernel.
     23  1483
     24  1483		       20 00 18 	      jsr	DrawFoodRow
     25  1486		       c6 c9		      dec	CurrentRow	; 73
     26  1488		       85 02		      sta	WSYNC
     27  148a
     28  148a							; Lastly, output four single-color lines to draw most of a "throb" line,
     29  148a							; while setting the position of player 1 to draw the next set of food items.
     30  148a
     31  148a		       a5 c3		      lda	ThrobColor+0
     32  148c		       85 09		      sta	COLUBK
     33  148e		       85 08		      sta	COLUPF
     34  1490		       a9 00		      lda	#0
     35  1492		       85 1b		      sta	GRP0
     36  1494		       85 1c		      sta	GRP1
     37  1496		       a5 c4		      lda	ThrobColor+1
     38  1498		       20 5c 14 	      jsr	SetFoodPosition
     39  149b		       85 02		      sta	WSYNC
     40  149d
     41  149d		       a5 c5		      lda	ThrobColor+2	; 03
     42  149f		       85 09		      sta	COLUBK	; 06
     43  14a1		       85 08		      sta	COLUPF	; 09
     44  14a3		       20 24 18 	      jsr	Sleep12
     45  14a6		       20 24 18 	      jsr	Sleep12
     46  14a9		       20 24 18 	      jsr	Sleep12
     47  14ac		       20 24 18 	      jsr	Sleep12
     48  14af		       20 24 18 	      jsr	Sleep12	; 69
     49  14b2		       8d 2a 00 	      sta.w	HMOVE	; 73
     50  14b5		       85 02		      sta	WSYNC
     51  14b7
     52  14b7		       a5 c4		      lda	ThrobColor+1	; 03
     53  14b9		       85 09		      sta	COLUBK	; 06
     54  14bb		       85 08		      sta	COLUPF	; 09
     55  14bd
     56  14bd		       b9 a5 00 	      lda	FoodItemL,y	; 13
     57  14c0		       29 f0		      and	#$F0	; 15
     58  14c2		       85 90		      sta	FoodGfxPtr1	; 18
     59  14c4		       aa		      tax		; 20
     60  14c5		       bd 0f 1d 	      lda	FoodGfx+15,x	; 24
     61  14c8		       85 ca		      sta	FoodColor1	; 27
     62  14ca
     63  14ca		       b9 ac 00 	      lda	FoodItemR,y	; 31
     64  14cd		       29 f0		      and	#$F0	; 33
     65  14cf		       85 92		      sta	FoodGfxPtr2	; 36
     66  14d1		       aa		      tax		; 38
     67  14d2		       bd 0f 1d 	      lda	FoodGfx+15,x	; 42
     68  14d5		       85 cb		      sta	FoodColor2	; 45
     69  14d7
     70  14d7		       b9 b3 00 	      lda	FoodPosX,y	; 49
     71  14da		       85 c7		      sta	Temp	; 52
     72  14dc		       c6 a4		      dec	PreCatRows
     73  14de		       d0 9b		      bne	HiRows
     74  14e0
     75  14e0							; If this is not the last row before drawing the cat's rows,
     76  14e0							; loop back to HiRows to draw the next row.
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_cat_rows.asm LEVEL 5 PASS 2
      0  14e0					      include	bank2/code/kernel_cat_rows.asm
      1  14e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  14e0							; Cat Row Kernel
      3  14e0							;
      4  14e0							; This is the kernel that is used to draw the two rows containing the cat.
      5  14e0							; It also draw the throbbing line between the cat's rows.
      6  14e0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  14e0
      8  14e0				   CatRows
      9  14e0					      SUBROUTINE
     10  14e0
     11  14e0		       85 02		      sta	WSYNC
     12  14e2
     13  14e2							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     14  14e2		       a6 c3		      ldx	ThrobColor+0	; 03
     15  14e4		       86 09		      stx	COLUBK	; 06
     16  14e6		       86 08		      stx	COLUPF	; 09
     17  14e8		       a0 0d		      ldy	#13	; 11
     18  14ea		       b1 94		      lda	(TartGfxPtr1),y	; 16
     19  14ec		       85 0e		      sta	PF1	; 19
      0  14ee					      SLEEP	3	; 22
      1  14ee				   .CYCLES    SET	3
      2  14ee
      3  14ee				  -	      IF	.CYCLES < 2
      4  14ee				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14ee				  -	      ERR
      6  14ee					      ENDIF
      7  14ee
      8  14ee					      IF	.CYCLES & 1
      9  14ee					      IFNCONST	NO_ILLEGAL_OPCODES
     10  14ee		       04 00		      nop	0
     11  14f0				  -	      ELSE
     12  14f0				  -	      bit	VSYNC
     13  14f0					      ENDIF
     14  14f0				   .CYCLES    SET	.CYCLES - 3
     15  14f0					      ENDIF
     16  14f0
     17  14f0				  -	      REPEAT	.CYCLES / 2
     18  14f0				  -	      nop
     19  14f0					      REPEND
     21  14f0		       a5 86		      lda	CatTartColor	; 25
     22  14f2		       85 08		      sta	COLUPF	; 28
      0  14f4					      SLEEP	2	; 30
      1  14f4				   .CYCLES    SET	2
      2  14f4
      3  14f4				  -	      IF	.CYCLES < 2
      4  14f4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  14f4				  -	      ERR
      6  14f4					      ENDIF
      7  14f4
      8  14f4				  -	      IF	.CYCLES & 1
      9  14f4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  14f4				  -	      nop	0
     11  14f4				  -	      ELSE
     12  14f4				  -	      bit	VSYNC
     13  14f4				  -	      ENDIF
     14  14f4				  -.CYCLES    SET	.CYCLES - 3
     15  14f4					      ENDIF
     16  14f4
     17  14f4					      REPEAT	.CYCLES / 2
     18  14f4		       ea		      nop
     19  14f5					      REPEND
     24  14f5		       86 08		      stx	COLUPF	; 33
     25  14f7
     26  14f7					      SUBROUTINE
     27  14f7
     28  14f7		       a6 c9		      ldx	CurrentRow	; 36
     29  14f9		       b5 b3		      lda	FoodPosX,x	; 40
     30  14fb
      0  14fb					      NEXT_PAGE
      1  14fb					      SUBROUTINE
      2  14fb
      3  14fb		       4c 00 15 	      jmp	.NextPage
      4  1500		       00 00		      ALIGN	$100
      5  1500				   .NextPage
      6  1500
     32  1500
      0  1500					      SLEEP	5	; 48
      1  1500				   .CYCLES    SET	5
      2  1500
      3  1500				  -	      IF	.CYCLES < 2
      4  1500				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1500				  -	      ERR
      6  1500					      ENDIF
      7  1500
      8  1500					      IF	.CYCLES & 1
      9  1500					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1500		       04 00		      nop	0
     11  1502				  -	      ELSE
     12  1502				  -	      bit	VSYNC
     13  1502					      ENDIF
     14  1502				   .CYCLES    SET	.CYCLES - 3
     15  1502					      ENDIF
     16  1502
     17  1502					      REPEAT	.CYCLES / 2
     18  1502		       ea		      nop
     19  1503					      REPEND
     34  1503		       a6 cb		      ldx	FoodColor2	; 51
     35  1505		       9a		      txs		; 53
     36  1506		       c9 30		      cmp	#48	; 55
     37  1508		       a2 00		      ldx	#0	; 57
     38  150a
     39  150a							; Then output the 14 lines to draw a single row. This will include drawing
     40  150a							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  150a							; All graphics will be updated every line.
     42  150a
     43  150a		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  150c		       90 42		      bcc	.LeftEntrance	; 62
     45  150e
     46  150e							; 14 bytes into the page
     47  150e
     48  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  150e							; Kernel used when food items are closer to the right edge of the screen
     50  150e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  150e
     52  150e				   .RightLoop
     53  150e							; 8 cycles
     54  150e		       b1 96		      lda	(CatGfxPtr1),y	; 49 - set cat's head gfx
     55  1510		       85 1b		      sta	GRP0	; 52
     56  1512
     57  1512							; 9 cycles
     58  1512		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     59  1514		       ba		      tsx		; 57 - load 2nd food item's color
     60  1515		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     61  1517
     62  1517				   .RightEntrance		; enter loop here
     63  1517							; 2 cycles
     64  1517		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     65  1519
     66  1519							; 8 cycles
     67  1519		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
     68  151b		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     69  151d
     70  151d							; 8 cycles
     71  151d		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     72  151f		       85 1c		      sta	GRP1	; 02
     73  1521
     74  1521							; 7 cycles
     75  1521		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set playfield's rainbow color
     76  1524		       85 09		      sta	COLUBK	; 09
     77  1526
     78  1526							; 7 cycles
     79  1526		       b9 f2 00 	      lda	RamBowColors+20,y	; 13 - set background's rainbow color
     80  1529		       85 08		      sta	COLUPF	; 16
     81  152b
     82  152b							; 6 cycles
     83  152b		       a5 ca		      lda	FoodColor1	; 19 - set 1st food item's color
     84  152d		       85 07		      sta	COLUP1	; 22
     85  152f
     86  152f							; 8 cycles
     87  152f		       a5 86		      lda	CatTartColor	; 25
     88  1531		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     89  1533		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     90  1535		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     91  1537
     92  1537							; 5 cycles
     93  1537		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     94  1539
     95  1539							; 2 cycles
     96  1539		       88		      dey		; 41
     97  153a		       10 d2		      bpl	.RightLoop	; 44/43
     98  153c
     99  153c		       a0 12		      ldy	#18	; 45
    100  153e		       b1 98		      lda	(TartGfxPtr2),y	; 50
      0  1540					      SLEEP	2	; 52
      1  1540				   .CYCLES    SET	2
      2  1540
      3  1540				  -	      IF	.CYCLES < 2
      4  1540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1540				  -	      ERR
      6  1540					      ENDIF
      7  1540
      8  1540				  -	      IF	.CYCLES & 1
      9  1540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1540				  -	      nop	0
     11  1540				  -	      ELSE
     12  1540				  -	      bit	VSYNC
     13  1540				  -	      ENDIF
     14  1540				  -.CYCLES    SET	.CYCLES - 3
     15  1540					      ENDIF
     16  1540
     17  1540					      REPEAT	.CYCLES / 2
     18  1540		       ea		      nop
     19  1541					      REPEND
    102  1541		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    103  1543		       ba		      tsx		; 57 - load 2nd food item's color
    104  1544		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    105  1546		       b0 38		      bcs	.End	; 63
    106  1548
    107  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    108  1548							; Kernel used when food items are closer to the left edge of the screen
    109  1548							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    110  1548
    111  1548				   .LeftLoop
    112  1548							; 8 cycles
    113  1548		       b1 96		      lda	(CatGfxPtr1),y	; 54 - set cat's head gfx
    114  154a		       85 1b		      sta	GRP0	; 57
    115  154c
    116  154c							; 5 cycles
    117  154c		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    118  154e		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    119  1550
    120  1550				   .LeftEntrance		; enter loop here
    121  1550							; 8 cycles
    122  1550		       b1 94		      lda	(TartGfxPtr1),y	; 67 - load cat's tart gfx
    123  1552		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    124  1554
    125  1554							; 8 cycles
    126  1554		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    127  1556		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    128  1558
    129  1558							; 7 cycles
    130  1558		       b9 f1 00 	      lda	RamBowColors+19,y	; 06 - set rainbow colors
    131  155b		       85 09		      sta	COLUBK	; 09
    132  155d
    133  155d							; 7 cycles
    134  155d		       b9 f2 00 	      lda	RamBowColors+20,y	; 13
    135  1560		       85 08		      sta	COLUPF	; 16
    136  1562
    137  1562							; 6 cycles
    138  1562		       a5 ca		      lda	FoodColor1	; 19 - set 1st food item's color
    139  1564		       85 07		      sta	COLUP1	; 22
    140  1566
    141  1566							; 8 cycles
    142  1566		       a5 86		      lda	CatTartColor	; 25
    143  1568		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    144  156a		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    145  156c
    146  156c							; 13 cycles
    147  156c		       b1 92		      lda	(FoodGfxPtr2),y	; 36 - load 2nd food item's gfx
    148  156e		       ba		      tsx		; 38 - load 2nd food item's color
    149  156f		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    150  1571		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    151  1573
    152  1573							; 5 cycles
    153  1573		       88		      dey		; 46
    154  1574		       10 d2		      bpl	.LeftLoop	; 49/48
    155  1576
    156  1576		       a2 00		      ldx	#0	; 50
    157  1578		       86 08		      stx	COLUPF	; 53
    158  157a
    159  157a		       a0 12		      ldy	#18	; 55
    160  157c		       b1 98		      lda	(TartGfxPtr2),y	; 60
    161  157e
    162  157e		       86 1c		      stx	GRP1	; 63
    163  1580
    164  1580				   .End
    165  1580
    166  1580
    167  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1580							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    169  1580							; cat with the rainbow. In order to align player 1 for the next row's
    170  1580							; food items, it will be neccesary to have three versions of this kernel,
    171  1580							; one for each of the three 60-color-clock spaced positions to reset.
    172  1580							; HMOVE will be written to on the first four scanlines. With a maximum
    173  1580							; movement of 15 color-clocks per scanline, this will allow a movement of
    174  1580							; up to 60 color clocks. With three versions of the kernel, it should be
    175  1580							; possible to put player 1 anywhere on the screen.
    176  1580							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    177  1580
    178  1580							; Draw throb line #1
    179  1580		       85 0e		      sta	PF1	; 66
    180  1582		       b1 9a		      lda	(CatGfxPtr2),y	; 71
    181  1584		       85 1b		      sta	GRP0	; 74
    182  1586		       a6 c3		      ldx	ThrobColor+0	; 01
    183  1588
      0  1588					      THROB_RAINBOW_BK	18	; 12
      1  1588					      SUBROUTINE
      2  1588				   .X	      SET	18
      3  1588
      4  1588		       a5 f0		      lda	RamBowColors+.X
      5  158a		       d0 04		      bne	.Rbow
      6  158c		       86 09		      stx	COLUBK
      7  158e		       f0 03		      beq	.End
      8  1590		       85 09	   .Rbow      sta	COLUBK
      9  1592		       ea		      nop
     10  1593				   .End
    185  1593
    186  1593		       a5 c6		      lda	CatThrobPF	; 15
    187  1595		       85 08		      sta	COLUPF	; 18
    188  1597		       8e 07 00 	      stx.w	COLUP1	; 22
    189  159a		       a5 86		      lda	CatTartColor	; 25
    190  159c		       85 08		      sta	COLUPF	; 28
    191  159e		       86 09		      stx	COLUBK	; 31
    192  15a0		       88		      dey		; 33
    193  15a1		       85 11		      sta	RESP1	; 36
    194  15a3		       86 08		      stx	COLUPF	; 39
    195  15a5		       b1 9a		      lda	(CatGfxPtr2),y	; 44
    196  15a7		       85 1b		      sta	GRP0	; 47
    197  15a9		       b1 98		      lda	(TartGfxPtr2),y	; 52
    198  15ab		       85 0e		      sta	PF1	; 55
    199  15ad		       c6 c9		      dec	CurrentRow	; 60
    200  15af		       a2 00		      ldx	#0	; 62
    201  15b1		       86 1c		      stx	GRP1	; 65
    202  15b3
    203  15b3							; Draw throb line #2
    204  15b3		       a5 be		      lda	CatRowHmove+2	; 68
    205  15b5		       85 21		      sta	HMP1	; 71
      0  15b7					      SLEEP	2	; 73
      1  15b7				   .CYCLES    SET	2
      2  15b7
      3  15b7				  -	      IF	.CYCLES < 2
      4  15b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15b7				  -	      ERR
      6  15b7					      ENDIF
      7  15b7
      8  15b7				  -	      IF	.CYCLES & 1
      9  15b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  15b7				  -	      nop	0
     11  15b7				  -	      ELSE
     12  15b7				  -	      bit	VSYNC
     13  15b7				  -	      ENDIF
     14  15b7				  -.CYCLES    SET	.CYCLES - 3
     15  15b7					      ENDIF
     16  15b7
     17  15b7					      REPEAT	.CYCLES / 2
     18  15b7		       ea		      nop
     19  15b8					      REPEND
    207  15b8		       a6 c4		      ldx	ThrobColor+1	; 00
      0  15ba					      THROB_RAINBOW_BK	17	; 11
      1  15ba					      SUBROUTINE
      2  15ba				   .X	      SET	17
      3  15ba
      4  15ba		       a5 ef		      lda	RamBowColors+.X
      5  15bc		       d0 04		      bne	.Rbow
      6  15be		       86 09		      stx	COLUBK
      7  15c0		       f0 03		      beq	.End
      8  15c2		       85 09	   .Rbow      sta	COLUBK
      9  15c4		       ea		      nop
     10  15c5				   .End
      0  15c5					      THROB_RAINBOW_PF	18	; 22
      1  15c5					      SUBROUTINE
      2  15c5				   .X	      SET	18
      3  15c5
      4  15c5		       a5 f0		      lda	RamBowColors+.X
      5  15c7		       d0 04		      bne	.Rbow
      6  15c9		       86 08		      stx	COLUPF
      7  15cb		       f0 03		      beq	.End
      8  15cd		       85 08	   .Rbow      sta	COLUPF
      9  15cf		       ea		      nop
     10  15d0				   .End
    210  15d0		       a5 86		      lda	CatTartColor	; 25
    211  15d2		       85 08		      sta	COLUPF	; 28
    212  15d4		       86 09		      stx	COLUBK	; 31
    213  15d6		       86 08		      stx	COLUPF	; 34
    214  15d8		       88		      dey		; 36
    215  15d9		       a6 c9		      ldx	CurrentRow	; 39
    216  15db		       b5 b3		      lda	FoodPosX,x	; 43
    217  15dd		       c9 2d		      cmp	#45	; 45
    218  15df		       10 01		      bpl	.RightSide	; 48/47
      0  15e1					      SKIP_WORD		; 51
      1  15e1		       0c		      HEX	0C
    220  15e2				   .RightSide
    221  15e2		       85 11		      sta	RESP1	; 51
    222  15e4		       b1 9a		      lda	(CatGfxPtr2),y	; 56
    223  15e6		       85 1b		      sta	GRP0	; 59
    224  15e8		       b1 98		      lda	(TartGfxPtr2),y	; 64
    225  15ea		       85 0e		      sta	PF1	; 67
      0  15ec					      SLEEP	3	; 70
      1  15ec				   .CYCLES    SET	3
      2  15ec
      3  15ec				  -	      IF	.CYCLES < 2
      4  15ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  15ec				  -	      ERR
      6  15ec					      ENDIF
      7  15ec
      8  15ec					      IF	.CYCLES & 1
      9  15ec					      IFNCONST	NO_ILLEGAL_OPCODES
     10  15ec		       04 00		      nop	0
     11  15ee				  -	      ELSE
     12  15ee				  -	      bit	VSYNC
     13  15ee					      ENDIF
     14  15ee				   .CYCLES    SET	.CYCLES - 3
     15  15ee					      ENDIF
     16  15ee
     17  15ee				  -	      REPEAT	.CYCLES / 2
     18  15ee				  -	      nop
     19  15ee					      REPEND
    227  15ee		       85 2a		      sta	HMOVE	; 73
    228  15f0
    229  15f0							; Draw throb line #3
    230  15f0		       a6 c5		      ldx	ThrobColor+2	; 00
      0  15f2					      THROB_RAINBOW_BK	16	; 11
      1  15f2					      SUBROUTINE
      2  15f2				   .X	      SET	16
      3  15f2
      4  15f2		       a5 ee		      lda	RamBowColors+.X
      5  15f4		       d0 04		      bne	.Rbow
      6  15f6		       86 09		      stx	COLUBK
      7  15f8		       f0 03		      beq	.End
      8  15fa		       85 09	   .Rbow      sta	COLUBK
      9  15fc		       ea		      nop
     10  15fd				   .End
      0  15fd					      THROB_RAINBOW_PF	17	; 22
      1  15fd					      SUBROUTINE
      2  15fd				   .X	      SET	17
      3  15fd
      4  15fd		       a5 ef		      lda	RamBowColors+.X
      5  15ff		       d0 04		      bne	.Rbow
      6  1601		       86 08		      stx	COLUPF
      7  1603		       f0 03		      beq	.End
      8  1605		       85 08	   .Rbow      sta	COLUPF
      9  1607		       ea		      nop
     10  1608				   .End
    233  1608		       a5 86		      lda	CatTartColor	; 25
    234  160a		       85 08		      sta	COLUPF	; 28
    235  160c		       86 09		      stx	COLUBK	; 31
    236  160e		       86 08		      stx	COLUPF	; 34
    237  1610		       88		      dey		; 36
    238  1611		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    239  1613		       85 1b		      sta	GRP0	; 44
    240  1615		       b1 98		      lda	(TartGfxPtr2),y	; 49
    241  1617		       85 0e		      sta	PF1	; 52
    242  1619		       a5 bf		      lda	CatRow2FoodL	; 55
    243  161b		       85 90		      sta	FoodGfxPtr1	; 58
    244  161d		       a5 c0		      lda	CatRow2FoodR	; 61
    245  161f		       85 92		      sta	FoodGfxPtr2	; 64
    246  1621		       a5 bd		      lda	CatRowHmove+1	; 67
    247  1623		       85 21		      sta	HMP1	; 70
    248  1625		       85 2a		      sta	HMOVE	; 73
    249  1627
    250  1627							; Draw throb line #4
    251  1627		       a6 c4		      ldx	ThrobColor+1	; 00
      0  1629					      THROB_RAINBOW_BK	15	; 11
      1  1629					      SUBROUTINE
      2  1629				   .X	      SET	15
      3  1629
      4  1629		       a5 ed		      lda	RamBowColors+.X
      5  162b		       d0 04		      bne	.Rbow
      6  162d		       86 09		      stx	COLUBK
      7  162f		       f0 03		      beq	.End
      8  1631		       85 09	   .Rbow      sta	COLUBK
      9  1633		       ea		      nop
     10  1634				   .End
      0  1634					      THROB_RAINBOW_PF	16	; 22
      1  1634					      SUBROUTINE
      2  1634				   .X	      SET	16
      3  1634
      4  1634		       a5 ee		      lda	RamBowColors+.X
      5  1636		       d0 04		      bne	.Rbow
      6  1638		       86 08		      stx	COLUPF
      7  163a		       f0 03		      beq	.End
      8  163c		       85 08	   .Rbow      sta	COLUPF
      9  163e		       ea		      nop
     10  163f				   .End
    254  163f		       a5 86		      lda	CatTartColor	; 25
    255  1641		       85 08		      sta	COLUPF	; 28
    256  1643		       86 09		      stx	COLUBK	; 31
    257  1645		       86 08		      stx	COLUPF	; 34
    258  1647		       88		      dey		; 36
    259  1648		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    260  164a		       85 1b		      sta	GRP0	; 44
    261  164c		       b1 98		      lda	(TartGfxPtr2),y	; 49
    262  164e		       85 0e		      sta	PF1	; 52
    263  1650		       a5 c1		      lda	CatRow2Color1	; 55
    264  1652		       85 ca		      sta	FoodColor1	; 58
    265  1654		       ae c2 00 	      ldx.w	CatRow2Color2	; 55
    266  1657		       9a		      txs		; 58
    267  1658		       a5 bc		      lda	CatRowHmove+0	; 67
    268  165a		       85 21		      sta	HMP1	; 70
    269  165c		       85 2a		      sta	HMOVE	; 73
    270  165e
    271  165e							; Draw throb line #5
    272  165e					      SUBROUTINE
    273  165e
    274  165e		       a6 c3		      ldx	ThrobColor+0	; 00
      0  1660					      THROB_RAINBOW_BK	14	; 11
      1  1660					      SUBROUTINE
      2  1660				   .X	      SET	14
      3  1660
      4  1660		       a5 ec		      lda	RamBowColors+.X
      5  1662		       d0 04		      bne	.Rbow
      6  1664		       86 09		      stx	COLUBK
      7  1666		       f0 03		      beq	.End
      8  1668		       85 09	   .Rbow      sta	COLUBK
      9  166a		       ea		      nop
     10  166b				   .End
      0  166b					      THROB_RAINBOW_PF	15	; 22
      1  166b					      SUBROUTINE
      2  166b				   .X	      SET	15
      3  166b
      4  166b		       a5 ed		      lda	RamBowColors+.X
      5  166d		       d0 04		      bne	.Rbow
      6  166f		       86 08		      stx	COLUPF
      7  1671		       f0 03		      beq	.End
      8  1673		       85 08	   .Rbow      sta	COLUPF
      9  1675		       ea		      nop
     10  1676				   .End
    277  1676		       a5 86		      lda	CatTartColor	; 25
    278  1678		       85 08		      sta	COLUPF	; 28
    279  167a		       86 09		      stx	COLUBK	; 31
    280  167c		       86 08		      stx	COLUPF	; 34
    281  167e		       88		      dey		; 36
    282  167f		       b1 9a		      lda	(CatGfxPtr2),y	; 41
    283  1681		       85 1b		      sta	GRP0	; 44
    284  1683		       a6 c9		      ldx	CurrentRow	; 47
    285  1685		       b5 b3		      lda	FoodPosX,x	; 51
    286  1687		       c9 30		      cmp	#48	; 53
    287  1689		       a2 00		      ldx	#0	; 55
    288  168b		       ea		      nop		; 57
    289  168c
    290  168c							; Then output the 14 lines to draw a single row. This will include drawing
    291  168c							; the rainbow, the pop-tart, the head and face or paws, and the food items.
    292  168c							; All graphics will be updated every line.
    293  168c
    294  168c		       b0 0b		      bcs	.RightEntrance	; 60/59
    295  168e		       90 42		      bcc	.LeftEntrance	; 62
    296  1690
    297  1690							; 14 bytes into the page
    298  1690
    299  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    300  1690							; Kernel used when food items are closer to the right edge of the screen
    301  1690							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  1690
    303  1690				   .RightLoop
    304  1690							; 8 cycles
    305  1690		       b1 9a		      lda	(CatGfxPtr2),y	; 49 - set cat's head gfx
    306  1692		       85 1b		      sta	GRP0	; 52
    307  1694
    308  1694							; 9 cycles
    309  1694		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    310  1696		       ba		      tsx		; 57 - load 2nd food item's color
    311  1697		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    312  1699
    313  1699				   .RightEntrance		; enter loop here
    314  1699							; 2 cycles
    315  1699		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
    316  169b
    317  169b							; 8 cycles
    318  169b		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    319  169d		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    320  169f
    321  169f							; 8 cycles
    322  169f		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
    323  16a1		       85 1c		      sta	GRP1	; 02
    324  16a3
    325  16a3							; 7 cycles
    326  16a3		       b9 de 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
    327  16a6		       85 09		      sta	COLUBK	; 09
    328  16a8
    329  16a8							; 7 cycles
    330  16a8		       b9 df 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
    331  16ab		       85 08		      sta	COLUPF	; 16
    332  16ad
    333  16ad							; 6 cycles
    334  16ad		       a5 ca		      lda	FoodColor1	; 19 - set 1st food item's color
    335  16af		       85 07		      sta	COLUP1	; 22
    336  16b1
    337  16b1							; 8 cycles
    338  16b1		       a5 86		      lda	CatTartColor	; 25
    339  16b3		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    340  16b5		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    341  16b7		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
    342  16b9
    343  16b9							; 5 cycles
    344  16b9		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
    345  16bb
    346  16bb							; 2 cycles
    347  16bb		       88		      dey		; 41
    348  16bc		       10 d2		      bpl	.RightLoop	; 44/43
    349  16be
    350  16be		       a0 12		      ldy	#18	; 45
    351  16c0		       b1 98		      lda	(TartGfxPtr2),y	; 50
      0  16c2					      SLEEP	2	; 52
      1  16c2				   .CYCLES    SET	2
      2  16c2
      3  16c2				  -	      IF	.CYCLES < 2
      4  16c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16c2				  -	      ERR
      6  16c2					      ENDIF
      7  16c2
      8  16c2				  -	      IF	.CYCLES & 1
      9  16c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16c2				  -	      nop	0
     11  16c2				  -	      ELSE
     12  16c2				  -	      bit	VSYNC
     13  16c2				  -	      ENDIF
     14  16c2				  -.CYCLES    SET	.CYCLES - 3
     15  16c2					      ENDIF
     16  16c2
     17  16c2					      REPEAT	.CYCLES / 2
     18  16c2		       ea		      nop
     19  16c3					      REPEND
    353  16c3		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    354  16c5		       ba		      tsx		; 57 - load 2nd food item's color
    355  16c6		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    356  16c8		       b0 36		      bcs	.End	; 63
    357  16ca
    358  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    359  16ca							; Kernel used when food items are closer to the left edge of the screen
    360  16ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  16ca
    362  16ca				   .LeftLoop
    363  16ca							; 8 cycles
    364  16ca		       b1 9a		      lda	(CatGfxPtr2),y	; 54 - set cat's head gfx
    365  16cc		       85 1b		      sta	GRP0	; 57
    366  16ce
    367  16ce							; 5 cycles
    368  16ce		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    369  16d0		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    370  16d2
    371  16d2							; enter loop here
    372  16d2				   .LeftEntrance
    373  16d2							; 8 cycles
    374  16d2		       b1 98		      lda	(TartGfxPtr2),y	; 67 - load cat's tart gfx
    375  16d4		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    376  16d6
    377  16d6							; 8 cycles
    378  16d6		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    379  16d8		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    380  16da
    381  16da							; 7 cycles
    382  16da		       b9 de 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    383  16dd		       85 09		      sta	COLUBK	; 09
    384  16df
    385  16df							; 7 cycles
    386  16df		       b9 df 00 	      lda	RamBowColors+1,y	; 13
    387  16e2		       85 08		      sta	COLUPF	; 16
    388  16e4
    389  16e4							; 6 cycles
    390  16e4		       a5 ca		      lda	FoodColor1	; 19 - set 1st food item's color
    391  16e6		       85 07		      sta	COLUP1	; 22
    392  16e8
    393  16e8							; 8 cycles
    394  16e8		       a5 86		      lda	CatTartColor	; 25
    395  16ea		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    396  16ec		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    397  16ee
    398  16ee							; 13 cycles
    399  16ee		       b1 92		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    400  16f0		       ba		      tsx		; 38 - load 2nd food item's color
    401  16f1		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    402  16f3		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    403  16f5
    404  16f5							; 5 cycles
    405  16f5		       88		      dey		; 46
    406  16f6		       10 d2		      bpl	.LeftLoop	; 49/48
    407  16f8
    408  16f8		       a2 00		      ldx	#0	; 50
    409  16fa		       86 08		      stx	COLUPF	; 53
    410  16fc
    411  16fc		       a0 12		      ldy	#18	; 55
    412  16fe		       b1 98		      lda	(TartGfxPtr2),y	; 60
    413  1700				   .End
    414  1700
    415  1700		       a2 ff		      ldx	#$FF	; 65
    416  1702		       9a		      txs		; 67
    417  1703		       a2 00		      ldx	#0
    418  1705
    419  1705							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    420  1705							; Use this time to prepare the next row's food item pointers (unless this is
    421  1705							; the last row). If this is the last row, skip over LoRows.
    422  1705
    423  1705		       85 02		      sta	WSYNC
    424  1707		       a5 c3		      lda	ThrobColor+0
    425  1709		       85 09		      sta	COLUBK
    426  170b		       85 08		      sta	COLUPF
    427  170d		       86 1c		      stx	GRP1
      0  170f					      SLEEP	18
      1  170f				   .CYCLES    SET	18
      2  170f
      3  170f				  -	      IF	.CYCLES < 2
      4  170f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  170f				  -	      ERR
      6  170f					      ENDIF
      7  170f
      8  170f				  -	      IF	.CYCLES & 1
      9  170f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  170f				  -	      nop	0
     11  170f				  -	      ELSE
     12  170f				  -	      bit	VSYNC
     13  170f				  -	      ENDIF
     14  170f				  -.CYCLES    SET	.CYCLES - 3
     15  170f					      ENDIF
     16  170f
     17  170f					      REPEAT	.CYCLES / 2
     18  170f		       ea		      nop
     17  170f					      REPEND
     18  1710		       ea		      nop
     17  1710					      REPEND
     18  1711		       ea		      nop
     17  1711					      REPEND
     18  1712		       ea		      nop
     17  1712					      REPEND
     18  1713		       ea		      nop
     17  1713					      REPEND
     18  1714		       ea		      nop
     17  1714					      REPEND
     18  1715		       ea		      nop
     17  1715					      REPEND
     18  1716		       ea		      nop
     17  1716					      REPEND
     18  1717		       ea		      nop
     19  1718					      REPEND
    429  1718		       86 1b		      stx	GRP0
    430  171a		       c6 c9		      dec	CurrentRow
    431  171c		       30 03		      bmi	.GpEnd
    432  171e
    433  171e							; If the cat is at the very bottom of the screen, don't disable the
    434  171e							; missile/player graphics until after they are drawn, so they don't get
    435  171e							; clipped at the bottom of the screen. An easy way to do this would be to
    436  171e							; simply disable them after they would have been drawn, whether they are
    437  171e							; already disabled or not.
    438  171e
    439  171e		       4c 25 18 	      jmp	LoRows
    440  1721				   .GpEnd
    441  1721		       4c 8d 18 	      jmp	GameplayEnd
    442  1724
    443  1800		       00 00 00 00*	      ALIGN	$100
    444  1800
------- FILE bank2/subroutines/draw_food_row.asm LEVEL 6 PASS 2
      0  1800					      include	bank2/subroutines/draw_food_row.asm
      1  1800				   DrawFoodRow
      2  1800							; 69
      3  1800		       a0 0d		      ldy	#13	; 71
      4  1802
      5  1802				   .FoodLoop
      6  1802		       a9 00		      lda	#COL_BACKGROUND	; 73
      7  1804		       85 02		      sta	WSYNC	; 00
      8  1806
      9  1806				   .EnterHere
     10  1806		       85 09		      sta	COLUBK	; 03
     11  1808		       85 08		      sta	COLUPF	; 06
     12  180a
     13  180a		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     14  180c		       85 1c		      sta	GRP1	; 14
     15  180e		       a5 ca		      lda	FoodColor1	; 17
     16  1810		       85 07		      sta	COLUP1	; 20
     17  1812
     18  1812		       a5 c7		      lda	Temp	; 23
     19  1814
     20  1814		       38		      sec		; 25
     21  1815				   .WaitLoop
     22  1815		       e9 17		      sbc	#23	; 27
     23  1817		       b0 fc		      bcs	.WaitLoop	; 29
     24  1819
     25  1819		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     26  181b		       a6 cb		      ldx	FoodColor2	; 52
     27  181d		       85 1c		      sta	GRP1	; 55
     28  181f		       86 07		      stx	COLUP1	; 58
     29  1821
     30  1821		       88		      dey		; 60
     31  1822		       10 de		      bpl	.FoodLoop	; 62
     32  1824
     33  1824				   Sleep12
     34  1824		       60		      rts		; 68
------- FILE bank2/code/kernel_cat_rows.asm
    446  1825
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel_lo_rows.asm LEVEL 5 PASS 2
      0  1825					      include	bank2/code/kernel_lo_rows.asm
      1  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1825							; Draw all the rows below the cat's two rows.
      3  1825							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1825
      5  1825				   LoRows
      6  1825					      SUBROUTINE
      7  1825
      8  1825							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1825							; player 1 for the next row's food items.
     10  1825
     11  1825		       a5 c4		      lda	ThrobColor+1
     12  1827		       20 5c 14 	      jsr	SetFoodPosition
     13  182a		       85 02		      sta	WSYNC
     14  182c
     15  182c		       a5 c5		      lda	ThrobColor+2	; 03
     16  182e		       85 09		      sta	COLUBK	; 06
     17  1830		       85 08		      sta	COLUPF	; 09
     18  1832		       20 24 18 	      jsr	Sleep12
     19  1835		       20 24 18 	      jsr	Sleep12
     20  1838		       20 24 18 	      jsr	Sleep12
     21  183b		       20 24 18 	      jsr	Sleep12
     22  183e		       20 24 18 	      jsr	Sleep12	; 69
     23  1841		       8d 2a 00 	      sta.w	HMOVE	; 73
     24  1844		       85 02		      sta	WSYNC
     25  1846
     26  1846		       a5 c4		      lda	ThrobColor+1
     27  1848		       85 09		      sta	COLUBK
     28  184a		       85 08		      sta	COLUPF
     29  184c		       85 02		      sta	WSYNC
     30  184e
     31  184e		       a5 c3		      lda	ThrobColor+0	; 3
     32  1850		       85 09		      sta	COLUBK	; 6
     33  1852		       85 08		      sta	COLUPF	; 9
     34  1854		       a4 c9		      ldy	CurrentRow	; 12
     35  1856
     36  1856		       b9 a5 00 	      lda	FoodItemL,y	; 16
     37  1859		       29 f0		      and	#$F0	; 18
     38  185b		       85 90		      sta	FoodGfxPtr1	; 21
     39  185d		       aa		      tax		; 23
     40  185e		       bd 0f 1d 	      lda	FoodGfx+15,x	; 27
     41  1861		       85 ca		      sta	FoodColor1	; 30
     42  1863
     43  1863		       b9 ac 00 	      lda	FoodItemR,y	; 34
     44  1866		       29 f0		      and	#$F0	; 37
     45  1868		       85 92		      sta	FoodGfxPtr2	; 39
     46  186a		       aa		      tax		; 41
     47  186b		       bd 0f 1d 	      lda	FoodGfx+15,x	; 45
     48  186e		       85 cb		      sta	FoodColor2	; 48
     49  1870
     50  1870		       b9 b3 00 	      lda	FoodPosX,y	; 52
     51  1873		       85 c7		      sta	Temp	; 55
     52  1875
     53  1875							; Output 14 lines to draw a row, exactly the same as in HiRows.
     54  1875							; It may be possible to code this as a subroutine to save ROM space.
     55  1875
     56  1875		       20 00 18 	      jsr	DrawFoodRow	; 61
     57  1878		       85 02		      sta	WSYNC
     58  187a
     59  187a							; Lastly, output a single line for the next "throb" line.
     60  187a							; Use this time to prepare the next row's food item pointers (unless this is
     61  187a							; the last row). If this is not the last row, loop to LoRows for the next row.
     62  187a
     63  187a		       a5 c3		      lda	ThrobColor+0
     64  187c		       85 09		      sta	COLUBK
     65  187e		       85 08		      sta	COLUPF
     66  1880		       a9 00		      lda	#0
     67  1882		       85 1b		      sta	GRP0
     68  1884		       85 1c		      sta	GRP1
     69  1886		       c6 c9		      dec	CurrentRow
     70  1888		       10 9b		      bpl	LoRows
     71  188a
     72  188a		       a2 ff		      ldx	#$FF
     73  188c		       9a		      txs
     74  188d
     75  188d				   GameplayEnd
------- FILE bank2/code/kernel_gameplay.asm
------- FILE bank2/code/kernel.asm
------- FILE bank2/code/kernel_health.asm LEVEL 4 PASS 2
      0  188d					      include	bank2/code/kernel_health.asm
      1  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  188d							; Health Display
      3  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  188d							; Draw the health indicator and progress bar
      5  188d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  188d
      7  188d					      SUBROUTINE
      8  188d
      9  188d		       85 02		      sta	WSYNC
     10  188f		       a5 c4		      lda	ThrobColor+1	; 03
     11  1891		       85 09		      sta	COLUBK	; 06
     12  1893
     13  1893		       a9 00		      lda	#0	; 08
     14  1895		       85 0d		      sta	PF0	; 11
     15  1897		       85 0a		      sta	CTRLPF	; 14
     16  1899		       85 06		      sta	COLUP0	; 17
     17  189b		       85 07		      sta	COLUP1	; 20
     18  189d
     19  189d		       a9 05		      lda	#DOUBLE_SIZE	; 22
     20  189f		       85 04		      sta	NUSIZ0	; 25
     21  18a1		       85 05		      sta	NUSIZ1	; 28
     22  18a3		       a9 88		      lda	#$80 + REFP_TRUE	; 30
     23  18a5		       85 0c		      sta	REFP1	; 33
     24  18a7		       85 21		      sta	HMP1	; 36
     25  18a9		       a2 ff		      ldx	#$FF	; 38
     26  18ab		       86 20		      stx	HMP0	; 41
     27  18ad
     28  18ad		       86 c8		      stx	ProgressBar+1	; 44
     29  18af		       86 c9		      stx	ProgressBar+2	; 47
     30  18b1		       86 ca		      stx	ProgressBar+3	; 50
     31  18b3		       ca		      dex		; 52
     32  18b4		       86 cb		      stx	ProgressBar+4	; 55
     33  18b6		       a2 e0		      ldx	#$E0	; 57
     34  18b8		       86 c7		      stx	ProgressBar+0	; 60
     35  18ba
     36  18ba		       a9 08		      lda	#COL_CAT_FACE	; 62
     37  18bc		       85 10		      sta	RESP0	; 65
     38  18be		       85 11		      sta	RESP1	; 68
     39  18c0		       85 08		      sta	COLUPF	; 71
     40  18c2		       85 2a		      sta	HMOVE	; 74
     41  18c4
     42  18c4		       a5 9e		      lda	ScoreColor	; 01
     43  18c6		       85 09		      sta	COLUBK	; 04
     44  18c8
     45  18c8							; Load RAM for progress bar display (28-53 cycles)
     46  18c8
     47  18c8		       a5 ba		      lda	Progress	; 3 - get amount of progress
     48  18ca
     49  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  18ca							; The level progress bar uses the following playfield bits:
     51  18ca							; (note that PF0 and PF2 are NOT reversed in this diagram)
     52  18ca							;
     53  18ca							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
     54  18ca							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
     55  18ca							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
     56  18ca							;
     57  18ca							; When the progress bar is empty, every bit labeled "X" above should be
     58  18ca							; set (1), and when it is full, every "X" bit should be cleared (0).
     59  18ca							; The bits labeled "o" must ALWAYS be cleared.
     60  18ca							;
     61  18ca							; The leftmost playfield value (the 1st PF0) will be calculated first,
     62  18ca							; and then each playfield value to the right until the 2nd PF1
     63  18ca							; will be calculated.
     64  18ca							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  18ca
     66  18ca		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
     67  18cc
     68  18cc		       38		      sec		; 2
     69  18cd		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
     70  18cf		       30 1e		      bmi	.Underflow1	; 2/3
     71  18d1		       84 c7		      sty	ProgressBar	; 3 - this playfield byte is full
     72  18d3
     73  18d3		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
     74  18d5		       30 23		      bmi	.Underflow2	; 2/3
     75  18d7		       84 c8		      sty	ProgressBar+1	; 3 - this playfield byte is full
     76  18d9
     77  18d9		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
     78  18db		       30 28		      bmi	.Underflow3	; 2/3
     79  18dd		       84 c9		      sty	ProgressBar+2	; 3 - this playfield byte is full
     80  18df
     81  18df		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
     82  18e1		       30 2d		      bmi	.Underflow4	; 2/3
     83  18e3		       84 ca		      sty	ProgressBar+3	; 3 - this playfield byte is full
     84  18e5
     85  18e5		       aa		      tax		; 2
     86  18e6		       bd 0e 1c 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
     87  18e9		       0a		      asl		; 2
     88  18ea		       85 cb		      sta	ProgressBar+4	; 3
     89  18ec		       4c 18 19 	      jmp	.Finish	; 3
     90  18ef
     91  18ef				   .Underflow1		; for 1st PF0
     92  18ef		       69 03		      adc	#3	; 3 - add back the 3
     93  18f1		       aa		      tax		; 2
     94  18f2		       bd 1b 1c 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
     95  18f5		       85 c7		      sta	ProgressBar	; 3
     96  18f7		       4c 18 19 	      jmp	.Finish	; 3
     97  18fa
     98  18fa				   .Underflow2		; for 1st PF1
     99  18fa		       69 08		      adc	#8	; 3 - add back the 8
    100  18fc		       aa		      tax		; 2
    101  18fd		       bd 0d 1c 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    102  1900		       85 c8		      sta	ProgressBar+1	; 3
    103  1902		       4c 18 19 	      jmp	.Finish	; 3
    104  1905
    105  1905				   .Underflow3		; for PF2
    106  1905		       69 08		      adc	#8	; 3 - add back the 8
    107  1907		       aa		      tax		; 2
    108  1908		       bd 16 1c 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    109  190b		       85 c9		      sta	ProgressBar+2	; 3
    110  190d		       4c 18 19 	      jmp	.Finish	; 3
    111  1910
    112  1910				   .Underflow4		; for 2nd PF0
    113  1910		       69 04		      adc	#4	; 3 - add back the 4
    114  1912		       aa		      tax		; 2
    115  1913		       bd 1a 1c 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    116  1916		       85 ca		      sta	ProgressBar+3	; 3
    117  1918
    118  1918				   .Finish		; 57
    119  1918
    120  1918		       a0 04		      ldy	#4
    121  191a		       85 02		      sta	WSYNC
    122  191c
    123  191c							; draw top of health
    124  191c				   .HealthTop
    125  191c		       a2 03		      ldx	#3	; 02
    126  191e				   .Loop
    127  191e		       85 02		      sta	WSYNC
    128  1920		       b9 6f 1b 	      lda	HealthTopGfx,y	; 04
    129  1923		       85 1b		      sta	GRP0	; 07
    130  1925		       85 1c		      sta	GRP1	; 10
    131  1927		       a9 00		      lda	#$00	; 12
    132  1929		       85 0f		      sta	PF2	; 15
    133  192b
    134  192b							; Set the pointers for health graphics - 26 cycles
    135  192b		       18		      clc		; 17
    136  192c		       a9 1b		      lda	#>HealthLeftGfx	; 19
    137  192e		       85 99		      sta	HthGfxLPtr+1	; 22
    138  1930		       85 9b		      sta	HthGfxRPtr+1	; 25
    139  1932		       a9 74		      lda	#<HealthLeftGfx	; 27
    140  1934		       65 bb		      adc	Health	; 30
    141  1936		       85 98		      sta	HthGfxLPtr	; 33
    142  1938		       a9 94		      lda	#<HealthRightGfx	; 35
    143  193a		       65 bb		      adc	Health	; 38
    144  193c		       85 9a		      sta	HthGfxRPtr	; 41
    145  193e		       b9 08 1c 	      lda	HealthBgGfx+8,y	; 45
    146  1941		       85 0f		      sta	PF2	; 48
    147  1943
    148  1943		       ca		      dex		; 50
    149  1944		       d0 d8		      bne	.Loop	; 52
    150  1946
    151  1946		       88		      dey		; 54
    152  1947		       10 d3		      bpl	.HealthTop	; 56
    153  1949
    154  1949					      SUBROUTINE
    155  1949
    156  1949		       a0 03		      ldy	#3	; 58
    157  194b		       a2 03		      ldx	#3	; 60
    158  194d		       86 c7		      stx	Temp	; 63
    159  194f
    160  194f		       4c 00 1a 	      jmp	.HealthMiddle	; 66
    161  1a00		       00 00 00 00*	      ALIGN	$100	; align to page
    162  1a00
    163  1a00							; draw middle of health, with progress bar
    164  1a00				   .HealthMiddle
    165  1a00		       85 02		      sta	WSYNC
    166  1a02				   .Loop
    167  1a02		       a5 c7		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
    168  1a04		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
    169  1a06		       a5 c8		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
    170  1a08		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
    171  1a0a		       a5 c9		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
    172  1a0c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
    173  1a0e		       a5 9f		      lda	PgBarColor	; 21 - get the progress bar color
    174  1a10		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
    175  1a12		       a5 ca		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
    176  1a14		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
    177  1a16		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
    178  1a18		       85 1b		      sta	GRP0	; 38 - for the left half of health
    179  1a1a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
    180  1a1c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    181  1a1e		       a5 cb		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    182  1a20		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    183  1a22		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    184  1a24		       85 0f		      sta	PF2	; 57 - for the health background and set it
    185  1a26		       a5 9e		      lda	ScoreColor	; 60 - get the color for the background
    186  1a28		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    187  1a2b
    188  1a2b		       ca		      dex		; 66
    189  1a2c		       d0 d2		      bne	.HealthMiddle	; 68
    190  1a2e
    191  1a2e		       a6 c7		      ldx	Temp	; 71
    192  1a30		       88		      dey		; 73
    193  1a31		       10 cf		      bpl	.Loop	; 76 / 00
    194  1a33
    195  1a33					      SUBROUTINE
    196  1a33
    197  1a33		       a9 00		      lda	#0
    198  1a35		       85 0d		      sta	PF0
    199  1a37		       85 0e		      sta	PF1
    200  1a39		       a0 07		      ldy	#7
    201  1a3b
    202  1a3b							; draw bottom of health
    203  1a3b				   .HealthBottom
    204  1a3b		       a2 03		      ldx	#3
    205  1a3d				   .Loop
    206  1a3d		       b1 98		      lda	(HthGfxLPtr),y
    207  1a3f		       85 1b		      sta	GRP0
    208  1a41		       b1 9a		      lda	(HthGfxRPtr),y
    209  1a43		       85 1c		      sta	GRP1
    210  1a45		       a9 00		      lda	#$00
    211  1a47		       85 0f		      sta	PF2
      0  1a49					      SLEEP	14
      1  1a49				   .CYCLES    SET	14
      2  1a49
      3  1a49				  -	      IF	.CYCLES < 2
      4  1a49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1a49				  -	      ERR
      6  1a49					      ENDIF
      7  1a49
      8  1a49				  -	      IF	.CYCLES & 1
      9  1a49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1a49				  -	      nop	0
     11  1a49				  -	      ELSE
     12  1a49				  -	      bit	VSYNC
     13  1a49				  -	      ENDIF
     14  1a49				  -.CYCLES    SET	.CYCLES - 3
     15  1a49					      ENDIF
     16  1a49
     17  1a49					      REPEAT	.CYCLES / 2
     18  1a49		       ea		      nop
     17  1a49					      REPEND
     18  1a4a		       ea		      nop
     17  1a4a					      REPEND
     18  1a4b		       ea		      nop
     17  1a4b					      REPEND
     18  1a4c		       ea		      nop
     17  1a4c					      REPEND
     18  1a4d		       ea		      nop
     17  1a4d					      REPEND
     18  1a4e		       ea		      nop
     17  1a4e					      REPEND
     18  1a4f		       ea		      nop
     19  1a50					      REPEND
    213  1a50		       b9 fc 1b 	      lda	HealthBgGfx-4,y
    214  1a53		       85 0f		      sta	PF2
    215  1a55		       85 02		      sta	WSYNC
    216  1a57
    217  1a57		       ca		      dex
    218  1a58		       d0 e3		      bne	.Loop
    219  1a5a
    220  1a5a		       88		      dey
    221  1a5b		       c0 03		      cpy	#3
    222  1a5d		       d0 dc		      bne	.HealthBottom
    223  1a5f
    224  1a5f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    225  1a5f
    226  1a5f		       86 1b		      stx	GRP0
    227  1a61		       86 1c		      stx	GRP1
    228  1a63		       86 0c		      stx	REFP1
    229  1a65		       86 0f		      stx	PF2
    230  1a67
    231  1a67		       85 02		      sta	WSYNC
------- FILE bank2/code/kernel.asm
     12  1a69
     13  1a69		       4c 60 10 	      jmp	Overscan
------- FILE bank2.asm
------- FILE bank2/data/graphics.asm LEVEL 3 PASS 2
      0  1a6c					      include	bank2/data/graphics.asm
      1  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1a6c							; Graphics Tables
      3  1a6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1a6c
      5  1b00		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1b00
      7  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1b00							; Digit graphics for the scoreboard
      9  1b00							;
     10  1b00							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1b00							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1b00							; to normal when it is pulled from the stack.
     13  1b00							;
     14  1b00							; Table takes up $50 (80) bytes of ROM
     15  1b00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1b00
     17  1b00				   ScoreGfx
     18  1b00
     19  1b00		       1c		      .byte.b	%00011100	; digit 0
     20  1b01		       26		      .byte.b	%00100110
     21  1b02		       63		      .byte.b	%01100011
     22  1b03		       63		      .byte.b	%01100011
     23  1b04		       63		      .byte.b	%01100011
     24  1b05		       32		      .byte.b	%00110010
     25  1b06		       1c		      .byte.b	%00011100
     26  1b07		       00		      .byte.b	%00000000
     27  1b08
     28  1b08							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1b08
     30  1b08		       18		      .byte.b	%00011000	; digit 1
     31  1b09		       78		      .byte.b	%01111000
     32  1b0a		       18		      .byte.b	%00011000
     33  1b0b		       18		      .byte.b	%00011000
     34  1b0c		       18		      .byte.b	%00011000
     35  1b0d		       18		      .byte.b	%00011000
     36  1b0e		       7e		      .byte.b	%01111110
     37  1b0f		       00		      .byte.b	%00000000
     38  1b10
     39  1b10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1b10
     41  1b10		       3e		      .byte.b	%00111110	; digit 2
     42  1b11		       63		      .byte.b	%01100011
     43  1b12		       07		      .byte.b	%00000111
     44  1b13		       1e		      .byte.b	%00011110
     45  1b14		       3c		      .byte.b	%00111100
     46  1b15		       70		      .byte.b	%01110000
     47  1b16		       7f		      .byte.b	%01111111
     48  1b17		       00		      .byte.b	%00000000
     49  1b18
     50  1b18							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1b18
     52  1b18		       7f		      .byte.b	%01111111	; digit 3
     53  1b19		       06		      .byte.b	%00000110
     54  1b1a		       0c		      .byte.b	%00001100
     55  1b1b		       1e		      .byte.b	%00011110
     56  1b1c		       03		      .byte.b	%00000011
     57  1b1d		       63		      .byte.b	%01100011
     58  1b1e		       3e		      .byte.b	%00111110
     59  1b1f		       00		      .byte.b	%00000000
     60  1b20
     61  1b20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1b20
     63  1b20		       0e		      .byte.b	%00001110	; digit 4
     64  1b21		       1e		      .byte.b	%00011110
     65  1b22		       36		      .byte.b	%00110110
     66  1b23		       66		      .byte.b	%01100110
     67  1b24		       7f		      .byte.b	%01111111
     68  1b25		       06		      .byte.b	%00000110
     69  1b26		       06		      .byte.b	%00000110
     70  1b27		       00		      .byte.b	%00000000
     71  1b28
     72  1b28							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1b28
     74  1b28		       7e		      .byte.b	%01111110	; digit 5
     75  1b29		       60		      .byte.b	%01100000
     76  1b2a		       7e		      .byte.b	%01111110
     77  1b2b		       03		      .byte.b	%00000011
     78  1b2c		       03		      .byte.b	%00000011
     79  1b2d		       63		      .byte.b	%01100011
     80  1b2e		       3e		      .byte.b	%00111110
     81  1b2f		       00		      .byte.b	%00000000
     82  1b30
     83  1b30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1b30
     85  1b30		       1e		      .byte.b	%00011110	; digit 6
     86  1b31		       30		      .byte.b	%00110000
     87  1b32		       60		      .byte.b	%01100000
     88  1b33		       7e		      .byte.b	%01111110
     89  1b34		       63		      .byte.b	%01100011
     90  1b35		       63		      .byte.b	%01100011
     91  1b36		       3e		      .byte.b	%00111110
     92  1b37		       00		      .byte.b	%00000000
     93  1b38
     94  1b38							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1b38
     96  1b38		       7f		      .byte.b	%01111111	; digit 7
     97  1b39		       03		      .byte.b	%00000011
     98  1b3a		       06		      .byte.b	%00000110
     99  1b3b		       0c		      .byte.b	%00001100
    100  1b3c		       18		      .byte.b	%00011000
    101  1b3d		       18		      .byte.b	%00011000
    102  1b3e		       18		      .byte.b	%00011000
    103  1b3f		       00		      .byte.b	%00000000
    104  1b40
    105  1b40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1b40
    107  1b40		       3c		      .byte.b	%00111100	; digit 8
    108  1b41		       62		      .byte.b	%01100010
    109  1b42		       72		      .byte.b	%01110010
    110  1b43		       3c		      .byte.b	%00111100
    111  1b44		       43		      .byte.b	%01000011
    112  1b45		       43		      .byte.b	%01000011
    113  1b46		       3e		      .byte.b	%00111110
    114  1b47		       00		      .byte.b	%00000000
    115  1b48
    116  1b48							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1b48
    118  1b48		       3e		      .byte.b	%00111110	; digit 9
    119  1b49		       63		      .byte.b	%01100011
    120  1b4a		       63		      .byte.b	%01100011
    121  1b4b		       3f		      .byte.b	%00111111
    122  1b4c		       03		      .byte.b	%00000011
    123  1b4d		       06		      .byte.b	%00000110
    124  1b4e		       3c		      .byte.b	%00111100
    125  1b4f		       00		      .byte.b	%00000000
    126  1b50
    127  1b50
    128  1b50
    129  1b50				   LevelGfx
    130  1b50
    131  1b50		       34		      .byte.b	$34
    132  1b51		       04		      .byte.b	$04
    133  1b52		       04		      .byte.b	$04
    134  1b53		       04		      .byte.b	$04
    135  1b54		       04		      .byte.b	$04
    136  1b55		       04		      .byte.b	$04
    137  1b56		       24		      .byte.b	$24
    138  1b57
    139  1b57
    140  1b57
    141  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    142  1b57							; Throbbing Line Graphics
    143  1b57							;
    144  1b57							; Graphics tables for the throbbing lines
    145  1b57							;
    146  1b57							; Table takes up $18 (24) bytes of ROM
    147  1b57							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1b57
    149  1b57				   ThrobGfx
    150  1b57
    151  1b57		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    152  1b58		       81		      .byte.b	LUM_2 + MODE_GREY
    153  1b59		       02		      .byte.b	LUM_4 + MODE_COLOR
    154  1b5a
    155  1b5a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    156  1b5a
    157  1b5a		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    158  1b5b		       02		      .byte.b	LUM_4 + MODE_COLOR
    159  1b5c		       03		      .byte.b	LUM_6 + MODE_COLOR
    160  1b5d
    161  1b5d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    162  1b5d
    163  1b5d		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    164  1b5e		       03		      .byte.b	LUM_6 + MODE_COLOR
    165  1b5f		       04		      .byte.b	LUM_8 + MODE_COLOR
    166  1b60
    167  1b60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    168  1b60
    169  1b60		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    170  1b61		       04		      .byte.b	LUM_8 + MODE_COLOR
    171  1b62		       06		      .byte.b	LUM_C + MODE_COLOR
    172  1b63
    173  1b63							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    174  1b63
    175  1b63		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    176  1b64		       05		      .byte.b	LUM_A + MODE_COLOR
    177  1b65		       07		      .byte.b	LUM_E + MODE_COLOR
    178  1b66
    179  1b66							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    180  1b66
    181  1b66		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    182  1b67		       04		      .byte.b	LUM_8 + MODE_COLOR
    183  1b68		       06		      .byte.b	LUM_C + MODE_COLOR
    184  1b69
    185  1b69							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    186  1b69
    187  1b69		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    188  1b6a		       03		      .byte.b	LUM_6 + MODE_COLOR
    189  1b6b		       05		      .byte.b	LUM_A + MODE_COLOR
    190  1b6c
    191  1b6c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1b6c
    193  1b6c		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    194  1b6d		       02		      .byte.b	LUM_4 + MODE_COLOR
    195  1b6e		       03		      .byte.b	LUM_6 + MODE_COLOR
    196  1b6f
    197  1b6f
    198  1b6f
    199  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    200  1b6f							; Health Graphics
    201  1b6f							;
    202  1b6f							; All of these tables are upside-down, and they are supposed to be used with the
    203  1b6f							; left player not mirrored, and the right player mirrored. This makes it easier
    204  1b6f							; to draw the top 5 lines since they are always mirrored. Because of this, all
    205  1b6f							; the graphics for the lower right are flipped.
    206  1b6f							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    207  1b6f							; are set up in a confusing way. They are upside-down, but they are split
    208  1b6f							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    209  1b6f							; of graphics (upside-down), and the last 4 bytes correspond to the
    210  1b6f							; LOWER 4 lines of graphics (also upside-down).
    211  1b6f							; The last table (HealthBgGfx) is for the grey background of the
    212  1b6f							; health graphics drawn with the playfield.
    213  1b6f							;
    214  1b6f							; Table takes up $45 (69) bytes of ROM
    215  1b6f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    216  1b6f
    217  1b6f				   HealthTopGfx
    218  1b6f
    219  1b6f		       40		      .byte.b	%01000000	; graphics for left top of health
    220  1b70		       43		      .byte.b	%01000011
    221  1b71		       44		      .byte.b	%01000100
    222  1b72		       48		      .byte.b	%01001000
    223  1b73		       30		      .byte.b	%00110000
    224  1b74
    225  1b74							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    226  1b74				   HealthLeftGfx
    227  1b74
    228  1b74		       80		      .byte.b	%10000000	; left health full (upper)
    229  1b75		       8c		      .byte.b	%10001100
    230  1b76		       84		      .byte.b	%10000100
    231  1b77		       80		      .byte.b	%10000000
    232  1b78		       1f		      .byte.b	%00011111	; left health full (lower)
    233  1b79		       20		      .byte.b	%00100000
    234  1b7a		       47		      .byte.b	%01000111
    235  1b7b		       84		      .byte.b	%10000100
    236  1b7c
    237  1b7c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    238  1b7c
    239  1b7c		       80		      .byte.b	%10000000	; left health medium (upper)
    240  1b7d		       8c		      .byte.b	%10001100
    241  1b7e		       84		      .byte.b	%10000100
    242  1b7f		       80		      .byte.b	%10000000
    243  1b80		       1f		      .byte.b	%00011111	; left health medium (lower)
    244  1b81		       20		      .byte.b	%00100000
    245  1b82		       47		      .byte.b	%01000111
    246  1b83		       80		      .byte.b	%10000000
    247  1b84
    248  1b84							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    249  1b84
    250  1b84		       80		      .byte.b	%10000000	; left health low (upper)
    251  1b85		       8c		      .byte.b	%10001100
    252  1b86		       84		      .byte.b	%10000100
    253  1b87		       80		      .byte.b	%10000000
    254  1b88		       1f		      .byte.b	%00011111	; left health low (lower)
    255  1b89		       20		      .byte.b	%00100000
    256  1b8a		       44		      .byte.b	%01000100
    257  1b8b		       87		      .byte.b	%10000111
    258  1b8c
    259  1b8c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    260  1b8c
    261  1b8c		       80		      .byte.b	%10000000	; left health empty (upper)
    262  1b8d		       9c		      .byte.b	%10011100
    263  1b8e		       80		      .byte.b	%10000000
    264  1b8f		       80		      .byte.b	%10000000
    265  1b90		       1f		      .byte.b	%00011111	; left health empty (lower)
    266  1b91		       20		      .byte.b	%00100000
    267  1b92		       46		      .byte.b	%01000110
    268  1b93		       81		      .byte.b	%10000001
    269  1b94
    270  1b94							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    271  1b94				   HealthRightGfx
    272  1b94
    273  1b94		       80		      .byte.b	%10000000	; right health full (upper)
    274  1b95		       9a		      .byte.b	%10011010
    275  1b96		       90		      .byte.b	%10010000
    276  1b97		       80		      .byte.b	%10000000
    277  1b98		       1f		      .byte.b	%00011111	; right health full (lower)
    278  1b99		       20		      .byte.b	%00100000
    279  1b9a		       4f		      .byte.b	%01001111
    280  1b9b		       89		      .byte.b	%10001001
    281  1b9c
    282  1b9c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    283  1b9c
    284  1b9c		       80		      .byte.b	%10000000	; right health medium (upper)
    285  1b9d		       9a		      .byte.b	%10011010
    286  1b9e		       90		      .byte.b	%10010000
    287  1b9f		       80		      .byte.b	%10000000
    288  1ba0		       1f		      .byte.b	%00011111	; right health medium (lower)
    289  1ba1		       20		      .byte.b	%00100000
    290  1ba2		       4f		      .byte.b	%01001111
    291  1ba3		       80		      .byte.b	%10000000
    292  1ba4
    293  1ba4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    294  1ba4
    295  1ba4		       80		      .byte.b	%10000000	; right health low (upper)
    296  1ba5		       9a		      .byte.b	%10011010
    297  1ba6		       88		      .byte.b	%10001000
    298  1ba7		       80		      .byte.b	%10000000
    299  1ba8		       1f		      .byte.b	%00011111	; right health low (lower)
    300  1ba9		       20		      .byte.b	%00100000
    301  1baa		       48		      .byte.b	%01001000
    302  1bab		       8f		      .byte.b	%10001111
    303  1bac
    304  1bac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    305  1bac
    306  1bac		       80		      .byte.b	%10000000	; right health empty (upper)
    307  1bad		       ba		      .byte.b	%10111010
    308  1bae		       80		      .byte.b	%10000000
    309  1baf		       80		      .byte.b	%10000000
    310  1bb0		       1f		      .byte.b	%00011111	; right health empty (lower)
    311  1bb1		       20		      .byte.b	%00100000
    312  1bb2		       4c		      .byte.b	%01001100
    313  1bb3		       83		      .byte.b	%10000011
    314  1bb4
    315  1bb4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    316  1bb4
    317  1bb4							; 3 bytes left in this page
    318  1bb4
    319  1c00		       00 00 00 00*	      ALIGN	$100	; align to page
    320  1c00
    321  1c00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    322  1c00				   HealthBgGfx
    323  1c00							; 13 bytes
    324  1c00
    325  1c00		       00		      .byte.b	%00000000
    326  1c01		       3e		      .byte.b	%00111110
    327  1c02		       7f		      .byte.b	%01111111
    328  1c03		       7f		      .byte.b	%01111111
    329  1c04		       7f		      .byte.b	%01111111
    330  1c05		       7f		      .byte.b	%01111111
    331  1c06		       7f		      .byte.b	%01111111
    332  1c07		       7f		      .byte.b	%01111111
    333  1c08		       7f		      .byte.b	%01111111
    334  1c09		       7f		      .byte.b	%01111111
    335  1c0a		       63		      .byte.b	%01100011
    336  1c0b		       63		      .byte.b	%01100011
    337  1c0c		       00		      .byte.b	%00000000
    338  1c0d
    339  1c0d
    340  1c0d
    341  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    342  1c0d							; Progress Bar Graphics
    343  1c0d							;
    344  1c0d							;
    345  1c0d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    346  1c0d
    347  1c0d				   PgBarGfx
    348  1c0d							; 9 bytes
    349  1c0d
    350  1c0d		       ff		      .byte.b	%11111111	; 1st PF1
    351  1c0e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    352  1c0f		       3f		      .byte.b	%00111111
    353  1c10		       1f		      .byte.b	%00011111
    354  1c11		       0f		      .byte.b	%00001111
    355  1c12		       07		      .byte.b	%00000111
    356  1c13		       03		      .byte.b	%00000011
    357  1c14		       01		      .byte.b	%00000001
    358  1c15		       00		      .byte.b	%00000000
    359  1c16
    360  1c16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    361  1c16				   PgBarGfxR
    362  1c16							; 8 bytes
    363  1c16
    364  1c16		       ff		      .byte.b	%11111111	; PF2
    365  1c17		       fe		      .byte.b	%11111110
    366  1c18		       fc		      .byte.b	%11111100
    367  1c19		       f8		      .byte.b	%11111000
    368  1c1a		       f0		      .byte.b	%11110000	; 2nd PF0
    369  1c1b		       e0		      .byte.b	%11100000	; 1st PF0
    370  1c1c		       c0		      .byte.b	%11000000
    371  1c1d		       80		      .byte.b	%10000000
    372  1c1e
    373  1c1e
    374  1c1e
    375  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    376  1c1e							; Cat Rainbow Graphics
    377  1c1e							;
    378  1c1e							;
    379  1c1e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    380  1c1e
    381  1c1e				   RainbowGfx
    382  1c1e							; 4 bytes
    383  1c1e
    384  1c1e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    385  1c1f
    386  1c1f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    387  1c20
    388  1c20		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    389  1c21
    390  1c21		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    391  1c22
    392  1d00		       00 00 00 00*	      ALIGN	$100
    393  1d00
    394  1d00				   FoodGfx
    395  1d00
    396  1d00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    397  1d00							; 0 - blank
    398  1d00
    399  1d00		       01		      .byte.b	%00000001
    400  1d01		       80		      .byte.b	%10000000
    401  1d02		       01		      .byte.b	%00000001
    402  1d03		       80		      .byte.b	%10000000
    403  1d04		       01		      .byte.b	%00000001
    404  1d05		       80		      .byte.b	%10000000
    405  1d06		       01		      .byte.b	%00000001
    406  1d07		       80		      .byte.b	%10000000
    407  1d08		       01		      .byte.b	%00000001
    408  1d09		       80		      .byte.b	%10000000
    409  1d0a		       01		      .byte.b	%00000001
    410  1d0b		       80		      .byte.b	%10000000
    411  1d0c		       01		      .byte.b	%00000001
    412  1d0d		       80		      .byte.b	%10000000
    413  1d0e
    414  1d0e		       00		      .byte.b	0
    415  1d0f		       00		      .byte.b	$00
    416  1d10
    417  1d10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  1d10							; 1 - apple
    419  1d10
    420  1d10		       34		      .byte.b	%00110100
    421  1d11		       7e		      .byte.b	%01111110
    422  1d12		       7e		      .byte.b	%01111110
    423  1d13		       ff		      .byte.b	%11111111
    424  1d14		       ff		      .byte.b	%11111111
    425  1d15		       ff		      .byte.b	%11111111
    426  1d16		       ff		      .byte.b	%11111111
    427  1d17		       ff		      .byte.b	%11111111
    428  1d18		       ff		      .byte.b	%11111111
    429  1d19		       7f		      .byte.b	%01111111
    430  1d1a		       6a		      .byte.b	%01101010
    431  1d1b		       08		      .byte.b	%00001000
    432  1d1c		       0c		      .byte.b	%00001100
    433  1d1d		       04		      .byte.b	%00000100
    434  1d1e
    435  1d1e		       00		      .byte.b	0
    436  1d1f		       46		      .byte.b	$46
    437  1d20
    438  1d20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    439  1d20							; 2 - peach
    440  1d20
    441  1d20		       3c		      .byte.b	%00111100
    442  1d21		       6e		      .byte.b	%01101110
    443  1d22		       6e		      .byte.b	%01101110
    444  1d23		       df		      .byte.b	%11011111
    445  1d24		       df		      .byte.b	%11011111
    446  1d25		       bf		      .byte.b	%10111111
    447  1d26		       bf		      .byte.b	%10111111
    448  1d27		       bf		      .byte.b	%10111111
    449  1d28		       de		      .byte.b	%11011110
    450  1d29		       5e		      .byte.b	%01011110
    451  1d2a		       6c		      .byte.b	%01101100
    452  1d2b		       18		      .byte.b	%00011000
    453  1d2c		       10		      .byte.b	%00010000
    454  1d2d		       30		      .byte.b	%00110000
    455  1d2e
    456  1d2e		       00		      .byte.b	0
    457  1d2f		       3a		      .byte.b	$3A
    458  1d30
    459  1d30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    460  1d30							; 3 - banana
    461  1d30
    462  1d30		       38		      .byte.b	%00111000
    463  1d31		       7c		      .byte.b	%01111100
    464  1d32		       fe		      .byte.b	%11111110
    465  1d33		       fe		      .byte.b	%11111110
    466  1d34		       ff		      .byte.b	%11111111
    467  1d35		       ff		      .byte.b	%11111111
    468  1d36		       8f		      .byte.b	%10001111
    469  1d37		       07		      .byte.b	%00000111
    470  1d38		       07		      .byte.b	%00000111
    471  1d39		       03		      .byte.b	%00000011
    472  1d3a		       03		      .byte.b	%00000011
    473  1d3b		       02		      .byte.b	%00000010
    474  1d3c		       06		      .byte.b	%00000110
    475  1d3d		       06		      .byte.b	%00000110
    476  1d3e
    477  1d3e		       00		      .byte.b	0
    478  1d3f		       1e		      .byte.b	$1E
    479  1d40
    480  1d40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    481  1d40							; 4 - pear
    482  1d40
    483  1d40		       38		      .byte.b	%00111000
    484  1d41		       7c		      .byte.b	%01111100
    485  1d42		       fe		      .byte.b	%11111110
    486  1d43		       fe		      .byte.b	%11111110
    487  1d44		       fe		      .byte.b	%11111110
    488  1d45		       fe		      .byte.b	%11111110
    489  1d46		       7c		      .byte.b	%01111100
    490  1d47		       7c		      .byte.b	%01111100
    491  1d48		       38		      .byte.b	%00111000
    492  1d49		       38		      .byte.b	%00111000
    493  1d4a		       30		      .byte.b	%00110000
    494  1d4b		       10		      .byte.b	%00010000
    495  1d4c		       18		      .byte.b	%00011000
    496  1d4d		       08		      .byte.b	%00001000
    497  1d4e
    498  1d4e		       00		      .byte.b	0
    499  1d4f		       cc		      .byte.b	$CC
    500  1d50
    501  1d50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    502  1d50							; 5 - plum
    503  1d50
    504  1d50		       38		      .byte.b	%00111000
    505  1d51		       6c		      .byte.b	%01101100
    506  1d52		       6e		      .byte.b	%01101110
    507  1d53		       de		      .byte.b	%11011110
    508  1d54		       df		      .byte.b	%11011111
    509  1d55		       bf		      .byte.b	%10111111
    510  1d56		       bf		      .byte.b	%10111111
    511  1d57		       bf		      .byte.b	%10111111
    512  1d58		       de		      .byte.b	%11011110
    513  1d59		       de		      .byte.b	%11011110
    514  1d5a		       5e		      .byte.b	%01011110
    515  1d5b		       3c		      .byte.b	%00111100
    516  1d5c		       20		      .byte.b	%00100000
    517  1d5d		       60		      .byte.b	%01100000
    518  1d5e
    519  1d5e		       00		      .byte.b	0
    520  1d5f		       88		      .byte.b	$88
    521  1d60
    522  1d60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    523  1d60							; 6 - grapes
    524  1d60
    525  1d60		       18		      .byte.b	%00011000
    526  1d61		       08		      .byte.b	%00001000
    527  1d62		       36		      .byte.b	%00110110
    528  1d63		       12		      .byte.b	%00010010
    529  1d64		       6c		      .byte.b	%01101100
    530  1d65		       24		      .byte.b	%00100100
    531  1d66		       db		      .byte.b	%11011011
    532  1d67		       49		      .byte.b	%01001001
    533  1d68		       36		      .byte.b	%00110110
    534  1d69		       12		      .byte.b	%00010010
    535  1d6a		       6c		      .byte.b	%01101100
    536  1d6b		       34		      .byte.b	%00110100
    537  1d6c		       10		      .byte.b	%00010000
    538  1d6d		       18		      .byte.b	%00011000
    539  1d6e
    540  1d6e		       00		      .byte.b	0
    541  1d6f		       64		      .byte.b	$64
    542  1d70
    543  1d70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    544  1d70							; 7 - broccoli
    545  1d70
    546  1d70		       18		      .byte.b	%00011000
    547  1d71		       18		      .byte.b	%00011000
    548  1d72		       1c		      .byte.b	%00011100
    549  1d73		       3e		      .byte.b	%00111110
    550  1d74		       2a		      .byte.b	%00101010
    551  1d75		       12		      .byte.b	%00010010
    552  1d76		       2a		      .byte.b	%00101010
    553  1d77		       54		      .byte.b	%01010100
    554  1d78		       aa		      .byte.b	%10101010
    555  1d79		       55		      .byte.b	%01010101
    556  1d7a		       aa		      .byte.b	%10101010
    557  1d7b		       55		      .byte.b	%01010101
    558  1d7c		       2a		      .byte.b	%00101010
    559  1d7d		       04		      .byte.b	%00000100
    560  1d7e
    561  1d7e		       00		      .byte.b	0
    562  1d7f		       c7		      .byte.b	$C7
    563  1d80
    564  1d80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    565  1d80							; 8 - cabbage
    566  1d80
    567  1d80		       18		      .byte.b	%00011000
    568  1d81		       76		      .byte.b	%01110110
    569  1d82		       76		      .byte.b	%01110110
    570  1d83		       7a		      .byte.b	%01111010
    571  1d84		       f9		      .byte.b	%11111001
    572  1d85		       fb		      .byte.b	%11111011
    573  1d86		       ed		      .byte.b	%11101101
    574  1d87		       db		      .byte.b	%11011011
    575  1d88		       fb		      .byte.b	%11111011
    576  1d89		       e9		      .byte.b	%11101001
    577  1d8a		       56		      .byte.b	%01010110
    578  1d8b		       76		      .byte.b	%01110110
    579  1d8c		       6e		      .byte.b	%01101110
    580  1d8d		       18		      .byte.b	%00011000
    581  1d8e
    582  1d8e		       00		      .byte.b	0
    583  1d8f		       da		      .byte.b	$DA
    584  1d90
    585  1d90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    586  1d90							; 9 - celery
    587  1d90
    588  1d90		       c0		      .byte.b	%11000000
    589  1d91		       e0		      .byte.b	%11100000
    590  1d92		       70		      .byte.b	%01110000
    591  1d93		       30		      .byte.b	%00110000
    592  1d94		       18		      .byte.b	%00011000
    593  1d95		       18		      .byte.b	%00011000
    594  1d96		       0c		      .byte.b	%00001100
    595  1d97		       0c		      .byte.b	%00001100
    596  1d98		       0e		      .byte.b	%00001110
    597  1d99		       06		      .byte.b	%00000110
    598  1d9a		       0d		      .byte.b	%00001101
    599  1d9b		       0b		      .byte.b	%00001011
    600  1d9c		       0d		      .byte.b	%00001101
    601  1d9d		       06		      .byte.b	%00000110
    602  1d9e
    603  1d9e		       00		      .byte.b	0
    604  1d9f		       d6		      .byte.b	$D6
    605  1da0
    606  1da0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    607  1da0							; A - green pepper
    608  1da0
    609  1da0		       6c		      .byte.b	%01101100
    610  1da1		       6c		      .byte.b	%01101100
    611  1da2		       fe		      .byte.b	%11111110
    612  1da3		       fe		      .byte.b	%11111110
    613  1da4		       f6		      .byte.b	%11110110
    614  1da5		       f6		      .byte.b	%11110110
    615  1da6		       f6		      .byte.b	%11110110
    616  1da7		       f6		      .byte.b	%11110110
    617  1da8		       f6		      .byte.b	%11110110
    618  1da9		       ec		      .byte.b	%11101100
    619  1daa		       7c		      .byte.b	%01111100
    620  1dab		       10		      .byte.b	%00010000
    621  1dac		       18		      .byte.b	%00011000
    622  1dad		       08		      .byte.b	%00001000
    623  1dae
    624  1dae		       00		      .byte.b	0
    625  1daf		       c8		      .byte.b	$C8
    626  1db0
    627  1db0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    628  1db0							; B - pumpkin
    629  1db0
    630  1db0		       3c		      .byte.b	%00111100
    631  1db1		       56		      .byte.b	%01010110
    632  1db2		       b7		      .byte.b	%10110111
    633  1db3		       ad		      .byte.b	%10101101
    634  1db4		       ad		      .byte.b	%10101101
    635  1db5		       ad		      .byte.b	%10101101
    636  1db6		       ad		      .byte.b	%10101101
    637  1db7		       ad		      .byte.b	%10101101
    638  1db8		       b7		      .byte.b	%10110111
    639  1db9		       56		      .byte.b	%01010110
    640  1dba		       3c		      .byte.b	%00111100
    641  1dbb		       18		      .byte.b	%00011000
    642  1dbc		       0c		      .byte.b	%00001100
    643  1dbd		       0c		      .byte.b	%00001100
    644  1dbe
    645  1dbe		       00		      .byte.b	0
    646  1dbf		       2a		      .byte.b	$2A
    647  1dc0
    648  1dc0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    649  1dc0							; C - mushroom
    650  1dc0
    651  1dc0		       18		      .byte.b	%00011000
    652  1dc1		       3c		      .byte.b	%00111100
    653  1dc2		       24		      .byte.b	%00100100
    654  1dc3		       24		      .byte.b	%00100100
    655  1dc4		       24		      .byte.b	%00100100
    656  1dc5		       66		      .byte.b	%01100110
    657  1dc6		       a5		      .byte.b	%10100101
    658  1dc7		       99		      .byte.b	%10011001
    659  1dc8		       e7		      .byte.b	%11100111
    660  1dc9		       ff		      .byte.b	%11111111
    661  1dca		       5a		      .byte.b	%01011010
    662  1dcb		       76		      .byte.b	%01110110
    663  1dcc		       3c		      .byte.b	%00111100
    664  1dcd		       18		      .byte.b	%00011000
    665  1dce
    666  1dce		       00		      .byte.b	0
    667  1dcf		       08		      .byte.b	$08
    668  1dd0
    669  1dd0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    670  1dd0							; D - key
    671  1dd0
    672  1dd0		       10		      .byte.b	%00010000
    673  1dd1		       1e		      .byte.b	%00011110
    674  1dd2		       1e		      .byte.b	%00011110
    675  1dd3		       18		      .byte.b	%00011000
    676  1dd4		       1e		      .byte.b	%00011110
    677  1dd5		       1e		      .byte.b	%00011110
    678  1dd6		       10		      .byte.b	%00010000
    679  1dd7		       10		      .byte.b	%00010000
    680  1dd8		       10		      .byte.b	%00010000
    681  1dd9		       10		      .byte.b	%00010000
    682  1dda		       38		      .byte.b	%00111000
    683  1ddb		       6c		      .byte.b	%01101100
    684  1ddc		       6c		      .byte.b	%01101100
    685  1ddd		       38		      .byte.b	%00111000
    686  1dde
    687  1dde		       00		      .byte.b	0
    688  1ddf		       2c		      .byte.b	$2C
    689  1de0
    690  1de0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    691  1de0							; E - ring
    692  1de0
    693  1de0		       00		      .byte.b	%00000000
    694  1de1		       18		      .byte.b	%00011000
    695  1de2		       3c		      .byte.b	%00111100
    696  1de3		       66		      .byte.b	%01100110
    697  1de4		       42		      .byte.b	%01000010
    698  1de5		       42		      .byte.b	%01000010
    699  1de6		       42		      .byte.b	%01000010
    700  1de7		       66		      .byte.b	%01100110
    701  1de8		       3c		      .byte.b	%00111100
    702  1de9		       18		      .byte.b	%00011000
    703  1dea		       18		      .byte.b	%00011000
    704  1deb		       2c		      .byte.b	%00101100
    705  1dec		       18		      .byte.b	%00011000
    706  1ded		       00		      .byte.b	%00000000
    707  1dee
    708  1dee		       00		      .byte.b	0
    709  1def		       2c		      .byte.b	$2C
    710  1df0
    711  1df0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    712  1df0							; F - heart
    713  1df0
    714  1df0		       00		      .byte.b	%00000000
    715  1df1		       18		      .byte.b	%00011000
    716  1df2		       18		      .byte.b	%00011000
    717  1df3		       3c		      .byte.b	%00111100
    718  1df4		       3c		      .byte.b	%00111100
    719  1df5		       7e		      .byte.b	%01111110
    720  1df6		       7e		      .byte.b	%01111110
    721  1df7		       ff		      .byte.b	%11111111
    722  1df8		       ff		      .byte.b	%11111111
    723  1df9		       ff		      .byte.b	%11111111
    724  1dfa		       e7		      .byte.b	%11100111
    725  1dfb		       e7		      .byte.b	%11100111
    726  1dfc		       42		      .byte.b	%01000010
    727  1dfd		       00		      .byte.b	%00000000
    728  1dfe
    729  1dfe		       00		      .byte.b	0
    730  1dff		       4a		      .byte.b	$4A
    731  1e00
    732  1e00				   RainbowColors
    733  1e00
    734  1e00		       64		      .byte.b	$64
    735  1e01		       88		      .byte.b	$88
    736  1e02		       c8		      .byte.b	$C8
    737  1e03		       1e		      .byte.b	$1E
    738  1e04		       28		      .byte.b	$28
    739  1e05		       44		      .byte.b	$44
    740  1e06
    741  1e06				   CatTartGfx
    742  1e06
    743  1e06		       00 00 00 00*	      ds	18, $00
    744  1e18
    745  1e18		       00		      .byte.b	%00000000
    746  1e19		       00		      .byte.b	%00000000
    747  1e1a		       e0		      .byte.b	%11100000
    748  1e1b		       c0		      .byte.b	%11000000
    749  1e1c		       c0		      .byte.b	%11000000
    750  1e1d		       c0		      .byte.b	%11000000
    751  1e1e		       c0		      .byte.b	%11000000
    752  1e1f		       c0		      .byte.b	%11000000
    753  1e20		       c0		      .byte.b	%11000000
    754  1e21		       e0		      .byte.b	%11100000
    755  1e22		       e0		      .byte.b	%11100000
    756  1e23		       e0		      .byte.b	%11100000
    757  1e24		       e0		      .byte.b	%11100000
    758  1e25		       e0		      .byte.b	%11100000
    759  1e26		       e0		      .byte.b	%11100000
    760  1e27		       e0		      .byte.b	%11100000
    761  1e28
    762  1e28				   CatFaceGfx
    763  1e28
    764  1e28		       00 00 00 00*	      ds	18, $00
    765  1e3a
    766  1e3a		       36		      .byte.b	%00110110
    767  1e3b		       36		      .byte.b	%00110110
    768  1e3c		       00		      .byte.b	%00000000
    769  1e3d		       7e		      .byte.b	%01111110
    770  1e3e		       c1		      .byte.b	%11000001
    771  1e3f		       d5		      .byte.b	%11010101
    772  1e40		       ff		      .byte.b	%11111111
    773  1e41		       d5		      .byte.b	%11010101
    774  1e42		       dd		      .byte.b	%11011101
    775  1e43		       ff		      .byte.b	%11111111
    776  1e44		       66		      .byte.b	%01100110
    777  1e45		       66		      .byte.b	%01100110
    778  1e46		       42		      .byte.b	%01000010
    779  1e47		       00		      .byte.b	%00000000
    780  1e48
    781  1e48		       00 00 00 00*	      ds	19, $00
    782  1e5b
    783  1e5b
    784  1e5b
    785  1e5b				   RowPosition
    786  1e5b		       00		      .byte.b	0
    787  1e5c		       13		      .byte.b	19
    788  1e5d		       26		      .byte.b	38
    789  1e5e		       39		      .byte.b	57
    790  1e5f		       4c		      .byte.b	76
    791  1e60		       5f		      .byte.b	95
    792  1e61		       72		      .byte.b	114
------- FILE bank2.asm
------- FILE bank2/data/colors.asm LEVEL 3 PASS 2
      0  1e62					      include	bank2/data/colors.asm
      1  1e62							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1e62							;
      3  1e62							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1e62
      5  1e62				   LevelColors
      6  1e62
      7  1e62							;	score	pgbar
      8  1e62		       7a 56		      HEX	7A 56	; level 0
      9  1e64		       7a 56		      HEX	7A 56	; level 1
     10  1e66		       7a 56		      HEX	7A 56	; level 2
     11  1e68		       7a 56		      HEX	7A 56	; level 3
     12  1e6a		       7a 56		      HEX	7A 56	; level 4
     13  1e6c		       7a 56		      HEX	7A 56	; level 5
     14  1e6e		       7a 56		      HEX	7A 56	; level 6
     15  1e70		       7a 56		      HEX	7A 56	; level 7
     16  1e72		       7a 56		      HEX	7A 56	; level 8
     17  1e74		       7a 56		      HEX	7A 56	; level 9
     18  1e76		       7a 56		      HEX	7A 56	; level 10
     19  1e78		       7a 56		      HEX	7A 56	; level 11
     20  1e7a		       7a 56		      HEX	7A 56	; level 12
     21  1e7c		       7a 56		      HEX	7A 56	; level 13
     22  1e7e		       7a 56		      HEX	7A 56	; level 14
     23  1e80		       7a 56		      HEX	7A 56	; level 15
     24  1e82		       7a 56		      HEX	7A 56	; level 16
     25  1e84		       7a 56		      HEX	7A 56	; level 17
     26  1e86		       7a 56		      HEX	7A 56	; level 18
     27  1e88		       7a 56		      HEX	7A 56	; level 19
------- FILE bank2.asm
     13  1e8a
      0  1e8a					      END_BANK	2
      1  1ffa					      ORG	[2 - 1] * $1000 + $0FFA
      2  1ffa
      3  1ffa		       00 10		      .word.w	JmpInitSystem
      4  1ffc		       00 10		      .word.w	JmpInitSystem
      5  1ffe		       00 10		      .word.w	JmpInitSystem
      6  2000
------- FILE main.asm
------- FILE bank3.asm LEVEL 2 PASS 2
      0  2000					      include	bank3.asm
      1  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000							; Bank 3
      3  2000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  2000
      0  2000					      START_BANK	3
      1  3000 ????				      SEG	BANK_3
      2  2000					      ORG	[3 - 1] * $1000
      3  2000					      RORG	$1000
      4  2000					      SUBROUTINE
      5  2000
      6  2000				   JmpInitSystem
      7  2000		       0c f6 1f 	      nop	SelectBank1
      8  2003		       4c 1e 10 	      jmp	InitSystem
      9  2006				   JmpMenuOverScan
     10  2006		       0c f6 1f 	      nop	SelectBank1
     11  2009		       4c e0 10 	      jmp	MenuOverScan
     12  200c				   JmpGamePlay
     13  200c		       0c f7 1f 	      nop	SelectBank2
     14  200f		       4c 1e 10 	      jmp	GameplayInit
     15  2012				   JmpMenuTxtBtm
     16  2012		       0c f8 1f 	      nop	SelectBank3
     17  2015		       4c e1 15 	      jmp	MenuTxtBtm
     18  2018				   JmpMenuBottom
     19  2018		       0c f6 1f 	      nop	SelectBank1
     20  201b		       4c 99 18 	      jmp	MenuBottom
     21  201e
      6  201e
------- FILE bank3/data/text.asm LEVEL 3 PASS 2
      0  201e					      include	bank3/data/text.asm
      1  201e		       00 00	   Txt_SPC    equ	0*7
      2  201e		       00 07	   Txt_A      equ	1*7
      3  201e		       00 0e	   Txt_B      equ	2*7
      4  201e		       00 15	   Txt_C      equ	3*7
      5  201e		       00 1c	   Txt_D      equ	4*7
      6  201e		       00 23	   Txt_E      equ	5*7
      7  201e		       00 2a	   Txt_F      equ	6*7
      8  201e		       00 31	   Txt_G      equ	7*7
      9  201e		       00 38	   Txt_H      equ	8*7
     10  201e		       00 3f	   Txt_I      equ	9*7
     11  201e		       00 46	   Txt_J      equ	10*7
     12  201e		       00 4d	   Txt_K      equ	11*7
     13  201e		       00 54	   Txt_L      equ	12*7
     14  201e		       00 5b	   Txt_M      equ	13*7
     15  201e		       00 62	   Txt_N      equ	14*7
     16  201e		       00 69	   Txt_P      equ	15*7
     17  201e		       00 70	   Txt_Q      equ	16*7
     18  201e		       00 77	   Txt_R      equ	17*7
     19  201e		       00 7e	   Txt_S      equ	18*7
     20  201e		       00 85	   Txt_T      equ	19*7
     21  201e		       00 8c	   Txt_U      equ	20*7
     22  201e		       00 93	   Txt_V      equ	21*7
     23  201e		       00 9a	   Txt_W      equ	22*7
     24  201e		       00 a1	   Txt_X      equ	23*7
     25  201e		       00 a8	   Txt_Y      equ	24*7
     26  201e		       00 af	   Txt_Z      equ	25*7
     27  201e		       00 b6	   Txt_0      equ	26*7
     28  201e		       00 bd	   Txt_1      equ	27*7
     29  201e		       00 c4	   Txt_2      equ	28*7
     30  201e		       00 cb	   Txt_3      equ	29*7
     31  201e		       00 d2	   Txt_4      equ	30*7
     32  201e		       00 d9	   Txt_5      equ	31*7
     33  201e		       00 e0	   Txt_6      equ	32*7
     34  201e		       00 e7	   Txt_7      equ	33*7
     35  201e		       00 ee	   Txt_8      equ	34*7
     36  201e		       00 f5	   Txt_9      equ	35*7
     37  201e
     38  201e
     39  201e
     40  2100		       00 00 00 00*	      ALIGN	$100
     41  2100				   FontGfx0
     42  2100					      incbin	bank3/data/font_gfx0.bin
     43  21fc
     44  2200		       00 00 00 00	      ALIGN	$100
     45  2200					      incbin	bank3/data/font_gfx1.bin
     46  22fc
     47  2300		       00 00 00 00	      ALIGN	$100
     48  2300					      incbin	bank3/data/font_gfx2.bin
     49  23fc
     50  23fc
     51  23fc
     52  2400		       00 00 00 00	      ALIGN	$100
     53  2400				   FontText
     54  2400		       00		      .byte.b	Txt_SPC	; 0
     55  2401		       00		      .byte.b	Txt_SPC
     56  2402		       00		      .byte.b	Txt_SPC
     57  2403		       00		      .byte.b	Txt_SPC
     58  2404		       00		      .byte.b	Txt_SPC
     59  2405
     60  2405		       00		      .byte.b	Txt_SPC	; 5
     61  2406		       00		      .byte.b	Txt_SPC
     62  2407		       00		      .byte.b	Txt_SPC
     63  2408		       0e		      .byte.b	Txt_B
     64  2409		       a8		      .byte.b	Txt_Y
     65  240a		       00		      .byte.b	Txt_SPC
     66  240b
     67  240b		       00		      .byte.b	Txt_SPC	; 11
     68  240c		       00		      .byte.b	Txt_SPC
     69  240d		       2a		      .byte.b	Txt_F
     70  240e		       3f		      .byte.b	Txt_I
     71  240f		       77		      .byte.b	Txt_R
     72  2410		       23		      .byte.b	Txt_E
     73  2411
     74  2411		       00		      .byte.b	Txt_SPC	; 17
     75  2412		       00		      .byte.b	Txt_SPC
     76  2413		       0e		      .byte.b	Txt_B
     77  2414		       07		      .byte.b	Txt_A
     78  2415		       15		      .byte.b	Txt_C
     79  2416		       4d		      .byte.b	Txt_K
     80  2417
     81  2417		       00		      .byte.b	Txt_SPC	; 23
     82  2418		       00		      .byte.b	Txt_SPC
     83  2419		       62		      .byte.b	Txt_N
     84  241a		       23		      .byte.b	Txt_E
     85  241b		       a1		      .byte.b	Txt_X
     86  241c		       85		      .byte.b	Txt_T
     87  241d
     88  241d		       00		      .byte.b	Txt_SPC	; 29
     89  241e		       00		      .byte.b	Txt_SPC
     90  241f		       23		      .byte.b	Txt_E
     91  2420		       07		      .byte.b	Txt_A
     92  2421		       7e		      .byte.b	Txt_S
     93  2422		       a8		      .byte.b	Txt_Y
     94  2423
     95  2423		       00		      .byte.b	Txt_SPC	; 35
     96  2424		       00		      .byte.b	Txt_SPC
     97  2425		       31		      .byte.b	Txt_G
     98  2426		       07		      .byte.b	Txt_A
     99  2427		       5b		      .byte.b	Txt_M
    100  2428		       23		      .byte.b	Txt_E
    101  2429
    102  2429		       00		      .byte.b	Txt_SPC	; 41
    103  242a		       00		      .byte.b	Txt_SPC
    104  242b		       b6		      .byte.b	Txt_0
    105  242c		       93		      .byte.b	Txt_V
    106  242d		       23		      .byte.b	Txt_E
    107  242e		       77		      .byte.b	Txt_R
    108  242f
    109  242f		       00		      .byte.b	Txt_SPC	; 47
    110  2430		       00		      .byte.b	Txt_SPC
    111  2431		       4d		      .byte.b	Txt_K
    112  2432		       62		      .byte.b	Txt_N
    113  2433		       b6		      .byte.b	Txt_0
    114  2434		       54		      .byte.b	Txt_L
    115  2435
    116  2435		       00		      .byte.b	Txt_SPC	; 53
    117  2436		       00		      .byte.b	Txt_SPC
    118  2437		       c4		      .byte.b	Txt_2
    119  2438		       b6		      .byte.b	Txt_0
    120  2439		       bd		      .byte.b	Txt_1
    121  243a		       f5		      .byte.b	Txt_9
    122  243b
    123  243b		       00		      .byte.b	Txt_SPC	; 59
    124  243c		       00		      .byte.b	Txt_SPC
    125  243d		       69		      .byte.b	Txt_P
    126  243e		       77		      .byte.b	Txt_R
    127  243f		       23		      .byte.b	Txt_E
    128  2440		       7e		      .byte.b	Txt_S
    129  2441		       7e		      .byte.b	Txt_S
    130  2442
    131  2442		       00		      .byte.b	Txt_SPC	; 66
    132  2443		       00		      .byte.b	Txt_SPC
    133  2444		       7e		      .byte.b	Txt_S
    134  2445		       85		      .byte.b	Txt_T
    135  2446		       07		      .byte.b	Txt_A
    136  2447		       77		      .byte.b	Txt_R
    137  2448		       85		      .byte.b	Txt_T
    138  2449
    139  2449		       00		      .byte.b	Txt_SPC	; 73
    140  244a		       00		      .byte.b	Txt_SPC
    141  244b		       15		      .byte.b	Txt_C
    142  244c		       b6		      .byte.b	Txt_0
    143  244d		       54		      .byte.b	Txt_L
    144  244e		       b6		      .byte.b	Txt_0
    145  244f		       77		      .byte.b	Txt_R
    146  2450
    147  2450		       00		      .byte.b	Txt_SPC	; 80
    148  2451		       00		      .byte.b	Txt_SPC
    149  2452		       7e		      .byte.b	Txt_S
    150  2453		       38		      .byte.b	Txt_H
    151  2454		       07		      .byte.b	Txt_A
    152  2455		       1c		      .byte.b	Txt_D
    153  2456		       23		      .byte.b	Txt_E
    154  2457
    155  2457		       00		      .byte.b	Txt_SPC	; 87
    156  2458		       00		      .byte.b	Txt_SPC
    157  2459		       77		      .byte.b	Txt_R
    158  245a		       23		      .byte.b	Txt_E
    159  245b		       07		      .byte.b	Txt_A
    160  245c		       1c		      .byte.b	Txt_D
    161  245d		       a8		      .byte.b	Txt_Y
    162  245e
    163  245e		       00		      .byte.b	Txt_SPC	; 94
    164  245f		       00		      .byte.b	Txt_SPC
    165  2460		       93		      .byte.b	Txt_V
    166  2461		       3f		      .byte.b	Txt_I
    167  2462		       1c		      .byte.b	Txt_D
    168  2463		       23		      .byte.b	Txt_E
    169  2464		       b6		      .byte.b	Txt_0
    170  2465
    171  2465		       00		      .byte.b	Txt_SPC	; 101
    172  2466		       00		      .byte.b	Txt_SPC
    173  2467		       15		      .byte.b	Txt_C
    174  2468		       38		      .byte.b	Txt_H
    175  2469		       77		      .byte.b	Txt_R
    176  246a		       3f		      .byte.b	Txt_I
    177  246b		       7e		      .byte.b	Txt_S
    178  246c
    179  246c		       00		      .byte.b	Txt_SPC	; 108
    180  246d		       62		      .byte.b	Txt_N
    181  246e		       b6		      .byte.b	Txt_0
    182  246f		       93		      .byte.b	Txt_V
    183  2470		       3f		      .byte.b	Txt_I
    184  2471		       15		      .byte.b	Txt_C
    185  2472		       23		      .byte.b	Txt_E
    186  2473
    187  2473		       00		      .byte.b	Txt_SPC	; 115
    188  2474		       23		      .byte.b	Txt_E
    189  2475		       a1		      .byte.b	Txt_X
    190  2476		       69		      .byte.b	Txt_P
    191  2477		       23		      .byte.b	Txt_E
    192  2478		       77		      .byte.b	Txt_R
    193  2479		       85		      .byte.b	Txt_T
    194  247a
    195  247a		       00		      .byte.b	Txt_SPC	; 122
    196  247b		       85		      .byte.b	Txt_T
    197  247c		       38		      .byte.b	Txt_H
    198  247d		       07		      .byte.b	Txt_A
    199  247e		       62		      .byte.b	Txt_N
    200  247f		       4d		      .byte.b	Txt_K
    201  2480		       7e		      .byte.b	Txt_S
    202  2481
    203  2481		       00		      .byte.b	Txt_SPC	; 129
    204  2482		       85		      .byte.b	Txt_T
    205  2483		       b6		      .byte.b	Txt_0
    206  2484		       00		      .byte.b	Txt_SPC
    207  2485		       85		      .byte.b	Txt_T
    208  2486		       38		      .byte.b	Txt_H
    209  2487		       23		      .byte.b	Txt_E
    210  2488
    211  2488		       00		      .byte.b	Txt_SPC	; 136
    212  2489		       85		      .byte.b	Txt_T
    213  248a		       b6		      .byte.b	Txt_0
    214  248b		       77		      .byte.b	Txt_R
    215  248c		       77		      .byte.b	Txt_R
    216  248d		       23		      .byte.b	Txt_E
    217  248e		       7e		      .byte.b	Txt_S
    218  248f
    219  248f		       00		      .byte.b	Txt_SPC	; 143
    220  2490		       15		      .byte.b	Txt_C
    221  2491		       77		      .byte.b	Txt_R
    222  2492		       23		      .byte.b	Txt_E
    223  2493		       07		      .byte.b	Txt_A
    224  2494		       85		      .byte.b	Txt_T
    225  2495		       23		      .byte.b	Txt_E
    226  2496		       1c		      .byte.b	Txt_D
    227  2497
    228  2497		       00		      .byte.b	Txt_SPC	; 151
    229  2498		       7e		      .byte.b	Txt_S
    230  2499		       69		      .byte.b	Txt_P
    231  249a		       23		      .byte.b	Txt_E
    232  249b		       15		      .byte.b	Txt_C
    233  249c		       3f		      .byte.b	Txt_I
    234  249d		       07		      .byte.b	Txt_A
    235  249e		       54		      .byte.b	Txt_L
    236  249f
    237  249f		       00		      .byte.b	Txt_SPC	; 159
    238  24a0		       15		      .byte.b	Txt_C
    239  24a1		       77		      .byte.b	Txt_R
    240  24a2		       23		      .byte.b	Txt_E
    241  24a3		       07		      .byte.b	Txt_A
    242  24a4		       85		      .byte.b	Txt_T
    243  24a5		       b6		      .byte.b	Txt_0
    244  24a6		       77		      .byte.b	Txt_R
    245  24a7
    246  24a7		       7e		      .byte.b	Txt_S	; 167
    247  24a8		       23		      .byte.b	Txt_E
    248  24a9		       85		      .byte.b	Txt_T
    249  24aa		       00		      .byte.b	Txt_SPC
    250  24ab		       62		      .byte.b	Txt_N
    251  24ac		       07		      .byte.b	Txt_A
    252  24ad		       5b		      .byte.b	Txt_M
    253  24ae		       23		      .byte.b	Txt_E
    254  24af
    255  24af		       bd		      .byte.b	Txt_1	; 175
    256  24b0		       00		      .byte.b	Txt_SPC
    257  24b1		       69		      .byte.b	Txt_P
    258  24b2		       54		      .byte.b	Txt_L
    259  24b3		       07		      .byte.b	Txt_A
    260  24b4		       a8		      .byte.b	Txt_Y
    261  24b5		       23		      .byte.b	Txt_E
    262  24b6		       77		      .byte.b	Txt_R
    263  24b7
    264  24b7		       c4		      .byte.b	Txt_2	; 183
    265  24b8		       00		      .byte.b	Txt_SPC
    266  24b9		       69		      .byte.b	Txt_P
    267  24ba		       54		      .byte.b	Txt_L
    268  24bb		       07		      .byte.b	Txt_A
    269  24bc		       a8		      .byte.b	Txt_Y
    270  24bd		       23		      .byte.b	Txt_E
    271  24be		       77		      .byte.b	Txt_R
    272  24bf
    273  24bf		       07		      .byte.b	Txt_A	; 191
    274  24c0		       1c		      .byte.b	Txt_D
    275  24c1		       93		      .byte.b	Txt_V
    276  24c2		       07		      .byte.b	Txt_A
    277  24c3		       62		      .byte.b	Txt_N
    278  24c4		       15		      .byte.b	Txt_C
    279  24c5		       23		      .byte.b	Txt_E
    280  24c6		       1c		      .byte.b	Txt_D
    281  24c7
    282  24c7		       46		      .byte.b	Txt_J	; 199
    283  24c8		       23		      .byte.b	Txt_E
    284  24c9		       77		      .byte.b	Txt_R
    285  24ca		       23		      .byte.b	Txt_E
    286  24cb		       5b		      .byte.b	Txt_M
    287  24cc		       3f		      .byte.b	Txt_I
    288  24cd		       07		      .byte.b	Txt_A
    289  24ce		       38		      .byte.b	Txt_H
    290  24cf
    291  24cf		       b6		      .byte.b	Txt_0	; 207
    292  24d0		       77		      .byte.b	Txt_R
    293  24d1		       3f		      .byte.b	Txt_I
    294  24d2		       31		      .byte.b	Txt_G
    295  24d3		       3f		      .byte.b	Txt_I
    296  24d4		       62		      .byte.b	Txt_N
    297  24d5		       07		      .byte.b	Txt_A
    298  24d6		       54		      .byte.b	Txt_L
    299  24d7
    300  24d7		       62		      .byte.b	Txt_N	; 215
    301  24d8		       a8		      .byte.b	Txt_Y
    302  24d9		       07		      .byte.b	Txt_A
    303  24da		       62		      .byte.b	Txt_N
    304  24db		       00		      .byte.b	Txt_SPC
    305  24dc		       15		      .byte.b	Txt_C
    306  24dd		       07		      .byte.b	Txt_A
    307  24de		       85		      .byte.b	Txt_T
    308  24df
------- FILE bank3.asm
------- FILE bank3/code/fontrender.asm LEVEL 3 PASS 2
      0  24df					      include	bank3/code/fontrender.asm
      1  24df							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  24df							; 8-Char Kernel Prep
      3  24df							;
      4  24df							; Prepare for 8-character kernel
      5  24df							; Uses 103 bytes, taking 479 cycles from CharPreload, or 461 from CharLoad
      6  24df							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  24df
      8  24df					      SUBROUTINE
      9  24df				   CharPreload
     10  24df		       a2 11		      ldx	#>FontGfx0
     11  24e1		       86 b5		      stx	CharPtr0+1	; set page for pointer 0
     12  24e3		       e8		      inx
     13  24e4		       86 b7		      stx	CharPtr1+1	; set page for pointer 1
     14  24e6		       e8		      inx
     15  24e7		       86 b9		      stx	CharPtr2+1	; set pages for pointers 2 and 3
     16  24e9		       86 bb		      stx	CharPtr3+1
     17  24eb				   CharLoad
     18  24eb		       b9 00 14 	      lda	FontText+0,y	; set offsets for pointers
     19  24ee		       85 b4		      sta	CharPtr0	; Y holds the offset in the char table
     20  24f0		       b9 01 14 	      lda	FontText+1,y
     21  24f3		       85 b6		      sta	CharPtr1
     22  24f5		       b9 02 14 	      lda	FontText+2,y
     23  24f8		       85 b8		      sta	CharPtr2
     24  24fa		       b9 03 14 	      lda	FontText+3,y
     25  24fd		       85 ba		      sta	CharPtr3
     26  24ff		       84 bc		      sty	TempY	; save Y for later
     27  2501
     28  2501		       a0 06		      ldy	#6	; preload left half of gfx data
     29  2503				   .CharLoadLoop
     30  2503		       b3 b6		      lax	(CharPtr1),y
     31  2505		       29 03		      and	#%00000011
     32  2507		       11 b4		      ora	(CharPtr0),y
     33  2509		       99 9d 00 	      sta	CharGfx0,y	; save gfx data for sprite 0
     34  250c		       8a		      txa
     35  250d		       09 0f		      ora	#%00001111
     36  250f		       aa		      tax
     37  2510		       b1 b8		      lda	(CharPtr2),y
     38  2512		       4a		      lsr
     39  2513		       4a		      lsr
     40  2514		       09 e0		      ora	#%11100000
     41  2516		       97 a4		      sax	CharGfx1,y	; save gfx data for sprite 1
     42  2518		       6b 00		      arr	#0
     43  251a		       11 ba		      ora	(CharPtr3),y
     44  251c		       99 ab 00 	      sta	CharGfx2,y	; save gfx data for sprite 2
     45  251f		       88		      dey
     46  2520		       10 e1		      bpl	.CharLoadLoop
     47  2522
     48  2522		       a4 bc		      ldy	TempY	; recover Y value for last 4 chars
     49  2524		       b9 04 14 	      lda	FontText+4,y	; set new offsets for pointers
     50  2527		       85 b4		      sta	CharPtr0
     51  2529		       b9 05 14 	      lda	FontText+5,y
     52  252c		       85 b6		      sta	CharPtr1
     53  252e		       b9 06 14 	      lda	FontText+6,y
     54  2531		       85 b8		      sta	CharPtr2
     55  2533		       b9 07 14 	      lda	FontText+7,y
     56  2536		       85 ba		      sta	CharPtr3
     57  2538
     58  2538		       a4 95		      ldy	MenuTemp
     59  253a		       84 bc		      sty	TempY	; prepare kernel counter
     60  253c		       b1 b6		      lda	(CharPtr1),y
     61  253e		       29 03		      and	#%00000011
     62  2540		       11 b4		      ora	(CharPtr0),y
     63  2542		       85 b2		      sta	CharBuf0	; prepare gfx buffer for sprite 3
     64  2544
     65  2544		       60		      rts
     66  2545
     67  2545
     68  2545
     69  2545							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     70  2545							; 8-Char Kernel
     71  2545							;
     72  2545							; Uses 156 bytes, taking 1081 cycles
     73  2545							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     74  2545
     75  2545							; 8 bytes / 14 cycles
     76  2545				   .CharKernelLoop
     77  2545		       a4 bc		      ldy	TempY	; 2	65
     78  2547		       b1 97		      lda	(TextColorPtr),y	; 2	70
     79  2549		       85 06		      sta	COLUP0	; 2	73
     80  254b		       85 07		      sta	COLUP1	; 2	00
     81  254d
     82  254d							; 15 bytes / 21 cycles
     83  254d		       b9 9e 00 	      lda	CharGfx0+1,y	; 3	04
     84  2550		       85 1b		      sta	GRP0	; 2	07
     85  2552		       b9 a5 00 	      lda	CharGfx1+1,y	; 3	11
     86  2555		       85 1c		      sta	GRP1	; 2	14
     87  2557		       b9 ac 00 	      lda	CharGfx2+1,y	; 3	18
     88  255a		       85 1b		      sta	GRP0	; 2	21
     89  255c
     90  255c							; 10 bytes / 18 cycles
     91  255c		       b1 b6		      lda	(CharPtr1),y	; 2	26
     92  255e		       29 03		      and	#%00000011	; 2	28
     93  2560		       11 b4		      ora	(CharPtr0),y	; 2	33
     94  2562		       a4 b2		      ldy	CharBuf0	; 2	36
     95  2564		       85 b2		      sta	CharBuf0	; 2	39
     96  2566
     97  2566							; 10 bytes / 15 cycles
     98  2566		       a5 b3		      lda	CharBuf1	; 2	42
     99  2568		       84 1c		      sty	GRP1	; 2	45
    100  256a		       85 1b		      sta	GRP0	; 2	48
    101  256c		       86 1c		      stx	GRP1	; 2	51
    102  256e		       86 1b		      stx	GRP0	; 2	54
    103  2570
    104  2570							; 2 bytes / 3 cycles
    105  2570				   CharKernel
    106  2570		       a4 bc		      ldy	TempY	; 2	57
    107  2572
    108  2572							; 15 bytes / 21 cycles
    109  2572		       b9 9d 00 	      lda	CharGfx0,y	; 3	61
    110  2575		       85 1b		      sta	GRP0	; 2	64
    111  2577		       b9 a4 00 	      lda	CharGfx1,y	; 3	68
    112  257a		       85 1c		      sta	GRP1	; 2	71
    113  257c		       b9 ab 00 	      lda	CharGfx2,y	; 3	75
    114  257f		       85 1b		      sta	GRP0	; 2	02
    115  2581
    116  2581							; 14 bytes / 25 cycles
    117  2581		       b1 b6		      lda	(CharPtr1),y	; 2	07
    118  2583		       29 e0		      and	#%11100000	; 2	09
    119  2585		       85 b3		      sta	CharBuf1	; 2	12
    120  2587		       b1 b8		      lda	(CharPtr2),y	; 2	17
    121  2589		       4a		      lsr		; 1	19
    122  258a		       4a		      lsr		; 1	21
    123  258b		       05 b3		      ora	CharBuf1	; 2	24
    124  258d		       85 b3		      sta	CharBuf1	; 2	27
    125  258f
    126  258f							; 5 bytes / 9 cycles
    127  258f		       6b 00		      arr	#0	; 2	29
    128  2591		       11 ba		      ora	(CharPtr3),y	; 2	34
    129  2593		       aa		      tax		; 1	36
    130  2594
    131  2594							; 12 bytes / 18 cycles
    132  2594		       a4 b2		      ldy	CharBuf0	; 2	39
    133  2596		       a5 b3		      lda	CharBuf1	; 2	42
    134  2598		       84 1c		      sty	GRP1	; 2	45
    135  259a		       85 1b		      sta	GRP0	; 2	48
    136  259c		       86 1c		      stx	GRP1	; 2	51
    137  259e		       86 1b		      stx	GRP0	; 2	54
    138  25a0
    139  25a0							; 4 bytes / 8/7 cycles
    140  25a0		       c6 bc		      dec	TempY	; 2	59
    141  25a2		       10 a1		      bpl	.CharKernelLoop	; 2	61
    142  25a4
    143  25a4							; 9 bytes / 18 cycles
    144  25a4		       a5 97		      lda	TextColorPtr	; 2	64
    145  25a6		       38		      sec		; 1	66
    146  25a7		       e9 0a		      sbc	#10	; 2	68
    147  25a9		       85 02		      sta	WSYNC	; 2	00
    148  25ab		       85 97		      sta	TextColorPtr	; 2	03
    149  25ad
    150  25ad							; 9 bytes / 14 cycles
    151  25ad		       a0 09		      ldy	#9	; 2	05
    152  25af		       b1 97		      lda	(TextColorPtr),y	; 2	10
    153  25b1		       85 06		      sta	COLUP0	; 2	13
    154  25b3		       8d 07 00 	      sta.w	COLUP1	; 3	17
    155  25b6
    156  25b6							; 12 bytes / 18 cycles
    157  25b6		       a5 9d		      lda	CharGfx0	; 2	20
    158  25b8		       85 1b		      sta	GRP0	; 2	23
    159  25ba		       a5 a4		      lda	CharGfx1	; 2	26
    160  25bc		       85 1c		      sta	GRP1	; 2	29
    161  25be		       a5 ab		      lda	CharGfx2	; 2	32
    162  25c0		       85 1b		      sta	GRP0	; 2	35
    163  25c2
    164  25c2							; 12 bytes / 18 cycles
    165  25c2		       a4 b2		      ldy	CharBuf0	; 2	38
    166  25c4		       a5 b3		      lda	CharBuf1	; 2	41
    167  25c6		       84 1c		      sty	GRP1	; 2	44
    168  25c8		       85 1b		      sta	GRP0	; 2	47
    169  25ca		       86 1c		      stx	GRP1	; 2	50
    170  25cc		       86 1b		      stx	GRP0	; 2	53
    171  25ce
    172  25ce							; 8 bytes / 11 cycles
    173  25ce		       a2 00		      ldx	#0	; 2	55
    174  25d0		       86 1b		      stx	GRP0	; 2	58
    175  25d2		       86 1c		      stx	GRP1	; 2	61
    176  25d4		       86 1b		      stx	GRP0	; 2	64
    177  25d6
    178  25d6							; 10 cycles / 16 cycles
    179  25d6		       a0 06		      ldy	#6	; 2	66
    180  25d8		       84 95		      sty	MenuTemp	; 2	69
    181  25da		       b1 97		      lda	(TextColorPtr),y	; 2	74
    182  25dc		       85 06		      sta	COLUP0	; 2	01
    183  25de		       85 07		      sta	COLUP1	; 2	04
    184  25e0
    185  25e0							; 1 byte / 6 cycles
    186  25e0		       60	   Slp12_3    rts		; 1	10
    187  25e1
------- FILE bank3.asm
------- FILE bank3/code/menu_bottom.asm LEVEL 3 PASS 2
      0  25e1					      include	bank3/code/menu_bottom.asm
      1  25e1				   MenuTxtBtm
      2  25e1
      3  25e1		       a0 06		      ldy	#6
      4  25e3		       b1 97		      lda	(TextColorPtr),y
      5  25e5		       8d 06 00 	      sta.w	COLUP0
      6  25e8		       85 07		      sta	COLUP1
      7  25ea		       a4 f0		      ldy	MenuTxtField+0
      8  25ec		       85 2a		      sta	HMOVE	; 75
      9  25ee		       8a		      txa
     10  25ef
     11  25ef		       f0 06		      beq	StartMenuText
     12  25f1
     13  25f1				   MenuTextDelayLoop
     14  25f1		       ca		      dex
     15  25f2		       85 02		      sta	WSYNC
     16  25f4		       d0 fb		      bne	MenuTextDelayLoop
      0  25f6					      SLEEP	2
      1  25f6				   .CYCLES    SET	2
      2  25f6
      3  25f6				  -	      IF	.CYCLES < 2
      4  25f6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25f6				  -	      ERR
      6  25f6					      ENDIF
      7  25f6
      8  25f6				  -	      IF	.CYCLES & 1
      9  25f6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25f6				  -	      nop	0
     11  25f6				  -	      ELSE
     12  25f6				  -	      bit	VSYNC
     13  25f6				  -	      ENDIF
     14  25f6				  -.CYCLES    SET	.CYCLES - 3
     15  25f6					      ENDIF
     16  25f6
     17  25f6					      REPEAT	.CYCLES / 2
     18  25f6		       ea		      nop
     19  25f7					      REPEND
     18  25f7
     19  25f7				   StartMenuText
     20  25f7		       20 df 14 	      jsr	CharPreload
     21  25fa		       20 70 15 	      jsr	CharKernel
     22  25fd
     23  25fd		       48		      pha		; sleep for 9 cycles
     24  25fe		       68		      pla
     25  25ff		       ea		      nop
     26  2600
     27  2600		       a4 f1		      ldy	MenuTxtField+1
     28  2602		       20 eb 14 	      jsr	CharLoad
     29  2605		       20 70 15 	      jsr	CharKernel
     30  2608
     31  2608		       48		      pha		; sleep for 9 cycles
     32  2609		       68		      pla
     33  260a		       ea		      nop
     34  260b
     35  260b		       a4 f2		      ldy	MenuTxtField+2
     36  260d		       20 eb 14 	      jsr	CharLoad
     37  2610		       20 70 15 	      jsr	CharKernel
     38  2613
     39  2613		       48		      pha		; sleep for 7 cycles
     40  2614		       68		      pla
     41  2615
     42  2615		       86 06		      stx	COLUP0
     43  2617		       86 07		      stx	COLUP1
     44  2619		       86 25		      stx	VDELP0
     45  261b		       86 26		      stx	VDELP1
     46  261d
     47  261d		       4c 06 10 	      jmp	JmpMenuOverScan
     48  2620
------- FILE bank3.asm
------- FILE bank3/data/menu_text_color.asm LEVEL 3 PASS 2
      0  2620					      include	bank3/data/menu_text_color.asm
      1  2620				   MenuTxtClr
      2  2620
      3  2620		       a3 a3 a3 a3*	      HEX	A3 A3 A3 A3 A3 A3 A3
      4  2627		       a3 a3 a5 	      HEX	A3 A3 A5
      5  262a		       a5 a5 a7 a7*	      HEX	A5 A5 A7 A7 A7 A9 A9
      6  2631		       a9 79 69 	      HEX	A9 79 69
      7  2634		       5a 5c 5e 5e*	      HEX	5A 5C 5E 5E 5E 5C 5A
      8  263b		       69 79 a9 	      HEX	69 79 A9
      9  263e		       a9 a9 a7 a7*	      HEX	A9 A9 A7 A7 A7 A5 A5
     10  2645		       a5		      HEX	A5
     11  2646
------- FILE bank3.asm
     11  2646
      0  2646					      END_BANK	3
      1  2ffa					      ORG	[3 - 1] * $1000 + $0FFA
      2  2ffa
      3  2ffa		       00 10		      .word.w	JmpInitSystem
      4  2ffc		       00 10		      .word.w	JmpInitSystem
      5  2ffe		       00 10		      .word.w	JmpInitSystem
      6  3000
------- FILE main.asm
------- FILE bank4.asm LEVEL 2 PASS 2
      0  3000					      include	bank4.asm
      1  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  3000							; Bank 4
      3  3000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  3000
      0  3000					      START_BANK	4
      1  4000 ????				      SEG	BANK_4
      2  3000					      ORG	[4 - 1] * $1000
      3  3000					      RORG	$1000
      4  3000					      SUBROUTINE
      5  3000
      6  3000				   JmpInitSystem
      7  3000		       0c f6 1f 	      nop	SelectBank1
      8  3003		       4c 1e 10 	      jmp	InitSystem
      9  3006				   JmpMenuOverScan
     10  3006		       0c f6 1f 	      nop	SelectBank1
     11  3009		       4c e0 10 	      jmp	MenuOverScan
     12  300c				   JmpGamePlay
     13  300c		       0c f7 1f 	      nop	SelectBank2
     14  300f		       4c 1e 10 	      jmp	GameplayInit
     15  3012				   JmpMenuTxtBtm
     16  3012		       0c f8 1f 	      nop	SelectBank3
     17  3015		       4c e1 15 	      jmp	MenuTxtBtm
     18  3018				   JmpMenuBottom
     19  3018		       0c f6 1f 	      nop	SelectBank1
     20  301b		       4c 99 18 	      jmp	MenuBottom
     21  301e
      6  301e
      0  301e					      END_BANK	4
      1  3ffa					      ORG	[4 - 1] * $1000 + $0FFA
      2  3ffa
      3  3ffa		       00 10		      .word.w	JmpInitSystem
      4  3ffc		       00 10		      .word.w	JmpInitSystem
      5  3ffe		       00 10		      .word.w	JmpInitSystem
      6  4000
------- FILE main.asm
     23  4000
