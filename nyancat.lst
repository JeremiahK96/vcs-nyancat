------- FILE main.asm LEVEL 1 PASS 2
      1  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  2000 ????						;
      3  2000 ????						; Project - Nyan Cat Game
      4  2000 ????						; by Jeremiah Knol
      5  2000 ????						;
      6  2000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  2000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  2000 ????						;
      9  2000 ????						;
     10  2000 ????						;
     11  2000 ????						; 12-28-2017 Version 2.6
     12  2000 ????						;
     13  2000 ????						; Draw food items on both cat rows
     14  2000 ????						;
     15  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  2000 ????
     17  2000 ????
     18  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  2000 ????						; Initialization
     20  2000 ????						;
     21  2000 ????						; Include headers and set address of binary
     22  2000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  2000 ????
     24  2000 ????						; Define CPU type and include standard VCS header files
     25  2000 ????				      PROCESSOR	6502
     26  2000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  2000 ????				      include	headers/vcs.h
      1  2000 ????						; VCS.H
      2  2000 ????						; Version 1.05, 13/November/2003
      3  2000 ????
      4  2000 ????	       00 69	   VERSION_VCS =	105
      5  2000 ????
      6  2000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  2000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  2000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  2000 ????						;
     10  2000 ????						; This file defines hardware registers and memory mapping for the
     11  2000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  2000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  2000 ????						; available at at http://www.atari2600.org/dasm
     14  2000 ????						;
     15  2000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  2000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  2000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  2000 ????						; with your views.  Please contribute, if you think you can improve this
     19  2000 ????						; file!
     20  2000 ????						;
     21  2000 ????						; Latest Revisions...
     22  2000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  2000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  2000 ????						;			    This will allow conditional code to verify VCS.H being
     25  2000 ????						;			    used for code assembly.
     26  2000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  2000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  2000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  2000 ????						;			 readability issue, and binary compatibility with disassembled
     30  2000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  2000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  2000 ????						;			 which was broken by the use of segments in this file, as
     33  2000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  2000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  2000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  2000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  2000 ????						;						   it is safe to leave it undefined, and the base address will
     38  2000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  2000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  2000 ????						;			  - register definitions are now generated through assignment
     41  2000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  2000 ????						;			    address architecture.
     43  2000 ????						; 1.0	22/MAR/2003		Initial release
     44  2000 ????
     45  2000 ????
     46  2000 ????						;-------------------------------------------------------------------------------
     47  2000 ????
     48  2000 ????						; TIA_BASE_ADDRESS
     49  2000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  2000 ????						; Normally 0, the base address should (externally, before including this file)
     51  2000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  2000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  2000 ????						; < $40 as a bankswitch.
     54  2000 ????
     55  2000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  2000 ????			  -TIA_BASE_ADDRESS =	0
     57  2000 ????				      ENDIF
     58  2000 ????
     59  2000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  2000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  2000 ????						; *OR* by declaring the label before including this file, eg:
     62  2000 ????						; TIA_BASE_ADDRESS = $40
     63  2000 ????						;   include "vcs.h"
     64  2000 ????
     65  2000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  2000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  2000 ????						; for the mirrored ROM hardware registers.
     68  2000 ????
     69  2000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  2000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  2000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  2000 ????
     73  2000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  2000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  2000 ????				      ENDIF
     76  2000 ????
     77  2000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  2000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  2000 ????				      ENDIF
     80  2000 ????
     81  2000 ????						;-------------------------------------------------------------------------------
     82  2000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
     31  0000 ????
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????
     12  0000 ????	       00 00	   ONE_COPY   equ	$00
     13  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     14  0000 ????	       00 02	   TWO_MED    equ	$02
     15  0000 ????	       00 03	   THREE_CLOSE equ	$03
     16  0000 ????	       00 04	   TWO_WIDE   equ	$04
     17  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     18  0000 ????	       00 06	   THREE_MED  equ	$06
     19  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     20  0000 ????
     21  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  0000 ????						; NUSIZx missile size
     23  0000 ????
     24  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     25  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     26  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     27  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     28  0000 ????
     29  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     30  0000 ????						; REFPx values
     31  0000 ????
     32  0000 ????	       00 08	   REFP_TRUE  equ	$08
     33  0000 ????	       00 00	   REFP_FALSE equ	$00
     34  0000 ????
     35  0000 ????						; CTRLPF values
     36  0000 ????	       00 01	   PF_REFLECT equ	$01
     37  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     38  0000 ????	       00 04	   PF_PRIORITY equ	$04
     39  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     40  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     41  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     42  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     43  0000 ????
     44  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  0000 ????						; VDELxx values
     46  0000 ????
     47  0000 ????	       00 00	   VDEL_FALSE equ	0
     48  0000 ????	       00 01	   VDEL_TRUE  equ	1
     49  0000 ????
     50  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  0000 ????						; ENAMx / ENABL values
     52  0000 ????
     53  0000 ????	       00 02	   ENA_TRUE   equ	%00000010
     54  0000 ????	       00 00	   ENA_FALSE  equ	0
     55  0000 ????
     56  0000 ????
     57  0000 ????
     58  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  0000 ????						; Program Equates
     60  0000 ????						;
     61  0000 ????						; Equates for constant program values.
     62  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  0000 ????
     64  0000 ????						; number of scanlines in vertical blank and overscan
     65  0000 ????
     66  0000 ????	       00 25	   VBLANK_SCANLINES equ	37
     67  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	29
     68  0000 ????
     69  0000 ????						; converted values to store to TIM64T
     70  0000 ????
     71  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     72  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     73  0000 ????
     74  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     75  0000 ????						; colors
     76  0000 ????
     77  0000 ????	       00 7a	   COL_SCORE  equ	$7A
     78  0000 ????	       00 70	   COL_SCOREBOARD equ	$70
     79  0000 ????	       00 00	   COL_BACKGROUND equ	$00
     80  0000 ????	       00 09	   COL_CAT_FACE equ	$09
     81  0000 ????	       00 4a	   COL_CAT_TART equ	$4A
     82  0000 ????
     83  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  0000 ????						; luminosity values for throb line data
     85  0000 ????
     86  0000 ????	       00 00	   LUM_0      equ	$00>>1
     87  0000 ????	       00 01	   LUM_2      equ	$02>>1
     88  0000 ????	       00 02	   LUM_4      equ	$04>>1
     89  0000 ????	       00 03	   LUM_6      equ	$06>>1
     90  0000 ????	       00 04	   LUM_8      equ	$08>>1
     91  0000 ????	       00 05	   LUM_A      equ	$0A>>1
     92  0000 ????	       00 06	   LUM_C      equ	$0C>>1
     93  0000 ????	       00 07	   LUM_E      equ	$0E>>1
     94  0000 ????
     95  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     96  0000 ????						; color modes for throb line data
     97  0000 ????
     98  0000 ????	       00 80	   MODE_GREY  equ	$80	; for greyscale lines
     99  0000 ????	       00 00	   MODE_COLOR equ	$00	; for colored lines
    100  0000 ????
    101  0000 ????	       00 01	   END_FOOD   equ	#%00000001	; any value not present in food graphics
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U00fe ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     15 U0081							; Variables for the score
     16 U0081
     17 U0081		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     18 U0084							; BCD encoded 6-digit number and used to control the
     19 U0084							; 6-digit score display
     20 U0084
     21 U0084		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     22 U0086							; on the next frame (max of 9,999)
     23 U0086
     24 U0086		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     25 U0087
     26 U0087							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     27 U0087
     28 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     29 U0088							; BCD encoded 2-digit number and used to control the
     30 U0088							; level counter display
     31 U0088
     32 U0088							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     33 U0088							; Variables for the progress bar and health display
     34 U0088
     35 U0088		       00	   Progress   ds	1	; value for level progress, which can be
     36 U0089							; from 0 to 30 and will be used to draw progress bar
     37 U0089
     38 U0089		       00 00 00 00*ProgressBar ds	5	; array of 5 values to be written to the playfield
     39 U008e							; registers when drawing progress bar
     40 U008e
     41 U008e		       00	   PgBarColor ds	1	; color for full part of progress bar
     42 U008f
     43 U008f		       00	   Health     ds	1	; amount of health
     44 U0090							; 0=full 8=medium 16=low 24=empty
     45 U0090
     46 U0090							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47 U0090							; Pointers
     48 U0090
     49 U0090				   FoodGfxPtr1		; pointer for 1st food item's graphics
     50 U0090				   LvlLoadPtr		; pointer for level digit graphics in scoreboard loading routine
     51 U0090
     52 U0090		       00 00		      ds	2
     53 U0092
     54 U0092				   FoodGfxPtr2		; pointer for 2nd food item's graphics
     55 U0092				   ScrLoadPtr0		; pointer for digit 0 in scoreboard loading routine
     56 U0092
     57 U0092		       00 00		      ds	2
     58 U0094
     59 U0094				   TartGfxPtr		; pointer for the tart graphics
     60 U0094				   ScrLoadPtr1		; pointer for digit 1 in scoreboard loading routine
     61 U0094
     62 U0094		       00 00		      ds	2
     63 U0096
     64 U0096				   CatGfxPtr		; pointer for the cat face/paws graphics
     65 U0096				   ScrLoadPtr2		; pointer for digit 2 in scoreboard loading routine
     66 U0096
     67 U0096		       00 00		      ds	2
     68 U0098
     69 U0098				   HthGfxLPtr		; pointer for left half of the health graphics
     70 U0098				   ScrLoadPtr3		; pointer for digit 3 in scoreboard loading routine
     71 U0098
     72 U0098		       00 00		      ds	2
     73 U009a
     74 U009a				   HthGfxRPtr		; pointer for right half of the health graphics
     75 U009a				   ScrLoadPtr4		; pointer for digit 4 in scoreboard loading routine
     76 U009a
     77 U009a		       00 00		      ds	2
     78 U009c
     79 U009c				   ThrobPtr		; pointer for loading the throb colors
     80 U009c				   ScrLoadPtr5		; pointer for digit 5 in scoreboard loading routine
     81 U009c
     82 U009c		       00 00		      ds	2
     83 U009e
     84 U009e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     85 U009e							; Variables used when drawing the cat
     86 U009e
     87 U009e		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     88 U009f
     89 U009f				   Rainbow		; PF0 value for the rainbow graphics
     90 U009f				   ScoreDigit4		; temporary variable for digit 4 in scoreboard loading routine
     91 U009f		       00		      ds	1
     92 U00a0
     93 U00a0				   RainbowStack 		; value to set stack pointer to before pushing rainbow colors
     94 U00a0				   ScoreDigit5		; temporary variable for digit 5 in scoreboard loading routine
     95 U00a0		       00		      ds	1
     96 U00a1
     97 U00a1		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     98 U00a2		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     99 U00a3
    100 U00a3		       00	   CatTartColor ds	1	; color of the cat's tart body
    101 U00a4
    102 U00a4							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    103 U00a4							; Variables used for the food items
    104 U00a4
    105 U00a4		       00 00 00 00*FoodItemL  ds	7	; 2x 7-byte arrays for the 28 food items. Only 14 of 28
    106 U00ab		       00 00 00 00*FoodItemR  ds	7	; will be drawn on each frame. The first 7 bytes are for
    107 U00b2							; the left items, last 7 bytes are for the right items.
    108 U00b2							; Hi nybble holds the value (0-15) of the item to draw.
    109 U00b2							; Lo nybble holds the value of next frame's item.
    110 U00b2							; All nybbles are swapped at the start of each frame.
    111 U00b2
    112 U00b2		       00 00 00 00*FoodPosX   ds	7	; (range 0-88)
    113 U00b9
    114 U00b9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    115 U00b9							; Variables for the throbbing lines' colors
    116 U00b9
    117 U00b9		       00 00 00    ThrobColor ds	3	; 3-byte array for the colors used to draw the
    118 U00bc							; throbbing lines. The first color is darkest,
    119 U00bc							; the last is brightest.
    120 U00bc
    121 U00bc							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    122 U00bc							; Temporary variables which cannot be shared with stack space
    123 U00bc
    124 U00bc		       00	   TempLoop   ds	1
    125 U00bd		       00	   Temp1      ds	1
    126 U00be		       00	   Temp2      ds	1
    127 U00bf
    128 U00bf							; 53 of 79 non-temporary RAM bytes used (22 left)
    129 U00bf							; last 49 bytes of RAM are used for stack space in the scoreboard display
    130 U00bf
    131 U00bf							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    132 U00bf							; Temporary variables which can be shared with stack space
    133 U00bf
    134 U00bf		       00	   Temp       ds	1
    135 U00c0
    136 U00c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    137 U00c0							; Other variables which can be shared with stack space
    138 U00c0
    139 U00c0		       00	   CurrentRow ds	1	; the current row being drawn in the gameplay kernel
    140 U00c1
    141 U00c1		       00	   FoodColor1 ds	1	; color of the 1st food item
    142 U00c2		       00	   FoodColor2 ds	1	; color of the 2nd food item
    143 U00c3
    144 U00c3							; 7 of 15 available temporary RAM bytes used (8 left)
    145 U00c3							; last 34 bytes of RAM are used to hold the rainbow color graphics
    146 U00c3
    147 U00dc					      ORG	$100 - 36
    148 U00dc		       00 00 00 00*RamBowColors ds	34
------- FILE main.asm
     34 U00fe
     35 U00fe							; Ensure that the code is placed in the proper place in the binary
     36 U00fe
     37  2000 ????				      SEG	CODE
     38  1000					      ORG	$1000	; 4K ROM
     39  1000
     40  1000
     41  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  1000							; Full System Clear
     43  1000							;
     44  1000							; Clear all system registers and RAM at startup
     45  1000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  1000
     47  1000				   SystemClear
     48  1000
      0  1000					      CLEAN_START
      1  1000		       78		      sei
      2  1001		       d8		      cld
      3  1002
      4  1002		       a2 00		      ldx	#0
      5  1004		       8a		      txa
      6  1005		       a8		      tay
      7  1006		       ca	   .CLEAR_STACK dex
      8  1007		       9a		      txs
      9  1008		       48		      pha
     10  1009		       d0 fb		      bne	.CLEAR_STACK
     11  100b
     50  100b
     51  100b
     52  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     53  100b							; Game Logic
     54  100b							;
     55  100b							; Do the overscan, vertical sync, and vertical blanking,
     56  100b							; along with any game logic
     57  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     58  100b
------- FILE code/Game Logic/Overscan.asm LEVEL 2 PASS 2
      0  100b					      include	code/Game Logic/Overscan.asm
      1  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  100b							; Overscan
      3  100b							;
      4  100b							; Start the overscan timer and do game logic
      5  100b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  100b
      7  100b				   Overscan
      8  100b
      9  100b		       e6 80		      inc	Frame	; increment the frame number
     10  100d
     11  100d		       a9 23		      lda	#OVERSCAN_TIMER
     12  100f		       85 02		      sta	WSYNC
     13  1011		       8d 96 02 	      sta	TIM64T	; 3
     14  1014
     15  1014
     16  1014
     17  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     18  1014							; Update Score
     19  1014							;
     20  1014							; Add to the score
     21  1014							;
     22  1014							; Takes 45 cycles to complete
     23  1014							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     24  1014
     25  1014		       a5 85		      lda	BCDScoreAdd+1	; 3
     26  1016		       a6 84		      ldx	BCDScoreAdd	; 3
     27  1018
     28  1018		       f8		      sed		; 2 - enable BCD mode
     29  1019
     30  1019		       18		      clc		; 2
     31  101a		       85 bf		      sta	Temp	; 3
     32  101c		       a5 83		      lda	BCDScore+2	; 3
     33  101e		       65 bf		      adc	Temp	; 3
     34  1020		       85 83		      sta	BCDScore+2	; 3
     35  1022		       86 bf		      stx	Temp	; 3
     36  1024		       a5 82		      lda	BCDScore+1	; 3
     37  1026		       65 bf		      adc	Temp	; 3
     38  1028		       85 82		      sta	BCDScore+1	; 3
     39  102a		       a9 00		      lda	#$00	; 2
     40  102c		       85 bf		      sta	Temp	; 3
     41  102e		       a5 81		      lda	BCDScore+0	; 3
     42  1030		       65 bf		      adc	Temp	; 3
     43  1032		       85 81		      sta	BCDScore+0	; 3
     44  1034
     45  1034		       d8		      cld		; 2 - disable BCD mode
     46  1035
     47  1035
     48  1035
     49  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  1035							; Finish Overscan
     51  1035							;
     52  1035							; Loop until the end of overscan
     53  1035							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     54  1035
     55  1035				   OverscanTimerLoop
     56  1035		       ad 84 02 	      lda	INTIM
     57  1038		       d0 fb		      bne	OverscanTimerLoop
------- FILE main.asm
------- FILE code/Game Logic/VerticalSync.asm LEVEL 2 PASS 2
      0  103a					      include	code/Game Logic/VerticalSync.asm
      1  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  103a							; Vertical Sync
      3  103a							;
      4  103a							; Do the vertical sync and start the vertical blanking timer
      5  103a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  103a
      7  103a		       a9 02		      lda	#2
      8  103c		       85 02		      sta	WSYNC
      9  103e		       85 00		      sta	VSYNC	; enable VSYNC
     10  1040
     11  1040		       85 02		      sta	WSYNC
     12  1042		       a9 2d		      lda	#VBLANK_TIMER
     13  1044		       85 02		      sta	WSYNC
     14  1046		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     15  1049
     16  1049		       85 2b		      sta	HMCLR	; clear HMOVE offsets
     17  104b		       85 2c		      sta	CXCLR	; clear collision latches
     18  104d
     19  104d		       a9 00		      lda	#0
     20  104f		       85 02		      sta	WSYNC
     21  1051		       85 00		      sta	VSYNC	; disable VSYNC
------- FILE main.asm
------- FILE code/Game Logic/VerticalBlank.asm LEVEL 2 PASS 2
      0  1053					      include	code/Game Logic/VerticalBlank.asm
      1  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1053							; Vertical Blank
      3  1053							;
      4  1053							; Do the vertical blanking and game logic
      5  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1053
      7  1053
      8  1053
      9  1053							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1053							; Prepare HMOVE offsets for all scoreboard objects, and
     11  1053							; reset the progress bar's RAM values to empty. (39 cycles)
     12  1053
     13  1053		       a9 e0		      lda	#$E0	; 05
     14  1055		       85 20		      sta	HMP0	; 08 - set HMOVE offset for score's left digit
     15  1057		       85 22		      sta	HMM0	; 11 - set HMOVE offset for left side of level counter digit
     16  1059
     17  1059		       85 89		      sta	ProgressBar+0	; 14 - reset RAM byte 0 to %11100000 for progress bar
     18  105b
     19  105b		       a9 ff		      lda	#$FF	; 16
     20  105d		       85 21		      sta	HMP1	; 19 - set HMOVE offset for score's right digit
     21  105f		       85 24		      sta	HMBL	; 22 - set HMOVE offset for leading 1 in level counter
     22  1061							; right side of level counter digit doesn't need an HMOVE offset
     23  1061
     24  1061		       85 8a		      sta	ProgressBar+1	; 25 - reset RAM byte 1 to %11111111 for progress bar
     25  1063
     26  1063		       85 10		      sta	RESP0	; 28 - set position of score's left digit
     27  1065		       85 11		      sta	RESP1	; 31 - set position of score's right digit
     28  1067
     29  1067		       85 8b		      sta	ProgressBar+2	; 34
     30  1069		       85 8c		      sta	ProgressBar+3	; 37
     31  106b		       a9 fe		      lda	#%11111110	; 39 - reset byte 4 for the progress bar
     32  106d		       85 8d		      sta	ProgressBar+4	; 42
     33  106f
     34  106f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     35  106f							; Prepare for throbbing lines - 43 cycles
     36  106f
     37  106f		       a5 80		      lda	Frame	; 45 - get the current frame number
     38  1071		       29 1c		      and	#%00011100	; 47 - change animation frame every 4 game frames
     39  1073		       4a		      lsr		; 49
     40  1074		       4a		      lsr		; 51 - shift to get a value from 0-7
     41  1075		       85 bf		      sta	Temp	; 54
     42  1077		       0a		      asl		; 56 - carry flag will always be clear after this
     43  1078		       65 bf		      adc	Temp	; 59 - multiply by 3
     44  107a		       a8		      tay		; 61
     45  107b
     46  107b		       85 12		      sta	RESM0	; 64 - set position of left side of level counter digit
     47  107d
     48  107d		       a5 86		      lda	ScoreColor	; 67
     49  107f		       29 f0		      and	#$F0	; 69
     50  1081		       85 bf		      sta	Temp	; 72
     51  1083
     52  1083		       b9 a0 18 	      lda	ThrobGfx+0,y	; 00
     53  1086		       0a		      asl		; 02
     54  1087		       90 01		      bcc	.Color0
     55  1089		       0c		      HEX	0C	; 08
     56  108a				   .Color0
     57  108a		       65 bf		      adc	Temp	; 08
     58  108c		       85 b9		      sta	ThrobColor+0	; 11
     59  108e
     60  108e		       b9 a1 18 	      lda	ThrobGfx+1,y	; 15
     61  1091		       0a		      asl		; 17
     62  1092		       90 01		      bcc	.Color1
     63  1094		       0c		      HEX	0C	; 23
     64  1095				   .Color1
     65  1095		       65 bf		      adc	Temp	; 23
     66  1097		       85 ba		      sta	ThrobColor+1	; 26
     67  1099
     68  1099		       b9 a2 18 	      lda	ThrobGfx+2,y	; 30
     69  109c		       0a		      asl		; 32
     70  109d		       90 01		      bcc	.Color2
     71  109f		       0c		      HEX	0C	; 38
     72  10a0				   .Color2
     73  10a0		       65 bf		      adc	Temp	; 38
     74  10a2		       85 bb		      sta	ThrobColor+2	; 41
     75  10a4
     76  10a4							; sleep19
     77  10a4		       20 a6 15 	      jsr	Sleep12
      0  10a7					      SLEEP	7	; 60
      1  10a7				   .CYCLES    SET	7
      2  10a7
      3  10a7				  -	      IF	.CYCLES < 2
      4  10a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10a7				  -	      ERR
      6  10a7					      ENDIF
      7  10a7
      8  10a7					      IF	.CYCLES & 1
      9  10a7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10a7		       04 00		      nop	0
     11  10a9				  -	      ELSE
     12  10a9				  -	      bit	VSYNC
     13  10a9					      ENDIF
     14  10a9				   .CYCLES    SET	.CYCLES - 3
     15  10a9					      ENDIF
     16  10a9
     17  10a9					      REPEAT	.CYCLES / 2
     18  10a9		       ea		      nop
     17  10a9					      REPEND
     18  10aa		       ea		      nop
     19  10ab					      REPEND
     79  10ab
     80  10ab		       85 14		      sta	RESBL	; 63 - set position of leading "1" in level counter
     81  10ad		       85 13		      sta	RESM1	; 66 - set position of right side of level counter digit
     82  10af
     83  10af		       85 02		      sta	WSYNC
     84  10b1		       85 2a		      sta	HMOVE
     85  10b3
     86  10b3
     87  10b3
     88  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     89  10b3							; Load Scoreboard
     90  10b3							;
     91  10b3							; Get graphics data for the scoreboard and push it onto the stack
     92  10b3							;
     93  10b3							; Takes 535 cycles to complete (7 full scanlines + 3 cycles)
     94  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  10b3
     96  10b3					      SUBROUTINE
     97  10b3
     98  10b3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     99  10b3							; Prepare pointer for level digit graphics - 21 cycles
    100  10b3
    101  10b3		       a2 18		      ldx	#>LevelGfx	; 2
    102  10b5		       86 91		      stx	LvlLoadPtr+1	; 3 - set MSB of level digit graphics pointer
    103  10b7
    104  10b7		       a5 87		      lda	BCDLevel	; 3
    105  10b9
    106  10b9		       29 0f		      and	#$0F	; 2
    107  10bb
    108  10bb		       0a		      asl		; 2
    109  10bc		       0a		      asl		; 2
    110  10bd		       0a		      asl		; 2
    111  10be
    112  10be		       69 50		      adc	#<LevelGfx	; 2 - add graphics table offset
    113  10c0		       85 90		      sta	LvlLoadPtr	; 3 - set LSB of level digit graphics pointer
    114  10c2
    115  10c2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    116  10c2							; Prepare one pointer MSB and multiple LSBs for score digit graphics - 86 cycles
    117  10c2
    118  10c2		       86 93		      stx	ScrLoadPtr0+1	; 3 - set MSB of score digit graphics pointer2
    119  10c4		       86 95		      stx	ScrLoadPtr1+1	; 3
    120  10c6		       86 97		      stx	ScrLoadPtr2+1	; 3
    121  10c8		       86 99		      stx	ScrLoadPtr3+1	; 3
    122  10ca		       86 9b		      stx	ScrLoadPtr4+1	; 3
    123  10cc		       86 9d		      stx	ScrLoadPtr5+1	; 3
    124  10ce
    125  10ce		       a7 81		      lax	BCDScore+0	; 3
    126  10d0		       29 f0		      and	#$F0	; 2
    127  10d2		       4a		      lsr		; 2
    128  10d3		       85 92		      sta	ScrLoadPtr0	; 3 - set LSB for digit 0
    129  10d5		       8a		      txa		; 2
    130  10d6		       29 0f		      and	#$0F	; 2
    131  10d8		       0a		      asl		; 2
    132  10d9		       0a		      asl		; 2
    133  10da		       0a		      asl		; 2
    134  10db		       85 94		      sta	ScrLoadPtr1	; 3 - set LSB for digit 1
    135  10dd
    136  10dd		       a7 82		      lax	BCDScore+1	; 3
    137  10df		       29 f0		      and	#$F0	; 2
    138  10e1		       4a		      lsr		; 2
    139  10e2		       85 96		      sta	ScrLoadPtr2	; 3 - set LSB for digit 2
    140  10e4		       8a		      txa		; 2
    141  10e5		       29 0f		      and	#$0F	; 2
    142  10e7		       0a		      asl		; 2
    143  10e8		       0a		      asl		; 2
    144  10e9		       0a		      asl		; 2
    145  10ea		       85 98		      sta	ScrLoadPtr3	; 2 - set LSB for digit 3
    146  10ec
    147  10ec		       a7 83		      lax	BCDScore+2	; 3
    148  10ee		       29 f0		      and	#$F0	; 2
    149  10f0		       4a		      lsr		; 2
    150  10f1		       85 9a		      sta	ScrLoadPtr4	; 3 - set LSB for digit 4
    151  10f3		       8a		      txa		; 2
    152  10f4		       29 0f		      and	#$0F	; 2
    153  10f6		       0a		      asl		; 2
    154  10f7		       0a		      asl		; 2
    155  10f8		       0a		      asl		; 2
    156  10f9		       85 9c		      sta	ScrLoadPtr5	; 3 - set LSB for digit 5
    157  10fb
    158  10fb							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    159  10fb							; Load the stack with the graphics for the scoreboard - 428 cycles
    160  10fb
    161  10fb		       a0 06		      ldy	#6	; 2
    162  10fd
    163  10fd				   .LoadScoreboard
    164  10fd
    165  10fd		       b1 90		      lda	(LvlLoadPtr),y	; 5
    166  10ff		       48		      pha		; 3
    167  1100
    168  1100		       b1 9c		      lda	(ScrLoadPtr5),y	; 5
    169  1102		       48		      pha		; 3
    170  1103
    171  1103		       b1 9a		      lda	(ScrLoadPtr4),y	; 5
    172  1105		       48		      pha		; 3
    173  1106
    174  1106		       b1 98		      lda	(ScrLoadPtr3),y	; 5
    175  1108		       48		      pha		; 3
    176  1109
    177  1109		       b1 96		      lda	(ScrLoadPtr2),y	; 5
    178  110b		       48		      pha		; 3
    179  110c
    180  110c		       b1 94		      lda	(ScrLoadPtr1),y	; 5
    181  110e		       48		      pha		; 3
    182  110f
    183  110f		       b1 92		      lda	(ScrLoadPtr0),y	; 5
    184  1111		       48		      pha		; 3
    185  1112
    186  1112		       88		      dey		; 2
    187  1113		       10 e8		      bpl	.LoadScoreboard	; 2/3
    188  1115
    189  1115
    190  1115
    191  1115							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    192  1115							; Load RAM for progress bar display (28-53 cycles)
    193  1115
    194  1115		       a5 88		      lda	Progress	; 3 - get amount of progress
    195  1117
    196  1117							; The level progress bar uses the following playfield bits:
    197  1117							; (note that PF0 and PF2 are NOT reversed in this diagram)
    198  1117							;
    199  1117							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    200  1117							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    201  1117							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    202  1117							;
    203  1117							; When the progress bar is empty, every bit labeled "X" above should be
    204  1117							; set (1), and when it is full, every "X" bit should be cleared (0).
    205  1117							; The bits labeled "o" must ALWAYS be cleared.
    206  1117							;
    207  1117							; The leftmost playfield value (the 1st PF0) will be calculated first,
    208  1117							; and then each playfield value to the right until the 2nd PF1
    209  1117							; will be calculated.
    210  1117
    211  1117		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    212  1119
    213  1119		       38		      sec		; 2
    214  111a		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    215  111c		       30 1e		      bmi	.Underflow1	; 2/3
    216  111e		       84 89		      sty	ProgressBar	; 3 - this playfield byte is full
    217  1120
    218  1120		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    219  1122		       30 23		      bmi	.Underflow2	; 2/3
    220  1124		       84 8a		      sty	ProgressBar+1	; 3 - this playfield byte is full
    221  1126
    222  1126		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    223  1128		       30 28		      bmi	.Underflow3	; 2/3
    224  112a		       84 8b		      sty	ProgressBar+2	; 3 - this playfield byte is full
    225  112c
    226  112c		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    227  112e		       30 2d		      bmi	.Underflow4	; 2/3
    228  1130		       84 8c		      sty	ProgressBar+3	; 3 - this playfield byte is full
    229  1132
    230  1132		       aa		      tax		; 2
    231  1133		       bd 0e 19 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    232  1136		       0a		      asl		; 2
    233  1137		       85 8d		      sta	ProgressBar+4	; 3
    234  1139		       4c 65 11 	      jmp	.Finish	; 3
    235  113c
    236  113c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    237  113c				   .Underflow1		; for 1st PF0
    238  113c
    239  113c		       69 03		      adc	#3	; 3 - add back the 3
    240  113e		       aa		      tax		; 2
    241  113f		       bd 1b 19 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    242  1142		       85 89		      sta	ProgressBar	; 3
    243  1144		       4c 65 11 	      jmp	.Finish	; 3
    244  1147
    245  1147							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    246  1147				   .Underflow2		; for 1st PF1
    247  1147
    248  1147		       69 08		      adc	#8	; 3 - add back the 8
    249  1149		       aa		      tax		; 2
    250  114a		       bd 0d 19 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    251  114d		       85 8a		      sta	ProgressBar+1	; 3
    252  114f		       4c 65 11 	      jmp	.Finish	; 3
    253  1152
    254  1152							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    255  1152				   .Underflow3		; for PF2
    256  1152
    257  1152		       69 08		      adc	#8	; 3 - add back the 8
    258  1154		       aa		      tax		; 2
    259  1155		       bd 16 19 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    260  1158		       85 8b		      sta	ProgressBar+2	; 3
    261  115a		       4c 65 11 	      jmp	.Finish	; 3
    262  115d
    263  115d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    264  115d				   .Underflow4		; for 2nd PF0
    265  115d
    266  115d		       69 04		      adc	#4	; 3 - add back the 4
    267  115f		       aa		      tax		; 2
    268  1160		       bd 1a 19 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    269  1163		       85 8c		      sta	ProgressBar+3	; 3
    270  1165
    271  1165							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    272  1165				   .Finish
    273  1165
    274  1165		       85 2b		      sta	HMCLR
    275  1167
    276  1167
    277  1167
    278  1167							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    279  1167							; Prepare Health Display
    280  1167							;
    281  1167							; Set the pointers for the health graphics
    282  1167							;
    283  1167							; Takes 28 cycles to complete
    284  1167							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    285  1167
    286  1167		       18		      clc		; 2
    287  1168
    288  1168		       a9 bd		      lda	#<HealthLeftGfx	; 2
    289  116a		       65 8f		      adc	Health	; 3
    290  116c		       85 98		      sta	HthGfxLPtr	; 3
    291  116e		       a9 18		      lda	#>HealthLeftGfx	; 2
    292  1170		       85 99		      sta	HthGfxLPtr+1	; 3
    293  1172
    294  1172		       a9 dd		      lda	#<HealthRightGfx	; 2
    295  1174		       65 8f		      adc	Health	; 3
    296  1176		       85 9a		      sta	HthGfxRPtr	; 3
    297  1178		       a9 18		      lda	#>HealthRightGfx	; 2
    298  117a		       85 9b		      sta	HthGfxRPtr+1	; 3
    299  117c
    300  117c
    301  117c
    302  117c
    303  117c
    304  117c		       a9 7a		      lda	#COL_SCORE	; 2
    305  117e		       85 86		      sta	ScoreColor	; 3
    306  1180
    307  1180		       a5 86		      lda	ScoreColor	; 3
    308  1182		       85 06		      sta	COLUP0	; 3 - set color registers
    309  1184		       85 07		      sta	COLUP1	; 3
    310  1186		       85 08		      sta	COLUPF	; 3
    311  1188		       85 09		      sta	COLUBK	; 3
    312  118a
    313  118a		       a5 80		      lda	Frame
    314  118c		       29 0f		      and	#%00001111
    315  118e		       f0 04		      beq	.IncScore
    316  1190		       a9 00		      lda	#0
    317  1192		       f0 02		      beq	.IncSkip
    318  1194				   .IncScore
    319  1194		       a9 89		      lda	#$89
    320  1196				   .IncSkip
    321  1196		       85 85		      sta	BCDScoreAdd+1
    322  1198
    323  1198		       a9 19		      lda	#$19
    324  119a		       85 87		      sta	BCDLevel
    325  119c
    326  119c
    327  119c
    328  119c
    329  119c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    330  119c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    331  119c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  119c
    333  119c		       a9 1a		      lda	#>FoodGfx
    334  119e		       85 91		      sta	FoodGfxPtr1+1
    335  11a0		       85 93		      sta	FoodGfxPtr2+1
    336  11a2
    337  11a2		       a9 07		      lda	#<CatTartGfx
    338  11a4		       85 94		      sta	TartGfxPtr
    339  11a6		       a9 1b		      lda	#>CatTartGfx
    340  11a8		       85 95		      sta	TartGfxPtr+1
    341  11aa
    342  11aa		       a9 10		      lda	#$10
    343  11ac		       85 a4		      sta	FoodItemL+0
    344  11ae		       a9 70		      lda	#$70
    345  11b0		       85 ab		      sta	FoodItemR+0
    346  11b2		       a9 20		      lda	#$20
    347  11b4		       85 a5		      sta	FoodItemL+1
    348  11b6		       a9 80		      lda	#$80
    349  11b8		       85 ac		      sta	FoodItemR+1
    350  11ba		       a9 30		      lda	#$30
    351  11bc		       85 a6		      sta	FoodItemL+2
    352  11be		       a9 90		      lda	#$90
    353  11c0		       85 ad		      sta	FoodItemR+2
    354  11c2		       a9 40		      lda	#$40
    355  11c4		       85 a7		      sta	FoodItemL+3
    356  11c6		       a9 a0		      lda	#$A0
    357  11c8		       85 ae		      sta	FoodItemR+3
    358  11ca		       a9 50		      lda	#$50
    359  11cc		       85 a8		      sta	FoodItemL+4
    360  11ce		       a9 b0		      lda	#$B0
    361  11d0		       85 af		      sta	FoodItemR+4
    362  11d2		       a9 60		      lda	#$60
    363  11d4		       85 a9		      sta	FoodItemL+5
    364  11d6		       a9 c0		      lda	#$C0
    365  11d8		       85 b0		      sta	FoodItemR+5
    366  11da		       a9 d0		      lda	#$D0
    367  11dc		       85 aa		      sta	FoodItemL+6
    368  11de		       a9 e0		      lda	#$E0
    369  11e0		       85 b1		      sta	FoodItemR+6
    370  11e2
    371  11e2		       a9 48		      lda	#<CatFaceGfx
    372  11e4		       85 96		      sta	CatGfxPtr
    373  11e6		       a9 19		      lda	#>CatFaceGfx
    374  11e8		       85 97		      sta	CatGfxPtr+1
    375  11ea
    376  11ea		       c6 b2		      dec	FoodPosX
    377  11ec		       10 04		      bpl	.NoReset
    378  11ee		       a9 58		      lda	#88
    379  11f0		       85 b2		      sta	FoodPosX
    380  11f2				   .NoReset
    381  11f2
    382  11f2		       a5 b2		      lda	FoodPosX
    383  11f4		       38		      sec
    384  11f5
    385  11f5		       e9 29		      sbc	#41
    386  11f7		       b0 02		      bcs	.Rock1
    387  11f9		       69 59		      adc	#89
    388  11fb				   .Rock1
    389  11fb		       85 b3		      sta	FoodPosX+1
    390  11fd
    391  11fd		       e9 11		      sbc	#17
    392  11ff		       b0 02		      bcs	.Rock2
    393  1201		       69 59		      adc	#89
    394  1203				   .Rock2
    395  1203		       85 b4		      sta	FoodPosX+2
    396  1205
    397  1205		       4a		      lsr
    398  1206		       85 b5		      sta	FoodPosX+3
    399  1208
    400  1208		       e9 1d		      sbc	#29
    401  120a		       b0 02		      bcs	.Rock4
    402  120c		       69 59		      adc	#89
    403  120e				   .Rock4
    404  120e		       85 b6		      sta	FoodPosX+4
    405  1210
    406  1210		       4a		      lsr
    407  1211		       85 b7		      sta	FoodPosX+5
    408  1213
    409  1213		       e9 39		      sbc	#57
    410  1215		       b0 02		      bcs	.Rock6
    411  1217		       69 59		      adc	#89
    412  1219				   .Rock6
    413  1219		       85 b8		      sta	FoodPosX+6
    414  121b
    415  121b		       a9 56		      lda	#$56
    416  121d		       85 8e		      sta	PgBarColor
    417  121f
    418  121f		       a9 4a		      lda	#COL_CAT_TART
    419  1221		       85 a3		      sta	CatTartColor
    420  1223
    421  1223		       a5 80		      lda	Frame
    422  1225		       29 08		      and	#%00001000
    423  1227		       4a		      lsr
    424  1228		       4a		      lsr
    425  1229		       4a		      lsr
    426  122a		       a8		      tay
    427  122b		       b9 2e 19 	      lda	RainbowGfx,y
    428  122e		       85 9f		      sta	Rainbow
    429  1230
    430  1230
    431  1230
    432  1230							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    433  1230							; Prepare for Main Gameplay Kernel
    434  1230							;
    435  1230							; Figure out how many rows to draw before and after the two cat rows
    436  1230							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    437  1230
    438  1230		       a9 03		      lda	#3
    439  1232		       85 a1		      sta	PreCatRows
    440  1234		       a9 02		      lda	#2
    441  1236		       85 a2		      sta	PostCatRows
    442  1238
    443  1238
    444  1238
    445  1238							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    446  1238							; Finish Vertical Blanking
    447  1238							;
    448  1238							; Loop until the end of vertical blanking
    449  1238							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    450  1238
    451  1238				   VblankTimerLoop
    452  1238		       ad 84 02 	      lda	INTIM
    453  123b		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     62  123d
     63  123d
     64  123d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     65  123d							; Kernel
     66  123d							;
     67  123d							; Draw the screen
     68  123d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     69  123d
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  123d					      include	code/Kernel.asm
      1  123d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  123d							; Kernel
      3  123d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  123d
      5  123d		       a9 00		      lda	#0
      6  123f		       85 02		      sta	WSYNC
      7  1241		       85 01		      sta	VBLANK	; enable display
      8  1243
      9  1243							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  1243					      include	code/ScoreboardKernel.asm
      1  1243							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1243							; Scoreboard Display
      3  1243							;
      4  1243							; Draw the 6-digit score and level counter.
      5  1243							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  1243
      7  1243					      SUBROUTINE
      8  1243
      9  1243		       85 09		      sta	COLUBK	; 06 - A = 0
     10  1245		       85 06		      sta	COLUP0	; 09 - set both colors to black
     11  1247
     12  1247		       a9 ff		      lda	#$FF	; 11
     13  1249		       85 0d		      sta	PF0	; 14
     14  124b		       85 1b		      sta	GRP0	; 17 - player 0 (black) will cover up...
     15  124d
     16  124d		       a9 a0		      lda	#$A0	; 19 - ...part of PF1, causing bit 7 of CXP0FB to be set
     17  124f		       85 0e		      sta	PF1	; 22 - (player 0 is drawn over PF1 to hide it)
     18  1251
     19  1251		       a4 86		      ldy	ScoreColor	; 25 - pre-load value to store to GRP0,
     20  1253		       a2 13		      ldx	#%00010011	; 27 - and value to store to NUSIZx, CTRLPF, and VDELxx
     21  1255
     22  1255		       a9 80		      lda	#$80	; 29
     23  1257		       85 0e		      sta	PF1	; 33 - fix PF1 register only AFTER collision
     24  1259
     25  1259		       86 04		      stx	NUSIZ0	; 35 - X = THREE_CLOSE | BALL_SIZE_2
     26  125b		       86 05		      stx	NUSIZ1	; 38
     27  125d		       86 25		      stx	VDELP0	; 41 - enable vertical delay for player 0...
     28  125f		       86 26		      stx	VDELP1	; 44 - ...and player 1
     29  1261		       86 0a		      stx	CTRLPF	; 47 - X = PF_REFLECT | PF_SCORE_MODE | MSL_SIZE_2
     30  1263							;	PF_SCORE_MODE isn't needed, but it saves a read
     31  1263		       84 06		      sty	COLUP0	; 50 - fix COLUP0 register
     32  1265
     33  1265							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     34  1265							; Pre-load some graphics before the scoreboard kernel loop
     35  1265
     36  1265		       68		      pla		; 54 - pull gfx for digit0
     37  1266		       85 1b		      sta	GRP0	; 57 - digit0 -> [GRP0]
     38  1268
     39  1268							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1268							; Only draw leading 1 in level counter if the level is 10 or more
     41  1268
     42  1268		       a5 87		      lda	BCDLevel	; 60 - the value of bit 4...
     43  126a		       4a		      lsr		; 62
     44  126b		       4a		      lsr		; 64
     45  126c		       4a		      lsr		; 66 - ...gets shifted three times...
     46  126d		       85 1f		      sta	ENABL	; 69 - ...to be used to enable or disable the ball
     47  126f
     48  126f		       10 1e		      bpl	.ScoreEntrance	; 72
     49  1271
     50  1271							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1271				   .ScoreDigitLoop
     52  1271
     53  1271							; A contains gfx for digit3
     54  1271		       85 1b		      sta	GRP0	; 14	digit2 -> [GRP0]	digit1 -> GRP1
     55  1273
     56  1273							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     57  1273
     58  1273		       68		      pla		; 18 - pull gfx for digit3...
     59  1274		       a8		      tay		; 20 - ...and store in Y
     60  1275		       68		      pla		; 24 - pull gfx data for digit4...
     61  1276		       aa		      tax		; 26 - ...and store in X
     62  1277		       68		      pla		; 30 - pull gfx data for digit5 to A
     63  1278
     64  1278		       84 1c		      sty	GRP1	; 33 - digit3 -> [GRP1]	digit2 -> GRP0
     65  127a		       86 1b		      stx	GRP0	; 36 - digit4 -> [GRP0]	digit3 -> GRP1
     66  127c		       85 1c		      sta	GRP1	; 39 - digit5 -> [GRP1]	digit4 -> GRP0
     67  127e		       85 1b		      sta	GRP0	; 42 - digit5 -> [GRP0]	digit5 -> GRP1
     68  1280
     69  1280		       68		      pla		; 46 - pull gfx data for level counter
     70  1281		       85 1d		      sta	ENAM0	; 49 - use bit 1 of data for ENAM0
     71  1283		       2a		      rol		; 51
     72  1284		       85 1e		      sta	ENAM1	; 54 - use bit 0 of data for ENAM1
     73  1286		       6a		      ror		; 56
     74  1287		       4a		      lsr		; 58
     75  1288		       4a		      lsr		; 60
     76  1289		       85 04		      sta	NUSIZ0	; 63 - use bits 2-7 of data (re-aligned) for NUSIZ0
     77  128b
     78  128b		       68		      pla		; 67 - pull gfx for digit0
     79  128c		       8d 1b 00 	      sta.w	GRP0	; 71 - digit0 -> [GRP0]
     80  128f				   .ScoreEntrance
     81  128f		       68		      pla		; 74 - pull gfx for digit1
     82  1290		       85 1c		      sta	GRP1	; 02 - digit1 -> [GRP1]	digit0 -> GRP0
     83  1292							;	(use an extra cycle for timing reasons)
     84  1292
     85  1292		       68		      pla		; 06 - pull gfx for digit2
     86  1293
     87  1293							; On the final iteration of the loop, the stack will have wrapped
     88  1293							; and pulled from location $02 at this point.
     89  1293							; This happens to be the collision register CXP0FB.
     90  1293							; Bit-7 will always be set in this register,
     91  1293							; and bit-7 is always clear in the score graphics,
     92  1293							; so checking bit-7 of the data pulled is all that you need
     93  1293							; to determine when to terminate the loop.
     94  1293
     95  1293		       aa		      tax		; 08 - set flags according to pulled data
     96  1294
     97  1294		       10 db		      bpl	.ScoreDigitLoop	; 10/11 - check negative flag to see if the loop is over
     98  1296
     99  1296							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    100  1296
    101  1296		       a9 00		      lda	#0
    102  1298		       85 1b		      sta	GRP0
    103  129a		       85 1c		      sta	GRP1
    104  129c		       85 26		      sta	VDELP1
    105  129e		       85 25		      sta	VDELP0
    106  12a0		       85 1f		      sta	ENABL
    107  12a2		       85 1d		      sta	ENAM0
    108  12a4		       85 1e		      sta	ENAM1
    109  12a6
    110  12a6		       85 02		      sta	WSYNC
    111  12a8		       85 02		      sta	WSYNC
    112  12aa		       85 02		      sta	WSYNC
    113  12ac		       85 02		      sta	WSYNC
    114  12ae
    115  12ae		       a5 86		      lda	ScoreColor
    116  12b0		       85 09		      sta	COLUBK
    117  12b2
    118  12b2		       85 02		      sta	WSYNC
    119  12b4		       4c 00 13 	      jmp	.Trampoline
    120  12b7
    121  1300		       00 00 00 00*	      ALIGN	$100
    122  1300
    123  1300				   .Trampoline
    124  1300		       85 02		      sta	WSYNC
    125  1302
      0  1302					      SLEEP	10
      1  1302				   .CYCLES    SET	10
      2  1302
      3  1302				  -	      IF	.CYCLES < 2
      4  1302				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1302				  -	      ERR
      6  1302					      ENDIF
      7  1302
      8  1302				  -	      IF	.CYCLES & 1
      9  1302				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1302				  -	      nop	0
     11  1302				  -	      ELSE
     12  1302				  -	      bit	VSYNC
     13  1302				  -	      ENDIF
     14  1302				  -.CYCLES    SET	.CYCLES - 3
     15  1302					      ENDIF
     16  1302
     17  1302					      REPEAT	.CYCLES / 2
     18  1302		       ea		      nop
     17  1302					      REPEND
     18  1303		       ea		      nop
     17  1303					      REPEND
     18  1304		       ea		      nop
     17  1304					      REPEND
     18  1305		       ea		      nop
     17  1305					      REPEND
     18  1306		       ea		      nop
     19  1307					      REPEND
------- FILE code/Kernel.asm
------- FILE code/Gameplay Kernel/GameplayKernel.asm LEVEL 3 PASS 2
      0  1307					      include	code/Gameplay Kernel/GameplayKernel.asm
      1  1307							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1307							; We are currently at cycle 37 in the current scanline.
      3  1307
      4  1307
      5  1307
      6  1307							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      7  1307							; Output 4 blank scanlines, while setting up the graphics objects.
      8  1307
      9  1307				   PreKernel
     10  1307
     11  1307		       a9 00		      lda	#0	; 12
     12  1309		       85 1d		      sta	ENAM0	; 15 - disable missiles
     13  130b		       85 1e		      sta	ENAM1	; 18
     14  130d		       85 1b		      sta	GRP0	; 21 - disable player graphics
     15  130f		       85 1c		      sta	GRP1	; 24
     16  1311		       85 25		      sta	VDELP0	; 27 - disable player vertical delays
     17  1313		       85 26		      sta	VDELP1	; 30
     18  1315		       85 1f		      sta	ENABL	; 33 - disable ball
     19  1317		       8d c0 00 	      sta.w	CurrentRow	; 37
     20  131a
     21  131a
     22  131a							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  131a							; Clear the RAM for the rainbow colors - 127 cycles
     24  131a
     25  131a
     26  131a		       a2 fd		      ldx	#$FD
     27  131c		       9a		      txs
     28  131d
     29  131d		       a0 04		      ldy	#4
     30  131f				   .ClearRainbow
     31  131f		       48		      pha
     32  1320		       48		      pha
     33  1321		       48		      pha
     34  1322		       48		      pha
     35  1323		       48		      pha
     36  1324		       48		      pha
     37  1325		       48		      pha
     38  1326		       48		      pha
     39  1327
     40  1327		       88		      dey
     41  1328		       d0 f5		      bne	.ClearRainbow
     42  132a
     43  132a		       48		      pha
     44  132b		       48		      pha		; 12
     45  132c
     46  132c							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  132c							; Load the rainbow colors into RAM - 65 cycles
     48  132c
     49  132c		       a2 e9		      ldx	#$FD - 20
     50  132e		       9a		      txs
     51  132f
     52  132f		       ad 05 1b 	      lda	RainbowColors+5
     53  1332		       48		      pha
     54  1333		       48		      pha
     55  1334		       ad 04 1b 	      lda	RainbowColors+4
     56  1337		       48		      pha
     57  1338		       48		      pha
     58  1339		       ad 03 1b 	      lda	RainbowColors+3
     59  133c		       48		      pha
     60  133d		       48		      pha
     61  133e		       ad 02 1b 	      lda	RainbowColors+2
     62  1341		       48		      pha
     63  1342		       48		      pha
     64  1343		       ad 01 1b 	      lda	RainbowColors+1
     65  1346		       48		      pha
     66  1347		       48		      pha
     67  1348		       ad 00 1b 	      lda	RainbowColors+0
     68  134b		       48		      pha
     69  134c		       48		      pha		; 00
     70  134d
     71  134d
     72  134d
     73  134d							; Player 0 is already aligned for drawing the cat's face.
     74  134d
     75  134d							; Align player 1 to draw the current frame's food items for the top row.
     76  134d
     77  134d							; food item can be placed anywhere from 0-88
     78  134d							; RESP1 can be strobed on cycle 27/32/37/42/47/52
     79  134d
     80  134d		       a4 c0		      ldy	CurrentRow	; 03 - get the row we are drawing
     81  134f		       b9 b2 00 	      lda	FoodPosX,y	; 07 - get the food's position for this row
     82  1352
     83  1352		       38		      sec		; 09
     84  1353				   .DivideLoop
     85  1353		       e9 0f		      sbc	#15	; 11
     86  1355		       b0 fc		      bcs	.DivideLoop	; 13
     87  1357
     88  1357		       49 07		      eor	#7	; 15
     89  1359		       69 01		      adc	#1	; 17
     90  135b		       0a		      asl		; 19
     91  135c		       0a		      asl		; 21
     92  135d		       0a		      asl		; 23
     93  135e
     94  135e		       85 11		      sta	RESP1	; 26
     95  1360
     96  1360
     97  1360
     98  1360		       0a		      asl		; 53
     99  1361		       85 21		      sta	HMP1	; 56
    100  1363
    101  1363		       a9 00		      lda	#ONE_COPY	; 58
    102  1365		       85 04		      sta	NUSIZ0	; 61
    103  1367		       a9 04		      lda	#TWO_WIDE	; 63
    104  1369		       85 05		      sta	NUSIZ1	; 66
    105  136b
    106  136b		       a9 80		      lda	#$80	; 68
    107  136d		       85 20		      sta	HMP0	; 71
    108  136f
    109  136f		       85 02		      sta	WSYNC
    110  1371
    111  1371		       a5 ba		      lda	ThrobColor+1	; 03
    112  1373		       85 09		      sta	COLUBK	; 06
    113  1375		       85 08		      sta	COLUPF	; 09
    114  1377
    115  1377
    116  1377
    117  1377
    118  1377		       a9 01		      lda	#PF_REFLECT	; 11
    119  1379		       85 0a		      sta	CTRLPF	; 14
    120  137b
    121  137b		       a5 9f		      lda	Rainbow	; 17
    122  137d		       85 0d		      sta	PF0	; 20
    123  137f
    124  137f		       a9 09		      lda	#COL_CAT_FACE	; 22
    125  1381		       85 06		      sta	COLUP0	; 25
    126  1383
    127  1383		       a5 a4		      lda	FoodItemL	; 28
    128  1385		       29 f0		      and	#$F0	; 30
    129  1387		       85 90		      sta	FoodGfxPtr1	; 33
    130  1389		       aa		      tax		; 35
    131  138a		       bd 0f 1a 	      lda	FoodGfx+15,x	; 39
    132  138d		       85 c1		      sta	FoodColor1	; 42
    133  138f
    134  138f		       a5 ab		      lda	FoodItemR	; 45
    135  1391		       29 f0		      and	#$F0	; 47
    136  1393		       85 92		      sta	FoodGfxPtr2	; 50
    137  1395		       aa		      tax		; 52
    138  1396		       bd 0f 1a 	      lda	FoodGfx+15,x	; 56
    139  1399		       85 c2		      sta	FoodColor2	; 59
    140  139b
    141  139b		       a5 b2		      lda	FoodPosX	; 62
    142  139d		       8d bf 00 	      sta.w	Temp	; 66
    143  13a0
    144  13a0		       a2 ff		      ldx	#$FF	; 68
    145  13a2		       9a		      txs		; 70
    146  13a3
    147  13a3		       85 2a		      sta	HMOVE	; 73
    148  13a5
    149  13a5							; If any part of the cat needs to be drawn in the top row,
    150  13a5							; skip straight to CatRows.
    151  13a5
    152  13a5
------- FILE code/Gameplay Kernel/HiRows.asm LEVEL 4 PASS 2
      0  13a5					      include	code/Gameplay Kernel/HiRows.asm
      1  13a5							; Draw all the rows above the cat's two rows
      2  13a5
      3  13a5				   HiRows     SUBROUTINE
      4  13a5
      5  13a5		       85 02		      sta	WSYNC
      6  13a7
      7  13a7		       a5 b9		      lda	ThrobColor+0
      8  13a9		       85 09		      sta	COLUBK
      9  13ab		       85 08		      sta	COLUPF
     10  13ad
     11  13ad
     12  13ad							; First, output a single-color line to draw the bottom of a "throb" line.
     13  13ad							; This will probably be a good time to prepare the pointers for the
     14  13ad							; food items' graphics, as well as loading the colors for the food items.
     15  13ad
     16  13ad							; After that, output 14 lines to draw a single row with food items,
     17  13ad							; but without drawing the cat. The food graphics will be updated every line,
     18  13ad							; but there will probably not be enough time to also update the food colors
     19  13ad							; every line throughout the kernel.
     20  13ad
     21  13ad		       20 80 15 	      jsr	DrawFoodRow	; 46
     22  13b0
     23  13b0		       85 02		      sta	WSYNC
     24  13b2
     25  13b2
     26  13b2							; Lastly, output four single-color lines to draw most of a "throb" line,
     27  13b2							; while setting the position of player 1 to draw the next set of food items.
     28  13b2
     29  13b2
     30  13b2		       a5 b9		      lda	ThrobColor+0
     31  13b4		       85 09		      sta	COLUBK
     32  13b6		       85 08		      sta	COLUPF
     33  13b8		       a9 00		      lda	#0
     34  13ba		       85 1b		      sta	GRP0
     35  13bc		       85 1c		      sta	GRP1
     36  13be		       85 02		      sta	WSYNC
     37  13c0
     38  13c0		       a5 ba		      lda	ThrobColor+1	; 03
     39  13c2		       85 09		      sta	COLUBK	; 06
     40  13c4		       85 08		      sta	COLUPF	; 09
     41  13c6
     42  13c6		       a4 c0		      ldy	CurrentRow	; 12 - get the row we are drawing
     43  13c8		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     44  13cb
     45  13cb		       38		      sec		; 18
     46  13cc				   .DivideLoop
     47  13cc		       e9 0f		      sbc	#15	; 20
     48  13ce		       b0 fc		      bcs	.DivideLoop	; 22
     49  13d0
     50  13d0		       8d 11 00 	      sta.w	RESP1	; 26
     51  13d3
     52  13d3		       49 07		      eor	#7
     53  13d5		       69 01		      adc	#1
     54  13d7		       0a		      asl
     55  13d8		       0a		      asl
     56  13d9		       0a		      asl
     57  13da		       0a		      asl
     58  13db		       85 21		      sta	HMP1
     59  13dd
     60  13dd		       85 02		      sta	WSYNC
     61  13df
     62  13df		       a5 bb		      lda	ThrobColor+2	; 03
     63  13e1		       85 09		      sta	COLUBK	; 06
     64  13e3		       85 08		      sta	COLUPF	; 09
     65  13e5
     66  13e5		       20 a6 15 	      jsr	Sleep12
     67  13e8		       20 a6 15 	      jsr	Sleep12
     68  13eb		       20 a6 15 	      jsr	Sleep12
     69  13ee		       20 a6 15 	      jsr	Sleep12
     70  13f1		       20 a6 15 	      jsr	Sleep12	; 69
     71  13f4
     72  13f4		       8d 2a 00 	      sta.w	HMOVE	; 73
     73  13f7
     74  13f7		       85 02		      sta	WSYNC
     75  13f9
     76  13f9		       a5 ba		      lda	ThrobColor+1
     77  13fb		       85 09		      sta	COLUBK
     78  13fd		       85 08		      sta	COLUPF
     79  13ff
     80  13ff		       a4 c0		      ldy	CurrentRow	; 11
     81  1401
     82  1401		       b9 a4 00 	      lda	FoodItemL,y	; 15
     83  1404		       29 f0		      and	#$F0	; 17
     84  1406		       85 90		      sta	FoodGfxPtr1	; 20
     85  1408		       aa		      tax		; 22
     86  1409		       bd 0f 1a 	      lda	FoodGfx+15,x	; 26
     87  140c		       85 c1		      sta	FoodColor1	; 29
     88  140e
     89  140e		       b9 ab 00 	      lda	FoodItemR,y	; 33
     90  1411		       29 f0		      and	#$F0	; 36
     91  1413		       85 92		      sta	FoodGfxPtr2	; 38
     92  1415		       aa		      tax		; 40
     93  1416		       bd 0f 1a 	      lda	FoodGfx+15,x	; 44
     94  1419		       85 c2		      sta	FoodColor2	; 47
     95  141b
     96  141b		       b9 b2 00 	      lda	FoodPosX,y	; 51
     97  141e		       85 bf		      sta	Temp	; 54
     98  1420
     99  1420		       c6 a1		      dec	PreCatRows
    100  1422		       d0 81		      bne	HiRows
    101  1424
    102  1424							; If this is not the last row before drawing the cat's rows,
    103  1424							; loop back to HiRows to draw the next row.
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/CatRows.asm LEVEL 4 PASS 2
      0  1424					      include	code/Gameplay Kernel/CatRows.asm
      1  1424							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1424							; Cat Row Kernel
      3  1424							;
      4  1424							; This is the subroutine that is used to draw the two gameplay kernel rows
      5  1424							; containing the cat. It does not draw the throbbing line between the two rows,
      6  1424							; it only draws a single, 14-scanline row with the cat and food items.
      7  1424							; This subroutine is called twice in the kernel, once for each of the two rows
      8  1424							; containing the cat.
      9  1424							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     10  1424
     11  1424				   CatRows    SUBROUTINE
     12  1424
     13  1424		       85 02		      sta	WSYNC
     14  1426
     15  1426							; Output a line to finish the bottom of a "throb" line, like in HiRows.
     16  1426							; If the cat is at the very top of the row, draw the top of the pop-tart.
     17  1426
     18  1426		       a5 b9		      lda	ThrobColor+0	; 03
     19  1428		       85 09		      sta	COLUBK	; 06
     20  142a		       85 08		      sta	COLUPF	; 09
     21  142c
     22  142c		       a6 c2		      ldx	FoodColor2	; 12
     23  142e		       9a		      txs		; 14
     24  142f
      0  142f					      SLEEP	27	; 41
      1  142f				   .CYCLES    SET	27
      2  142f
      3  142f				  -	      IF	.CYCLES < 2
      4  142f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  142f				  -	      ERR
      6  142f					      ENDIF
      7  142f
      8  142f					      IF	.CYCLES & 1
      9  142f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  142f		       04 00		      nop	0
     11  1431				  -	      ELSE
     12  1431				  -	      bit	VSYNC
     13  1431					      ENDIF
     14  1431				   .CYCLES    SET	.CYCLES - 3
     15  1431					      ENDIF
     16  1431
     17  1431					      REPEAT	.CYCLES / 2
     18  1431		       ea		      nop
     17  1431					      REPEND
     18  1432		       ea		      nop
     17  1432					      REPEND
     18  1433		       ea		      nop
     17  1433					      REPEND
     18  1434		       ea		      nop
     17  1434					      REPEND
     18  1435		       ea		      nop
     17  1435					      REPEND
     18  1436		       ea		      nop
     17  1436					      REPEND
     18  1437		       ea		      nop
     17  1437					      REPEND
     18  1438		       ea		      nop
     17  1438					      REPEND
     18  1439		       ea		      nop
     17  1439					      REPEND
     18  143a		       ea		      nop
     17  143a					      REPEND
     18  143b		       ea		      nop
     17  143b					      REPEND
     18  143c		       ea		      nop
     19  143d					      REPEND
     26  143d
     27  143d		       4c 00 15 	      jmp	.OnTheBed	; 44
     28  1440
     29  1500		       00 00 00 00*	      ALIGN	$100
     30  1500
     31  1500				   .OnTheBed
     32  1500		       a4 c0		      ldy	CurrentRow	; 47
     33  1502		       b9 b2 00 	      lda	FoodPosX,y	; 51
     34  1505		       c9 30		      cmp	#48	; 53
     35  1507
     36  1507		       a2 00		      ldx	#0	; 55
     37  1509		       a0 0d		      ldy	#13	; 57
     38  150b
     39  150b							; Then output the 14 lines to draw a single row. This will include drawing
     40  150b							; the rainbow, the pop-tart, the head and face or paws, and the food items.
     41  150b							; All graphics will be updated every line.
     42  150b
     43  150b		       b0 0b		      bcs	.RightEntrance	; 60/59
     44  150d		       90 44		      bcc	.LeftEntrance	; 62
     45  150f
     46  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     47  150f							; Kernel used when food items are closer to the right edge of the screen
     48  150f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     49  150f
     50  150f				   .RightLoop
     51  150f
     52  150f							; 8 cycles
     53  150f		       b1 96		      lda	(CatGfxPtr),y	; 49 - set cat's head gfx
     54  1511		       85 1b		      sta	GRP0	; 52
     55  1513
     56  1513							; 9 cycles
     57  1513		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
     58  1515		       ba		      tsx		; 57 - load 2nd food item's color
     59  1516		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
     60  1518
     61  1518				   .RightEntrance		; enter loop here
     62  1518
     63  1518							; 2 cycles
     64  1518		       a2 00		      ldx	#0	; 62 - X register must be set to 0 (black)
     65  151a
     66  151a							; 8 cycles
     67  151a		       b1 94		      lda	(TartGfxPtr),y	; 67 - load cat's tart gfx
     68  151c		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
     69  151e
     70  151e							; 8 cycles
     71  151e		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - set 1st food item's gfx
     72  1520		       85 1c		      sta	GRP1	; 02
     73  1522
     74  1522							; 7 cycles
     75  1522		       b9 dc 00 	      lda	RamBowColors,y	; 06 - set playfield's rainbow color
     76  1525		       85 09		      sta	COLUBK	; 09
     77  1527
     78  1527							; 7 cycles
     79  1527		       b9 dd 00 	      lda	RamBowColors+1,y	; 13 - set background's rainbow color
     80  152a		       85 08		      sta	COLUPF	; 16
     81  152c
     82  152c							; 6 cycles
     83  152c		       a5 c1		      lda	FoodColor1	; 19 - set 1st food item's color
     84  152e		       85 07		      sta	COLUP1	; 22
     85  1530
     86  1530							; 8 cycles
     87  1530		       a5 a3		      lda	CatTartColor	; 25
     88  1532		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
     89  1534		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
     90  1536		       86 08		      stx	COLUPF	; 34 - don't draw rainbow/tart on right side
     91  1538
     92  1538							; 5 cycles
     93  1538		       b3 92		      lax	(FoodGfxPtr2),y	; 39 - load 2nd food item's gfx before dey
     94  153a
     95  153a							; 2 cycles
     96  153a		       88		      dey		; 41
     97  153b		       10 d2		      bpl	.RightLoop	; 44/43
     98  153d
      0  153d					      SLEEP	9	; 52
      1  153d				   .CYCLES    SET	9
      2  153d
      3  153d				  -	      IF	.CYCLES < 2
      4  153d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  153d				  -	      ERR
      6  153d					      ENDIF
      7  153d
      8  153d					      IF	.CYCLES & 1
      9  153d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  153d		       04 00		      nop	0
     11  153f				  -	      ELSE
     12  153f				  -	      bit	VSYNC
     13  153f					      ENDIF
     14  153f				   .CYCLES    SET	.CYCLES - 3
     15  153f					      ENDIF
     16  153f
     17  153f					      REPEAT	.CYCLES / 2
     18  153f		       ea		      nop
     17  153f					      REPEND
     18  1540		       ea		      nop
     17  1540					      REPEND
     18  1541		       ea		      nop
     19  1542					      REPEND
    100  1542
    101  1542		       86 1c		      stx	GRP1	; 55 - set 2nd food item's gfx no sooner than cycle 55
    102  1544		       ba		      tsx		; 57 - load 2nd food item's color
    103  1545		       86 07		      stx	COLUP1	; 60 - set 2nd food item's color no later than cycle 60
    104  1547
    105  1547		       a2 00		      ldx	#0	; 62
    106  1549		       f0 32		      beq	.End	; 65
    107  154b
    108  154b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    109  154b							; Kernel used when food items are closer to the left edge of the screen
    110  154b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    111  154b
    112  154b				   .LeftLoop
    113  154b
    114  154b							; 8 cycles
    115  154b		       b1 96		      lda	(CatGfxPtr),y	; 54 - set cat's head gfx
    116  154d		       85 1b		      sta	GRP0	; 57
    117  154f
    118  154f							; 5 cycles
    119  154f		       a2 00		      ldx	#0	; 59 - X must be set to 0 (black)
    120  1551		       86 08		      stx	COLUPF	; 62 - don't draw rainbow/tart on right side
    121  1553
    122  1553				   .LeftEntrance		; enter loop here
    123  1553
    124  1553							; 8 cycles
    125  1553		       b1 94		      lda	(TartGfxPtr),y	; 67 - load cat's tart gfx
    126  1555		       85 0e		      sta	PF1	; 70 - set cat's tart gfx
    127  1557
    128  1557							; 8 cycles
    129  1557		       b1 90		      lda	(FoodGfxPtr1),y	; 75 - load 1st food item's gfx
    130  1559		       85 1c		      sta	GRP1	; 02 - set 1st food item's gfx
    131  155b
    132  155b							; 7 cycles
    133  155b		       b9 dc 00 	      lda	RamBowColors,y	; 06 - set rainbow colors
    134  155e		       85 09		      sta	COLUBK	; 09
    135  1560
    136  1560							; 7 cycles
    137  1560		       b9 dd 00 	      lda	RamBowColors+1,y	; 13
    138  1563		       85 08		      sta	COLUPF	; 16
    139  1565
    140  1565							; 6 cycles
    141  1565		       a5 c1		      lda	FoodColor1	; 19 - set 1st food item's color
    142  1567		       85 07		      sta	COLUP1	; 22
    143  1569
    144  1569							; 8 cycles
    145  1569		       a5 a3		      lda	CatTartColor	; 25
    146  156b		       85 08		      sta	COLUPF	; 28 - MUST set tart color at cycle 28
    147  156d		       86 09		      stx	COLUBK	; 31 - MUST set face/bg color to black at cycle 31
    148  156f
    149  156f							; 13 cycles
    150  156f		       b1 92		      lda	(FoodGfxPtr2),y	; 35 - load 2nd food item's gfx
    151  1571		       ba		      tsx		; 38 - load 2nd food item's color
    152  1572		       85 1c		      sta	GRP1	; 41 - MUST set 2nd food item's gfx at cycle 41
    153  1574		       86 07		      stx	COLUP1	; 44 - MUST set 2nd food item's color at cycle 44
    154  1576
    155  1576							; 5 cycles
    156  1576		       88		      dey		; 46
    157  1577		       10 d2		      bpl	.LeftLoop	; 49/48
    158  1579
    159  1579		       a2 00		      ldx	#0	; 50
    160  157b		       86 08		      stx	COLUPF	; 53
    161  157d
    162  157d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  157d
    164  157d				   .End
    165  157d
    166  157d		       4c a7 15 	      jmp	.CatThrob
    167  1580
    168  1580
    169  1580
    170  1580
    171  1580
    172  1580
------- FILE subroutines/DrawFoodRow.asm LEVEL 5 PASS 2
      0  1580					      include	subroutines/DrawFoodRow.asm
      1  1580				   DrawFoodRow
      2  1580
      3  1580		       a0 0d		      ldy	#13	; 02
      4  1582
      5  1582				   .FoodLoop
      6  1582		       a9 00		      lda	#COL_BACKGROUND	; 04
      7  1584		       85 02		      sta	WSYNC	; 07/00
      8  1586
      9  1586				   .EnterHere
     10  1586		       85 09		      sta	COLUBK	; 03
     11  1588		       85 08		      sta	COLUPF	; 06
     12  158a
     13  158a		       b1 90		      lda	(FoodGfxPtr1),y	; 11
     14  158c		       85 1c		      sta	GRP1	; 14
     15  158e		       a5 c1		      lda	FoodColor1	; 17
     16  1590		       85 07		      sta	COLUP1	; 20
     17  1592
     18  1592		       a5 bf		      lda	Temp	; 23
     19  1594
     20  1594		       38		      sec		; 25
     21  1595				   .WaitLoop
     22  1595		       e9 17		      sbc	#23	; 27
     23  1597		       b0 fc		      bcs	.WaitLoop	; 29
     24  1599
     25  1599		       b1 92		      lda	(FoodGfxPtr2),y	; 49
     26  159b		       a6 c2		      ldx	FoodColor2	; 52
     27  159d		       85 1c		      sta	GRP1	; 55
     28  159f		       86 07		      stx	COLUP1	; 58
     29  15a1
     30  15a1		       88		      dey		; 60
     31  15a2		       10 de		      bpl	.FoodLoop	; 62
     32  15a4
     33  15a4		       e6 c0		      inc	CurrentRow	; 65
     34  15a6				   Sleep12
     35  15a6		       60		      rts		; 71
------- FILE code/Gameplay Kernel/CatRows.asm
    174  15a7
    175  15a7				   .CatThrob
    176  15a7
    177  15a7		       85 02		      sta	WSYNC
    178  15a9
    179  15a9		       e6 c0		      inc	CurrentRow
    180  15ab
    181  15ab		       86 1c		      stx	GRP1
    182  15ad
    183  15ad
    184  15ad
    185  15ad							; Then output the 5 lines to draw a "throb" line, but also draw the entire
    186  15ad							; cat with the rainbow. In order to align player 1 for the next row's
    187  15ad							; food items, it will be neccesary to have three versions of this kernel,
    188  15ad							; one for each of the three 60-color-clock spaced positions to reset.
    189  15ad							; HMOVE will be written to on the first four scanlines. With a maximum
    190  15ad							; movement of 15 color-clocks per scanline, this will allow a movement of
    191  15ad							; up to 60 color clocks. With three versions of the kernel, it should be
    192  15ad							; possible to put player 1 anywhere on the screen.
    193  15ad
    194  15ad		       a5 b9		      lda	ThrobColor+0
    195  15af		       85 09		      sta	COLUBK
    196  15b1		       85 08		      sta	COLUPF
    197  15b3		       a2 00		      ldx	#0
    198  15b5		       86 1b		      stx	GRP0
    199  15b7		       86 1c		      stx	GRP1
    200  15b9
    201  15b9		       a2 ff		      ldx	#$FF
    202  15bb		       9a		      txs
    203  15bc
    204  15bc		       85 02		      sta	WSYNC
    205  15be
    206  15be		       a5 ba		      lda	ThrobColor+1
    207  15c0		       85 09		      sta	COLUBK
    208  15c2		       85 08		      sta	COLUPF
    209  15c4		       85 02		      sta	WSYNC
    210  15c6
    211  15c6		       a5 bb		      lda	ThrobColor+2
    212  15c8		       85 09		      sta	COLUBK
    213  15ca		       85 08		      sta	COLUPF
    214  15cc		       85 02		      sta	WSYNC
    215  15ce
    216  15ce		       a5 ba		      lda	ThrobColor+1
    217  15d0		       85 09		      sta	COLUBK
    218  15d2		       85 08		      sta	COLUPF
    219  15d4		       85 02		      sta	WSYNC
    220  15d6
    221  15d6		       a5 b9		      lda	ThrobColor+0
    222  15d8		       85 09		      sta	COLUBK
    223  15da		       85 08		      sta	COLUPF
    224  15dc		       85 02		      sta	WSYNC
    225  15de
    226  15de							; Then output 14 lines to draw the next row, exactly the same way as the
    227  15de							; previous one. It will be neccesary to have multiple versions of this, as well,
    228  15de							; since GRP1 needs to be updated at the correct time depending on the position
    229  15de							; of player 1.
    230  15de
    231  15de		       a9 00		      lda	#COL_BACKGROUND
    232  15e0		       85 09		      sta	COLUBK
    233  15e2		       8d 08 00 	      sta.w	COLUPF
    234  15e5
    235  15e5		       a0 0e		      ldy	#14
    236  15e7				   .LoopdyLoop
    237  15e7		       88		      dey
    238  15e8		       85 02		      sta	WSYNC
    239  15ea		       d0 fb		      bne	.LoopdyLoop
    240  15ec
    241  15ec
    242  15ec
    243  15ec							; Lastly, output only one line (not four) to draw the top of a "throb" line.
    244  15ec							; Use this time to prepare the next row's food item pointers (unless this is
    245  15ec							; the last row). If this is the last row, skip over LoRows.
    246  15ec
    247  15ec		       a5 b9		      lda	ThrobColor+0
    248  15ee		       85 09		      sta	COLUBK
    249  15f0		       85 08		      sta	COLUPF
    250  15f2
    251  15f2							; If the cat is at the very bottom of the screen, don't disable the
    252  15f2							; missile/player graphics until after they are drawn, so they don't get
    253  15f2							; clipped at the bottom of the screen. An easy way to do this would be to
    254  15f2							; simply disable them after they would have been drawn, whether they are
    255  15f2							; already disabled or not.
    256  15f2
    257  15f2		       4c 00 16 	      jmp	LoRows
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Gameplay Kernel/LoRows.asm LEVEL 4 PASS 2
      0  15f5					      include	code/Gameplay Kernel/LoRows.asm
      1  1600		       00 00 00 00*	      ALIGN	$100
      2  1600
      3  1600							; Draw all the rows below the cat's two rows.
      4  1600				   LoRows     SUBROUTINE
      5  1600
      6  1600		       85 02		      sta	WSYNC
      7  1602
      8  1602							; Output 4 lines, drawing the rest of the "throb" line, while preparing
      9  1602							; player 1 for the next row's food items.
     10  1602
     11  1602		       a5 ba		      lda	ThrobColor+1	; 03
     12  1604		       85 09		      sta	COLUBK	; 06
     13  1606		       85 08		      sta	COLUPF	; 09
     14  1608
     15  1608		       a4 c0		      ldy	CurrentRow	; 12 - get the row we are drawing
     16  160a		       b9 b2 00 	      lda	FoodPosX,y	; 16 - get the food's position for this row
     17  160d
     18  160d		       38		      sec		; 18
     19  160e				   .DivideLoop
     20  160e		       e9 0f		      sbc	#15	; 20
     21  1610		       b0 fc		      bcs	.DivideLoop	; 22
     22  1612
     23  1612		       8d 11 00 	      sta.w	RESP1	; 26
     24  1615
     25  1615		       49 07		      eor	#7
     26  1617
     27  1617		       69 01		      adc	#1
     28  1619		       0a		      asl
     29  161a		       0a		      asl
     30  161b		       0a		      asl
     31  161c		       0a		      asl
     32  161d		       85 21		      sta	HMP1
     33  161f
     34  161f		       85 02		      sta	WSYNC
     35  1621
     36  1621		       a5 bb		      lda	ThrobColor+2	; 03
     37  1623		       85 09		      sta	COLUBK	; 06
     38  1625		       85 08		      sta	COLUPF	; 09
     39  1627
     40  1627		       20 a6 15 	      jsr	Sleep12
     41  162a		       20 a6 15 	      jsr	Sleep12
     42  162d		       20 a6 15 	      jsr	Sleep12
     43  1630		       20 a6 15 	      jsr	Sleep12
     44  1633		       20 a6 15 	      jsr	Sleep12	; 69
     45  1636
     46  1636		       8d 2a 00 	      sta.w	HMOVE	; 73
     47  1639
     48  1639		       85 02		      sta	WSYNC
     49  163b
     50  163b		       a5 ba		      lda	ThrobColor+1
     51  163d		       85 09		      sta	COLUBK
     52  163f		       85 08		      sta	COLUPF
     53  1641		       85 02		      sta	WSYNC
     54  1643
     55  1643		       a5 b9		      lda	ThrobColor+0
     56  1645		       85 09		      sta	COLUBK
     57  1647		       85 08		      sta	COLUPF
     58  1649
     59  1649		       a4 c0		      ldy	CurrentRow	; 11
     60  164b
     61  164b		       b9 a4 00 	      lda	FoodItemL,y	; 15
     62  164e		       29 f0		      and	#$F0	; 17
     63  1650		       85 90		      sta	FoodGfxPtr1	; 20
     64  1652		       aa		      tax		; 22
     65  1653		       bd 0f 1a 	      lda	FoodGfx+15,x	; 26
     66  1656		       85 c1		      sta	FoodColor1	; 29
     67  1658
     68  1658		       b9 ab 00 	      lda	FoodItemR,y	; 33
     69  165b		       29 f0		      and	#$F0	; 36
     70  165d		       85 92		      sta	FoodGfxPtr2	; 38
     71  165f		       aa		      tax		; 40
     72  1660		       bd 0f 1a 	      lda	FoodGfx+15,x	; 44
     73  1663		       85 c2		      sta	FoodColor2	; 47
     74  1665
     75  1665		       b9 b2 00 	      lda	FoodPosX,y	; 51
     76  1668		       85 bf		      sta	Temp	; 54
     77  166a
     78  166a							; Output 14 lines to draw a row, exactly the same as in HiRows.
     79  166a							; It may be possible to code this as a subroutine to save ROM space.
     80  166a
     81  166a		       20 80 15 	      jsr	DrawFoodRow
     82  166d
     83  166d		       85 02		      sta	WSYNC
     84  166f
     85  166f							; Lastly, output a single line for the next "throb" line.
     86  166f							; Use this time to prepare the next row's food item pointers (unless this is
     87  166f							; the last row). If this is not the last row, loop to LoRows for the next row.
     88  166f
     89  166f		       a5 b9		      lda	ThrobColor+0
     90  1671		       85 09		      sta	COLUBK
     91  1673		       85 08		      sta	COLUPF
     92  1675
     93  1675		       c6 a2		      dec	PostCatRows
     94  1677		       d0 87		      bne	LoRows
     95  1679
     96  1679		       85 02		      sta	WSYNC
      0  167b					      SLEEP	2
      1  167b				   .CYCLES    SET	2
      2  167b
      3  167b				  -	      IF	.CYCLES < 2
      4  167b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  167b				  -	      ERR
      6  167b					      ENDIF
      7  167b
      8  167b				  -	      IF	.CYCLES & 1
      9  167b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  167b				  -	      nop	0
     11  167b				  -	      ELSE
     12  167b				  -	      bit	VSYNC
     13  167b				  -	      ENDIF
     14  167b				  -.CYCLES    SET	.CYCLES - 3
     15  167b					      ENDIF
     16  167b
     17  167b					      REPEAT	.CYCLES / 2
     18  167b		       ea		      nop
     19  167c					      REPEND
------- FILE code/Gameplay Kernel/GameplayKernel.asm
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  167c					      include	code/ProgressHealthKernel.asm
      1  167c		       a5 ba		      lda	ThrobColor+1
      2  167e		       85 09		      sta	COLUBK
      3  1680		       a9 00		      lda	#0
      4  1682		       85 0d		      sta	PF0
      5  1684		       85 0a		      sta	CTRLPF
      6  1686		       a9 09		      lda	#COL_CAT_FACE
      7  1688		       85 08		      sta	COLUPF
      8  168a
      0  168a					      SLEEP	32	; 53
      1  168a				   .CYCLES    SET	32
      2  168a
      3  168a				  -	      IF	.CYCLES < 2
      4  168a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  168a				  -	      ERR
      6  168a					      ENDIF
      7  168a
      8  168a				  -	      IF	.CYCLES & 1
      9  168a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  168a				  -	      nop	0
     11  168a				  -	      ELSE
     12  168a				  -	      bit	VSYNC
     13  168a				  -	      ENDIF
     14  168a				  -.CYCLES    SET	.CYCLES - 3
     15  168a					      ENDIF
     16  168a
     17  168a					      REPEAT	.CYCLES / 2
     18  168a		       ea		      nop
     17  168a					      REPEND
     18  168b		       ea		      nop
     17  168b					      REPEND
     18  168c		       ea		      nop
     17  168c					      REPEND
     18  168d		       ea		      nop
     17  168d					      REPEND
     18  168e		       ea		      nop
     17  168e					      REPEND
     18  168f		       ea		      nop
     17  168f					      REPEND
     18  1690		       ea		      nop
     17  1690					      REPEND
     18  1691		       ea		      nop
     17  1691					      REPEND
     18  1692		       ea		      nop
     17  1692					      REPEND
     18  1693		       ea		      nop
     17  1693					      REPEND
     18  1694		       ea		      nop
     17  1694					      REPEND
     18  1695		       ea		      nop
     17  1695					      REPEND
     18  1696		       ea		      nop
     17  1696					      REPEND
     18  1697		       ea		      nop
     17  1697					      REPEND
     18  1698		       ea		      nop
     17  1698					      REPEND
     18  1699		       ea		      nop
     19  169a					      REPEND
     10  169a
     11  169a		       a9 20		      lda	#$20	; 55
     12  169c		       85 20		      sta	HMP0	; 58
     13  169e		       a9 b0		      lda	#$B0	; 60
     14  16a0		       85 21		      sta	HMP1	; 63
     15  16a2
     16  16a2		       85 10		      sta	RESP0	; 66
     17  16a4		       85 11		      sta	RESP1	; 69
     18  16a6
     19  16a6		       a9 00		      lda	#$00	; 71
     20  16a8
     21  16a8		       85 2a		      sta	HMOVE	; 74
     22  16aa
     23  16aa		       85 06		      sta	COLUP0
     24  16ac		       85 07		      sta	COLUP1
     25  16ae
     26  16ae		       a5 86		      lda	ScoreColor
     27  16b0		       85 09		      sta	COLUBK
     28  16b2
     29  16b2		       a9 05		      lda	#DOUBLE_SIZE	; 08
     30  16b4		       85 04		      sta	NUSIZ0
     31  16b6		       85 05		      sta	NUSIZ1
     32  16b8
     33  16b8		       a9 08		      lda	#REFP_TRUE
     34  16ba		       85 0c		      sta	REFP1
     35  16bc
     36  16bc					      SUBROUTINE
     37  16bc
     38  16bc		       a0 04		      ldy	#4
     39  16be		       85 02		      sta	WSYNC
     40  16c0
     41  16c0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     42  16c0				   .HealthTop		; draw top of health
     43  16c0
     44  16c0		       a2 03		      ldx	#3
     45  16c2
     46  16c2				   .Loop
     47  16c2		       85 02		      sta	WSYNC
     48  16c4
     49  16c4		       b9 b8 18 	      lda	HealthTopGfx,y	; 04
     50  16c7		       85 1b		      sta	GRP0	; 07
     51  16c9		       85 1c		      sta	GRP1	; 10
     52  16cb		       a9 00		      lda	#$00	; 12
     53  16cd		       85 0f		      sta	PF2	; 15
      0  16cf					      SLEEP	26	; 37
      1  16cf				   .CYCLES    SET	26
      2  16cf
      3  16cf				  -	      IF	.CYCLES < 2
      4  16cf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  16cf				  -	      ERR
      6  16cf					      ENDIF
      7  16cf
      8  16cf				  -	      IF	.CYCLES & 1
      9  16cf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  16cf				  -	      nop	0
     11  16cf				  -	      ELSE
     12  16cf				  -	      bit	VSYNC
     13  16cf				  -	      ENDIF
     14  16cf				  -.CYCLES    SET	.CYCLES - 3
     15  16cf					      ENDIF
     16  16cf
     17  16cf					      REPEAT	.CYCLES / 2
     18  16cf		       ea		      nop
     17  16cf					      REPEND
     18  16d0		       ea		      nop
     17  16d0					      REPEND
     18  16d1		       ea		      nop
     17  16d1					      REPEND
     18  16d2		       ea		      nop
     17  16d2					      REPEND
     18  16d3		       ea		      nop
     17  16d3					      REPEND
     18  16d4		       ea		      nop
     17  16d4					      REPEND
     18  16d5		       ea		      nop
     17  16d5					      REPEND
     18  16d6		       ea		      nop
     17  16d6					      REPEND
     18  16d7		       ea		      nop
     17  16d7					      REPEND
     18  16d8		       ea		      nop
     17  16d8					      REPEND
     18  16d9		       ea		      nop
     17  16d9					      REPEND
     18  16da		       ea		      nop
     17  16da					      REPEND
     18  16db		       ea		      nop
     19  16dc					      REPEND
     55  16dc		       b9 08 19 	      lda	HealthBgGfx+8,y	; 41
     56  16df		       85 0f		      sta	PF2	; 44
     57  16e1
     58  16e1		       ca		      dex
     59  16e2		       d0 de		      bne	.Loop
     60  16e4
     61  16e4		       88		      dey
     62  16e5		       10 d9		      bpl	.HealthTop
     63  16e7
     64  16e7
     65  16e7					      SUBROUTINE
     66  16e7
     67  16e7
     68  16e7		       a0 03		      ldy	#3
     69  16e9		       a2 03		      ldx	#3
     70  16eb		       86 bf		      stx	Temp
     71  16ed
     72  16ed		       4c 00 17 	      jmp	.HealthMiddle
     73  16f0
     74  1700		       00 00 00 00*	      ALIGN	$100	; align to page
     75  1700
     76  1700							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  1700				   .HealthMiddle		; draw middle of health, with progress bar
     78  1700
     79  1700		       85 02		      sta	WSYNC
     80  1702				   .Loop
     81  1702		       a5 89		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     82  1704		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     83  1706
     84  1706		       a5 8a		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     85  1708		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     86  170a
     87  170a		       a5 8b		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     88  170c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     89  170e
     90  170e		       a5 8e		      lda	PgBarColor	; 21 - get the progress bar color
     91  1710		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     92  1712
     93  1712		       a5 8c		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     94  1714		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     95  1716
     96  1716		       b1 98		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     97  1718		       85 1b		      sta	GRP0	; 38 - for the left half of health
     98  171a		       b1 9a		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     99  171c		       85 1c		      sta	GRP1	; 46 - for the right half of health
    100  171e
    101  171e		       a5 8d		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
    102  1720		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
    103  1722		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
    104  1724		       85 0f		      sta	PF2	; 57 - for the health background and set it
    105  1726
    106  1726		       a5 86		      lda	ScoreColor	; 60 - get the color for the background
    107  1728		       8d 09 00 	      sta.w	COLUBK	; 64 - and set it at cycle 64
    108  172b
    109  172b		       ca		      dex		; 66
    110  172c		       d0 d2		      bne	.HealthMiddle	; 68
    111  172e
    112  172e		       a6 bf		      ldx	Temp	; 71
    113  1730
    114  1730		       88		      dey		; 73
    115  1731		       10 cf		      bpl	.Loop	; 76 / 00
    116  1733
    117  1733
    118  1733
    119  1733
    120  1733
    121  1733
    122  1733
    123  1733
    124  1733
    125  1733					      SUBROUTINE
    126  1733
    127  1733
    128  1733		       a9 00		      lda	#0
    129  1735		       85 0d		      sta	PF0
    130  1737		       85 0e		      sta	PF1
    131  1739
    132  1739		       a0 07		      ldy	#7
    133  173b
    134  173b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    135  173b				   .HealthBottom		; draw bottom of health
    136  173b
    137  173b		       a2 03		      ldx	#3
    138  173d				   .Loop
    139  173d		       b1 98		      lda	(HthGfxLPtr),y
    140  173f		       85 1b		      sta	GRP0
    141  1741		       b1 9a		      lda	(HthGfxRPtr),y
    142  1743		       85 1c		      sta	GRP1
    143  1745		       a9 00		      lda	#$00
    144  1747		       85 0f		      sta	PF2
    145  1749
      0  1749					      SLEEP	14
      1  1749				   .CYCLES    SET	14
      2  1749
      3  1749				  -	      IF	.CYCLES < 2
      4  1749				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1749				  -	      ERR
      6  1749					      ENDIF
      7  1749
      8  1749				  -	      IF	.CYCLES & 1
      9  1749				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1749				  -	      nop	0
     11  1749				  -	      ELSE
     12  1749				  -	      bit	VSYNC
     13  1749				  -	      ENDIF
     14  1749				  -.CYCLES    SET	.CYCLES - 3
     15  1749					      ENDIF
     16  1749
     17  1749					      REPEAT	.CYCLES / 2
     18  1749		       ea		      nop
     17  1749					      REPEND
     18  174a		       ea		      nop
     17  174a					      REPEND
     18  174b		       ea		      nop
     17  174b					      REPEND
     18  174c		       ea		      nop
     17  174c					      REPEND
     18  174d		       ea		      nop
     17  174d					      REPEND
     18  174e		       ea		      nop
     17  174e					      REPEND
     18  174f		       ea		      nop
     19  1750					      REPEND
    147  1750
    148  1750		       b9 fc 18 	      lda	HealthBgGfx-4,y
    149  1753		       85 0f		      sta	PF2
    150  1755		       85 02		      sta	WSYNC
    151  1757
    152  1757		       ca		      dex
    153  1758		       d0 e3		      bne	.Loop
    154  175a
    155  175a		       88		      dey
    156  175b		       c0 03		      cpy	#3
    157  175d		       d0 dc		      bne	.HealthBottom
    158  175f
    159  175f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    160  175f
    161  175f		       a9 00		      lda	#$00
    162  1761		       85 1b		      sta	GRP0
    163  1763		       85 1c		      sta	GRP1
    164  1765		       85 0b		      sta	REFP0
    165  1767		       85 0c		      sta	REFP1
    166  1769		       85 0f		      sta	PF2
    167  176b
    168  176b		       85 02		      sta	WSYNC
    169  176d
------- FILE code/Kernel.asm
     13  176d
     14  176d		       a9 02		      lda	#2
     15  176f		       85 01		      sta	VBLANK	; disable display
     16  1771
     17  1771		       4c 0b 10 	      jmp	Overscan
------- FILE main.asm
     71  1774
     72  1774		       00	   Z_EndOfCode .byte.b	0	; label to show how much ROM is used for the code
     73  1775
     74  1775
     75  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     76  1775							; Data Tables
     77  1775							;
     78  1775							; Include data tables
     79  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     80  1775
     81  1775							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  1775					      include	data/Graphics.asm
      1  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  1775							; Graphics Tables
      3  1775							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  1775
      5  1800		       00 00 00 00*	      ALIGN	$100	; align to page
      6  1800
      7  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  1800							; Digit graphics for the scoreboard
      9  1800							;
     10  1800							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  1800							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  1800							; to normal when it is pulled from the stack.
     13  1800							;
     14  1800							; Table takes up $50 (80) bytes of ROM
     15  1800							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  1800
     17  1800				   ScoreGfx
     18  1800
     19  1800		       1c		      .byte.b	%00011100	; digit 0
     20  1801		       26		      .byte.b	%00100110
     21  1802		       63		      .byte.b	%01100011
     22  1803		       63		      .byte.b	%01100011
     23  1804		       63		      .byte.b	%01100011
     24  1805		       32		      .byte.b	%00110010
     25  1806		       1c		      .byte.b	%00011100
     26  1807		       00		      .byte.b	%00000000
     27  1808
     28  1808							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     29  1808
     30  1808		       18		      .byte.b	%00011000	; digit 1
     31  1809		       38		      .byte.b	%00111000
     32  180a		       18		      .byte.b	%00011000
     33  180b		       18		      .byte.b	%00011000
     34  180c		       18		      .byte.b	%00011000
     35  180d		       18		      .byte.b	%00011000
     36  180e		       7e		      .byte.b	%01111110
     37  180f		       00		      .byte.b	%00000000
     38  1810
     39  1810							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     40  1810
     41  1810		       3e		      .byte.b	%00111110	; digit 2
     42  1811		       63		      .byte.b	%01100011
     43  1812		       07		      .byte.b	%00000111
     44  1813		       1e		      .byte.b	%00011110
     45  1814		       3c		      .byte.b	%00111100
     46  1815		       70		      .byte.b	%01110000
     47  1816		       7f		      .byte.b	%01111111
     48  1817		       00		      .byte.b	%00000000
     49  1818
     50  1818							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     51  1818
     52  1818		       7f		      .byte.b	%01111111	; digit 3
     53  1819		       06		      .byte.b	%00000110
     54  181a		       0c		      .byte.b	%00001100
     55  181b		       1e		      .byte.b	%00011110
     56  181c		       03		      .byte.b	%00000011
     57  181d		       63		      .byte.b	%01100011
     58  181e		       3e		      .byte.b	%00111110
     59  181f		       00		      .byte.b	%00000000
     60  1820
     61  1820							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  1820
     63  1820		       0e		      .byte.b	%00001110	; digit 4
     64  1821		       1e		      .byte.b	%00011110
     65  1822		       36		      .byte.b	%00110110
     66  1823		       66		      .byte.b	%01100110
     67  1824		       7f		      .byte.b	%01111111
     68  1825		       06		      .byte.b	%00000110
     69  1826		       06		      .byte.b	%00000110
     70  1827		       00		      .byte.b	%00000000
     71  1828
     72  1828							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  1828
     74  1828		       7e		      .byte.b	%01111110	; digit 5
     75  1829		       60		      .byte.b	%01100000
     76  182a		       7e		      .byte.b	%01111110
     77  182b		       03		      .byte.b	%00000011
     78  182c		       03		      .byte.b	%00000011
     79  182d		       63		      .byte.b	%01100011
     80  182e		       3e		      .byte.b	%00111110
     81  182f		       00		      .byte.b	%00000000
     82  1830
     83  1830							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     84  1830
     85  1830		       1e		      .byte.b	%00011110	; digit 6
     86  1831		       30		      .byte.b	%00110000
     87  1832		       60		      .byte.b	%01100000
     88  1833		       7e		      .byte.b	%01111110
     89  1834		       63		      .byte.b	%01100011
     90  1835		       63		      .byte.b	%01100011
     91  1836		       3e		      .byte.b	%00111110
     92  1837		       00		      .byte.b	%00000000
     93  1838
     94  1838							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     95  1838
     96  1838		       7f		      .byte.b	%01111111	; digit 7
     97  1839		       03		      .byte.b	%00000011
     98  183a		       06		      .byte.b	%00000110
     99  183b		       0c		      .byte.b	%00001100
    100  183c		       18		      .byte.b	%00011000
    101  183d		       18		      .byte.b	%00011000
    102  183e		       18		      .byte.b	%00011000
    103  183f		       00		      .byte.b	%00000000
    104  1840
    105  1840							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    106  1840
    107  1840		       3c		      .byte.b	%00111100	; digit 8
    108  1841		       62		      .byte.b	%01100010
    109  1842		       72		      .byte.b	%01110010
    110  1843		       3c		      .byte.b	%00111100
    111  1844		       43		      .byte.b	%01000011
    112  1845		       43		      .byte.b	%01000011
    113  1846		       3e		      .byte.b	%00111110
    114  1847		       00		      .byte.b	%00000000
    115  1848
    116  1848							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    117  1848
    118  1848		       3e		      .byte.b	%00111110	; digit 9
    119  1849		       63		      .byte.b	%01100011
    120  184a		       63		      .byte.b	%01100011
    121  184b		       3f		      .byte.b	%00111111
    122  184c		       03		      .byte.b	%00000011
    123  184d		       06		      .byte.b	%00000110
    124  184e		       3c		      .byte.b	%00111100
    125  184f		       00		      .byte.b	%00000000
    126  1850
    127  1850
    128  1850
    129  1850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  1850							; NUSIZx and ENAMx data for level counter graphics
    131  1850							;
    132  1850							; This table enables or disables each missile and adjusts the left missile's
    133  1850							; size in the scoreboard kernel line-by-line to draw the level counter's
    134  1850							; left digit. (The right digit is drawn with the ball.)
    135  1850							; Bit-1 is used to enable or disable the left missile,
    136  1850							; and bit-0 is used to enable or disable the right missile.
    137  1850							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    138  1850							; Therefore, bits 6-7 are used to control the size of the left missile,
    139  1850							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    140  1850							; correct for the score display.
    141  1850							;
    142  1850							; This data is right-side up, NOT upside-down. Since the program reads the data
    143  1850							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    144  1850							; to normal when it is pulled from the stack.
    145  1850							;
    146  1850							; Table takes up $50 (80) bytes of ROM
    147  1850							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    148  1850
    149  1850				   LevelGfx
    150  1850
    151  1850							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    152  1850							; ^^^^^^^^^
    153  1850		       8f		      .byte.b	%10001111	; digit 0
    154  1851		       4f		      .byte.b	%01001111
    155  1852		       4f		      .byte.b	%01001111
    156  1853		       4f		      .byte.b	%01001111
    157  1854		       4f		      .byte.b	%01001111
    158  1855		       4f		      .byte.b	%01001111
    159  1856		       8f		      .byte.b	%10001111
    160  1857		       00		      .byte.b	%00000000
    161  1858
    162  1858							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    163  1858
    164  1858							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    165  1858							; ^^^^^^^^^
    166  1858		       8d		      .byte.b	%10001101	; digit 1
    167  1859		       4d		      .byte.b	%01001101
    168  185a		       4d		      .byte.b	%01001101
    169  185b		       8d		      .byte.b	%10001101
    170  185c		       4d		      .byte.b	%01001101
    171  185d		       4d		      .byte.b	%01001101
    172  185e		       8d		      .byte.b	%10001101
    173  185f		       00		      .byte.b	%00000000
    174  1860
    175  1860							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    176  1860
    177  1860							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  1860							; ^^^^^^^^^
    179  1860		       8f		      .byte.b	%10001111	; digit 2
    180  1861		       4d		      .byte.b	%01001101
    181  1862		       4d		      .byte.b	%01001101
    182  1863		       8f		      .byte.b	%10001111
    183  1864		       4e		      .byte.b	%01001110
    184  1865		       4e		      .byte.b	%01001110
    185  1866		       8f		      .byte.b	%10001111
    186  1867		       00		      .byte.b	%00000000
    187  1868
    188  1868							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    189  1868
    190  1868							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    191  1868							; ^^^^^^^^^
    192  1868		       8f		      .byte.b	%10001111	; digit 3
    193  1869		       4d		      .byte.b	%01001101
    194  186a		       4d		      .byte.b	%01001101
    195  186b		       8f		      .byte.b	%10001111
    196  186c		       4d		      .byte.b	%01001101
    197  186d		       4d		      .byte.b	%01001101
    198  186e		       8f		      .byte.b	%10001111
    199  186f		       00		      .byte.b	%00000000
    200  1870
    201  1870							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    202  1870
    203  1870							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    204  1870							; ^^^^^^^^^
    205  1870		       4f		      .byte.b	%01001111	; digit 4
    206  1871		       4f		      .byte.b	%01001111
    207  1872		       4f		      .byte.b	%01001111
    208  1873		       8f		      .byte.b	%10001111
    209  1874		       4d		      .byte.b	%01001101
    210  1875		       4d		      .byte.b	%01001101
    211  1876		       4d		      .byte.b	%01001101
    212  1877		       00		      .byte.b	%00000000
    213  1878
    214  1878							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    215  1878
    216  1878							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    217  1878							; ^^^^^^^^^
    218  1878		       8f		      .byte.b	%10001111	; digit 5
    219  1879		       4e		      .byte.b	%01001110
    220  187a		       4e		      .byte.b	%01001110
    221  187b		       8f		      .byte.b	%10001111
    222  187c		       4d		      .byte.b	%01001101
    223  187d		       4d		      .byte.b	%01001101
    224  187e		       8f		      .byte.b	%10001111
    225  187f		       00		      .byte.b	%00000000
    226  1880
    227  1880							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    228  1880
    229  1880							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    230  1880							; ^^^^^^^^^
    231  1880		       8f		      .byte.b	%10001111	; digit 6
    232  1881		       4e		      .byte.b	%01001110
    233  1882		       4e		      .byte.b	%01001110
    234  1883		       8f		      .byte.b	%10001111
    235  1884		       4f		      .byte.b	%01001111
    236  1885		       4f		      .byte.b	%01001111
    237  1886		       8f		      .byte.b	%10001111
    238  1887		       00		      .byte.b	%00000000
    239  1888
    240  1888							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    241  1888
    242  1888							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    243  1888							; ^^^^^^^^^
    244  1888		       8f		      .byte.b	%10001111	; digit 7
    245  1889		       4d		      .byte.b	%01001101
    246  188a		       4d		      .byte.b	%01001101
    247  188b		       8d		      .byte.b	%10001101
    248  188c		       4d		      .byte.b	%01001101
    249  188d		       4d		      .byte.b	%01001101
    250  188e		       8d		      .byte.b	%10001101
    251  188f		       00		      .byte.b	%00000000
    252  1890
    253  1890							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    254  1890
    255  1890							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    256  1890							; ^^^^^^^^^
    257  1890		       8f		      .byte.b	%10001111	; digit 8
    258  1891		       4f		      .byte.b	%01001111
    259  1892		       4f		      .byte.b	%01001111
    260  1893		       8f		      .byte.b	%10001111
    261  1894		       4f		      .byte.b	%01001111
    262  1895		       4f		      .byte.b	%01001111
    263  1896		       8f		      .byte.b	%10001111
    264  1897		       00		      .byte.b	%00000000
    265  1898
    266  1898							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  1898
    268  1898							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    269  1898							; ^^^^^^^^^
    270  1898		       8f		      .byte.b	%10001111	; digit 9
    271  1899		       4f		      .byte.b	%01001111
    272  189a		       4f		      .byte.b	%01001111
    273  189b		       8f		      .byte.b	%10001111
    274  189c		       4d		      .byte.b	%01001101
    275  189d		       4d		      .byte.b	%01001101
    276  189e		       8f		      .byte.b	%10001111
    277  189f		       00		      .byte.b	%00000000
    278  18a0
    279  18a0
    280  18a0
    281  18a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    282  18a0							; Throbbing Line Graphics
    283  18a0							;
    284  18a0							; Graphics tables for the throbbing lines
    285  18a0							;
    286  18a0							; Table takes up $18 (24) bytes of ROM
    287  18a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    288  18a0
    289  18a0				   ThrobGfx
    290  18a0
    291  18a0		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 0
    292  18a1		       81		      .byte.b	LUM_2 + MODE_GREY
    293  18a2		       02		      .byte.b	LUM_4 + MODE_COLOR
    294  18a3
    295  18a3							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    296  18a3
    297  18a3		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 1
    298  18a4		       02		      .byte.b	LUM_4 + MODE_COLOR
    299  18a5		       03		      .byte.b	LUM_6 + MODE_COLOR
    300  18a6
    301  18a6							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    302  18a6
    303  18a6		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 2
    304  18a7		       03		      .byte.b	LUM_6 + MODE_COLOR
    305  18a8		       04		      .byte.b	LUM_8 + MODE_COLOR
    306  18a9
    307  18a9							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    308  18a9
    309  18a9		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 3
    310  18aa		       04		      .byte.b	LUM_8 + MODE_COLOR
    311  18ab		       06		      .byte.b	LUM_C + MODE_COLOR
    312  18ac
    313  18ac							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    314  18ac
    315  18ac		       02		      .byte.b	LUM_4 + MODE_COLOR	; frame 4
    316  18ad		       05		      .byte.b	LUM_A + MODE_COLOR
    317  18ae		       07		      .byte.b	LUM_E + MODE_COLOR
    318  18af
    319  18af							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    320  18af
    321  18af		       81		      .byte.b	LUM_2 + MODE_GREY	; frame 5
    322  18b0		       04		      .byte.b	LUM_8 + MODE_COLOR
    323  18b1		       06		      .byte.b	LUM_C + MODE_COLOR
    324  18b2
    325  18b2							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    326  18b2
    327  18b2		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 6
    328  18b3		       03		      .byte.b	LUM_6 + MODE_COLOR
    329  18b4		       05		      .byte.b	LUM_A + MODE_COLOR
    330  18b5
    331  18b5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    332  18b5
    333  18b5		       80		      .byte.b	LUM_0 + MODE_GREY	; frame 7
    334  18b6		       02		      .byte.b	LUM_4 + MODE_COLOR
    335  18b7		       03		      .byte.b	LUM_6 + MODE_COLOR
    336  18b8
    337  18b8
    338  18b8
    339  18b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    340  18b8							; Health Graphics
    341  18b8							;
    342  18b8							; All of these tables are upside-down, and they are supposed to be used with the
    343  18b8							; left player not mirrored, and the right player mirrored. This makes it easier
    344  18b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    345  18b8							; the graphics for the lower right are flipped.
    346  18b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    347  18b8							; are set up in a confusing way. They are upside-down, but they are split
    348  18b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    349  18b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    350  18b8							; LOWER 4 lines of graphics (also upside-down).
    351  18b8							; The last table (HealthBgGfx) is for the grey background of the
    352  18b8							; health graphics drawn with the playfield.
    353  18b8							;
    354  18b8							; Table takes up $45 (69) bytes of ROM
    355  18b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    356  18b8
    357  18b8				   HealthTopGfx
    358  18b8
    359  18b8		       40		      .byte.b	%01000000	; graphics for left top of health
    360  18b9		       43		      .byte.b	%01000011
    361  18ba		       44		      .byte.b	%01000100
    362  18bb		       48		      .byte.b	%01001000
    363  18bc		       30		      .byte.b	%00110000
    364  18bd
    365  18bd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    366  18bd				   HealthLeftGfx
    367  18bd
    368  18bd		       80		      .byte.b	%10000000	; left health full (upper)
    369  18be		       8c		      .byte.b	%10001100
    370  18bf		       84		      .byte.b	%10000100
    371  18c0		       80		      .byte.b	%10000000
    372  18c1		       1f		      .byte.b	%00011111	; left health full (lower)
    373  18c2		       20		      .byte.b	%00100000
    374  18c3		       47		      .byte.b	%01000111
    375  18c4		       84		      .byte.b	%10000100
    376  18c5
    377  18c5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    378  18c5
    379  18c5		       80		      .byte.b	%10000000	; left health medium (upper)
    380  18c6		       8c		      .byte.b	%10001100
    381  18c7		       84		      .byte.b	%10000100
    382  18c8		       80		      .byte.b	%10000000
    383  18c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    384  18ca		       20		      .byte.b	%00100000
    385  18cb		       47		      .byte.b	%01000111
    386  18cc		       80		      .byte.b	%10000000
    387  18cd
    388  18cd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    389  18cd
    390  18cd		       80		      .byte.b	%10000000	; left health low (upper)
    391  18ce		       8c		      .byte.b	%10001100
    392  18cf		       84		      .byte.b	%10000100
    393  18d0		       80		      .byte.b	%10000000
    394  18d1		       1f		      .byte.b	%00011111	; left health low (lower)
    395  18d2		       20		      .byte.b	%00100000
    396  18d3		       44		      .byte.b	%01000100
    397  18d4		       87		      .byte.b	%10000111
    398  18d5
    399  18d5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    400  18d5
    401  18d5		       80		      .byte.b	%10000000	; left health empty (upper)
    402  18d6		       9c		      .byte.b	%10011100
    403  18d7		       80		      .byte.b	%10000000
    404  18d8		       80		      .byte.b	%10000000
    405  18d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    406  18da		       20		      .byte.b	%00100000
    407  18db		       46		      .byte.b	%01000110
    408  18dc		       81		      .byte.b	%10000001
    409  18dd
    410  18dd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    411  18dd				   HealthRightGfx
    412  18dd
    413  18dd		       80		      .byte.b	%10000000	; right health full (upper)
    414  18de		       9a		      .byte.b	%10011010
    415  18df		       90		      .byte.b	%10010000
    416  18e0		       80		      .byte.b	%10000000
    417  18e1		       1f		      .byte.b	%00011111	; right health full (lower)
    418  18e2		       20		      .byte.b	%00100000
    419  18e3		       4f		      .byte.b	%01001111
    420  18e4		       89		      .byte.b	%10001001
    421  18e5
    422  18e5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    423  18e5
    424  18e5		       80		      .byte.b	%10000000	; right health medium (upper)
    425  18e6		       9a		      .byte.b	%10011010
    426  18e7		       90		      .byte.b	%10010000
    427  18e8		       80		      .byte.b	%10000000
    428  18e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    429  18ea		       20		      .byte.b	%00100000
    430  18eb		       4f		      .byte.b	%01001111
    431  18ec		       80		      .byte.b	%10000000
    432  18ed
    433  18ed							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    434  18ed
    435  18ed		       80		      .byte.b	%10000000	; right health low (upper)
    436  18ee		       9a		      .byte.b	%10011010
    437  18ef		       88		      .byte.b	%10001000
    438  18f0		       80		      .byte.b	%10000000
    439  18f1		       1f		      .byte.b	%00011111	; right health low (lower)
    440  18f2		       20		      .byte.b	%00100000
    441  18f3		       48		      .byte.b	%01001000
    442  18f4		       8f		      .byte.b	%10001111
    443  18f5
    444  18f5							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  18f5
    446  18f5		       80		      .byte.b	%10000000	; right health empty (upper)
    447  18f6		       ba		      .byte.b	%10111010
    448  18f7		       80		      .byte.b	%10000000
    449  18f8		       80		      .byte.b	%10000000
    450  18f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    451  18fa		       20		      .byte.b	%00100000
    452  18fb		       4c		      .byte.b	%01001100
    453  18fc		       83		      .byte.b	%10000011
    454  18fd
    455  18fd							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    456  18fd
    457  18fd							; 3 bytes left in this page
    458  18fd
    459  1900		       00 00 00 	      ALIGN	$100	; align to page
    460  1900
    461  1900							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    462  1900				   HealthBgGfx
    463  1900							; 13 bytes
    464  1900
    465  1900		       00		      .byte.b	%00000000
    466  1901		       3e		      .byte.b	%00111110
    467  1902		       7f		      .byte.b	%01111111
    468  1903		       7f		      .byte.b	%01111111
    469  1904		       7f		      .byte.b	%01111111
    470  1905		       7f		      .byte.b	%01111111
    471  1906		       7f		      .byte.b	%01111111
    472  1907		       7f		      .byte.b	%01111111
    473  1908		       7f		      .byte.b	%01111111
    474  1909		       7f		      .byte.b	%01111111
    475  190a		       63		      .byte.b	%01100011
    476  190b		       63		      .byte.b	%01100011
    477  190c		       00		      .byte.b	%00000000
    478  190d
    479  190d
    480  190d
    481  190d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    482  190d							; Progress Bar Graphics
    483  190d							;
    484  190d							;
    485  190d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    486  190d
    487  190d				   PgBarGfx
    488  190d							; 9 bytes
    489  190d
    490  190d		       ff		      .byte.b	%11111111	; 1st PF1
    491  190e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    492  190f		       3f		      .byte.b	%00111111
    493  1910		       1f		      .byte.b	%00011111
    494  1911		       0f		      .byte.b	%00001111
    495  1912		       07		      .byte.b	%00000111
    496  1913		       03		      .byte.b	%00000011
    497  1914		       01		      .byte.b	%00000001
    498  1915		       00		      .byte.b	%00000000
    499  1916
    500  1916							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    501  1916				   PgBarGfxR
    502  1916							; 8 bytes
    503  1916
    504  1916		       ff		      .byte.b	%11111111	; PF2
    505  1917		       fe		      .byte.b	%11111110
    506  1918		       fc		      .byte.b	%11111100
    507  1919		       f8		      .byte.b	%11111000
    508  191a		       f0		      .byte.b	%11110000	; 2nd PF0
    509  191b		       e0		      .byte.b	%11100000	; 1st PF0
    510  191c		       c0		      .byte.b	%11000000
    511  191d		       80		      .byte.b	%10000000
    512  191e
    513  191e
    514  191e
    515  191e				   FineHmove73
    516  191e
    517  191e		       70 60 50 40	      HEX	70 60 50 40
    518  1922		       30 20 10 00	      HEX	30 20 10 00
    519  1926		       f0 e0 d0 c0	      HEX	F0 E0 D0 C0
    520  192a		       b0 a0 90 80	      HEX	B0 A0 90 80
    521  192e
    522  192e
    523  192e
    524  192e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    525  192e							; Cat Rainbow Graphics
    526  192e							;
    527  192e							;
    528  192e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    529  192e
    530  192e				   RainbowGfx
    531  192e							; 4 bytes
    532  192e
    533  192e		       a0		      .byte.b	%10100000	; rainbow PF0 gfx for moving straight, frame 0
    534  192f
    535  192f		       50		      .byte.b	%01010000	; rainbow PF0 gfx for moving straight, frame 1
    536  1930
    537  1930		       c0		      .byte.b	%11000000	; rainbow PF0 gfx for moving up
    538  1931
    539  1931		       30		      .byte.b	%00110000	; rainbow PF0 gfx for moving down
    540  1932
    541  1932
    542  1932		       00 00 00 00*	      HEX	00000000000000000000000000000000000000000000	; 22 bytes
    543  1948
    544  1948				   CatFaceGfx
    545  1948
    546  1948		       36		      .byte.b	%00110110
    547  1949		       36		      .byte.b	%00110110
    548  194a		       00		      .byte.b	%00000000
    549  194b		       7e		      .byte.b	%01111110
    550  194c		       c1		      .byte.b	%11000001
    551  194d		       d5		      .byte.b	%11010101
    552  194e		       ff		      .byte.b	%11111111
    553  194f		       d5		      .byte.b	%11010101
    554  1950		       dd		      .byte.b	%11011101
    555  1951		       ff		      .byte.b	%11111111
    556  1952		       66		      .byte.b	%01100110
    557  1953		       66		      .byte.b	%01100110
    558  1954		       42		      .byte.b	%01000010
    559  1955
    560  1955		       00 00 00 00*	      HEX	000000000000000000000000000000000000000000	; 21 bytes
    561  196a							;140 bytes used in page
    562  196a
    563  1a00		       00 00 00 00*	      ALIGN	$100
    564  1a00
    565  1a00				   FoodGfx
    566  1a00
    567  1a00							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    568  1a00							; 0 - blank
    569  1a00
    570  1a00		       01		      .byte.b	%00000001
    571  1a01		       80		      .byte.b	%10000000
    572  1a02		       01		      .byte.b	%00000001
    573  1a03		       80		      .byte.b	%10000000
    574  1a04		       01		      .byte.b	%00000001
    575  1a05		       80		      .byte.b	%10000000
    576  1a06		       01		      .byte.b	%00000001
    577  1a07		       80		      .byte.b	%10000000
    578  1a08		       01		      .byte.b	%00000001
    579  1a09		       80		      .byte.b	%10000000
    580  1a0a		       01		      .byte.b	%00000001
    581  1a0b		       80		      .byte.b	%10000000
    582  1a0c		       01		      .byte.b	%00000001
    583  1a0d		       80		      .byte.b	%10000000
    584  1a0e
    585  1a0e		       00		      .byte.b	0
    586  1a0f		       00		      .byte.b	$00
    587  1a10
    588  1a10							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    589  1a10							; 1 - apple
    590  1a10
    591  1a10		       34		      .byte.b	%00110100
    592  1a11		       7e		      .byte.b	%01111110
    593  1a12		       7e		      .byte.b	%01111110
    594  1a13		       ff		      .byte.b	%11111111
    595  1a14		       ff		      .byte.b	%11111111
    596  1a15		       ff		      .byte.b	%11111111
    597  1a16		       ff		      .byte.b	%11111111
    598  1a17		       ff		      .byte.b	%11111111
    599  1a18		       ff		      .byte.b	%11111111
    600  1a19		       7f		      .byte.b	%01111111
    601  1a1a		       6a		      .byte.b	%01101010
    602  1a1b		       08		      .byte.b	%00001000
    603  1a1c		       0c		      .byte.b	%00001100
    604  1a1d		       04		      .byte.b	%00000100
    605  1a1e
    606  1a1e		       00		      .byte.b	0
    607  1a1f		       46		      .byte.b	$46
    608  1a20
    609  1a20							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    610  1a20							; 2 - peach
    611  1a20
    612  1a20		       3c		      .byte.b	%00111100
    613  1a21		       6e		      .byte.b	%01101110
    614  1a22		       6e		      .byte.b	%01101110
    615  1a23		       df		      .byte.b	%11011111
    616  1a24		       df		      .byte.b	%11011111
    617  1a25		       bf		      .byte.b	%10111111
    618  1a26		       bf		      .byte.b	%10111111
    619  1a27		       bf		      .byte.b	%10111111
    620  1a28		       de		      .byte.b	%11011110
    621  1a29		       5e		      .byte.b	%01011110
    622  1a2a		       6c		      .byte.b	%01101100
    623  1a2b		       18		      .byte.b	%00011000
    624  1a2c		       10		      .byte.b	%00010000
    625  1a2d		       30		      .byte.b	%00110000
    626  1a2e
    627  1a2e		       00		      .byte.b	0
    628  1a2f		       3a		      .byte.b	$3A
    629  1a30
    630  1a30							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    631  1a30							; 3 - banana
    632  1a30
    633  1a30		       38		      .byte.b	%00111000
    634  1a31		       7c		      .byte.b	%01111100
    635  1a32		       fe		      .byte.b	%11111110
    636  1a33		       fe		      .byte.b	%11111110
    637  1a34		       ff		      .byte.b	%11111111
    638  1a35		       ff		      .byte.b	%11111111
    639  1a36		       8f		      .byte.b	%10001111
    640  1a37		       07		      .byte.b	%00000111
    641  1a38		       07		      .byte.b	%00000111
    642  1a39		       03		      .byte.b	%00000011
    643  1a3a		       03		      .byte.b	%00000011
    644  1a3b		       02		      .byte.b	%00000010
    645  1a3c		       06		      .byte.b	%00000110
    646  1a3d		       06		      .byte.b	%00000110
    647  1a3e
    648  1a3e		       00		      .byte.b	0
    649  1a3f		       1e		      .byte.b	$1E
    650  1a40
    651  1a40							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    652  1a40							; 4 - pear
    653  1a40
    654  1a40		       38		      .byte.b	%00111000
    655  1a41		       7c		      .byte.b	%01111100
    656  1a42		       fe		      .byte.b	%11111110
    657  1a43		       fe		      .byte.b	%11111110
    658  1a44		       fe		      .byte.b	%11111110
    659  1a45		       fe		      .byte.b	%11111110
    660  1a46		       7c		      .byte.b	%01111100
    661  1a47		       7c		      .byte.b	%01111100
    662  1a48		       38		      .byte.b	%00111000
    663  1a49		       38		      .byte.b	%00111000
    664  1a4a		       30		      .byte.b	%00110000
    665  1a4b		       10		      .byte.b	%00010000
    666  1a4c		       18		      .byte.b	%00011000
    667  1a4d		       08		      .byte.b	%00001000
    668  1a4e
    669  1a4e		       00		      .byte.b	0
    670  1a4f		       cc		      .byte.b	$CC
    671  1a50
    672  1a50							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    673  1a50							; 5 - plum
    674  1a50
    675  1a50		       38		      .byte.b	%00111000
    676  1a51		       6c		      .byte.b	%01101100
    677  1a52		       6e		      .byte.b	%01101110
    678  1a53		       de		      .byte.b	%11011110
    679  1a54		       df		      .byte.b	%11011111
    680  1a55		       bf		      .byte.b	%10111111
    681  1a56		       bf		      .byte.b	%10111111
    682  1a57		       bf		      .byte.b	%10111111
    683  1a58		       de		      .byte.b	%11011110
    684  1a59		       de		      .byte.b	%11011110
    685  1a5a		       5e		      .byte.b	%01011110
    686  1a5b		       3c		      .byte.b	%00111100
    687  1a5c		       20		      .byte.b	%00100000
    688  1a5d		       60		      .byte.b	%01100000
    689  1a5e
    690  1a5e		       00		      .byte.b	0
    691  1a5f		       88		      .byte.b	$88
    692  1a60
    693  1a60							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    694  1a60							; 6 - grapes
    695  1a60
    696  1a60		       18		      .byte.b	%00011000
    697  1a61		       08		      .byte.b	%00001000
    698  1a62		       36		      .byte.b	%00110110
    699  1a63		       12		      .byte.b	%00010010
    700  1a64		       6c		      .byte.b	%01101100
    701  1a65		       24		      .byte.b	%00100100
    702  1a66		       db		      .byte.b	%11011011
    703  1a67		       49		      .byte.b	%01001001
    704  1a68		       36		      .byte.b	%00110110
    705  1a69		       12		      .byte.b	%00010010
    706  1a6a		       6c		      .byte.b	%01101100
    707  1a6b		       34		      .byte.b	%00110100
    708  1a6c		       10		      .byte.b	%00010000
    709  1a6d		       18		      .byte.b	%00011000
    710  1a6e
    711  1a6e		       00		      .byte.b	0
    712  1a6f		       64		      .byte.b	$64
    713  1a70
    714  1a70							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    715  1a70							; 7 - broccoli
    716  1a70
    717  1a70		       00		      .byte.b	%00000000
    718  1a71		       00		      .byte.b	%00000000
    719  1a72		       18		      .byte.b	%00011000
    720  1a73		       18		      .byte.b	%00011000
    721  1a74		       3e		      .byte.b	%00111110
    722  1a75		       2a		      .byte.b	%00101010
    723  1a76		       ea		      .byte.b	%11101010
    724  1a77		       df		      .byte.b	%11011111
    725  1a78		       ff		      .byte.b	%11111111
    726  1a79		       ff		      .byte.b	%11111111
    727  1a7a		       7e		      .byte.b	%01111110
    728  1a7b		       18		      .byte.b	%00011000
    729  1a7c		       00		      .byte.b	%00000000
    730  1a7d		       00		      .byte.b	%00000000
    731  1a7e
    732  1a7e		       00		      .byte.b	0
    733  1a7f		       c6		      .byte.b	$C6
    734  1a80
    735  1a80							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    736  1a80							; 8 - cabbage
    737  1a80
    738  1a80		       18		      .byte.b	%00011000
    739  1a81		       76		      .byte.b	%01110110
    740  1a82		       76		      .byte.b	%01110110
    741  1a83		       7a		      .byte.b	%01111010
    742  1a84		       f9		      .byte.b	%11111001
    743  1a85		       fb		      .byte.b	%11111011
    744  1a86		       ed		      .byte.b	%11101101
    745  1a87		       db		      .byte.b	%11011011
    746  1a88		       fb		      .byte.b	%11111011
    747  1a89		       e9		      .byte.b	%11101001
    748  1a8a		       56		      .byte.b	%01010110
    749  1a8b		       76		      .byte.b	%01110110
    750  1a8c		       6e		      .byte.b	%01101110
    751  1a8d		       18		      .byte.b	%00011000
    752  1a8e
    753  1a8e		       00		      .byte.b	0
    754  1a8f		       da		      .byte.b	$DA
    755  1a90
    756  1a90							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    757  1a90							; 9 - celery
    758  1a90
    759  1a90		       c0		      .byte.b	%11000000
    760  1a91		       e0		      .byte.b	%11100000
    761  1a92		       70		      .byte.b	%01110000
    762  1a93		       30		      .byte.b	%00110000
    763  1a94		       18		      .byte.b	%00011000
    764  1a95		       18		      .byte.b	%00011000
    765  1a96		       0c		      .byte.b	%00001100
    766  1a97		       0c		      .byte.b	%00001100
    767  1a98		       0e		      .byte.b	%00001110
    768  1a99		       06		      .byte.b	%00000110
    769  1a9a		       0d		      .byte.b	%00001101
    770  1a9b		       0b		      .byte.b	%00001011
    771  1a9c		       0d		      .byte.b	%00001101
    772  1a9d		       06		      .byte.b	%00000110
    773  1a9e
    774  1a9e		       00		      .byte.b	0
    775  1a9f		       d6		      .byte.b	$D6
    776  1aa0
    777  1aa0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    778  1aa0							; A - green pepper
    779  1aa0
    780  1aa0		       6c		      .byte.b	%01101100
    781  1aa1		       6c		      .byte.b	%01101100
    782  1aa2		       fe		      .byte.b	%11111110
    783  1aa3		       fe		      .byte.b	%11111110
    784  1aa4		       f6		      .byte.b	%11110110
    785  1aa5		       f6		      .byte.b	%11110110
    786  1aa6		       f6		      .byte.b	%11110110
    787  1aa7		       f6		      .byte.b	%11110110
    788  1aa8		       f6		      .byte.b	%11110110
    789  1aa9		       ec		      .byte.b	%11101100
    790  1aaa		       7c		      .byte.b	%01111100
    791  1aab		       10		      .byte.b	%00010000
    792  1aac		       18		      .byte.b	%00011000
    793  1aad		       08		      .byte.b	%00001000
    794  1aae
    795  1aae		       00		      .byte.b	0
    796  1aaf		       c8		      .byte.b	$C8
    797  1ab0
    798  1ab0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    799  1ab0							; B - potato
    800  1ab0
    801  1ab0		       00		      .byte.b	%00000000
    802  1ab1		       00		      .byte.b	%00000000
    803  1ab2		       00		      .byte.b	%00000000
    804  1ab3		       1c		      .byte.b	%00011100
    805  1ab4		       7e		      .byte.b	%01111110
    806  1ab5		       ff		      .byte.b	%11111111
    807  1ab6		       ff		      .byte.b	%11111111
    808  1ab7		       ef		      .byte.b	%11101111
    809  1ab8		       f6		      .byte.b	%11110110
    810  1ab9		       78		      .byte.b	%01111000
    811  1aba		       30		      .byte.b	%00110000
    812  1abb		       00		      .byte.b	%00000000
    813  1abc		       00		      .byte.b	%00000000
    814  1abd		       00		      .byte.b	%00000000
    815  1abe
    816  1abe		       00		      .byte.b	0
    817  1abf		       f6		      .byte.b	$F6
    818  1ac0
    819  1ac0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    820  1ac0							; C - mushroom
    821  1ac0
    822  1ac0		       18		      .byte.b	%00011000
    823  1ac1		       3c		      .byte.b	%00111100
    824  1ac2		       24		      .byte.b	%00100100
    825  1ac3		       24		      .byte.b	%00100100
    826  1ac4		       24		      .byte.b	%00100100
    827  1ac5		       66		      .byte.b	%01100110
    828  1ac6		       a5		      .byte.b	%10100101
    829  1ac7		       99		      .byte.b	%10011001
    830  1ac8		       e7		      .byte.b	%11100111
    831  1ac9		       ff		      .byte.b	%11111111
    832  1aca		       5a		      .byte.b	%01011010
    833  1acb		       76		      .byte.b	%01110110
    834  1acc		       3c		      .byte.b	%00111100
    835  1acd		       18		      .byte.b	%00011000
    836  1ace
    837  1ace		       00		      .byte.b	0
    838  1acf		       08		      .byte.b	$08
    839  1ad0
    840  1ad0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    841  1ad0							; D - key
    842  1ad0
    843  1ad0		       10		      .byte.b	%00010000
    844  1ad1		       1e		      .byte.b	%00011110
    845  1ad2		       1e		      .byte.b	%00011110
    846  1ad3		       18		      .byte.b	%00011000
    847  1ad4		       1e		      .byte.b	%00011110
    848  1ad5		       1e		      .byte.b	%00011110
    849  1ad6		       10		      .byte.b	%00010000
    850  1ad7		       10		      .byte.b	%00010000
    851  1ad8		       10		      .byte.b	%00010000
    852  1ad9		       10		      .byte.b	%00010000
    853  1ada		       38		      .byte.b	%00111000
    854  1adb		       6c		      .byte.b	%01101100
    855  1adc		       6c		      .byte.b	%01101100
    856  1add		       38		      .byte.b	%00111000
    857  1ade
    858  1ade		       00		      .byte.b	0
    859  1adf		       2c		      .byte.b	$2C
    860  1ae0
    861  1ae0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    862  1ae0							; E - ring
    863  1ae0
    864  1ae0		       00		      .byte.b	%00000000
    865  1ae1		       18		      .byte.b	%00011000
    866  1ae2		       3c		      .byte.b	%00111100
    867  1ae3		       66		      .byte.b	%01100110
    868  1ae4		       42		      .byte.b	%01000010
    869  1ae5		       42		      .byte.b	%01000010
    870  1ae6		       42		      .byte.b	%01000010
    871  1ae7		       66		      .byte.b	%01100110
    872  1ae8		       3c		      .byte.b	%00111100
    873  1ae9		       18		      .byte.b	%00011000
    874  1aea		       18		      .byte.b	%00011000
    875  1aeb		       2c		      .byte.b	%00101100
    876  1aec		       18		      .byte.b	%00011000
    877  1aed		       00		      .byte.b	%00000000
    878  1aee
    879  1aee		       00		      .byte.b	0
    880  1aef		       2c		      .byte.b	$2C
    881  1af0
    882  1af0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    883  1af0							; F - heart
    884  1af0
    885  1af0		       00		      .byte.b	%00000000
    886  1af1		       18		      .byte.b	%00011000
    887  1af2		       18		      .byte.b	%00011000
    888  1af3		       3c		      .byte.b	%00111100
    889  1af4		       3c		      .byte.b	%00111100
    890  1af5		       7e		      .byte.b	%01111110
    891  1af6		       7e		      .byte.b	%01111110
    892  1af7		       ff		      .byte.b	%11111111
    893  1af8		       ff		      .byte.b	%11111111
    894  1af9		       ff		      .byte.b	%11111111
    895  1afa		       e7		      .byte.b	%11100111
    896  1afb		       e7		      .byte.b	%11100111
    897  1afc		       42		      .byte.b	%01000010
    898  1afd		       00		      .byte.b	%00000000
    899  1afe
    900  1afe		       00		      .byte.b	0
    901  1aff		       4a		      .byte.b	$4A
    902  1b00
    903  1b00				   RainbowColors
    904  1b00
    905  1b00		       64		      .byte.b	$64
    906  1b01		       88		      .byte.b	$88
    907  1b02		       c8		      .byte.b	$C8
    908  1b03		       1e		      .byte.b	$1E
    909  1b04		       28		      .byte.b	$28
    910  1b05		       44		      .byte.b	$44
    911  1b06
    912  1b06		       00		      .byte.b	0
    913  1b07
    914  1b07				   CatTartGfx
    915  1b07
    916  1b07		       00		      .byte.b	%00000000
    917  1b08		       00		      .byte.b	%00000000
    918  1b09		       e0		      .byte.b	%11100000
    919  1b0a		       c0		      .byte.b	%11000000
    920  1b0b		       c0		      .byte.b	%11000000
    921  1b0c		       c0		      .byte.b	%11000000
    922  1b0d		       c0		      .byte.b	%11000000
    923  1b0e		       c0		      .byte.b	%11000000
    924  1b0f		       c0		      .byte.b	%11000000
    925  1b10		       e0		      .byte.b	%11100000
    926  1b11		       e0		      .byte.b	%11100000
    927  1b12		       e0		      .byte.b	%11100000
    928  1b13		       e0		      .byte.b	%11100000
    929  1b14		       e0		      .byte.b	%11100000
------- FILE main.asm
     83  1b15
     84  1b15		       00	   Z_EndOfGfx .byte.b	0	; label to show how much ROM is used for the graphics
     85  1b16
     86  1b16
     87  1b16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     88  1b16							; End of ROM
     89  1b16							;
     90  1b16							; Define the end of the cartridge
     91  1b16							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     92  1b16
     93  1ffa					      ORG	SystemClear+$0FFA	; set address to 6507 Interrupt Vectors
     94  1ffa		       00 10		      .WORD.w	SystemClear	; NMI
     95  1ffc		       00 10		      .WORD.w	SystemClear	; RESET
     96  1ffe		       00 10		      .WORD.w	SystemClear	; IRQ
