------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  10000 ????						;
      3  10000 ????						; Project - Nyan Cat Game
      4  10000 ????						; by Jeremiah Knol
      5  10000 ????						;
      6  10000 ????						; Make a game based off of "Nyan Cat FLY!" on addictinggames.com
      7  10000 ????						; http://www.addictinggames.com/funny-games/nyan-cat-fly-game.jsp
      8  10000 ????						;
      9  10000 ????						;
     10  10000 ????						;
     11  10000 ????						; 11-22-2017 Version 2.0
     12  10000 ????						;
     13  10000 ????						; Add vertically moveable cat sprite
     14  10000 ????						;
     15  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  10000 ????
     17  10000 ????
     18  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     19  10000 ????						; Initialization
     20  10000 ????						;
     21  10000 ????						; Include headers and set address of binary
     22  10000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     23  10000 ????
     24  10000 ????						; Define CPU type and include standard VCS header files
     25  10000 ????				       PROCESSOR	6502
     26  10000 ????
------- FILE headers/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	headers/vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE headers/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
     29  0000 ????
     30  0000 ????						; Include TIA/program equates and RAM labels
------- FILE headers/Equates.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/Equates.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; TIA Register Value Equates
      3  0000 ????						;
      4  0000 ????						; Equates for values for the TIA registers.
      5  0000 ????						; These can be OR'ed together, for example:
      6  0000 ????						;     lda #TWO_CLOSE | MSL_SIZE_4
      7  0000 ????						;     sta NUSIZ0
      8  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      9  0000 ????
     10  0000 ????						; NUSIZx player size and player/missile copies
     11  0000 ????	       00 00	   ONE_COPY   equ	$00
     12  0000 ????	       00 01	   TWO_CLOSE  equ	$01
     13  0000 ????	       00 02	   TWO_MED    equ	$02
     14  0000 ????	       00 03	   THREE_CLOSE equ	$03
     15  0000 ????	       00 04	   TWO_WIDE   equ	$04
     16  0000 ????	       00 05	   DOUBLE_SIZE equ	$05
     17  0000 ????	       00 06	   THREE_MED  equ	$06
     18  0000 ????	       00 07	   QUAD_SIZE  equ	$07
     19  0000 ????
     20  0000 ????						; NUSIZx missile size
     21  0000 ????	       00 00	   MSL_SIZE_1 equ	$00
     22  0000 ????	       00 10	   MSL_SIZE_2 equ	$10
     23  0000 ????	       00 20	   MSL_SIZE_4 equ	$20
     24  0000 ????	       00 30	   MSL_SIZE_8 equ	$30
     25  0000 ????
     26  0000 ????						; REFPx values
     27  0000 ????	       00 08	   REFP_TRUE  equ	$08
     28  0000 ????	       00 00	   REFP_FALSE equ	$00
     29  0000 ????
     30  0000 ????						; CTRLPF values
     31  0000 ????	       00 01	   PF_REFLECT equ	$01
     32  0000 ????	       00 02	   PF_SCORE_MODE equ	$02
     33  0000 ????	       00 04	   PF_PRIORITY equ	$04
     34  0000 ????	       00 00	   BALL_SIZE_1 equ	$00
     35  0000 ????	       00 10	   BALL_SIZE_2 equ	$10
     36  0000 ????	       00 20	   BALL_SIZE_4 equ	$20
     37  0000 ????	       00 30	   BALL_SIZE_8 equ	$30
     38  0000 ????
     39  0000 ????						; VDELxx values
     40  0000 ????	       00 00	   VDEL_FALSE equ	#0
     41  0000 ????	       00 01	   VDEL_TRUE  equ	#1
     42  0000 ????
     43  0000 ????
     44  0000 ????
     45  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     46  0000 ????						; Program Equates
     47  0000 ????						;
     48  0000 ????						; Equates for constant program values.
     49  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     50  0000 ????
     51  0000 ????						; number of scanlines in vertical blank and overscan
     52  0000 ????	       00 25	   VBLANK_SCANLINES equ	#37
     53  0000 ????	       00 1d	   OVERSCAN_SCANLINES equ	#29
     54  0000 ????
     55  0000 ????						; converted values to store to TIM64T
     56  0000 ????	       00 2d	   VBLANK_TIMER equ	[[VBLANK_SCANLINES + 1] * 76 + 13] / 64
     57  0000 ????	       00 23	   OVERSCAN_TIMER equ	[[OVERSCAN_SCANLINES + 1] * 76 + 13] / 64
     58  0000 ????
     59  0000 ????						; colors
     60  0000 ????	       00 40	   COL_SCORE  equ	$40
     61  0000 ????	       00 4c	   COL_SCOREBOARD equ	$4C
     62  0000 ????	       00 90	   COL_BACKGROUND equ	$90
     63  0000 ????	       00 90	   COL_LINES  equ	COL_BACKGROUND
     64  0000 ????	       00 06	   COL_CAT_FACE equ	$06
     65  0000 ????
     66  0000 ????						; luminosity masks, which can be added to any dark color to set the luminosity
     67  0000 ????	       00 00	   LUM_0      equ	$00
     68  0000 ????	       00 02	   LUM_2      equ	$02
     69  0000 ????	       00 04	   LUM_4      equ	$04
     70  0000 ????	       00 06	   LUM_6      equ	$06
     71  0000 ????	       00 08	   LUM_8      equ	$08
     72  0000 ????	       00 0a	   LUM_A      equ	$0A
     73  0000 ????	       00 0c	   LUM_C      equ	$0C
     74  0000 ????	       00 0e	   LUM_E      equ	$0E
------- FILE main.asm
------- FILE headers/RamVariables.h LEVEL 2 PASS 2
      0  0000 ????				      include	headers/RamVariables.h
      1  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  0000 ????						; Ram Variables
      3  0000 ????						;
      4  0000 ????						; Define labels for RAM locations to be used as variables
      5  0000 ????						; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  0000 ????
      7 U009a ????				      SEG.U	VARS
      8 U0080					      ORG	$80
      9 U0080
     10 U0080				   RamStart
     11 U0080
     12 U0080		       00	   Frame      ds	1	; Current frame
     13 U0081
     14 U0081		       00	   ThrobFrame ds	1	; offset for line throb animation frame
     15 U0082
     16 U0082		       00 00 00    BCDScore   ds	3	; 3-byte array for score value which will be stored as a
     17 U0085							; BCD encoded 6-digit number and used to control the
     18 U0085							; 6-digit score display
     19 U0085
     20 U0085		       00 00	   BCDScoreAdd ds	2	; 2-byte array for the value to be added to the score
     21 U0087							; on the next frame (max of 9,999)
     22 U0087
     23 U0087		       00	   BCDLevel   ds	1	; value for the current level which will be stored as a
     24 U0088							; BCD encoded 2-digit number and used to control the
     25 U0088							; level counter display
     26 U0088
     27 U0088		       00	   ScoreColor ds	1	; color of the score text and scoreboard
     28 U0089
     29 U0089		       00	   Progress   ds	1	; value for the level progress, which can be
     30 U008a							; from 0 to 30 and will be used to draw the progress bar
     31 U008a
     32 U008a		       00 00 00 00*ProgressBar ds	5	; array of the 5 values to be written to the playfield
     33 U008f							; registers when drawing the progress bar
     34 U008f
     35 U008f		       00	   PgBarColor ds	1	; color for the full part of the progress bar
     36 U0090
     37 U0090		       00	   Health     ds	1	; amount of health
     38 U0091							; 0=full 8=medium 16=low 24=empty
     39 U0091
     40 U0091		       00 00	   HthGfxLPtr ds	2	; pointer for the left half of the health graphics
     41 U0093		       00 00	   HthGfxRPtr ds	2	; pointer for the right half of the health graphics
     42 U0095
     43 U0095		       00	   CatPosY    ds	1	; number of scanlines to skip before drawing cat
     44 U0096
     45 U0096		       00	   PreCatRows ds	1	; number of rows to draw before the two "cat" rows
     46 U0097		       00	   PostCatRows ds	1	; number of rows to draw after the two "cat" rows
     47 U0098
     48 U0098							; 26 of 81 bytes used
     49 U0098
     50 U0098							; temporary variables (can be shared with stack space)
     51 U0098		       00	   Temp       ds	1
     52 U0099		       00	   TempLoop   ds	1
     53 U009a
     54 U009a							; last 49 bytes are used for stack space
------- FILE main.asm
     33 U009a
     34 U009a
     35 U009a							; Ensure that the code is placed in the proper place in the binary
     36  10000 ????				       SEG	CODE
     37  f000					      ORG	$F000	; 4K ROM
     38  f000
     39  f000
     40  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     41  f000							; Full System Clear
     42  f000							;
     43  f000							; Clear all system registers and RAM at startup
     44  f000							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     45  f000
     46  f000				   SystemClear
     47  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     49  f00b
     50  f00b
     51  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  f00b							; Game Logic
     53  f00b							;
     54  f00b							; Do the overscan, vertycal sync, and vertical blanking,
     55  f00b							; along with any game logic
     56  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     57  f00b
------- FILE code/GameLogic.asm LEVEL 2 PASS 2
      0  f00b					      include	code/GameLogic.asm
      1  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f00b							; Overscan
      3  f00b							;
      4  f00b							; Start the overscan timer and do game logic
      5  f00b							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f00b
      7  f00b				   Overscan
      8  f00b
      9  f00b		       a9 23		      lda	#OVERSCAN_TIMER
     10  f00d		       85 02		      sta	WSYNC
     11  f00f		       8d 96 02 	      sta	TIM64T	; 03
     12  f012
     13  f012
     14  f012
     15  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f012							; Update Score
     17  f012							;
     18  f012							; Add to the score
     19  f012							;
     20  f012							; Takes 45 cycles to complete
     21  f012							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     22  f012
     23  f012		       a5 86		      lda	BCDScoreAdd+1	; 2
     24  f014		       a6 85		      ldx	BCDScoreAdd	; 2
     25  f016
     26  f016		       f8		      sed		; 2 - enable BCD mode
     27  f017
     28  f017		       18		      clc		; 2
     29  f018		       85 98		      sta	Temp	; 3
     30  f01a		       a5 84		      lda	BCDScore+2	; 2
     31  f01c		       65 98		      adc	Temp	; 3
     32  f01e		       85 84		      sta	BCDScore+2	; 3
     33  f020		       86 98		      stx	Temp	; 3
     34  f022		       a5 83		      lda	BCDScore+1	; 2
     35  f024		       65 98		      adc	Temp	; 3
     36  f026		       85 83		      sta	BCDScore+1	; 3
     37  f028		       a9 00		      lda	#$00	; 2
     38  f02a		       85 98		      sta	Temp	; 3
     39  f02c		       a5 82		      lda	BCDScore+0	; 2
     40  f02e		       65 98		      adc	Temp	; 3
     41  f030		       85 82		      sta	BCDScore+0	; 3
     42  f032
     43  f032		       d8		      cld		; 2 - disable BCD mode
     44  f033
     45  f033
     46  f033
     47  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     48  f033							; Finish Overscan
     49  f033							;
     50  f033							; Loop until the end of overscan
     51  f033							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     52  f033
     53  f033				   OverscanTimerLoop
     54  f033		       ad 84 02 	      lda	INTIM
     55  f036		       d0 fb		      bne	OverscanTimerLoop
     56  f038
     57  f038
     58  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     59  f038							; Vertical Sync
     60  f038							;
     61  f038							; Do the vertical sync and start the vertical blanking timer
     62  f038							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     63  f038
     64  f038		       a9 02		      lda	#2
     65  f03a		       85 02		      sta	WSYNC
     66  f03c		       85 00		      sta	VSYNC	; enable VSYNC
     67  f03e
     68  f03e		       85 02		      sta	WSYNC
     69  f040		       a9 2d		      lda	#VBLANK_TIMER
     70  f042		       85 02		      sta	WSYNC
     71  f044		       8d 96 02 	      sta	TIM64T	; start VBLANK timer
     72  f047
     73  f047		       85 2b		      sta	HMCLR	; clear any HMOVE offsets
     74  f049
     75  f049		       a9 00		      lda	#0
     76  f04b		       85 02		      sta	WSYNC
     77  f04d		       85 00		      sta	VSYNC	; disable VSYNC
     78  f04f
     79  f04f
     80  f04f
     81  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     82  f04f							; Vertical Blank
     83  f04f							;
     84  f04f							; Do the vertical blanking and game logic
     85  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     86  f04f
     87  f04f
     88  f04f
     89  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     90  f04f							; Prepare Scoreboard and Level Progress Displays
     91  f04f							;
     92  f04f							; Set object positions for scoreboard kernel.
     93  f04f							; Also load the values for the playfield registers in RAM
     94  f04f							; for drawing the level progress bar.
     95  f04f							;
     96  f04f							; Takes 193 cycles (2 full scanlines + 41 cycles)
     97  f04f							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     98  f04f
     99  f04f		       a9 b0		      lda	#$B0	; 05 - set HMOVE offsets for both player objects
    100  f051		       85 20		      sta	HMP0	; 08
    101  f053		       a9 c0		      lda	#$C0	; 10
    102  f055		       85 21		      sta	HMP1	; 13
    103  f057		       a9 80		      lda	#$80	; 15 - set HMOVE offsets for ball and missile0
    104  f059		       85 24		      sta	HMBL	; 18
    105  f05b		       85 22		      sta	HMM0	; 21
    106  f05d
      0  f05d					      SLEEP	3	; 24
      1  f05d				   .CYCLES    SET	3
      2  f05d
      3  f05d				  -	      IF	.CYCLES < 2
      4  f05d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f05d				  -	      ERR
      6  f05d					      ENDIF
      7  f05d
      8  f05d					      IF	.CYCLES & 1
      9  f05d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f05d		       04 00		      nop	0
     11  f05f				  -	      ELSE
     12  f05f				  -	      bit	VSYNC
     13  f05f					      ENDIF
     14  f05f				   .CYCLES    SET	.CYCLES - 3
     15  f05f					      ENDIF
     16  f05f
     17  f05f				  -	      REPEAT	.CYCLES / 2
     18  f05f				  -	      nop
     19  f05f					      REPEND
    108  f05f
    109  f05f		       85 10		      sta	RESP0	; 27 - set player positions
    110  f061		       85 11		      sta	RESP1	; 30
    111  f063
    112  f063		       a9 d0		      lda	#$D0	; 32 - set HMOVE offset for missile1
    113  f065		       85 23		      sta	HMM1	; 35
    114  f067
    115  f067							; reset all progress bar playfield graphics RAM (and use 21 cycles)
    116  f067		       a9 e0		      lda	#%11100000	; 37
    117  f069		       85 8a		      sta	ProgressBar+0	; 40
    118  f06b		       a9 ff		      lda	#%11111111	; 42
    119  f06d		       85 8b		      sta	ProgressBar+1	; 45
    120  f06f		       85 8c		      sta	ProgressBar+2	; 48
    121  f071		       85 8d		      sta	ProgressBar+3	; 51
    122  f073		       a9 fe		      lda	#%11111110	; 53
    123  f075		       85 8e		      sta	ProgressBar+4	; 56
    124  f077
    125  f077		       85 14		      sta	RESBL	; 59 - set ball and missile positions
    126  f079		       85 12		      sta	RESM0	; 62
    127  f07b		       85 13		      sta	RESM1	; 65
    128  f07d
    129  f07d		       85 02		      sta	WSYNC
    130  f07f		       85 2a		      sta	HMOVE
    131  f081
    132  f081							; Load RAM for progress bar display (takes 28-53 cycles)
    133  f081		       a5 89		      lda	Progress	; 3 - get amount of progress
    134  f083
    135  f083							; The level progress bar uses the following playfield bits:
    136  f083							; (note that PF0 and PF2 are NOT reversed in this diagram)
    137  f083							;
    138  f083							; *PF0*  *PF1*    *PF2*  *PF0*  *PF1*
    139  f083							; ^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^ ^^^^^^^^	X = bit used
    140  f083							; oXXX XXXXXXXX XXXXXXXX XXXX XXXXXXXo	o = bit not used
    141  f083							;
    142  f083							; When the progress bar is empty, every bit labeled "X" above should be
    143  f083							; set (1), and when it is full, every "X" bit should be cleared (0).
    144  f083							; The bits labeled "o" must ALWAYS be cleared.
    145  f083							;
    146  f083							; The leftmost playfield value (the 1st PF0) will be calculated first,
    147  f083							; and then each playfield value to the right until the 2nd PF1
    148  f083							; will be calculated.
    149  f083
    150  f083		       a0 00		      ldy	#%00000000	; 2 - value to store when a playfield byte is full
    151  f085
    152  f085		       38		      sec		; 2
    153  f086		       e9 03		      sbc	#3	; 3 - 3 PF bits in 1st PF0 are used, so subtract 3
    154  f088		       30 1e		      bmi	.Underflow1	; 2/3
    155  f08a		       84 8a		      sty	ProgressBar	; 3 - this playfield byte is full
    156  f08c
    157  f08c		       e9 08		      sbc	#8	; 3 - 8 PF bits in 1st PF1 are used, so subtract 8
    158  f08e		       30 23		      bmi	.Underflow2	; 2/3
    159  f090		       84 8b		      sty	ProgressBar+1	; 3 - this playfield byte is full
    160  f092
    161  f092		       e9 08		      sbc	#8	; 3 - 8 PF bits in PF2 are used, so subtract 8
    162  f094		       30 28		      bmi	.Underflow3	; 2/3
    163  f096		       84 8c		      sty	ProgressBar+2	; 3 - this playfield byte is full
    164  f098
    165  f098		       e9 04		      sbc	#4	; 3 - 4 PF bits in 2nd PF1 are used, so subtract 4
    166  f09a		       30 2d		      bmi	.Underflow4	; 2/3
    167  f09c		       84 8d		      sty	ProgressBar+3	; 3 - this playfield byte is full
    168  f09e
    169  f09e		       aa		      tax		; 2
    170  f09f		       bd 0e f6 	      lda	PgBarGfx+1,x	; 4 - load from normal set of playfield graphics
    171  f0a2		       0a		      asl		; 2
    172  f0a3		       85 8e		      sta	ProgressBar+4	; 3
    173  f0a5		       4c d1 f0 	      jmp	.Finish	; 3
    174  f0a8
    175  f0a8				   .Underflow1		; for 1st PF0
    176  f0a8		       69 03		      adc	#3	; 3 - add back the 3
    177  f0aa		       aa		      tax		; 2
    178  f0ab		       bd 1b f6 	      lda	PgBarGfxR+5,x	; 4 - load from reversed set of playfield graphics
    179  f0ae		       85 8a		      sta	ProgressBar	; 3
    180  f0b0		       4c d1 f0 	      jmp	.Finish	; 3
    181  f0b3
    182  f0b3				   .Underflow2		; for 1st PF1
    183  f0b3		       69 08		      adc	#8	; 3 - add back the 8
    184  f0b5		       aa		      tax		; 2
    185  f0b6		       bd 0d f6 	      lda	PgBarGfx,x	; 4 - load from normal set of playfield graphics
    186  f0b9		       85 8b		      sta	ProgressBar+1	; 3
    187  f0bb		       4c d1 f0 	      jmp	.Finish	; 3
    188  f0be
    189  f0be				   .Underflow3		; for PF2
    190  f0be		       69 08		      adc	#8	; 3 - add back the 8
    191  f0c0		       aa		      tax		; 2
    192  f0c1		       bd 16 f6 	      lda	PgBarGfxR,x	; 4 - load from reversed set of playfield graphics
    193  f0c4		       85 8c		      sta	ProgressBar+2	; 3
    194  f0c6		       4c d1 f0 	      jmp	.Finish	; 3
    195  f0c9
    196  f0c9				   .Underflow4		; for 2nd PF0
    197  f0c9		       69 04		      adc	#4	; 3 - add back the 4
    198  f0cb		       aa		      tax		; 2
    199  f0cc		       bd 1a f6 	      lda	PgBarGfxR+4,x	; 4 - load from reversed set of playfield graphics
    200  f0cf		       85 8d		      sta	ProgressBar+3	; 3
    201  f0d1				   .Finish
    202  f0d1
    203  f0d1		       85 2b		      sta	HMCLR	; 56
    204  f0d3		       a9 b0		      lda	#$B0	; 58 - another HMOVE is neccesary for the ball
    205  f0d5		       85 24		      sta	HMBL	; 61
    206  f0d7		       e6 80		      inc	Frame	; 66 increment the frame number
    207  f0d9
    208  f0d9		       85 02		      sta	WSYNC
    209  f0db		       85 2a		      sta	HMOVE
    210  f0dd
    211  f0dd							; Prepare the NUSIZx, VDELPx and COLUPx values for the 6-digit score
    212  f0dd		       a9 13		      lda	#THREE_CLOSE | MSL_SIZE_2	; 2
    213  f0df		       85 04		      sta	NUSIZ0	; 3
    214  f0e1		       85 05		      sta	NUSIZ1	; 3
    215  f0e3
    216  f0e3		       a9 01		      lda	#VDEL_TRUE	; 2
    217  f0e5		       85 25		      sta	VDELP0	; 3
    218  f0e7		       85 26		      sta	VDELP1	; 3
    219  f0e9
    220  f0e9		       a9 40		      lda	#COL_SCORE	; 2
    221  f0eb		       85 06		      sta	COLUP0	; 3
    222  f0ed		       85 07		      sta	COLUP1	; 3
    223  f0ef		       85 08		      sta	COLUPF	; 3
    224  f0f1		       85 09		      sta	COLUBK	; 3
    225  f0f3		       85 88		      sta	ScoreColor	; 3
    226  f0f5		       a9 56		      lda	#$56	; 2
    227  f0f7		       85 8f		      sta	PgBarColor	; 3
    228  f0f9
    229  f0f9
    230  f0f9
    231  f0f9		       a9 00		      lda	#$00
    232  f0fb		       85 85		      sta	BCDScoreAdd
    233  f0fd		       a9 00		      lda	#$00
    234  f0ff		       85 86		      sta	BCDScoreAdd+1
    235  f101
    236  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    237  f101							; Prepare Health Display
    238  f101							;
    239  f101							; Set the pointers for the health graphics
    240  f101							;
    241  f101							; Takes 28 cycles to complete
    242  f101							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    243  f101
    244  f101		       18		      clc		; 2
    245  f102
    246  f102		       a9 bd		      lda	#<HealthLeftGfx	; 2
    247  f104		       65 90		      adc	Health	; 3
    248  f106		       85 91		      sta	HthGfxLPtr	; 3
    249  f108		       a9 f5		      lda	#>HealthLeftGfx	; 2
    250  f10a		       85 92		      sta	HthGfxLPtr+1	; 3
    251  f10c
    252  f10c		       a9 dd		      lda	#<HealthRightGfx	; 2
    253  f10e		       65 90		      adc	Health	; 3
    254  f110		       85 93		      sta	HthGfxRPtr	; 3
    255  f112		       a9 f5		      lda	#>HealthRightGfx	; 2
    256  f114		       85 94		      sta	HthGfxRPtr+1	; 3
    257  f116
    258  f116
    259  f116
    260  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    261  f116							; Prepare for Throbbing Lines
    262  f116							;
    263  f116							; Set the offset value for the throbbing line graphics
    264  f116							;
    265  f116							; Takes 20 cycles to complete
    266  f116							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    267  f116
    268  f116		       a5 80		      lda	Frame	; 3 - get the current frame number
    269  f118		       29 1c		      and	#%00011100	; 2 - change animation frame every 4 game frames
    270  f11a		       4a		      lsr		; 2
    271  f11b		       4a		      lsr		; 2 - shift to get a value from 0-7
    272  f11c		       85 98		      sta	Temp	; 3
    273  f11e		       0a		      asl		; 2 - carry flag will always be clear after this
    274  f11f		       65 98		      adc	Temp	; 3 - multiply by 3
    275  f121		       85 81		      sta	ThrobFrame	; 3 - store the gfx offset
    276  f123
    277  f123
    278  f123
    279  f123							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    280  f123							; Load Scoreboard
    281  f123							;
    282  f123							; Get graphics data for the scoreboard and push it onto the stack
    283  f123							;
    284  f123							; Takes 1245 cycles to complete (16 full scanlines + 29 cycles)
    285  f123							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    286  f123
    287  f123					      SUBROUTINE
    288  f123
    289  f123		       a9 06		      lda	#6	; 2 - start with bottom of digit graphics data
    290  f125		       85 99		      sta	TempLoop	; 3
    291  f127
    292  f127				   .Loop
    293  f127
    294  f127							; push level counter graphics data
    295  f127		       a5 87		      lda	BCDLevel	; 3 - get level counter
    296  f129		       29 0f		      and	#$0F	; 2 - isolate left nybble/digit
    297  f12b		       0a		      asl		; 2
    298  f12c		       0a		      asl		; 2
    299  f12d		       0a		      asl		; 2 - digit value * 8
    300  f12e							; no need to clc, carry will always be clear
    301  f12e		       65 99		      adc	TempLoop	; 3 - add offset for current loop iteration
    302  f130		       a8		      tay		; 2
    303  f131		       b9 50 f5 	      lda	LevelGfx,y	; 4
    304  f134		       48		      pha		; 3
    305  f135
    306  f135		       a2 02		      ldx	#2	; 2 - start with rightmost BCD score value
    307  f137							; (we must push to stack in reverse of drawing order)
    308  f137				   .DigitLoop
    309  f137
    310  f137							; right nybble
    311  f137		       b5 82		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    312  f139		       29 0f		      and	#$0F	; 2 - isolate right nybble/digit
    313  f13b		       0a		      asl		; 2
    314  f13c		       0a		      asl		; 2
    315  f13d		       0a		      asl		; 2 - digit value * 8
    316  f13e							; no need to clc, carry will always be clear
    317  f13e		       65 99		      adc	TempLoop	; 3 - add offset for current loop iteration
    318  f140		       a8		      tay		; 2
    319  f141		       b9 00 f5 	      lda	ScoreGfx,y	; 4
    320  f144		       48		      pha		; 3
    321  f145
    322  f145							; left nybble
    323  f145		       b5 82		      lda	BCDScore,x	; 4 - get current BCD value (contains 2 digits)
    324  f147		       29 f0		      and	#$F0	; 2 - isolate left nybble/digit
    325  f149		       4a		      lsr		; 2 - digit value * 8
    326  f14a							; no need to clc, carry will always be clear
    327  f14a		       65 99		      adc	TempLoop	; 3 - add offset for current loop iteration
    328  f14c		       a8		      tay		; 2
    329  f14d		       b9 00 f5 	      lda	ScoreGfx,y	; 4
    330  f150		       48		      pha		; 3
    331  f151
    332  f151		       ca		      dex		; 2
    333  f152		       10 e3		      bpl	.DigitLoop	; 2/3
    334  f154
    335  f154		       c6 99		      dec	TempLoop	; 5
    336  f156		       10 cf		      bpl	.Loop	; 2/3
    337  f158
    338  f158
    339  f158
    340  f158							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    341  f158							; Finish Vertical Blanking
    342  f158							;
    343  f158							; Loop until the end of vertical blanking
    344  f158							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    345  f158
    346  f158				   VblankTimerLoop
    347  f158		       ad 84 02 	      lda	INTIM
    348  f15b		       d0 fb		      bne	VblankTimerLoop
------- FILE main.asm
     59  f15d
     60  f15d
     61  f15d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     62  f15d							; Kernel
     63  f15d							;
     64  f15d							; Draw the screen
     65  f15d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     66  f15d
------- FILE code/Kernel.asm LEVEL 2 PASS 2
      0  f15d					      include	code/Kernel.asm
      1  f15d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f15d							; Kernel
      3  f15d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f15d
      5  f15d		       a9 00		      lda	#0
      6  f15f		       85 02		      sta	WSYNC
      7  f161		       85 01		      sta	VBLANK	; enable display
      8  f163
      9  f163							; Include kernel routines
------- FILE code/ScoreboardKernel.asm LEVEL 3 PASS 2
      0  f163					      include	code/ScoreboardKernel.asm
      1  f163							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f163							; Scoreboard Display
      3  f163							;
      4  f163							; Draw the 6-digit score and level counter.
      5  f163							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      6  f163
      7  f163					      SUBROUTINE
      8  f163
      9  f163		       a9 15		      lda	#PF_REFLECT | PF_PRIORITY | BALL_SIZE_2
     10  f165		       85 0a		      sta	CTRLPF
     11  f167
     12  f167		       a9 ff		      lda	#$FF
     13  f169		       85 0d		      sta	PF0
     14  f16b
     15  f16b		       85 1b		      sta	GRP0	; This forces a collision between P0 and PF, setting bit-7
     16  f16d		       85 1c		      sta	GRP1	; in CXP0FB, which will be used to end the scoreboard
     17  f16f		       85 0e		      sta	PF1	; display kernel loop.
     18  f171
     19  f171		       a0 05		      ldy	#5
     20  f173				   ScoreTop		; draw border above scoreboard
     21  f173		       85 02		      sta	WSYNC
     22  f175
     23  f175		       a9 00		      lda	#0
     24  f177		       85 1b		      sta	GRP0
     25  f179		       85 1c		      sta	GRP1
     26  f17b
     27  f17b		       88		      dey
     28  f17c		       d0 f5		      bne	ScoreTop
     29  f17e
     30  f17e		       a9 80		      lda	#$80
     31  f180		       85 0e		      sta	PF1
     32  f182
     33  f182		       a9 4c		      lda	#COL_SCOREBOARD
     34  f184		       85 09		      sta	COLUBK
     35  f186
     36  f186		       85 02		      sta	WSYNC
     37  f188		       85 02		      sta	WSYNC
     38  f18a
      0  f18a					      SLEEP	48
      1  f18a				   .CYCLES    SET	48
      2  f18a
      3  f18a				  -	      IF	.CYCLES < 2
      4  f18a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f18a				  -	      ERR
      6  f18a					      ENDIF
      7  f18a
      8  f18a				  -	      IF	.CYCLES & 1
      9  f18a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f18a				  -	      nop	0
     11  f18a				  -	      ELSE
     12  f18a				  -	      bit	VSYNC
     13  f18a				  -	      ENDIF
     14  f18a				  -.CYCLES    SET	.CYCLES - 3
     15  f18a					      ENDIF
     16  f18a
     17  f18a					      REPEAT	.CYCLES / 2
     18  f18a		       ea		      nop
     17  f18a					      REPEND
     18  f18b		       ea		      nop
     17  f18b					      REPEND
     18  f18c		       ea		      nop
     17  f18c					      REPEND
     18  f18d		       ea		      nop
     17  f18d					      REPEND
     18  f18e		       ea		      nop
     17  f18e					      REPEND
     18  f18f		       ea		      nop
     17  f18f					      REPEND
     18  f190		       ea		      nop
     17  f190					      REPEND
     18  f191		       ea		      nop
     17  f191					      REPEND
     18  f192		       ea		      nop
     17  f192					      REPEND
     18  f193		       ea		      nop
     17  f193					      REPEND
     18  f194		       ea		      nop
     17  f194					      REPEND
     18  f195		       ea		      nop
     17  f195					      REPEND
     18  f196		       ea		      nop
     17  f196					      REPEND
     18  f197		       ea		      nop
     17  f197					      REPEND
     18  f198		       ea		      nop
     17  f198					      REPEND
     18  f199		       ea		      nop
     17  f199					      REPEND
     18  f19a		       ea		      nop
     17  f19a					      REPEND
     18  f19b		       ea		      nop
     17  f19b					      REPEND
     18  f19c		       ea		      nop
     17  f19c					      REPEND
     18  f19d		       ea		      nop
     17  f19d					      REPEND
     18  f19e		       ea		      nop
     17  f19e					      REPEND
     18  f19f		       ea		      nop
     17  f19f					      REPEND
     18  f1a0		       ea		      nop
     17  f1a0					      REPEND
     18  f1a1		       ea		      nop
     19  f1a2					      REPEND
     40  f1a2
     41  f1a2		       a5 87		      lda	BCDLevel
     42  f1a4		       4a		      lsr
     43  f1a5		       4a		      lsr
     44  f1a6		       4a		      lsr
     45  f1a7		       85 1f		      sta	ENABL	; draw ball if bit-4 is set (if level > 9)
     46  f1a9
     47  f1a9		       4c 1a f2 	      jmp	.EntrancePoint
     48  f1ac
     49  f200		       00 00 00 00*	      ALIGN	$100
     50  f200
     51  f200				   .ScoreDigitLoop
     52  f200
     53  f200							; A contains gfx for digit3
     54  f200		       85 1b		      sta	GRP0	; 14	digit3 -> [GRP0]	digit2 -> GRP1
     55  f202
     56  f202							; gfx for the first 3 digits are now pre-loaded into the GRPx registers
     57  f202
     58  f202		       68		      pla		; 18	pull gfx for digit4...
     59  f203		       a8		      tay		; 20	...and store in Y
     60  f204		       68		      pla		; 24	pull gfx data for digit5...
     61  f205		       aa		      tax		; 26	...and store in X
     62  f206		       68		      pla		; 30	pull gfx data for digit6 to A
     63  f207
     64  f207		       84 1c		      sty	GRP1	; 33	digit4 -> [GRP1]	digit3 -> GRP0
     65  f209		       86 1b		      stx	GRP0	; 36	digit5 -> [GRP0]	digit4 -> GRP1
     66  f20b		       85 1c		      sta	GRP1	; 39	digit6 -> [GRP1]	digit5 -> GRP0
     67  f20d		       85 1b		      sta	GRP0	; 42	digit6 -> [GRP0]	digit6 -> GRP1
     68  f20f
     69  f20f		       68		      pla		; 46	pull gfx data for level counter
     70  f210		       85 1d		      sta	ENAM0	; 49	use bit 1 of data for ENAM0
     71  f212		       2a		      rol		; 51
     72  f213		       85 1e		      sta	ENAM1	; 54	use bit 0 of data for ENAM1
     73  f215		       6a		      ror		; 56
     74  f216		       6a		      ror		; 58
     75  f217		       6a		      ror		; 60
     76  f218		       85 04		      sta	NUSIZ0	; 63	use bits 2-7 of data (re-aligned) for NUSIZ0
     77  f21a
     78  f21a				   .EntrancePoint
     79  f21a
     80  f21a		       68		      pla		; 67	pull gfx for digit1
     81  f21b		       85 1b		      sta	GRP0	; 70	digit1 -> [GRP0]
     82  f21d
     83  f21d		       68		      pla		; 74	pull gfx for digit2
     84  f21e		       8d 1c 00 	      sta.w	GRP1	; 02	digit2 -> [GRP1]	digit1 -> GRP0
     85  f221							;	(use an extra cycle for timing reasons)
     86  f221
     87  f221		       68		      pla		; 06	pull gfx for digit3
     88  f222
     89  f222							; On the final iteration of the loop, the stack will have wrapped
     90  f222							; and pulled from location $02 at this point.
     91  f222							; This happens to be the collision register CXP0FB.
     92  f222							; Bit-7 will always be set in this register,
     93  f222							; and bit-7 is always clear in the score graphics,
     94  f222							; so checking bit-7 of the data pulled is all that you need
     95  f222							; to determine when to terminate the loop.
     96  f222
     97  f222		       aa		      tax		; 08	set flags according to pulled data
     98  f223
     99  f223		       10 db		      bpl	.ScoreDigitLoop	; 10/11	check negative flag to see if the loop is over
    100  f225
    101  f225		       a9 00		      lda	#0	; 12
    102  f227		       85 1b		      sta	GRP0	; 15 - disable player graphics
    103  f229		       85 1c		      sta	GRP1	; 18
    104  f22b		       85 25		      sta	VDELP0	; 21 - disable player vertical delays
    105  f22d		       85 26		      sta	VDELP1	; 24
    106  f22f		       85 1f		      sta	ENABL	; 27 - disable ball
    107  f231		       85 1d		      sta	ENAM0	; 30 - disable missiles
    108  f233		       85 1e		      sta	ENAM1	; 33
    109  f235
    110  f235		       a2 ff		      ldx	#$FF	; 35
    111  f237		       9a		      txs		; 37 - reset the stack pointer
------- FILE code/Kernel.asm
------- FILE code/GameplayKernel.asm LEVEL 3 PASS 2
      0  f238					      include	code/GameplayKernel.asm
      1  f238
      2  f238		       85 02		      sta	WSYNC
      3  f23a		       85 02		      sta	WSYNC
      4  f23c		       85 02		      sta	WSYNC
      5  f23e		       85 02		      sta	WSYNC
      6  f240		       85 02		      sta	WSYNC
      7  f242
      8  f242		       a9 00		      lda	#$00
      9  f244							;sta PF0
     10  f244		       85 0e		      sta	PF1
     11  f246
     12  f246		       a2 06		      ldx	#6
     13  f248				   KernelLoopA		; draw the gameplay display
     14  f248
     15  f248
     16  f248
     17  f248		       a9 90		      lda	#COL_BACKGROUND
     18  f24a		       85 09		      sta	COLUBK
     19  f24c
     20  f24c		       a0 0e		      ldy	#14
     21  f24e				   KernelLoopC		; draw a row
     22  f24e		       85 02		      sta	WSYNC
     23  f250
     24  f250		       88		      dey
     25  f251		       d0 fb		      bne	KernelLoopC
     26  f253
     27  f253							; draw a row seperator
     28  f253
     29  f253
     30  f253		       a4 81		      ldy	ThrobFrame
     31  f255
     32  f255		       b9 a0 f5 	      lda	#LineThrobGfx,y
     33  f258		       85 09		      sta	COLUBK
     34  f25a		       85 02		      sta	WSYNC
     35  f25c
     36  f25c		       b9 a1 f5 	      lda	#LineThrobGfx+1,y
     37  f25f		       85 09		      sta	COLUBK
     38  f261		       85 02		      sta	WSYNC
     39  f263
     40  f263		       b9 a2 f5 	      lda	#LineThrobGfx+2,y
     41  f266		       85 09		      sta	COLUBK
     42  f268		       85 02		      sta	WSYNC
     43  f26a
     44  f26a		       b9 a1 f5 	      lda	#LineThrobGfx+1,y
     45  f26d		       85 09		      sta	COLUBK
     46  f26f		       85 02		      sta	WSYNC
     47  f271
     48  f271		       b9 a0 f5 	      lda	#LineThrobGfx,y
     49  f274		       85 09		      sta	COLUBK
     50  f276		       85 02		      sta	WSYNC
     51  f278
     52  f278
     53  f278		       ca		      dex
     54  f279		       d0 cd		      bne	KernelLoopA
     55  f27b
     56  f27b
     57  f27b		       a9 90		      lda	#COL_BACKGROUND
     58  f27d		       85 09		      sta	COLUBK
     59  f27f
     60  f27f		       85 02		      sta	WSYNC
     61  f281		       85 02		      sta	WSYNC
     62  f283		       85 02		      sta	WSYNC
     63  f285		       85 02		      sta	WSYNC
     64  f287		       85 02		      sta	WSYNC
     65  f289		       85 02		      sta	WSYNC
     66  f28b		       85 02		      sta	WSYNC
     67  f28d		       85 02		      sta	WSYNC
     68  f28f		       85 02		      sta	WSYNC
     69  f291		       85 02		      sta	WSYNC
     70  f293		       85 02		      sta	WSYNC
     71  f295		       85 02		      sta	WSYNC
     72  f297		       85 02		      sta	WSYNC
     73  f299		       85 02		      sta	WSYNC
------- FILE code/Kernel.asm
------- FILE code/ProgressHealthKernel.asm LEVEL 3 PASS 2
      0  f29b					      include	code/ProgressHealthKernel.asm
      1  f29b		       a9 40		      lda	#COL_SCORE
      2  f29d		       85 09		      sta	COLUBK
      3  f29f		       a9 06		      lda	#COL_CAT_FACE
      4  f2a1		       85 08		      sta	COLUPF
      5  f2a3		       a9 00		      lda	#0
      6  f2a5		       85 0a		      sta	CTRLPF
      7  f2a7
      8  f2a7		       85 02		      sta	WSYNC
      9  f2a9
      0  f2a9					      SLEEP	53	; 53
      1  f2a9				   .CYCLES    SET	53
      2  f2a9
      3  f2a9				  -	      IF	.CYCLES < 2
      4  f2a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a9				  -	      ERR
      6  f2a9					      ENDIF
      7  f2a9
      8  f2a9					      IF	.CYCLES & 1
      9  f2a9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a9		       04 00		      nop	0
     11  f2ab				  -	      ELSE
     12  f2ab				  -	      bit	VSYNC
     13  f2ab					      ENDIF
     14  f2ab				   .CYCLES    SET	.CYCLES - 3
     15  f2ab					      ENDIF
     16  f2ab
     17  f2ab					      REPEAT	.CYCLES / 2
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     17  f2c0					      REPEND
     18  f2c1		       ea		      nop
     17  f2c1					      REPEND
     18  f2c2		       ea		      nop
     17  f2c2					      REPEND
     18  f2c3		       ea		      nop
     19  f2c4					      REPEND
     11  f2c4
     12  f2c4		       a9 20		      lda	#$20	; 55
     13  f2c6		       85 20		      sta	HMP0	; 58
     14  f2c8		       a9 b0		      lda	#$B0	; 60
     15  f2ca		       85 21		      sta	HMP1	; 63
     16  f2cc
     17  f2cc		       85 10		      sta	RESP0	; 66
     18  f2ce		       85 11		      sta	RESP1	; 69
     19  f2d0
     20  f2d0		       a9 00		      lda	#$00	; 71
     21  f2d2
     22  f2d2		       85 2a		      sta	HMOVE	; 74
     23  f2d4
     24  f2d4		       85 06		      sta	COLUP0
     25  f2d6		       85 07		      sta	COLUP1
     26  f2d8
     27  f2d8		       a9 05		      lda	#DOUBLE_SIZE	; 08
     28  f2da		       85 04		      sta	NUSIZ0
     29  f2dc		       85 05		      sta	NUSIZ1
     30  f2de
     31  f2de		       a9 08		      lda	#REFP_TRUE
     32  f2e0		       85 0c		      sta	REFP1
     33  f2e2
     34  f2e2					      SUBROUTINE
     35  f2e2
     36  f2e2		       a0 04		      ldy	#4
     37  f2e4		       85 02		      sta	WSYNC
     38  f2e6
     39  f2e6				   .HealthTop		; draw top of health
     40  f2e6
     41  f2e6		       a2 03		      ldx	#3
     42  f2e8				   .Loop
     43  f2e8		       85 02		      sta	WSYNC
     44  f2ea
     45  f2ea		       b9 b8 f5 	      lda	HealthTopGfx,y	; 04
     46  f2ed		       85 1b		      sta	GRP0	; 07
     47  f2ef		       85 1c		      sta	GRP1	; 10
     48  f2f1		       a9 00		      lda	#$00	; 12
     49  f2f3		       85 0f		      sta	PF2	; 15
      0  f2f5					      SLEEP	26	; 37
      1  f2f5				   .CYCLES    SET	26
      2  f2f5
      3  f2f5				  -	      IF	.CYCLES < 2
      4  f2f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f5				  -	      ERR
      6  f2f5					      ENDIF
      7  f2f5
      8  f2f5				  -	      IF	.CYCLES & 1
      9  f2f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f5				  -	      nop	0
     11  f2f5				  -	      ELSE
     12  f2f5				  -	      bit	VSYNC
     13  f2f5				  -	      ENDIF
     14  f2f5				  -.CYCLES    SET	.CYCLES - 3
     15  f2f5					      ENDIF
     16  f2f5
     17  f2f5					      REPEAT	.CYCLES / 2
     18  f2f5		       ea		      nop
     17  f2f5					      REPEND
     18  f2f6		       ea		      nop
     17  f2f6					      REPEND
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     17  f2fa					      REPEND
     18  f2fb		       ea		      nop
     17  f2fb					      REPEND
     18  f2fc		       ea		      nop
     17  f2fc					      REPEND
     18  f2fd		       ea		      nop
     17  f2fd					      REPEND
     18  f2fe		       ea		      nop
     17  f2fe					      REPEND
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     19  f302					      REPEND
     51  f302		       b9 08 f6 	      lda	HealthBgGfx+8,y	; 41
     52  f305		       85 0f		      sta	PF2	; 44
     53  f307
     54  f307		       ca		      dex
     55  f308		       d0 de		      bne	.Loop
     56  f30a
     57  f30a		       88		      dey
     58  f30b		       10 d9		      bpl	.HealthTop
     59  f30d
     60  f30d
     61  f30d					      SUBROUTINE
     62  f30d
     63  f30d
     64  f30d		       a0 03		      ldy	#3
     65  f30f		       a2 03		      ldx	#3
     66  f311		       86 98		      stx	Temp
     67  f313
     68  f313		       4c 00 f4 	      jmp	.HealthMiddle
     69  f316
     70  f400		       00 00 00 00*	      ALIGN	$100	; align to page
     71  f400
     72  f400				   .HealthMiddle		; draw middle of health, with progress bar
     73  f400		       85 02		      sta	WSYNC
     74  f402				   .Loop
     75  f402		       a5 8a		      lda	ProgressBar+0	; 03 - get the 1st playfield register value
     76  f404		       85 0d		      sta	PF0	; 06 - for the progress bar and set it
     77  f406
     78  f406		       a5 8b		      lda	ProgressBar+1	; 09 - get the 2nd playfield register value
     79  f408		       85 0e		      sta	PF1	; 12 - for the progress bar and set it
     80  f40a
     81  f40a		       a5 8c		      lda	ProgressBar+2	; 15 - get the 3rd playfield register value
     82  f40c		       85 0f		      sta	PF2	; 18 - for the progress bar and set it
     83  f40e
     84  f40e		       a5 8f		      lda	PgBarColor	; 21 - get the progress bar color
     85  f410		       85 09		      sta	COLUBK	; 24 - and set it at cycle 24
     86  f412
     87  f412		       a5 8d		      lda	ProgressBar+3	; 27 - get the 4th playfield register value
     88  f414		       85 0d		      sta	PF0	; 30 - for the progress bar and set it
     89  f416
     90  f416		       b1 91		      lda	(HthGfxLPtr),y	; 35 - get/set the graphics
     91  f418		       85 1b		      sta	GRP0	; 38 - for the left half of health
     92  f41a		       b1 93		      lda	(HthGfxRPtr),y	; 43 - get/set the graphics
     93  f41c		       85 1c		      sta	GRP1	; 46 - for the right half of health
     94  f41e
     95  f41e		       a5 8e		      lda	ProgressBar+4	; 49 - get the 5th playfield register value
     96  f420		       85 0e		      sta	PF1	; 52 - for the progress bar and set it
     97  f422		       a9 7f		      lda	#%01111111	; 54 - get the 6th playfield register value
     98  f424		       8d 0f 00 	      sta.w	PF2	; 58 - for the health background and set it
     99  f427
    100  f427		       a5 88		      lda	ScoreColor	; 61 - get the color for the background
    101  f429		       85 09		      sta	COLUBK	; 64 - and set it at cycle 64
    102  f42b
    103  f42b		       ca		      dex		; 66
    104  f42c		       d0 d2		      bne	.HealthMiddle	; 68
    105  f42e
    106  f42e		       a6 98		      ldx	Temp	; 71
    107  f430
    108  f430		       88		      dey		; 73
    109  f431		       10 cf		      bpl	.Loop	; 76 / 00
    110  f433
    111  f433
    112  f433
    113  f433
    114  f433
    115  f433
    116  f433
    117  f433
    118  f433
    119  f433					      SUBROUTINE
    120  f433
    121  f433
    122  f433		       a9 00		      lda	#0
    123  f435		       85 0d		      sta	PF0
    124  f437		       85 0e		      sta	PF1
    125  f439
    126  f439		       a0 07		      ldy	#7
    127  f43b				   .HealthBottom		; draw bottom of health
    128  f43b		       a2 03		      ldx	#3
    129  f43d				   .Loop
    130  f43d		       b1 91		      lda	(HthGfxLPtr),y
    131  f43f		       85 1b		      sta	GRP0
    132  f441		       b1 93		      lda	(HthGfxRPtr),y
    133  f443		       85 1c		      sta	GRP1
    134  f445		       a9 00		      lda	#$00
    135  f447		       85 0f		      sta	PF2
    136  f449
      0  f449					      SLEEP	14
      1  f449				   .CYCLES    SET	14
      2  f449
      3  f449				  -	      IF	.CYCLES < 2
      4  f449				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f449				  -	      ERR
      6  f449					      ENDIF
      7  f449
      8  f449				  -	      IF	.CYCLES & 1
      9  f449				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f449				  -	      nop	0
     11  f449				  -	      ELSE
     12  f449				  -	      bit	VSYNC
     13  f449				  -	      ENDIF
     14  f449				  -.CYCLES    SET	.CYCLES - 3
     15  f449					      ENDIF
     16  f449
     17  f449					      REPEAT	.CYCLES / 2
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     17  f44b					      REPEND
     18  f44c		       ea		      nop
     17  f44c					      REPEND
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     19  f450					      REPEND
    138  f450
    139  f450		       b9 fc f5 	      lda	HealthBgGfx-4,y
    140  f453		       85 0f		      sta	PF2
    141  f455		       85 02		      sta	WSYNC
    142  f457
    143  f457		       ca		      dex
    144  f458		       d0 e3		      bne	.Loop
    145  f45a
    146  f45a		       88		      dey
    147  f45b		       c0 03		      cpy	#3
    148  f45d		       d0 dc		      bne	.HealthBottom
    149  f45f
    150  f45f
    151  f45f					      SUBROUTINE
    152  f45f
    153  f45f
    154  f45f		       a9 00		      lda	#$00
    155  f461		       85 1b		      sta	GRP0
    156  f463		       85 1c		      sta	GRP1
    157  f465		       85 0b		      sta	REFP0
    158  f467		       85 0c		      sta	REFP1
    159  f469		       85 0f		      sta	PF2
    160  f46b
    161  f46b		       85 02		      sta	WSYNC
------- FILE code/Kernel.asm
     13  f46d
     14  f46d		       a9 02		      lda	#2
     15  f46f		       85 01		      sta	VBLANK	; disable display
     16  f471
     17  f471		       4c 0b f0 	      jmp	Overscan
------- FILE main.asm
     68  f474
     69  f474				   Z_EndOfCode		; label to show how much ROM is used for the code
     70  f474
     71  f474
     72  f474							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     73  f474							; Data Tables
     74  f474							;
     75  f474							; Include data tables
     76  f474							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     77  f474
     78  f474							; Include graphics data tables
------- FILE data/Graphics.asm LEVEL 2 PASS 2
      0  f474					      include	data/Graphics.asm
      1  f474							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      2  f474							; Graphics Tables
      3  f474							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      4  f474
      5  f500		       00 00 00 00*	      ALIGN	$100	; align to page
      6  f500
      7  f500							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      8  f500							; Digit graphics for the scoreboard
      9  f500							;
     10  f500							; This data is right-side up, NOT upside-down. Since the program reads the data
     11  f500							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
     12  f500							; to normal when it is pulled from the stack.
     13  f500							;
     14  f500							; Table takes up $50 (80) bytes of ROM
     15  f500							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     16  f500
     17  f500				   ScoreGfx
     18  f500
     19  f500		       1c		      .byte.b	%00011100	; digit 0
     20  f501		       26		      .byte.b	%00100110
     21  f502		       63		      .byte.b	%01100011
     22  f503		       63		      .byte.b	%01100011
     23  f504		       63		      .byte.b	%01100011
     24  f505		       32		      .byte.b	%00110010
     25  f506		       1c		      .byte.b	%00011100
     26  f507		       00		      .byte.b	%00000000
     27  f508
     28  f508		       18		      .byte.b	%00011000	; digit 1
     29  f509		       38		      .byte.b	%00111000
     30  f50a		       18		      .byte.b	%00011000
     31  f50b		       18		      .byte.b	%00011000
     32  f50c		       18		      .byte.b	%00011000
     33  f50d		       18		      .byte.b	%00011000
     34  f50e		       7e		      .byte.b	%01111110
     35  f50f		       00		      .byte.b	%00000000
     36  f510
     37  f510		       3e		      .byte.b	%00111110	; digit 2
     38  f511		       63		      .byte.b	%01100011
     39  f512		       07		      .byte.b	%00000111
     40  f513		       1e		      .byte.b	%00011110
     41  f514		       3c		      .byte.b	%00111100
     42  f515		       70		      .byte.b	%01110000
     43  f516		       7f		      .byte.b	%01111111
     44  f517		       00		      .byte.b	%00000000
     45  f518
     46  f518		       7f		      .byte.b	%01111111	; digit 3
     47  f519		       06		      .byte.b	%00000110
     48  f51a		       0c		      .byte.b	%00001100
     49  f51b		       1e		      .byte.b	%00011110
     50  f51c		       03		      .byte.b	%00000011
     51  f51d		       63		      .byte.b	%01100011
     52  f51e		       3e		      .byte.b	%00111110
     53  f51f		       00		      .byte.b	%00000000
     54  f520
     55  f520		       0e		      .byte.b	%00001110	; digit 4
     56  f521		       1e		      .byte.b	%00011110
     57  f522		       36		      .byte.b	%00110110
     58  f523		       66		      .byte.b	%01100110
     59  f524		       7f		      .byte.b	%01111111
     60  f525		       06		      .byte.b	%00000110
     61  f526		       06		      .byte.b	%00000110
     62  f527		       00		      .byte.b	%00000000
     63  f528
     64  f528		       7e		      .byte.b	%01111110	; digit 5
     65  f529		       60		      .byte.b	%01100000
     66  f52a		       7e		      .byte.b	%01111110
     67  f52b		       03		      .byte.b	%00000011
     68  f52c		       03		      .byte.b	%00000011
     69  f52d		       63		      .byte.b	%01100011
     70  f52e		       3e		      .byte.b	%00111110
     71  f52f		       00		      .byte.b	%00000000
     72  f530
     73  f530		       1e		      .byte.b	%00011110	; digit 6
     74  f531		       30		      .byte.b	%00110000
     75  f532		       60		      .byte.b	%01100000
     76  f533		       7e		      .byte.b	%01111110
     77  f534		       63		      .byte.b	%01100011
     78  f535		       63		      .byte.b	%01100011
     79  f536		       3e		      .byte.b	%00111110
     80  f537		       00		      .byte.b	%00000000
     81  f538
     82  f538		       7f		      .byte.b	%01111111	; digit 7
     83  f539		       03		      .byte.b	%00000011
     84  f53a		       06		      .byte.b	%00000110
     85  f53b		       0c		      .byte.b	%00001100
     86  f53c		       18		      .byte.b	%00011000
     87  f53d		       18		      .byte.b	%00011000
     88  f53e		       18		      .byte.b	%00011000
     89  f53f		       00		      .byte.b	%00000000
     90  f540
     91  f540		       3c		      .byte.b	%00111100	; digit 8
     92  f541		       62		      .byte.b	%01100010
     93  f542		       72		      .byte.b	%01110010
     94  f543		       3c		      .byte.b	%00111100
     95  f544		       43		      .byte.b	%01000011
     96  f545		       43		      .byte.b	%01000011
     97  f546		       3e		      .byte.b	%00111110
     98  f547		       00		      .byte.b	%00000000
     99  f548
    100  f548		       3e		      .byte.b	%00111110	; digit 9
    101  f549		       63		      .byte.b	%01100011
    102  f54a		       63		      .byte.b	%01100011
    103  f54b		       3f		      .byte.b	%00111111
    104  f54c		       03		      .byte.b	%00000011
    105  f54d		       06		      .byte.b	%00000110
    106  f54e		       3c		      .byte.b	%00111100
    107  f54f		       00		      .byte.b	%00000000
    108  f550
    109  f550
    110  f550
    111  f550							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    112  f550							; NUSIZx and ENAMx data for level counter graphics
    113  f550							;
    114  f550							; This table enables or disables each missile and adjusts the left missile's
    115  f550							; size in the scoreboard kernel line-by-line to draw the level counter's
    116  f550							; left digit. (The right digit is drawn with the ball.)
    117  f550							; Bit-1 is used to enable or disable the left missile,
    118  f550							; and bit-0 is used to enable or disable the right missile.
    119  f550							; The leftmost 6 bits are shifted right twice to get a value for NUSIZx.
    120  f550							; Therefore, bits 6-7 are used to control the size of the left missile,
    121  f550							; bit-5 is not used, and bits 4-2 are always "011" to keep the player copies
    122  f550							; correct for the score display.
    123  f550							;
    124  f550							; This data is right-side up, NOT upside-down. Since the program reads the data
    125  f550							; in bottom-to-top order and then pushes it to the stack, it gets flipped back
    126  f550							; to normal when it is pulled from the stack.
    127  f550							;
    128  f550							; Table takes up $50 (80) bytes of ROM
    129  f550							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    130  f550
    131  f550				   LevelGfx
    132  f550
    133  f550							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    134  f550							; ^^^^^^^^^
    135  f550		       8f		      .byte.b	%10001111	; digit 0
    136  f551		       4f		      .byte.b	%01001111
    137  f552		       4f		      .byte.b	%01001111
    138  f553		       4f		      .byte.b	%01001111
    139  f554		       4f		      .byte.b	%01001111
    140  f555		       4f		      .byte.b	%01001111
    141  f556		       8f		      .byte.b	%10001111
    142  f557		       00		      .byte.b	%00000000
    143  f558
    144  f558							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    145  f558							; ^^^^^^^^^
    146  f558		       8d		      .byte.b	%10001101	; digit 1
    147  f559		       4d		      .byte.b	%01001101
    148  f55a		       4d		      .byte.b	%01001101
    149  f55b		       8d		      .byte.b	%10001101
    150  f55c		       4d		      .byte.b	%01001101
    151  f55d		       4d		      .byte.b	%01001101
    152  f55e		       8d		      .byte.b	%10001101
    153  f55f		       00		      .byte.b	%00000000
    154  f560
    155  f560							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    156  f560							; ^^^^^^^^^
    157  f560		       8f		      .byte.b	%10001111	; digit 2
    158  f561		       4d		      .byte.b	%01001101
    159  f562		       4d		      .byte.b	%01001101
    160  f563		       8f		      .byte.b	%10001111
    161  f564		       4e		      .byte.b	%01001110
    162  f565		       4e		      .byte.b	%01001110
    163  f566		       8f		      .byte.b	%10001111
    164  f567		       00		      .byte.b	%00000000
    165  f568
    166  f568							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    167  f568							; ^^^^^^^^^
    168  f568		       8f		      .byte.b	%10001111	; digit 3
    169  f569		       4d		      .byte.b	%01001101
    170  f56a		       4d		      .byte.b	%01001101
    171  f56b		       8f		      .byte.b	%10001111
    172  f56c		       4d		      .byte.b	%01001101
    173  f56d		       4d		      .byte.b	%01001101
    174  f56e		       8f		      .byte.b	%10001111
    175  f56f		       00		      .byte.b	%00000000
    176  f570
    177  f570							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    178  f570							; ^^^^^^^^^
    179  f570		       4f		      .byte.b	%01001111	; digit 4
    180  f571		       4f		      .byte.b	%01001111
    181  f572		       4f		      .byte.b	%01001111
    182  f573		       8f		      .byte.b	%10001111
    183  f574		       4d		      .byte.b	%01001101
    184  f575		       4d		      .byte.b	%01001101
    185  f576		       4d		      .byte.b	%01001101
    186  f577		       00		      .byte.b	%00000000
    187  f578
    188  f578							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    189  f578							; ^^^^^^^^^
    190  f578		       8f		      .byte.b	%10001111	; digit 5
    191  f579		       4e		      .byte.b	%01001110
    192  f57a		       4e		      .byte.b	%01001110
    193  f57b		       8f		      .byte.b	%10001111
    194  f57c		       4d		      .byte.b	%01001101
    195  f57d		       4d		      .byte.b	%01001101
    196  f57e		       8f		      .byte.b	%10001111
    197  f57f		       00		      .byte.b	%00000000
    198  f580
    199  f580							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    200  f580							; ^^^^^^^^^
    201  f580		       8f		      .byte.b	%10001111	; digit 6
    202  f581		       4e		      .byte.b	%01001110
    203  f582		       4e		      .byte.b	%01001110
    204  f583		       8f		      .byte.b	%10001111
    205  f584		       4f		      .byte.b	%01001111
    206  f585		       4f		      .byte.b	%01001111
    207  f586		       8f		      .byte.b	%10001111
    208  f587		       00		      .byte.b	%00000000
    209  f588
    210  f588							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    211  f588							; ^^^^^^^^^
    212  f588		       8f		      .byte.b	%10001111	; digit 7
    213  f589		       4d		      .byte.b	%01001101
    214  f58a		       4d		      .byte.b	%01001101
    215  f58b		       8d		      .byte.b	%10001101
    216  f58c		       4d		      .byte.b	%01001101
    217  f58d		       4d		      .byte.b	%01001101
    218  f58e		       8d		      .byte.b	%10001101
    219  f58f		       00		      .byte.b	%00000000
    220  f590
    221  f590							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    222  f590							; ^^^^^^^^^
    223  f590		       8f		      .byte.b	%10001111	; digit 8
    224  f591		       4f		      .byte.b	%01001111
    225  f592		       4f		      .byte.b	%01001111
    226  f593		       8f		      .byte.b	%10001111
    227  f594		       4f		      .byte.b	%01001111
    228  f595		       4f		      .byte.b	%01001111
    229  f596		       8f		      .byte.b	%10001111
    230  f597		       00		      .byte.b	%00000000
    231  f598
    232  f598							; %nnnnnnEe	n=NUSIZ0 E=ENAM0 e=ENAM1
    233  f598							; ^^^^^^^^^
    234  f598		       8f		      .byte.b	%10001111	; digit 9
    235  f599		       4f		      .byte.b	%01001111
    236  f59a		       4f		      .byte.b	%01001111
    237  f59b		       8f		      .byte.b	%10001111
    238  f59c		       4d		      .byte.b	%01001101
    239  f59d		       4d		      .byte.b	%01001101
    240  f59e		       8f		      .byte.b	%10001111
    241  f59f		       00		      .byte.b	%00000000
    242  f5a0
    243  f5a0
    244  f5a0
    245  f5a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    246  f5a0							; Throbbing Line Graphics
    247  f5a0							;
    248  f5a0							; Graphics tables for the throbbing lines
    249  f5a0							;
    250  f5a0							; Table takes up $18 (24) bytes of ROM
    251  f5a0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    252  f5a0
    253  f5a0				   LineThrobGfx
    254  f5a0
    255  f5a0		       90		      .byte.b	COL_LINES + LUM_0	; frame 0
    256  f5a1		       92		      .byte.b	COL_LINES + LUM_2
    257  f5a2		       94		      .byte.b	COL_LINES + LUM_4
    258  f5a3
    259  f5a3		       90		      .byte.b	COL_LINES + LUM_0	; frame 1
    260  f5a4		       94		      .byte.b	COL_LINES + LUM_4
    261  f5a5		       96		      .byte.b	COL_LINES + LUM_6
    262  f5a6
    263  f5a6		       90		      .byte.b	COL_LINES + LUM_0	; frame 2
    264  f5a7		       96		      .byte.b	COL_LINES + LUM_6
    265  f5a8		       98		      .byte.b	COL_LINES + LUM_8
    266  f5a9
    267  f5a9		       92		      .byte.b	COL_LINES + LUM_2	; frame 3
    268  f5aa		       98		      .byte.b	COL_LINES + LUM_8
    269  f5ab		       9c		      .byte.b	COL_LINES + LUM_C
    270  f5ac
    271  f5ac		       94		      .byte.b	COL_LINES + LUM_4	; frame 4
    272  f5ad		       9a		      .byte.b	COL_LINES + LUM_A
    273  f5ae		       9e		      .byte.b	COL_LINES + LUM_E
    274  f5af
    275  f5af		       92		      .byte.b	COL_LINES + LUM_2	; frame 5
    276  f5b0		       98		      .byte.b	COL_LINES + LUM_8
    277  f5b1		       9c		      .byte.b	COL_LINES + LUM_C
    278  f5b2
    279  f5b2		       90		      .byte.b	COL_LINES + LUM_0	; frame 6
    280  f5b3		       96		      .byte.b	COL_LINES + LUM_6
    281  f5b4		       9a		      .byte.b	COL_LINES + LUM_A
    282  f5b5
    283  f5b5		       90		      .byte.b	COL_LINES + LUM_0	; frame 7
    284  f5b6		       94		      .byte.b	COL_LINES + LUM_4
    285  f5b7		       96		      .byte.b	COL_LINES + LUM_6
    286  f5b8
    287  f5b8
    288  f5b8
    289  f5b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    290  f5b8							; Health Graphics
    291  f5b8							;
    292  f5b8							; All of these tables are upside-down, and they are supposed to be used with the
    293  f5b8							; left player not mirrored, and the right player mirrored. This makes it easier
    294  f5b8							; to draw the top 5 lines since they are always mirrored. Because of this, all
    295  f5b8							; the graphics for the lower right are flipped.
    296  f5b8							; The graphics tables for the lower 8 lines (HealthLeftGfx and HealthRightGfx)
    297  f5b8							; are set up in a confusing way. They are upside-down, but they are split
    298  f5b8							; into 2 sections. The first 4 bytes correspond to the UPPER 4 lines
    299  f5b8							; of graphics (upside-down), and the last 4 bytes correspond to the
    300  f5b8							; LOWER 4 lines of graphics (also upside-down).
    301  f5b8							; The last table (HealthBgGfx) is for the grey background of the
    302  f5b8							; health graphics drawn with the playfield.
    303  f5b8							;
    304  f5b8							; Table takes up $45 (69) bytes of ROM
    305  f5b8							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    306  f5b8
    307  f5b8				   HealthTopGfx
    308  f5b8
    309  f5b8		       40		      .byte.b	%01000000	; graphics for left top of health
    310  f5b9		       43		      .byte.b	%01000011
    311  f5ba		       44		      .byte.b	%01000100
    312  f5bb		       48		      .byte.b	%01001000
    313  f5bc		       30		      .byte.b	%00110000
    314  f5bd
    315  f5bd				   HealthLeftGfx
    316  f5bd
    317  f5bd		       80		      .byte.b	%10000000	; left health full (upper)
    318  f5be		       8c		      .byte.b	%10001100
    319  f5bf		       84		      .byte.b	%10000100
    320  f5c0		       80		      .byte.b	%10000000
    321  f5c1		       1f		      .byte.b	%00011111	; left health full (lower)
    322  f5c2		       20		      .byte.b	%00100000
    323  f5c3		       47		      .byte.b	%01000111
    324  f5c4		       84		      .byte.b	%10000100
    325  f5c5
    326  f5c5		       80		      .byte.b	%10000000	; left health medium (upper)
    327  f5c6		       8c		      .byte.b	%10001100
    328  f5c7		       84		      .byte.b	%10000100
    329  f5c8		       80		      .byte.b	%10000000
    330  f5c9		       1f		      .byte.b	%00011111	; left health medium (lower)
    331  f5ca		       20		      .byte.b	%00100000
    332  f5cb		       47		      .byte.b	%01000111
    333  f5cc		       80		      .byte.b	%10000000
    334  f5cd
    335  f5cd		       80		      .byte.b	%10000000	; left health low (upper)
    336  f5ce		       8c		      .byte.b	%10001100
    337  f5cf		       84		      .byte.b	%10000100
    338  f5d0		       80		      .byte.b	%10000000
    339  f5d1		       1f		      .byte.b	%00011111	; left health low (lower)
    340  f5d2		       20		      .byte.b	%00100000
    341  f5d3		       44		      .byte.b	%01000100
    342  f5d4		       87		      .byte.b	%10000111
    343  f5d5
    344  f5d5		       80		      .byte.b	%10000000	; left health empty (upper)
    345  f5d6		       9c		      .byte.b	%10011100
    346  f5d7		       80		      .byte.b	%10000000
    347  f5d8		       80		      .byte.b	%10000000
    348  f5d9		       1f		      .byte.b	%00011111	; left health empty (lower)
    349  f5da		       20		      .byte.b	%00100000
    350  f5db		       46		      .byte.b	%01000110
    351  f5dc		       81		      .byte.b	%10000001
    352  f5dd
    353  f5dd				   HealthRightGfx
    354  f5dd
    355  f5dd		       80		      .byte.b	%10000000	; right health full (upper)
    356  f5de		       9a		      .byte.b	%10011010
    357  f5df		       90		      .byte.b	%10010000
    358  f5e0		       80		      .byte.b	%10000000
    359  f5e1		       1f		      .byte.b	%00011111	; right health full (lower)
    360  f5e2		       20		      .byte.b	%00100000
    361  f5e3		       4f		      .byte.b	%01001111
    362  f5e4		       89		      .byte.b	%10001001
    363  f5e5
    364  f5e5		       80		      .byte.b	%10000000	; right health medium (upper)
    365  f5e6		       9a		      .byte.b	%10011010
    366  f5e7		       90		      .byte.b	%10010000
    367  f5e8		       80		      .byte.b	%10000000
    368  f5e9		       1f		      .byte.b	%00011111	; right health medium (lower)
    369  f5ea		       20		      .byte.b	%00100000
    370  f5eb		       4f		      .byte.b	%01001111
    371  f5ec		       80		      .byte.b	%10000000
    372  f5ed
    373  f5ed		       80		      .byte.b	%10000000	; right health low (upper)
    374  f5ee		       9a		      .byte.b	%10011010
    375  f5ef		       88		      .byte.b	%10001000
    376  f5f0		       80		      .byte.b	%10000000
    377  f5f1		       1f		      .byte.b	%00011111	; right health low (lower)
    378  f5f2		       20		      .byte.b	%00100000
    379  f5f3		       48		      .byte.b	%01001000
    380  f5f4		       8f		      .byte.b	%10001111
    381  f5f5
    382  f5f5		       80		      .byte.b	%10000000	; right health empty (upper)
    383  f5f6		       ba		      .byte.b	%10111010
    384  f5f7		       80		      .byte.b	%10000000
    385  f5f8		       80		      .byte.b	%10000000
    386  f5f9		       1f		      .byte.b	%00011111	; right health empty (lower)
    387  f5fa		       20		      .byte.b	%00100000
    388  f5fb		       4c		      .byte.b	%01001100
    389  f5fc		       83		      .byte.b	%10000011
    390  f5fd
    391  f5fd							; 3 bytes left in this page
    392  f5fd
    393  f600		       00 00 00 	      ALIGN	$100	; align to page
    394  f600
    395  f600				   HealthBgGfx
    396  f600
    397  f600		       00		      .byte.b	%00000000
    398  f601		       3e		      .byte.b	%00111110
    399  f602		       7f		      .byte.b	%01111111
    400  f603		       7f		      .byte.b	%01111111
    401  f604		       7f		      .byte.b	%01111111
    402  f605		       7f		      .byte.b	%01111111
    403  f606		       7f		      .byte.b	%01111111
    404  f607		       7f		      .byte.b	%01111111
    405  f608		       7f		      .byte.b	%01111111
    406  f609		       7f		      .byte.b	%01111111
    407  f60a		       63		      .byte.b	%01100011
    408  f60b		       63		      .byte.b	%01100011
    409  f60c		       00		      .byte.b	%00000000
    410  f60d
    411  f60d
    412  f60d
    413  f60d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    414  f60d							; Progress Bar Graphics
    415  f60d							;
    416  f60d							;
    417  f60d							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    418  f60d
    419  f60d				   PgBarGfx
    420  f60d
    421  f60d		       ff		      .byte.b	%11111111	; 1st PF1
    422  f60e		       7f		      .byte.b	%01111111	; 2nd PF1 (then 1 shift left)
    423  f60f		       3f		      .byte.b	%00111111
    424  f610		       1f		      .byte.b	%00011111
    425  f611		       0f		      .byte.b	%00001111
    426  f612		       07		      .byte.b	%00000111
    427  f613		       03		      .byte.b	%00000011
    428  f614		       01		      .byte.b	%00000001
    429  f615		       00		      .byte.b	%00000000
    430  f616
    431  f616				   PgBarGfxR
    432  f616
    433  f616		       ff		      .byte.b	%11111111	; PF2
    434  f617		       fe		      .byte.b	%11111110
    435  f618		       fc		      .byte.b	%11111100
    436  f619		       f8		      .byte.b	%11111000
    437  f61a		       f0		      .byte.b	%11110000	; 2nd PF0
    438  f61b		       e0		      .byte.b	%11100000	; 1st PF0
    439  f61c		       c0		      .byte.b	%11000000
    440  f61d		       80		      .byte.b	%10000000
    441  f61e
    442  f61e
    443  f61e
    444  f61e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    445  f61e							; Cat Rainbow Graphics
    446  f61e							;
    447  f61e							;
    448  f61e							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    449  f61e
    450  f61e				   RainbowGfx
    451  f61e
    452  f61e					      REPEAT	18
    453  f61e		       00		      hex	00
    452  f61e					      REPEND
    453  f61f		       00		      hex	00
    452  f61f					      REPEND
    453  f620		       00		      hex	00
    452  f620					      REPEND
    453  f621		       00		      hex	00
    452  f621					      REPEND
    453  f622		       00		      hex	00
    452  f622					      REPEND
    453  f623		       00		      hex	00
    452  f623					      REPEND
    453  f624		       00		      hex	00
    452  f624					      REPEND
    453  f625		       00		      hex	00
    452  f625					      REPEND
    453  f626		       00		      hex	00
    452  f626					      REPEND
    453  f627		       00		      hex	00
    452  f627					      REPEND
    453  f628		       00		      hex	00
    452  f628					      REPEND
    453  f629		       00		      hex	00
    452  f629					      REPEND
    453  f62a		       00		      hex	00
    452  f62a					      REPEND
    453  f62b		       00		      hex	00
    452  f62b					      REPEND
    453  f62c		       00		      hex	00
    452  f62c					      REPEND
    453  f62d		       00		      hex	00
    452  f62d					      REPEND
    453  f62e		       00		      hex	00
    452  f62e					      REPEND
    453  f62f		       00		      hex	00
    454  f630					      REPEND
    455  f630
    456  f630		       00		      .byte.b	%00000000	; "straight ahead" rainbow graphics data frame 1
    457  f631		       20		      .byte.b	%00100000
    458  f632		       00		      .byte.b	%00000000
    459  f633		       20		      .byte.b	%00100000
    460  f634		       00		      .byte.b	%00000000
    461  f635		       20		      .byte.b	%00100000
    462  f636		       00		      .byte.b	%00000000
    463  f637		       20		      .byte.b	%00100000
    464  f638		       00		      .byte.b	%00000000
    465  f639		       20		      .byte.b	%00100000
    466  f63a		       00		      .byte.b	%00000000
    467  f63b		       20		      .byte.b	%00100000
    468  f63c		       00		      .byte.b	%00000000
    469  f63d		       20		      .byte.b	%00100000
    470  f63e
    471  f63e					      REPEAT	18
    472  f63e		       00		      hex	00
    471  f63e					      REPEND
    472  f63f		       00		      hex	00
    471  f63f					      REPEND
    472  f640		       00		      hex	00
    471  f640					      REPEND
    472  f641		       00		      hex	00
    471  f641					      REPEND
    472  f642		       00		      hex	00
    471  f642					      REPEND
    472  f643		       00		      hex	00
    471  f643					      REPEND
    472  f644		       00		      hex	00
    471  f644					      REPEND
    472  f645		       00		      hex	00
    471  f645					      REPEND
    472  f646		       00		      hex	00
    471  f646					      REPEND
    472  f647		       00		      hex	00
    471  f647					      REPEND
    472  f648		       00		      hex	00
    471  f648					      REPEND
    472  f649		       00		      hex	00
    471  f649					      REPEND
    472  f64a		       00		      hex	00
    471  f64a					      REPEND
    472  f64b		       00		      hex	00
    471  f64b					      REPEND
    472  f64c		       00		      hex	00
    471  f64c					      REPEND
    472  f64d		       00		      hex	00
    471  f64d					      REPEND
    472  f64e		       00		      hex	00
    471  f64e					      REPEND
    472  f64f		       00		      hex	00
    473  f650					      REPEND
    474  f650
    475  f650		       20		      .byte.b	%00100000	; "straight ahead" rainbow graphics data frame 2
    476  f651		       00		      .byte.b	%00000000
    477  f652		       20		      .byte.b	%00100000
    478  f653		       00		      .byte.b	%00000000
    479  f654		       20		      .byte.b	%00100000
    480  f655		       00		      .byte.b	%00000000
    481  f656		       20		      .byte.b	%00100000
    482  f657		       00		      .byte.b	%00000000
    483  f658		       20		      .byte.b	%00100000
    484  f659		       00		      .byte.b	%00000000
    485  f65a		       20		      .byte.b	%00100000
    486  f65b		       00		      .byte.b	%00000000
    487  f65c		       20		      .byte.b	%00100000
    488  f65d		       00		      .byte.b	%00000000
    489  f65e
    490  f65e					      REPEAT	18
    491  f65e		       00		      hex	00
    490  f65e					      REPEND
    491  f65f		       00		      hex	00
    490  f65f					      REPEND
    491  f660		       00		      hex	00
    490  f660					      REPEND
    491  f661		       00		      hex	00
    490  f661					      REPEND
    491  f662		       00		      hex	00
    490  f662					      REPEND
    491  f663		       00		      hex	00
    490  f663					      REPEND
    491  f664		       00		      hex	00
    490  f664					      REPEND
    491  f665		       00		      hex	00
    490  f665					      REPEND
    491  f666		       00		      hex	00
    490  f666					      REPEND
    491  f667		       00		      hex	00
    490  f667					      REPEND
    491  f668		       00		      hex	00
    490  f668					      REPEND
    491  f669		       00		      hex	00
    490  f669					      REPEND
    491  f66a		       00		      hex	00
    490  f66a					      REPEND
    491  f66b		       00		      hex	00
    490  f66b					      REPEND
    491  f66c		       00		      hex	00
    490  f66c					      REPEND
    491  f66d		       00		      hex	00
    490  f66d					      REPEND
    491  f66e		       00		      hex	00
    490  f66e					      REPEND
    491  f66f		       00		      hex	00
    492  f670					      REPEND
    493  f670
    494  f670		       30		      .byte.b	%00110000	; "moving up" rainbow graphics data
    495  f671		       10		      .byte.b	%00010000
    496  f672		       30		      .byte.b	%00110000
    497  f673		       10		      .byte.b	%00010000
    498  f674		       30		      .byte.b	%00110000
    499  f675		       10		      .byte.b	%00010000
    500  f676		       30		      .byte.b	%00110000
    501  f677		       10		      .byte.b	%00010000
    502  f678		       30		      .byte.b	%00110000
    503  f679		       10		      .byte.b	%00010000
    504  f67a		       30		      .byte.b	%00110000
    505  f67b		       10		      .byte.b	%00010000
    506  f67c		       30		      .byte.b	%00110000
    507  f67d		       10		      .byte.b	%00010000
    508  f67e
    509  f67e					      REPEAT	18
    510  f67e		       00		      hex	00
    509  f67e					      REPEND
    510  f67f		       00		      hex	00
    509  f67f					      REPEND
    510  f680		       00		      hex	00
    509  f680					      REPEND
    510  f681		       00		      hex	00
    509  f681					      REPEND
    510  f682		       00		      hex	00
    509  f682					      REPEND
    510  f683		       00		      hex	00
    509  f683					      REPEND
    510  f684		       00		      hex	00
    509  f684					      REPEND
    510  f685		       00		      hex	00
    509  f685					      REPEND
    510  f686		       00		      hex	00
    509  f686					      REPEND
    510  f687		       00		      hex	00
    509  f687					      REPEND
    510  f688		       00		      hex	00
    509  f688					      REPEND
    510  f689		       00		      hex	00
    509  f689					      REPEND
    510  f68a		       00		      hex	00
    509  f68a					      REPEND
    510  f68b		       00		      hex	00
    509  f68b					      REPEND
    510  f68c		       00		      hex	00
    509  f68c					      REPEND
    510  f68d		       00		      hex	00
    509  f68d					      REPEND
    510  f68e		       00		      hex	00
    509  f68e					      REPEND
    510  f68f		       00		      hex	00
    511  f690					      REPEND
    512  f690
    513  f690		       10		      .byte.b	%00010000	; "moving down" rainbow graphics data
    514  f691		       30		      .byte.b	%00110000
    515  f692		       10		      .byte.b	%00010000
    516  f693		       30		      .byte.b	%00110000
    517  f694		       10		      .byte.b	%00010000
    518  f695		       30		      .byte.b	%00110000
    519  f696		       10		      .byte.b	%00010000
    520  f697		       30		      .byte.b	%00110000
    521  f698		       10		      .byte.b	%00010000
    522  f699		       30		      .byte.b	%00110000
    523  f69a		       10		      .byte.b	%00010000
    524  f69b		       30		      .byte.b	%00110000
    525  f69c		       10		      .byte.b	%00010000
    526  f69d		       30		      .byte.b	%00110000
    527  f69e
    528  f69e					      REPEAT	18
    529  f69e		       00		      hex	00
    528  f69e					      REPEND
    529  f69f		       00		      hex	00
    528  f69f					      REPEND
    529  f6a0		       00		      hex	00
    528  f6a0					      REPEND
    529  f6a1		       00		      hex	00
    528  f6a1					      REPEND
    529  f6a2		       00		      hex	00
    528  f6a2					      REPEND
    529  f6a3		       00		      hex	00
    528  f6a3					      REPEND
    529  f6a4		       00		      hex	00
    528  f6a4					      REPEND
    529  f6a5		       00		      hex	00
    528  f6a5					      REPEND
    529  f6a6		       00		      hex	00
    528  f6a6					      REPEND
    529  f6a7		       00		      hex	00
    528  f6a7					      REPEND
    529  f6a8		       00		      hex	00
    528  f6a8					      REPEND
    529  f6a9		       00		      hex	00
    528  f6a9					      REPEND
    529  f6aa		       00		      hex	00
    528  f6aa					      REPEND
    529  f6ab		       00		      hex	00
    528  f6ab					      REPEND
    529  f6ac		       00		      hex	00
    528  f6ac					      REPEND
    529  f6ad		       00		      hex	00
    528  f6ad					      REPEND
    529  f6ae		       00		      hex	00
    528  f6ae					      REPEND
    529  f6af		       00		      hex	00
    530  f6b0					      REPEND
------- FILE main.asm
     80  f6b0
     81  f6b0
     82  f6b0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     83  f6b0							; End of ROM
     84  f6b0							;
     85  f6b0							; Define the end of the cartridge
     86  f6b0							; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     87  f6b0
     88  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
     89  fffa		       00 f0		      .WORD.w	SystemClear	; NMI
     90  fffc		       00 f0		      .WORD.w	SystemClear	; RESET
     91  fffe		       00 f0		      .WORD.w	SystemClear	; IRQ
